<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>줄리아 on 생새우초밥집</title><link>https://freshrimpsushi.github.io/ko/categories/%EC%A4%84%EB%A6%AC%EC%95%84/</link><description>Recent content in 줄리아 on 생새우초밥집</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Tue, 23 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://freshrimpsushi.github.io/ko/categories/%EC%A4%84%EB%A6%AC%EC%95%84/index.xml" rel="self" type="application/rss+xml"/><item><title>줄리아에서 JSON 파일 읽고 쓰는 법 (JSON.jl)</title><link>https://freshrimpsushi.github.io/ko/posts/3708/</link><pubDate>Tue, 23 Sep 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3708/</guid><description>개요 줄리아에서 json 파일을 다룰 수 있게 도와주는 패키지로는 JSON.jl, JSON3.jl, Serde.jl 등이 있다. 본 문서에서는 JSON.jl에 대해서 설명한다. JSON.jl은 순수 줄리아로 짜</description></item><item><title>줄리아에서 폴더 트리구조로 보는 법</title><link>https://freshrimpsushi.github.io/ko/posts/3704/</link><pubDate>Mon, 15 Sep 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3704/</guid><description>코드 폴더 트리 구조를 출력하는 함수가 기본적으로 제공되지는 않는다. FileTrees.jl 패키지에서 제공하는 FileTree(path) 함수를 사용하면 된다. 환경 OS: Windows11 Version: Julia 1.11.3, FileTrees v0.3.10</description></item><item><title>줄리아에서 파일 및 경로 조회하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/3703/</link><pubDate>Sat, 13 Sep 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3703/</guid><description>코드 폴더를 순회하며 하위 폴더와 파일 목록을 얻을 때 쓰는 함수는 walkdir(path)이다. 폴더 구조가 아래와 같다고 하자. A/ ├─ B/ │ ├─ BB/ │ │ └─ bbb.py</description></item><item><title>줄리아 문자열 관련 문법 및 함수 총 정리</title><link>https://freshrimpsushi.github.io/ko/posts/3691/</link><pubDate>Wed, 20 Aug 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3691/</guid><description>개요 줄리아에서 쓰이는 문자/문자열에 관한 문법 및 함수를 간략히 정리한다. 기준은 줄리아 버전 v1.11.5이다. 공식문서 Manual&amp;gt;Strings: https://docs.julialang.org/en/v1/manual/strings/ Base&amp;gt;Strings: https://docs.julialang.org/en/v1/base/strings/ 요약 정의 'x' &amp;quot;x&amp;quot; repr(foo) Char(decimal) Char(hex) 연산</description></item><item><title>줄리아 데이터프레임의 새로운 열을 첫번째 열에 추가하는 방법</title><link>https://freshrimpsushi.github.io/ko/posts/2654/</link><pubDate>Sun, 25 May 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2654/</guid><description>코드 새로운 열을 추가하는 것 자체는 별로 어렵지 않은데, 특정 위치에 추가하는 것이 까다로울 때가 있다. insertcols! julia&amp;gt; df = DataFrame(a = 1:3, b = 4:6) 3×2 DataFrame Row │ a b │ Int64 Int64 ─────</description></item><item><title>줄리아에서 특정 경로 아래의 파일 목록을 재귀적으로 가져오는 방법</title><link>https://freshrimpsushi.github.io/ko/posts/2652/</link><pubDate>Wed, 21 May 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2652/</guid><description>코드 walkdir julia&amp;gt; walkdir(&amp;#34;D:\\U\\B&amp;#34;) Channel{Tuple{String, Vector{String}, Vector{String}}}(0) (1 item available) julia&amp;gt; collect(walkdir(&amp;#34;D:\\U\\B&amp;#34;)) 2-element Vector{Tuple{String, Vector{String}, Vector{String}}}: (&amp;#34;D:\\U\\B&amp;#34;, [&amp;#34;b&amp;#34;], [&amp;#34;alpha.txt&amp;#34;, &amp;#34;beta.txt&amp;#34;]) (&amp;#34;D:\\U\\B\\b&amp;#34;, [], [&amp;#34;m.txt&amp;#34;]) walkdir은 빌트인 함수로써 주어진 경로 아래의 모든 파일을 탐색한다. 그 자체로는 파일들의 정보가 담</description></item><item><title>줄리아에서 배열의 배열을 연결시키는 트릭</title><link>https://freshrimpsushi.github.io/ko/posts/2650/</link><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2650/</guid><description>개요 줄리아에서는 append!와 같은 함수를 통해 배열의 배열을 연결시킬 수 있지만, 뱅 컨벤션 !이 붙은만큼 원래의 배열을 변형시키는 부작용이 있다. 이를 회피</description></item><item><title>줄리아가 실행되는 통합개발환경 확인하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2646/</link><pubDate>Fri, 09 May 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2646/</guid><description>가이드 vscode 등과 같이 IDE(통합개발환경)에서 코드를 실행시키는 경우 개발 단계를 기준으로 세팅을 다르게 하는 경우가 많다. 이를 체크하려면 ENV[&amp;quot;TERM_PROGRAM&amp;quot;] == &amp;quot;v</description></item><item><title>줄리아에서 데이터프레임 앞부분과 뒷부분 보는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2644/</link><pubDate>Mon, 05 May 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2644/</guid><description>개요 줄리아의 데이터프레임에는 head나 tail 함수가 없다. 타 언어에 비해서는 한 번 더 손이 가서 귀찮긴 하지만, first와 last 함수를 사용하면 된다. 왜 Data</description></item><item><title>줄리아에서 비공식 패키지 설치하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2642/</link><pubDate>Thu, 01 May 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2642/</guid><description>가이드 비공식 패키지의 경우 레지스터를 등록하는 등 복잡하게 설치해야 하는 것처럼 설명하기도 하는데, 실제로는 깃허브 주소만 가지고 설치할 수 있다1. 설치하고 싶</description></item><item><title>줄리아 데이터프레임에 같은 값으로 채워진 열 추가하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2640/</link><pubDate>Sun, 27 Apr 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2640/</guid><description>코드 근본적으로는 새로운 열 추가하는 방법과 같지만, 대입 연산 =에 브로드캐스트를 적용한 .=를 통해 별도의 칼럼을 만들지 않고 간단히 초기화가 가능하다. julia&amp;gt; df =</description></item><item><title>줄리아에서 l1 트렌드 필터링 사용하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2632/</link><pubDate>Fri, 11 Apr 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2632/</guid><description>개요 L1TrendFiltering.jl는 원래 매트랩으로 구현된 $\ell_{1}$ 트렌드 필터링 코드를 줄리아로 번역한 패키지다1. $\ell_{1}$ 은 주어진 시계열 데이터 $y = \left\{ y_{t}</description></item><item><title>줄리아의 순열차원 함수와 그 응용 permutedims</title><link>https://freshrimpsushi.github.io/ko/posts/834/</link><pubDate>Mon, 24 Mar 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/834/</guid><description>개요 줄리아의 내장 함수 permutedims는 어떻게 보면 전치행렬의 일반화로써, 다차원 배열의 차원을 다루는데 유용하다. 코드 텐서의 차원 전환 julia&amp;gt; A = reshape(Vector(1:8), (2,2,2))</description></item><item><title>외력이 있는 상미분방정식의 수치적 풀이 (줄리아 미분방정식 패키지 DifferentialEquations)</title><link>https://freshrimpsushi.github.io/ko/posts/1083/</link><pubDate>Sun, 23 Mar 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1083/</guid><description>설명 DifferentialEquations.jl는 미분방정식의 수치적 풀이를 위한 줄리아 패키지이다. 본 글에서는 DifferentialEqu</description></item><item><title>줄리아에서 엑셀 XLSX 파일 읽는 법</title><link>https://freshrimpsushi.github.io/ko/posts/242/</link><pubDate>Tue, 10 Dec 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/242/</guid><description>개요 줄리아에서 엑셀 통합 문서 확장자인 *.XLSX 파일을 읽는 방법에 대해 소개한다. CSV 파일을 읽는 것보다는 다소 까다롭지만 데이터 자체를 *.XLSX 파일로 얻을 수밖에 없고 그 파일</description></item><item><title>줄리아에서 운영체제 확인하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/233/</link><pubDate>Fri, 06 Dec 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/233/</guid><description>개요 줄리아는 과학계산에 특화된 언어인만큼 여러 서버로 프로그램을 배포하고 실행할 일이 잦아 여러 운영체제에 대응할 수 있게 코드를 작성할 필요가 있다. 코드 운영체</description></item><item><title>줄리아에서 그림의 가로축과 세로축 서로 바꾸는 법</title><link>https://freshrimpsushi.github.io/ko/posts/179/</link><pubDate>Mon, 02 Dec 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/179/</guid><description>개요 줄리아에서 그림의 가로축과 세로축을 바꾸는 방법에 대해 소개한다. 코드 plot 함수의 인수로 permute = (:y, :x)를 통해 축의 순서를 바꾸면 된다. bar(name, height) bar(name, height, permute = (:y, :x)) 전체</description></item><item><title>줄리아에서 축에 원주율 기호 사용하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/127/</link><pubDate>Wed, 20 Nov 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/127/</guid><description>개요 줄리아에서 틱에 직접 원주율 기호를 쓰는 방법에 대해 설명한다. 사실 꼭 원주율일 필요는 없고, 튜플로 틱의 위치와 표기를 전달하면 얼마든지 다른 형태로로 응용할</description></item><item><title>줄리아에서 텍스트(txt) 파일 수정하고 저장하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/3728/</link><pubDate>Sat, 02 Nov 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3728/</guid><description>write() write(path, string) 기본 함수인 write()는 입력된 문자열을 내용으로 갖는 txt 파일을 저장한다. julia&amp;gt; fm = &amp;#34;프로미스나인\n송하영\n박지원\n이채영\n이</description></item><item><title>줄리아에서 텍스트(txt) 파일 문자열로 읽는 법</title><link>https://freshrimpsushi.github.io/ko/posts/3727/</link><pubDate>Thu, 31 Oct 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3727/</guid><description>설명 텍스트 파일을 불러오는 방법은 여러가지가 있다. 간단한 방법으로는 함수 read(), readline(), readlines() 을 사용하는 것이다. 이 중 read()는 파일 전체를 읽어 문자열로 반환하고,</description></item><item><title>줄리아 칼라 스킴에서 0부터 1 사이의 값으로 색 얻는 법</title><link>https://freshrimpsushi.github.io/ko/posts/46/</link><pubDate>Thu, 03 Oct 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/46/</guid><description>개요 줄리아의 칼라 스킴에서 0부터 1 사이의 값으로 색을 얻으려면 get 함수를 사용한다1. 이 함수는 원래 Base에도 있지만 using ColorSchemes를 통해 오</description></item><item><title>줄리아 자연어 처리 패키지 TextAnaylsis.jl 소개</title><link>https://freshrimpsushi.github.io/ko/posts/24/</link><pubDate>Sun, 29 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/24/</guid><description>개요 줄리아의 자연어처리 패키지인 TextAnaylsis.jl에 대해 가볍게 소개한다1. 실전적인 자연어처리를 위해서는 어간 추출stemming을 위</description></item><item><title>줄리아에서 딕셔너리를 사용하여 여러 키워드 인수를 하나의 변수로 입력하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/1962/</link><pubDate>Thu, 26 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1962/</guid><description>설명 딕셔너리와 스플랫 오퍼레이터를 이용하면 여러 키워드 인수를 한 번에 함수에 전달할 수 있다. 이런 테크닉은 여러 그림에 같은 옵션을 줘야할 때 유용하다. 만약 모든</description></item><item><title>줄리아의 심볼릭 연산 패키지 Symbolics.jl 소개</title><link>https://freshrimpsushi.github.io/ko/posts/18/</link><pubDate>Wed, 25 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/18/</guid><description>개요 줄리아에서 심볼릭 대수 체계symbolic algebra system를 지원하는 패키지인 Symbolics.jl에 대해 소개한다1. 이 패키지는 특히 줄리아의</description></item><item><title>줄리아에서 이미지 상하반전, 좌우반전하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/7/</link><pubDate>Sat, 21 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/7/</guid><description>개요 줄리아에서 이미지를 상하반전하거나 좌우반전하는 방법을 소개한다. 상식적으로 Images.jl에 flip 같은 함수가 있을 것 같지만 없고1, Augment</description></item><item><title>줄리아의 파일 입출력(I/O) 총 정리</title><link>https://freshrimpsushi.github.io/ko/posts/3707/</link><pubDate>Sat, 21 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3707/</guid><description>개요 줄리아의 파일 입출력에 관한 패키지와 함수를 정리한다. 요약 txt: 읽기 read(&amp;quot;file_name.txt&amp;quot;, String) readline(&amp;quot;file_name.txt&amp;quot;) readlines(file_namem.txt&amp;quot;) 쓰기: write(&amp;quot;file_name.txt&amp;quot;, str) open(&amp;quot;file_name.txt&amp;quot;, &amp;quot;w&amp;quot;) do f; println(f, str); end CSV: CSV.jl 읽기 CSV.read(&amp;quot;file_name.csv&amp;quot;, DataFrame) CSV.File(&amp;quot;file_name.csv&amp;quot;) 쓰기: CSV.write(&amp;quot;file_name.csv&amp;quot;, df_data) JSON: JSON3.jl, JSON.jl 읽기 문자열: read(&amp;quot;file_name.json&amp;quot;, String)</description></item><item><title>줄리아에서 장치 이름 및 계정 이름 참조하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/902/</link><pubDate>Tue, 17 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/902/</guid><description>개요 줄리아는 고성능 컴퓨팅을 지향하는만큼 일반적인 수준의 계산량을 훌쩍 넘겨서 복수의 서버를 사용할 가능성이 높다. 이 때 제어, 데이터 전송이나 로그 작성을 위해</description></item><item><title>줄리아에서 클립보드 사용하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2628/</link><pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2628/</guid><description>개요 줄리아에서 클립보드를 사용하는 방법을 소개한다. 코드 clipboard는 두가지 메서드로 구현되어 있다. clipboard(x) 클립보드에 x를 복사한다. clipboard() 클립보드에서</description></item><item><title>줄리아의 NamedArrays.jl 패키지</title><link>https://freshrimpsushi.github.io/ko/posts/1968/</link><pubDate>Sat, 14 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1968/</guid><description>설명 줄리아의 NamedArrays.jl은 2차원 배열을 사용할 때 행과 열에 이름을 붙여서 사용할 수 있게 해주는 패키지이다. 물론 3차원 이상에서도 사용할 수</description></item><item><title>줄리아에서 배열의 타입 지정해서 정의하는 방법</title><link>https://freshrimpsushi.github.io/ko/posts/1969/</link><pubDate>Thu, 12 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1969/</guid><description>코드 대괄호 앞에 타입 이름을 적으면 된다. julia&amp;gt; [1, 2, 3] 3-element Vector{Int64}: 1 2 3 julia&amp;gt; Float64[1, 2, 3] 3-element Vector{Float64}: 1.0 2.0 3.0 julia&amp;gt; Complex{Float64}[1, 2, 3] 3-element Vector{ComplexF64}: 1.0 + 0.0im 2.0 + 0.0im 3.0 + 0.0im julia&amp;gt; Char[1, 2, 3] 3-element Vector{Char}: &amp;#39;\x01&amp;#39;: ASCII/Unicode U+0001 (category Cc: Other, control) &amp;#39;\x02&amp;#39;: ASCII/Unicode U+0002 (category Cc: Other,</description></item><item><title>줄리아에서 코드 성능 평가, 벤치마크 하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2626/</link><pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2626/</guid><description>개요 줄리아를 사용하는 가장 큰 이유가 속도, 성능인만큼 공학적으로 최적화된 코드를 작성하는 일은 대단히 중요하다. BenchmarkTools.jl은 쉽고</description></item><item><title>줄리아에서 컴프리헨션하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/1970/</link><pubDate>Tue, 10 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1970/</guid><description>코드 줄리아에서도 파이썬처럼 컴프리헨션comprehension이 가능하다. 컴프리헨션이란 배열을 생성하는 방법 중 하나로 조건식 자체를 배열에 기입하는</description></item><item><title>줄리아에서 배열을 열별로 계산하는 방법</title><link>https://freshrimpsushi.github.io/ko/posts/1971/</link><pubDate>Sun, 08 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1971/</guid><description>코드 배열을 열별로, 혹은 행별로 계산하는 방법은 map, 브로드캐스트, 컴프리헨션이 있다. julia&amp;gt; using Statistics julia&amp;gt; X = stack([i*ones(8) for i ∈ 1:9], dims=2) 8×9 Matrix{Float64}: 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0</description></item><item><title>줄리아의 정렬순열 함수과 그 응용 sortperm</title><link>https://freshrimpsushi.github.io/ko/posts/2624/</link><pubDate>Sat, 07 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2624/</guid><description>코드 sortperm은 주어진 배열을 정렬이 되도록 하는 인덱스의 배열을 리턴한다1. 말만 보면 어려워 보이지만 예시를 보면 한 번에 이해가 된다. julia&amp;gt; foo = [&amp;#3</description></item><item><title>줄리아에서 벡터와 튜플의 차이점</title><link>https://freshrimpsushi.github.io/ko/posts/1972/</link><pubDate>Fri, 06 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1972/</guid><description>설명 벡터와 튜플은 얼핏보면 비슷해보이고, 실제로 공통점도 여럿 있기에 &amp;quot;같은 개념인데 이름만 다른건가?&amp;quot;하는 생각이 드는 건 자연스럽다</description></item><item><title>줄리아에서 NaN의 대소비교</title><link>https://freshrimpsushi.github.io/ko/posts/1973/</link><pubDate>Wed, 04 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1973/</guid><description>설명 줄리아에서는 부동소수점 수와 관련하여 IEEE 754 표준을 따른다. 이 규칙에서 NaNNot a Number은 다른 모든 값들과의 비교에서 항상 false를 반환한다. 오로지</description></item><item><title>줄리아에서 홑원소집합의 원소에 접근하는 함수 only</title><link>https://freshrimpsushi.github.io/ko/posts/2622/</link><pubDate>Tue, 03 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2622/</guid><description>개요 집합론에서 말하는 홑원소 집합 $\left\{ a \right\}$ 와 그 원소 $a$ 가 엄연히 다르듯, 프로그래밍에서 원소를 하나만 가지는 컬렉션 [a]와 그 유일한 원소 a는 다르다. 매트랩등</description></item><item><title>줄리아 vscode에서 데이터프레임 깔끔하게 보는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2620/</link><pubDate>Fri, 30 Aug 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2620/</guid><description>가이드 1 julia&amp;gt; using DataFrames julia&amp;gt; df = DataFrame(a = 10:-1:1, b = &amp;#39;a&amp;#39;:&amp;#39;j&amp;#39;) 10×2 DataFrame Row │ a b │ Int64 Char ─────┼───────────── 1 │ 10 a 2 │ 9 b 3 │ 8 c 4 │ 7 d 5 │ 6 e 6 │ 5</description></item><item><title>줄리아에서 의사결정나무 사용하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2618/</link><pubDate>Mon, 26 Aug 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2618/</guid><description>개요 줄리아에서 의사결정나무decision Tree를 구현한 DecisionTree.jl 패키지를 소개한다1. 코드 예시로는 대표적인 R 내장데이터인 iris 데이터를 사용한다. 우리의</description></item><item><title>줄리아에서 컬렉션의 중복을 없애는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2616/</link><pubDate>Thu, 22 Aug 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2616/</guid><description>개요 줄리아에서 컬렉션의 중복을 없애고 체크하는 법을 소개한다. 중복을 없애주는 unique() 함수는 게 알고리즘적으로 봤을 때 전혀 어려울 게 없지만 막상 직접 구현하려면 귀찮</description></item><item><title>줄리아 미분방정식 패키지 DiffetentialEquations 튜토리얼</title><link>https://freshrimpsushi.github.io/ko/posts/1098/</link><pubDate>Sun, 18 Aug 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1098/</guid><description>설명 DifferentialEquations.jl는 SciML 그룹에 속하는 패키지 중 하나로, 미분 방정식의 수치적 풀이를 위해 개발되었다. 이 패키지로 풀 수 있</description></item><item><title>줄리아에서 클러스터링 패키지 사용하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2613/</link><pubDate>Fri, 16 Aug 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2613/</guid><description>개요 줄리아에서는 클러스터링을 위한 패키지로써 Clustering.jl이 제공된다1. 구현되어 있는 알고리즘으로는 다음과 같은 것들이 있다: K-means K-medoids Affinity Propagation Density-based</description></item><item><title>줄리아의 자동미분 패키지 Zygote.jl</title><link>https://freshrimpsushi.github.io/ko/posts/2609/</link><pubDate>Thu, 08 Aug 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2609/</guid><description>개요 줄리아에서는 머신러닝, 특히 딥러닝에 관련된 자동 미분automatic Differentiation을 위해 Zygote.jl이라는 패키지를 사</description></item><item><title>줄리아에서 함수로 구조체의 프로퍼티 참조하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2607/</link><pubDate>Sun, 04 Aug 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2607/</guid><description>개요 줄리아에서 구조체의 프로퍼티를 참조하는 방법은 크게 두 가지가 있다. 문법적인 편의나 실제 용도에 따라 적절하게 사용해야한다. 코드 예시로써 줄리아에서 // 연</description></item><item><title>줄리아에서 벡터필드 그리는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2605/</link><pubDate>Wed, 31 Jul 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2605/</guid><description>코드 quiver(, quiver=) 줄리아에서는 quiver() 함수를 통해 벡터필드를 시각화할 수 있다. θ = 0:0.2:2π quiver(cos.(θ),sin.(θ), quiver = (-sin.</description></item><item><title>줄리아에서 배열의 특정 위치를 함수로 참조하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2603/</link><pubDate>Sat, 27 Jul 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2603/</guid><description>개요 여러 개의 배열이 주어져 있을 때 이들의 특정 원소, 예를 들어 각각의 배열마다 3번째 원소에 접근하고 싶은 상황이 생각보다 많다. 줄리아에서는 getindex() 함수의 브로드캐</description></item><item><title>줄리아에서 리스트로 패키지 불러오는 방법</title><link>https://freshrimpsushi.github.io/ko/posts/2601/</link><pubDate>Tue, 23 Jul 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2601/</guid><description>개요 줄리아에서 패키지를 불러오는 방법은 using을 사용하는 것이지만, 프로그램이 커지게 되면 그걸 일일이 적고 있는 것도 일이 된다. 반복분을 통해 패키지를 로</description></item><item><title>줄리아에서 행렬을 칼럼별로 정규화하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2599/</link><pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2599/</guid><description>개요 줄리아에서 행렬의 정규화를 간단히 하는 팁을 소개한다1. 근본적으로 행렬을 행별, 열별로 스칼라곱하는 법과 eachcol() 함수, LinearAlgebra 모듈의 norm() 함수를 섞어 쓴 것에 불과하지</description></item><item><title>줄리아에서 행렬을 행별, 열별로 스칼라곱하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2597/</link><pubDate>Mon, 15 Jul 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2597/</guid><description>개요 줄리아의 행렬에 행별, 열별로 스칼라곱하는 법을 소개한다. 코드 julia&amp;gt; d = 1:10 1:10 julia&amp;gt; X = ones(Int64, 10, 10) 10×10 Matrix{Int64}: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1</description></item><item><title>줄리아 Plots에서 컬러 그래디언트 사용하는 법법</title><link>https://freshrimpsushi.github.io/ko/posts/3608/</link><pubDate>Tue, 04 Jun 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3608/</guid><description>설명 컬러 그래디언트color gradient란 줄리아의 시각화 패키지인 Plots.jl가 지원하는 두 색 체계color scheme 중 하나로 (나머지는 팔레트이</description></item><item><title>줄리아 Plots에서 팔레트 사용하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/3607/</link><pubDate>Sun, 02 Jun 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3607/</guid><description>설명 팔레트palette란, 물감을 미리 짜놓은 판을 말한다. 이것을 수학적으로 설명해보면 '색들의 집합', '색들의 수열' 정도라 할 수 있겠다. 한 그림에 그</description></item><item><title>줄리아 Plots에서 스케일이 다른 두 데이터 축 공유해서 그리는 법</title><link>https://freshrimpsushi.github.io/ko/posts/3606/</link><pubDate>Fri, 31 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3606/</guid><description>코드 스케일 차이가 많이 나는 두 데이터를 하나의 플랏에 같이 그리면 아래 그림과 같이 스케일이 작은 쪽이 완전히 무시된다. using Plots x = 0:0.01:2π plot(x, sin.(x)) plot!(x, exp.(x)) 두번</description></item><item><title>줄리아 Plots에서 플랏의 프로퍼티 목록</title><link>https://freshrimpsushi.github.io/ko/posts/3605/</link><pubDate>Wed, 29 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3605/</guid><description>설명 줄리아 Plots.jl에서는 플랏plot, 도표도 하나의 객체object이다. 빈 플랏을 그려 타입을 확인해보면 다음과 같다. julia&amp;gt; using Plots julia&amp;gt; p = plot() julia&amp;gt; p |&amp;gt;</description></item><item><title>줄리아 Plots에서 그림 배경의 격자 꾸미는 법</title><link>https://freshrimpsushi.github.io/ko/posts/3604/</link><pubDate>Mon, 27 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3604/</guid><description>요약 Plots.jl에서 그림 배경의 격자와 관련된 키워드들은 다음과 같다. 키워드 이름 기능 grid 격자 표시 gridalpha, ga, gα 격자의 투명도 지정 foreground_color_grid, fgcolor_grid 격자의 색 지정 gridlinewidth, grid_lw 격자</description></item><item><title>줄리아에서 String7, String15 없이 데이터프레임 부르는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2574/</link><pubDate>Sun, 26 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2574/</guid><description>에러 줄리아에서 데이터프레임을 사용하다보면 위와 같이 문자열 데이터가 String7이나 String15, String31와 같이 읽혀서 각종 에러를 유발할 때가 있다. 구체</description></item><item><title>줄리아 Plots에서 그림 배경의 색상 지정하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/3603/</link><pubDate>Sat, 25 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3603/</guid><description>요약 Plots.jl에서 그림의 배경 색상과 관련된 키워드들은 다음과 같다. 키워드 이름 기능 background_color, bg_color 전체 배경의 색상 지정 background_color_outside, bg_color_outside 그래프가 그려진 바깥 영역의 색상 지정</description></item><item><title>줄리아 Plots에서 서브 플랏마다 그래프 색상 지정하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/3602/</link><pubDate>Thu, 23 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3602/</guid><description>개요 서브 플랏마다 그래프의 색상을 지정하는 방법 세 가지를 소개한다. 그래프 요소에 색상을 지정하는 방법은 여기를 참고하라. 방법 1 서브 플랏의 그래프 색상을 지정</description></item><item><title>줄리아 서브플랏에서 전체 타이틀 추가하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2572/</link><pubDate>Wed, 22 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2572/</guid><description>개요 줄리아에서 그림을 그릴 때 title로 타이틀을 입력하면 서브플랏 모두에 적용되므로, plot_title을 사용해야한다1. 이는 서브플랏을 가진 플랏</description></item><item><title>줄리아 Plots에서 그래프 요소의 색상 지정하는 방법</title><link>https://freshrimpsushi.github.io/ko/posts/3601/</link><pubDate>Tue, 21 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3601/</guid><description>요약 Plots.jl에서 그래프 각 구성 요소들의 색상을 지정하는 키워드는 다음과 같다. 키워드 기능 markercolor, mc 마커 내부 색상 지정 markerstrokecolor, msc 마커 테두리 색상 지정 linecolor, lc 선 색상</description></item><item><title>줄리아에서 RGB 색상 코드 사용하는 방법</title><link>https://freshrimpsushi.github.io/ko/posts/3600/</link><pubDate>Sun, 19 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3600/</guid><description>코드 줄리아에서 색깔을 다루기 위해 제공되는 패키지는 Colors.jl이다. 시각화 패키지인 Plots.jl을 불러오면 Colors.jl 내의 기능도 같이 사용할 수 있다.</description></item><item><title>줄리아 그림에서 축의 값만 지우는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2570/</link><pubDate>Sat, 18 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2570/</guid><description>개요 줄리아에서 그림의 컬러바, 축, 눈금, 그리드 등을 지우는 방법은 있지만 그래픽적인 요소를 건드리기 때문에 숫자만 깔끔하게 지울 수가 없고, formatte</description></item><item><title>줄리아의 색상 처리를 위한 패키지</title><link>https://freshrimpsushi.github.io/ko/posts/3599/</link><pubDate>Fri, 17 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3599/</guid><description>개요1 줄리아에서 색상 처리를 위한 패키지인 Colors.jl의 기능에 대해서 소개한다. 시각화 패키지인 Plots.jl을 사용하는 경우에는 Colors</description></item><item><title>줄리아 Plots에서 색깔 사용하는 방법</title><link>https://freshrimpsushi.github.io/ko/posts/3598/</link><pubDate>Wed, 15 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3598/</guid><description>개요 줄리아에서 색깔을 편리하게 사용할 수 있도록 도와주는 패키지는 Colors.jl이다. 시각화 패키지인 Plots.jl만 불러와도 같이 사용할 수 있다.</description></item><item><title>줄리아에서 유한차분 사용하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2568/</link><pubDate>Tue, 14 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2568/</guid><description>개요 줄리아에서 유한차분법을 사용하려면, 더 정확히 유한차분의 계수를 구하기 위해서는 FiniteDifferences.jl를 써봄직하다1. 노이즈에</description></item><item><title>줄리아에서 텍스트 출력 꾸미는 내장 함수</title><link>https://freshrimpsushi.github.io/ko/posts/3597/</link><pubDate>Mon, 13 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3597/</guid><description>코드 함수 printstyled(문자열; color = 색깔)를 사용하면 출력되는 함수를 꾸밀 수 있다. 키워드 인수 color의 입력으로는 심볼, 자연수$(0 \le n</description></item><item><title>줄리아에서 수치해석적 인터폴레이션 하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2566/</link><pubDate>Fri, 10 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2566/</guid><description>개요 줄리아에서는 수치해석적인 인터폴레이션을 위해 Interpolations.jl 패키지를 사용한다1. 줄리아에서는 변수의 값을 출력할 때 사용하는 보간법과 혼동될 수 있으니 주의하자. 코</description></item><item><title>줄리아에서 배열의 차분 계산하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2564/</link><pubDate>Mon, 06 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2564/</guid><description>개요 줄리아에서는 차분을 계산하기 위해 diff() 함수를 제공한다1. circshift() 함수를 사용해도 쉽게 짤 수는 있는데 끝 점의 처리 같은 부분에서 은근히 불편하다보니 알아두면 훨씬 편</description></item><item><title>줄리아에서 원형 배열 사용하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2562/</link><pubDate>Thu, 02 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2562/</guid><description>개요 사실 줄리아에서 네이티브한 원형 배열circular Array을 지원하지는 않지만, 사실상 그렇게 사용할 수 있도록 원소를 환형으로circularl</description></item><item><title>줄리아에서 마커와 라인 스타일 목록</title><link>https://freshrimpsushi.github.io/ko/posts/2560/</link><pubDate>Sun, 28 Apr 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2560/</guid><description>코드 1 길게 설명할 것도 없고, 말 그대로 마커 스타일과 라인 스타일이 실제로 어떻게 생겼는지 보여준다. linesytle [:auto, :solid, :dash, :dot, :dashdot, :dashdotdot] 중에 하나를 고른다. shape [:none, :auto, :circle, :rect, :star5, :diamond, :hexagon, :cross, :xcross,</description></item><item><title>줄리아 점도표에서 회귀직선 그리는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2558/</link><pubDate>Wed, 24 Apr 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2558/</guid><description>코드 줄리아의 점도표에서 회귀직선을 넣는 법은 다음과 같이 옵션으로 smooth = true를 주는 것이다. using Plots x = rand(100) scatter(x, 2x .+ 0.1randn(100), smooth = true) savefig(&amp;#34;plot.svg&amp;#34;) 환경 OS: Windows julia: v1.8.3 Plots v1.38.5</description></item><item><title>줄리아 0으로 나누었을 때 Inf와 NaN의 차이</title><link>https://freshrimpsushi.github.io/ko/posts/2556/</link><pubDate>Sat, 20 Apr 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2556/</guid><description>개요 줄리아에서 0/0과 1/0이 어떻게 다른지 설명한다. 코드 julia&amp;gt; 0/0 NaN julia&amp;gt; 1/0 Inf 적어도 프로그래밍에서, 무한 Inf는 초기값 혹은 대소관계의 비교라는 측면에서 유</description></item><item><title>줄리아 스플랫 오퍼레이터를 통한 옵션 인자 전달 팁</title><link>https://freshrimpsushi.github.io/ko/posts/2554/</link><pubDate>Tue, 16 Apr 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2554/</guid><description>개요 줄리아에서 스플랫 ...의 용도 중 가장 빈번하게 사용되는 옵셔널 아규먼트 전달 법에 대해서 설명한다. 기본적으로 네임드튜플의 형태로 어떤 옵션에 어떤 인자를</description></item><item><title>줄리아의 스플랫 오퍼레이터</title><link>https://freshrimpsushi.github.io/ko/posts/2552/</link><pubDate>Fri, 12 Apr 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2552/</guid><description>개요 줄리아에서 ...는 스플랫splat 오퍼레이터로 불리며 함수를 사용할 때나 배열을 정의할 때 유용하게 쓰인다1. 이런 오퍼레이터가 줄리아에만 있는 건 아니</description></item><item><title>줄리아에서 유니코드 문자열의 일부만 슬라이싱하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2550/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2550/</guid><description>개요 여느 프로그래밍 언어들이 그러하듯, 줄리아에서는 영문을 아스키 코드aSCII Code로 쓰고 한자, 한글 등을 유니코드unicode로 쓴다. 문제는 다</description></item><item><title>줄리아 StatsPlots에서 데이터프레임 이름을 생략하는 매크로 @df</title><link>https://freshrimpsushi.github.io/ko/posts/2548/</link><pubDate>Thu, 04 Apr 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2548/</guid><description>개요 줄리아의 StatsPlots 패키지에서는 그림을 그릴 때 @df 매크로를 통해 여러번 반복되는 데이터프레임의 이름을 생략할 수 있다1. 매크로를 사용하는 문법은 데이터프레임 X의</description></item><item><title>줄리아에서 다른 파일에 정의한 함수 사용하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2544/</link><pubDate>Wed, 27 Mar 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2544/</guid><description>개요 다른 파일에 있는 함수를 사용할 수 있게끔 줄리아 코드 자체를 실행시키는 함수 include()를 소개한다. 매트랩에서는 같은 디렉터리 내에 있으면 알아서 함</description></item><item><title>줄리아에서 k-평균 군집화하는 방법</title><link>https://freshrimpsushi.github.io/ko/posts/3572/</link><pubDate>Sun, 24 Mar 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3572/</guid><description>설명 k-평균 군집화는 주어진 $n$개의 데이터를 $k$개의 묶음으로 구분하는 군집화 알고리즘이다. 줄리아에서는 Clustering.jl 패키지를 사용하여 쉽게 사용할 수 있다. 코</description></item><item><title>줄리아 산점도 마크에 색 넣는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2537/</link><pubDate>Wed, 13 Mar 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2537/</guid><description>코드 using Plots x, y = rand(100), rand(100) 위와 같은 데이터가 주어져 있다고 하자. 데이터가 연속형이냐 범주형이냐에 따라 그림의 형태와 그리는 방법이 다르다. 연속형 scatter(marker_z=) z = x + y scatter(x, y,</description></item><item><title>줄리아에서 그림의 크기와 해상도 조절하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/3559/</link><pubDate>Tue, 27 Feb 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3559/</guid><description>코드 크기 plot(x, y, size=(600,400)) 줄리아에서 그림의 크기는 size 옵션으로 설정한다. Tuple{Integer, Integer} 타입으로 입력해야하며, 각각의 정수는 가로 픽셀과 세로 픽셀을 의미한다. 기본 값은 (600</description></item><item><title>줄리아에서 그림에 화살표 그리는 법</title><link>https://freshrimpsushi.github.io/ko/posts/3558/</link><pubDate>Sun, 25 Feb 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3558/</guid><description>코드 plot!([x1, x2], [y1, y2], arrow=:true) 위의 코드는 플랏 위에 점 $(x1, y1)$부터 점 $(x2, y2)$까지 화살표를 그린다. 촉의 위치는 당연히 종점 $(x2, y2)$이다. 사인함수의 최댓값을 다음과</description></item><item><title>줄리아에서 3D 그림의 카메라 위치 조절하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/3556/</link><pubDate>Wed, 21 Feb 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3556/</guid><description>설명 선그래프, 히트맵과 같은 2차원 그림과 달리 3차원 공간에 그린 그림은 어느 방향에서 바라보느냐에 따라서 그림의 모습이 달라진다. 3D 그림의 시점은 camera=(azimuth, altitude) 옵션으</description></item><item><title>줄리아에서 랜덤 시드 고정하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/3555/</link><pubDate>Mon, 19 Feb 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3555/</guid><description>설명1 줄리아에서 랜덤 시드는 다음과 같이 고정한다. seed!([rng=default_rng()], seed) -&amp;gt; rng seed!([rng=default_rng()]) -&amp;gt; rng 입력 변수rng는 Random Number Generator난수생성기의 약자로 난수를 추출하는 알고리즘을</description></item><item><title>줄리아에서 박스 플랏 그리는 법</title><link>https://freshrimpsushi.github.io/ko/posts/3553/</link><pubDate>Thu, 15 Feb 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3553/</guid><description>설명 박스 플랏을 그리기 위해서는 통계 시각화 패키지인 StatsPlots.jl을 사용해야한다. boxplot([data], labels=[label]) 코드 using StatsPlots x = rand(0:100, 100) y = rand(50:100, 100) z = cat(x,y, dims=1) boxplot(x, label=&amp;#34;x&amp;#34;) boxplot!(y, label=&amp;#34;y&amp;#34;) boxplot!(z, label=&amp;#34;z&amp;#34;) 혹은</description></item><item><title>줄리아에서 무한 배열 사용하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2511/</link><pubDate>Sun, 21 Jan 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2511/</guid><description>개요 InfiniteArrays.jl는 무한한 사이즈의 배열을 사용할 수 있게 해주는 패키지1로써, 사실 레이지 어레이lazy Array와 많은 연관이 있</description></item><item><title>줄리아에서 mat 파일 읽고 쓰는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2509/</link><pubDate>Wed, 17 Jan 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2509/</guid><description>개요 MAT.jl은 매트랩에서 사용하는 데이터 저장 형식인 *.mat 파일을 읽고 쓰는 라이브러리다1. 원래 줄리아가 그러하듯, 이 패키지는 기존에 쓰던 프로그래밍 언어</description></item><item><title>줄리아 콘솔에서 간단한 그림 출력하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2507/</link><pubDate>Sat, 13 Jan 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2507/</guid><description>개요 UnicodePlots.jl은 유니코드 문자를 통해서 줄리아 REPL에서 그림을 출력해주는 라이브러리1로, 프로그램이 진행되는 가운데 가벼우면서</description></item><item><title>줄리아에서 콘솔 초기화 하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2505/</link><pubDate>Tue, 09 Jan 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2505/</guid><description>방법 콘솔에서 Ctrl + L를 누르면 콘솔이 싹 초기화되는 걸로 보이는데, 일부 환경에선 진짜 초기화 하는 게 아니라 창이 밀린 것처럼 스크롤만 하는 경우도 있다. 아주 깔끔하</description></item><item><title>줄리아에서 데이터프레임의 결측치 제거하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2503/</link><pubDate>Fri, 05 Jan 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2503/</guid><description>개요 1 줄리아에서는 dropmissing() 함수를 통해 쉽게 결측치를 제거할 수 있다. 코드 julia&amp;gt; df = DataFrame(x = [&amp;#34;i&amp;#34;, missing, &amp;#34;k&amp;#34;, &amp;#34;j&amp;#34;], y = [1, 2, 3, missing]) 4×2 DataFrame Row │ x y │ String? Int64? ─────┼────────</description></item><item><title>줄리아에서 환경변수 참조하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2499/</link><pubDate>Thu, 28 Dec 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2499/</guid><description>개요 줄리아에서 환경변수를 참조하는 법을 설명한다1. 코드 Base.ENV Base.ENV[&amp;#34;JULIA_NUM_THREADS&amp;#34;] 환경변수는 보다시피 별도의 패키지 로드가 필요하지 않고 Base.ENV를 통해 바로 접근할 수 있</description></item><item><title>줄리아에서 프로그레스바 사용하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2497/</link><pubDate>Sun, 24 Dec 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2497/</guid><description>개요 줄리아에서도 프로그램의 진행 상황을 알려주는 프로그래스바를 손쉽게 사용할 수 있다. 코드 ProgressMeter.jl ProgressMeter.jl 패키지의 @showprogress 매크로를 for 루프에 두면 된다1. using ProgressMeter chi2 = [] @showprogress for n</description></item><item><title>줄리아에서 0이나 결측치를 제외한 평균 구하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2495/</link><pubDate>Wed, 20 Dec 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2495/</guid><description>개요 R 언어의 합계 sum()이나 평균 mean()에서는 함수 그 자체가 해당 결측치를 무시할 수 있는 옵션을 가지고 있는데, 줄리아에서는 그런 옵션이 없는 대신 함</description></item><item><title>줄리아에서 회귀분석 하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2493/</link><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2493/</guid><description>개요 줄리아에서 회귀분석을 하기 위한 GLM.jl 패키지를 간략하게 소개한다1. R에서의 인터페이스와 얼마나 흡사한지 강조하기 위해 세세한 설명은 생략한다. 코드 줄리아</description></item><item><title>줄리아에서 그림 축, 눈금 등 다 없애고 깔끔하게 출력하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/3501/</link><pubDate>Fri, 03 Nov 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3501/</guid><description>코드 Plots.jl는 기본적으로 그리드, 눈금, 축, 컬러바 등을 모두 출력하는데, 이를 없애고 깔끔하게 그리고 싶다면 다음의 옵션을 추가하면 된다. colorbar=:none: 컬러바</description></item><item><title>줄리아에서 meshgrid 만드는 법</title><link>https://freshrimpsushi.github.io/ko/posts/3500/</link><pubDate>Wed, 01 Nov 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3500/</guid><description>개요 파이썬이나 매트랩에서 사용하는 meshgrid() 같은 함수가 따로 있는 건 아니다. 그리드 위에서의 함숫값만을 얻고 싶은 것이라면, 격자를 만들지 않는 더 간단한 방법이 있다.</description></item><item><title>줄리아에서 다변수함수의 브로드캐스팅</title><link>https://freshrimpsushi.github.io/ko/posts/3499/</link><pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3499/</guid><description>개요 줄리아에서 다변수함수를 브로드캐스팅하는 방법을 소개한다. 파이썬 등에서 하는 것처럼 meshgrid를 만들어서 할 수도 있고, 아주 쉽게 각 차원별로 벡터</description></item><item><title>줄리아에서 두 시각의 차를 초 단위로 계산하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2461/</link><pubDate>Fri, 13 Oct 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2461/</guid><description>개요 Dates 모듈의 canonicalize() 함수를 사용하면 된다1. 코드 using Dates tic = DateTime(2022,3,7,7,1,11) toc = now() Dates.canonicalize(toc-tic) 위 코드를 실행시킨 결과는 다음과 같다. julia&amp;gt; using Dates julia&amp;gt; tic = DateTime(2022,3,7,7,1,11) 2022-03-07T07:01:11 julia&amp;gt; toc = now() 2022-07-19T22:26:22.070 julia&amp;gt; Dates.canonicalize(toc-tic) 19 weeks, 1 day, 15 hours, 25 minutes, 11</description></item><item><title>줄리아 Plots에서 축, 축 이름, 눈금, 눈금 값의 색상 지정하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/3490/</link><pubDate>Thu, 12 Oct 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3490/</guid><description>요약 Plots.jl에서 축과 눈금의 색상 지정와 관련된 키워드는 다음과 같다. 키워드 이름 기능 guidefontcolor 축 이름 색상 지정 foreground_color_border, fgcolor_border 축 색상 지정 foreground_color_axis, fgcolor_axis 눈금 색상 지정 foreground_color_text, fgcolor_text 눈금 값</description></item><item><title>줄리아에서 2차원 배열과 행렬 간 전환하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2459/</link><pubDate>Mon, 09 Oct 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2459/</guid><description>개요 줄리아에서 2차원 배열과 행렬 사이를 전환하는 팁을 소개한다1. 아마 줄리아 1.7 이하의 환경에서는 가장 줄리아다운 구현이면서 간단하고, 빠르고, 아름다운 방</description></item><item><title>줄리아로 네이버에서 메일 보내는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2457/</link><pubDate>Thu, 05 Oct 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2457/</guid><description>개요 SMTPClient.jl 패키지로 SMTPsimple Mail Transfer Protocol를 사용해서 네이버에서 메일을 보내는 방법을 소개한다1. 필자의 경우 긴 시간이 걸리는 시뮬레이션이 끝나면 카카오 메일로</description></item><item><title>줄리아에서 주어진 분포로 무작위 추출하는 방법</title><link>https://freshrimpsushi.github.io/ko/posts/3463/</link><pubDate>Sat, 19 Aug 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3463/</guid><description>설명 Distributions.jl 패캐지를 이용하면 주어진 분포로 무작위 추출할 수 있다. 코드 정규분포 julia&amp;gt; using Distributions julia&amp;gt; d = Normal() Normal{Float64}(μ=0.0, σ=1.0) julia&amp;gt; rand(d,</description></item><item><title>줄리아에서 랜덤 추출하는 방법</title><link>https://freshrimpsushi.github.io/ko/posts/3462/</link><pubDate>Thu, 17 Aug 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3462/</guid><description>설명1 줄리아에서 무작위 추출을 하는 함수는 다음과 같다. rand([rng=default_rng()], [S], [dims...]) rng는 Random Number Generator의 약자로, 난수 추출 알고리즘을 지정한다. 무슨 말인지 모르겠</description></item><item><title>줄리아에서 데이터 생략 없이 출력하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2416/</link><pubDate>Sat, 15 Jul 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2416/</guid><description>개요 원래 줄리아에서는 데이터를 출력할 때 REPL의 크기에 맞춰서 예쁘게 출력을 해주지만, 때로는 전체 데이터를 편하게 보고싶을 때가 있다. 데이터가 foo라면</description></item><item><title>줄리아에서 선형대수 패키지 사용하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2412/</link><pubDate>Fri, 07 Jul 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2412/</guid><description>개요 줄리아는 매트랩 수준으로 선형대수를 잘 지원한다. 오히려 매트랩 이상으로 발전된, 직관적이고 미려한 문법을 보면 줄리아가 만들어진 시점부터 잘 설계된 느낌을</description></item><item><title>줄리아에서 날짜 및 시간 관련 함수 사용하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2410/</link><pubDate>Mon, 03 Jul 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2410/</guid><description>개요 1 Dates는 날짜 및 시간과 관련된 함수를 모아놓은 모듈이다. 일반적인 프로그래밍은 물론이고 시계열에 관련된, 아니 관련 없더라도 많은 데이터를 다루는 데</description></item><item><title>줄리아에서 고속 푸리에 변환(FFT) 사용하는 방법</title><link>https://freshrimpsushi.github.io/ko/posts/3440/</link><pubDate>Sun, 02 Jul 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3440/</guid><description>개요 1 2 The Fastest Fourier Transform in the West(FFTW)는 매사추세츠 공과대학(MIT)에서 Matteo Frigo와 Steven G. Johnson에 의해 개발된 이산 푸리에 변환을 계산하</description></item><item><title>줄리아에서 기본 자료형 변경하는 방법</title><link>https://freshrimpsushi.github.io/ko/posts/3439/</link><pubDate>Fri, 30 Jun 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3439/</guid><description>개요 머신러닝과 같은 분야에서는 계산 속도 향상, 메모리 절약 등을 위해 배열의 자료형으로 64비트의 실수 대신에 32비트의 실수를 쓴다. 그래서 파이토치에서는 텐</description></item><item><title>줄리아에서 분산 컴퓨팅 하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2398/</link><pubDate>Fri, 09 Jun 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2398/</guid><description>개요 줄리아에서 복수의 디바이스에게 작업 스케쥴을 내려 계산하는 법을 소개한다1. 솔직히 나도 잘 모르겠다. 코드 using Distributed ip_ = [] for last in [160,161,162,163,164,32,33,34,35,36,43,44,45,46,47] push!(ip_, join([155,230,211,last],&amp;#39;.&amp;#39;)) end sort!(ip_) for ip in ip_ addprocs([(&amp;#34;chaos@&amp;#34; * ip, 8)];</description></item><item><title>줄리아의 다차원 인덱스</title><link>https://freshrimpsushi.github.io/ko/posts/2394/</link><pubDate>Thu, 01 Jun 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2394/</guid><description>개요 줄리아에서는 다차원 배열에 참조할 수 있는 인덱스의 타입인 CatesianIndex를 제공한다1. 당연히 카티션catesian이라는 명명은 집합의</description></item><item><title>줄리아의 숏 서킷</title><link>https://freshrimpsushi.github.io/ko/posts/2392/</link><pubDate>Sun, 28 May 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2392/</guid><description>개요 줄리아에서 &amp;amp;&amp;amp;과 ||는 논리곱, 논리합일 뿐만 아니라 숏-서킷 평가short-circuit Evaluation을 수행한다1.</description></item><item><title>줄리아의 find 함수들</title><link>https://freshrimpsushi.github.io/ko/posts/2390/</link><pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2390/</guid><description>개요 줄리아의 기본 내장 함수들로써 알면 알수록 유용하다. 거두절미하고 예시를 보며 익히자. 코드 x = [3, 7, 4, 5, 10, 3, 12, 3, 2, 4] argmin(x) argmax(x) findmin(x) findmax(x) extrema(x) findfirst(x .== 3) findlast(x .== 3) findall(x .== 3) findnext(x .==</description></item><item><title>줄리아의 느낌표 컨벤션</title><link>https://freshrimpsushi.github.io/ko/posts/2388/</link><pubDate>Sat, 20 May 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2388/</guid><description>개요 1 줄리아에서 함수 이름의 가장 마지막에 느낌표bang !을 넣는 것을 뱅 컨벤션이라 한다. 이러한 함수들은 입력받은 인수를 수정하는 특징을 가진다. 코드 function add_1!(x)</description></item><item><title>줄리아에서 부분배열 빠르게 참조하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2384/</link><pubDate>Fri, 12 May 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2384/</guid><description>개요 줄리아에서 view는 배열array의 부분배열subarray를 빠르게 참조하게끔 해주는 데이터 구조다1. 실제로 쓰는 입장에서는 번거롭기만하고 차</description></item><item><title>줄리아의 브로드캐스팅 문법</title><link>https://freshrimpsushi.github.io/ko/posts/2382/</link><pubDate>Mon, 08 May 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2382/</guid><description>개요 브로드캐스팅broadcasting은 줄리아에서 가장 중요한 개념으로, 벡터화된 코드를 작성함에 있어서 아주 편리한 문법이다1. 이항연산 앞에 .을 찍</description></item><item><title>줄리아에서 배열로 딕셔너리 만드는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2375/</link><pubDate>Mon, 24 Apr 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2375/</guid><description>코드 1 julia&amp;gt; Dict([&amp;#34;a&amp;#34;, &amp;#34;bc&amp;#34;] .=&amp;gt; [2,8]) Dict{String, Int64} with 2 entries: &amp;#34;a&amp;#34; =&amp;gt; 2 &amp;#34;bc&amp;#34; =&amp;gt; 8 키Key와 밸류Value로 두고 싶은 두 배열이 주어져 있을 때, Dict(Key .=&amp;gt; Value)를 통해 딕셔너리를 만들 수 있다. 본</description></item><item><title>줄리아에서 복소수 사용하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2373/</link><pubDate>Thu, 20 Apr 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2373/</guid><description>개요 줄리아에서는 기본적으로 R처럼 복소수를 지원한다. 코드 허수 im julia&amp;gt; z = 3 + 4im 3 + 4im im은 순허수 $i = \sqrt{-1}$ 를 나타낸다. 우리가 상식적으로 사용하는 사칙연산</description></item><item><title>줄리아 Plots에서 그림 축 스타일 변경하는 방법 `framestyle`</title><link>https://freshrimpsushi.github.io/ko/posts/3376/</link><pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3376/</guid><description>개요1 framestyle 속성으로 그림의 축, 테두리 스타일을 변경할 수 있다. 가능한 목록은 다음과 같다. :box :semi :axes :origin :zerolines :grid :none 코드 기본 설정은 :axes이다. using Plots x = rand(10) y = rand(10) p</description></item><item><title>줄리아에서 조건문 짧게 쓰는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2341/</link><pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2341/</guid><description>개요 줄리아에서 &amp;lt;condition&amp;gt; &amp;amp;&amp;amp; &amp;lt;statement&amp;gt;는 &amp;lt;condition&amp;gt;이 참일 때 &amp;lt;statement&amp;gt;가 실행된다</description></item><item><title>줄리아 데이터프레임에서 NaN을 0으로 바꾸는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2330/</link><pubDate>Tue, 24 Jan 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2330/</guid><description>개요 특정 값으로 바꾸는 방법은 한 열씩 바꾸기 때문에 불편하고, 데이터프레임 전체에서 NaN을 처리할 땐 더 좋은 트릭을 사용해봄직하다. 코드 julia&amp;gt; df = DataFrame(rand(1:9,3,3), :auto) ./ DataFrame(rand(0:1,3,3), :auto) 3</description></item><item><title>줄리아의 삼항연산자 ? :</title><link>https://freshrimpsushi.github.io/ko/posts/2328/</link><pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2328/</guid><description>개요 줄리아에서 A ? B : C는 이른바 삼항연산자ternary Operator로써, A가 참이면 B, 거짓이면 C를 리턴하는 함수다. 수학적으로 이항연산이 함</description></item><item><title>줄리아에서 데이터프레임 특정 값 변경하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2326/</link><pubDate>Mon, 16 Jan 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2326/</guid><description>개요 replace!() 메소드를 사용하면 된다1. 첫번째 인자로는 변경할 데이터프레임의 칼럼이 들어가고, 두번째 인자로는 페어 A =&amp;gt; B 가 들어간다. 여기서 데이터프레임의 칼럼</description></item><item><title>줄리아에서 빈도수 계산하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2324/</link><pubDate>Thu, 12 Jan 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2324/</guid><description>개요 1 FreqTables.jl 패키지의 freqtable() 함수를 사용하면 된다. R에서의 freq() 함수와 유사한 기능을 한다. 코드 배열 julia&amp;gt; compartment = rand([&amp;#39;S&amp;#39;,&amp;#39;I&amp;#39;,&amp;#39;R&amp;#39;], 1000); julia&amp;gt; freqtable(compartment) 3-element Named Vector{Int64} Dim1 │ ──────┼──── &amp;#39;I&amp;#39; │ 316 &amp;#39;R&amp;#39; │ 342 &amp;#39;S&amp;#39;</description></item><item><title>줄리아에서 csv 파일 컬럼만 읽어들이는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2322/</link><pubDate>Sun, 08 Jan 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2322/</guid><description>가이드 가령 위와 같은 example.csv 파일이 있다고 하자. 이를 데이터프레임으로 불러들일 때, 데이터 전체가 아니라 열이름만 유지되어있고 텅 빈 데이터프레임을 만들고 싶을 때가</description></item><item><title>줄리아에서 데이터 프레임 요약보는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2320/</link><pubDate>Wed, 04 Jan 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2320/</guid><description>가이드 1 using RDatasets iris = dataset(&amp;#34;datasets&amp;#34;, &amp;#34;iris&amp;#34;) describe(iris) describe() 함수를 사용하면 된다. iris 데이터를 요약해보자. julia&amp;gt; describe(iris) 5×7 DataFrame Row │ variable mean min median max nmissing eltype │ Symbol Union… Any Union… Any Int64 DataType ────</description></item><item><title>줄리아의 범주형 배열</title><link>https://freshrimpsushi.github.io/ko/posts/2318/</link><pubDate>Sat, 31 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2318/</guid><description>개요 줄리아의 CategoricalArrays.jl 패키지는 R에서의 factor와 비슷한 역할을 한다. 코드 julia&amp;gt; A = [&amp;#34;red&amp;#34;, &amp;#34;blue&amp;#34;, &amp;#34;red&amp;#34;, &amp;#34;green&amp;#34;] 4-element Vector{String}: &amp;#34;red&amp;#34; &amp;#34;blue&amp;#34; &amp;#34;red&amp;#34; &amp;#34;green&amp;#34; julia&amp;gt; B = categorical(A) 4-element CategoricalArray{String,1,UInt32}: &amp;#34;red&amp;#34; &amp;#34;blue&amp;#34; &amp;#34;red&amp;#34; &amp;#34;green&amp;#34; julia&amp;gt; levels(B) 3-element Vector{String}: &amp;#34;blue&amp;#34; &amp;#34;green&amp;#34; &amp;#34;red&amp;#34; categorical() categorical() 함수로 일반</description></item><item><title>줄리아에서 R에서 쓰던 내장데이터셋 불러오는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2316/</link><pubDate>Tue, 27 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2316/</guid><description>가이드 RDatasets.jl 패키지를 사용하면 된다. 다음은 제일 만만한 iris 데이터를 불러오는 예제다. 기본 내장 데이터셋 외에도 여러가지 데이터셋을 포함하고 있으니 깃허브를 참고하</description></item><item><title>줄리아에서 패키지 버전 확인하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2313/</link><pubDate>Wed, 21 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2313/</guid><description>가이드 예로써 Plots.jl 패키지의 버전을 확인해보자. REPL에서 ] 키를 누르면 패키지 모드로 진입한다. 여기서 status foo을 입력하면 다음과 같이 foo 패키지의 버전을 확인</description></item><item><title>줄리아에서 배열이 비어있는지 확인하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2311/</link><pubDate>Sat, 17 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2311/</guid><description>개요 isempty() 함수를 사용하면 된다. 코드 julia&amp;gt; isempty([]) true julia&amp;gt; isempty(Set()) true julia&amp;gt; isempty(&amp;#34;&amp;#34;) true 제목에서는 배열이라고 했지만 사실 배열이 아니라 집합이나 문자열이어도 된다. 최적화 물론 배열이 비어있는</description></item><item><title>줄리아에서 예외처리하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2309/</link><pubDate>Tue, 13 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2309/</guid><description>개요 지독한 외로움에 쩔쩔매본 사람은 알게되지 음 알게되지 코딩을 하다가 알수없는 에러에 고생해본 사람은 알게된다, 프로그래밍에 있어서 에러가 정말 중요하다는 사</description></item><item><title>줄리아에서 데이터프레임 사이즈 확인하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2307/</link><pubDate>Fri, 09 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2307/</guid><description>개요 nrow(), ncol(), size() 등을 사용할 수 있다. R과 달리 length()는 에러를 낸다. 코드 julia&amp;gt; df = DataFrame(rand(100000,5), :auto) 100000×5 DataFrame Row │ x1 x2 x3 x4 x5 │ Float64 Float64 Float64 Float64 Float64 ────────</description></item><item><title>줄리아에서 변수이름을 칼럼명으로 가지는 데이터프레임 만드는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2305/</link><pubDate>Mon, 05 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2305/</guid><description>개요 네임드 튜플을 사용하면 된다. 네임드 튜플을 만드는 방법은 왼쪽 괄호 바로 뒤에 세미콜론 ;을 붙이는 것이다. 가령 DataFrame(; x, y)이라고 하면 칼럼명이 :x, &amp;quot;y 이고 내용도</description></item><item><title>줄리아의 네임드 튜플</title><link>https://freshrimpsushi.github.io/ko/posts/2303/</link><pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2303/</guid><description>개요 네임드 튜플named Tuple은 일반적인 튜플과 달리 딕셔너리나 구조체structure처럼 사용할 수 있는 튜플이다1. 심볼symbol의 배열을</description></item><item><title>줄리아, 파이썬(넘파이, 파이토치) 배열 차원의 차이점</title><link>https://freshrimpsushi.github.io/ko/posts/3315/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3315/</guid><description>개요 줄리아와 넘파이, 파이토치(이하 이 둘을 퉁쳐서 그냥 파이썬이라고 하겠다)의 고차원 배열을 다룰 때 각 차원이 의미하는 바가 다르므로 주의를 요한다. 이러한 차</description></item><item><title>줄리아에서 명령줄 인수 넣는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2280/</link><pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2280/</guid><description>코드 println(ARGS[1] * &amp;#34; + &amp;#34; * ARGS[2] * &amp;#34; = &amp;#34; * string(parse(Float64, ARGS[1]) + parse(Float64, ARGS[2]))) 위와 같이 한 줄로 이루어진 example.jl 파일이 있다고 해보자. 줄리아에서는 ARGS를 통해 커맨드라인에서의 인수를 배열로 받아</description></item><item><title>줄리아에서 심볼릭 연산 하는 방법</title><link>https://freshrimpsushi.github.io/ko/posts/3311/</link><pubDate>Sat, 15 Oct 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3311/</guid><description>개요 줄리아에서 심볼릭 연산은 SymEngine.jl1 패키지를 통해서 사용할 수 있다. Symbolics.jl과의 차이점 줄리아의 심볼릭 연산 패키지 Symbolics.jl 소개에서 소개된 Symbolics.jl 는 네이티</description></item><item><title>줄리아에서 외부 프로그램 실행하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2278/</link><pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2278/</guid><description>코드 줄리아에서는 run() 함수를 통해 백틱backtick `으로 감싸진 문자열을 실행한다. 파이썬으로 치자면 os 모듈의 os.system() 을 사용한것 비슷하다. julia&amp;gt; txt = &amp;#34;helloworld&amp;#34; &amp;#34;helloworld&amp;#34; julia&amp;gt; typeof(`echo $txt`)</description></item><item><title>줄리아에서 문자열 숫자로 바꾸는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2276/</link><pubDate>Sat, 08 Oct 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2276/</guid><description>코드 parse(type, str)를 사용하면 된다. 문자열 str을 type 타입의 숫자로 변경해준다. julia&amp;gt; parse(Int, &amp;#34;21&amp;#34;) 21 julia&amp;gt; parse(Float64, &amp;#34;3.14&amp;#34;) 3.14 왜 파이썬처럼 Int64(&amp;quot;21&amp;quot;) 같은 게 안되느냐&amp;hellip; 그건 &amp;ls</description></item><item><title>줄리아에서 가변 인자 함수 정의하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2266/</link><pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2266/</guid><description>개요 1 가변인자 함수란 보통 프로그래밍에서 Varargs Function이라 불리는 것으로, 복수의 인자가 제한 없이 들어올 수 있는 함수를 말한다. 줄리아에서는 간단히 변</description></item><item><title>줄리아 컨테이너 내부 원소 타입 체크하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2264/</link><pubDate>Wed, 14 Sep 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2264/</guid><description>개요 eltype() 함수를 사용하면 된다. 아마 element type에서 나온 명명일 것이다. 코드 julia&amp;gt; set_primes = Set([2,3,5,7,11,13]) Set{Int64} with 6 elements: 5 13 7 2 11 3 julia&amp;gt; arr_primes = Array([2,3,5,7,11,13]) 6-element Vector{Int64}: 2 3 5 7 11 13 위와 같이 $13$ 까지의 소수를</description></item><item><title>줄리아 그림 기본 설정 바꾸는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2262/</link><pubDate>Sat, 10 Sep 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2262/</guid><description>코드 default() 함수를 사용하면 된다. using Plots default(size = (400,400), color = :red) default(:size, (400,400)) for key in [:size, :color], value in [(400,400), :red] default(key, value) end 일반 plot() 함수처럼 세팅하는 방법이 있고, 키와 밸류를 줘서 하나씩 바꾸는 방법이 있다</description></item><item><title>줄리아에서 데이터프레임 특정 행만 제거하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2260/</link><pubDate>Tue, 06 Sep 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2260/</guid><description>개요 인덱싱할 때 Not() 함수를 사용하면 된다1. 칼럼명 그대로의 심볼이나 심볼의 배열을 넣으면 그 칼럼들만 제외하고 인덱싱된다. 코드 using DataFrames WJSN = DataFrame( member = [&amp;#34;다</description></item><item><title>줄리아에서 그림에 수직선 수평선 넣는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2258/</link><pubDate>Fri, 02 Sep 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2258/</guid><description>개요 vline!(), hline!() 함수를 사용하면 된다. 코드 @time using Plots plot(rand(100)) hline!([0.5], linewidth = 2) vline!([25, 75], linewidth = 2) png(&amp;#34;result&amp;#34;) 선이 그어지는 위치는 배열로 넘겨준다. 배열의 요소가 여러개면 여러개의 선을 한 번에 그어준다</description></item><item><title>줄리아에서 그림 양식 만드는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2256/</link><pubDate>Mon, 29 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2256/</guid><description>개요 RecipesBase.jl은 유저가 직접 새로운 그림의 양식을 만들게 해주는 패키지다. R 프로그래밍 언어에서 ggplot이 그러하듯 원래의 줄리아와</description></item><item><title>줄리아에서 데이터프레임 그룹별로 나누고 계산하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2254/</link><pubDate>Thu, 25 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2254/</guid><description>개요 groupby()를 사용해 그룹별로 나누고 combine()을 사용해 계산하면 된다1. groupby(df, :colname) :colname을 기준으로 groupedDataF</description></item><item><title>줄리아에서 데이터프레임 중복된 행 삭제하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2252/</link><pubDate>Sun, 21 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2252/</guid><description>개요 unique()를 사용하면 된다. 정확하게는 중복된 행을 삭제한다기보단 하나만 남기는 것이다. 코드 using DataFrames WJSN = DataFrame( member = [&amp;#34;다영&amp;#34;,&amp;#</description></item><item><title>줄리아에서 레이아웃 주고 서브플랏 그리는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2250/</link><pubDate>Wed, 17 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2250/</guid><description>개요 줄리아에서 서브플랏에 관련된 옵션은 layout 옵션을 통해 제어할 수 있다. 정수를 입력하면 해당 수만큼의 그리드를 눈치껏 만들어준다. 정수의 2-튜플을 입력하면 정</description></item><item><title>줄리아에서 그림 범례 위치 조정하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2248/</link><pubDate>Sat, 13 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2248/</guid><description>개요 1 plot() 함수의 legend 옵션으로 범례의 위치를 자유롭게 조정할 수 있다. $0$ 부터 $1$ 사이의 값으로 이루어진 2-튜플을 주면 정확히 그 위치에 찍히고, 그 외에는 심볼로 제어</description></item><item><title>줄리아 그림 가로세율 비율 조정하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2246/</link><pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2246/</guid><description>개요 1 그림의 가로세로를 조절하기 위해서는 옵션에 ratio를 넣으면 된다. 추천하는 다른 가명으로는 aspect_ratios, axis_ratio가 있다. ratio = :none: 기본값으로, 그</description></item><item><title>줄리아에서 CSV 출력 시 깨진 문자 해결법</title><link>https://freshrimpsushi.github.io/ko/posts/2244/</link><pubDate>Fri, 05 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2244/</guid><description>에러 using DataFrames, CSV example = DataFrame(x = 1:10, 가 = &amp;#34;나다&amp;#34;) CSV.write(&amp;#34;example.csv&amp;#34;, example) 줄리아에서 CSV 파일로 출력하다보면 위와 같이 한글이 깨지는 현상을 볼 수가 있다. 원인 사실 한글이 깨지</description></item><item><title>줄리아에서 텍스트 출력 꾸미는 패키지</title><link>https://freshrimpsushi.github.io/ko/posts/2242/</link><pubDate>Mon, 01 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2242/</guid><description>개요 줄리아에서 텍스트 출력을 꾸미는 패키지로는 Crayons.jl이 알려져있다1. 내장 함수만으로 꾸미고 싶다면 printstyled()를 사용하면</description></item><item><title>줄리아에서 데이터프레임에 새로운 열 추가하는 방법</title><link>https://freshrimpsushi.github.io/ko/posts/3273/</link><pubDate>Sun, 31 Jul 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3273/</guid><description>코드 우주소녀 데이터프레임이 아래와 같이 주어졌다고 하자. WJSN = DataFrame( member = [&amp;#34;다영&amp;#34;,&amp;#34;다원&amp;#34;,&amp;#34;루다&amp;#34;</description></item><item><title>줄리아 그림에 선분 넣는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2240/</link><pubDate>Thu, 28 Jul 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2240/</guid><description>코드 using Plots scatter(rand(100), randn(100)) plot!([0,1],[0,1]) png(&amp;#34;example1&amp;#34;) plot!([.00,.25,.50],[-2,0,-2]) png(&amp;#34;example2&amp;#34;) θ = 0:0.01:2π plot!(.5 .+ cos.(θ)/3, 1.5sin.(θ)) png(&amp;#34;example3&amp;#34;) 위 코드를 실행해 그림에 선분을 넣는 방법을 알아보자. 선분</description></item><item><title>줄리아에서 데이터프레임 정렬하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2238/</link><pubDate>Sun, 24 Jul 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2238/</guid><description>코드 using DataFrames Unit1 = DataFrame( member = [&amp;#34;다영&amp;#34;,&amp;#34;루다&amp;#34;,&amp;#34;수빈&amp;#34;,&amp;#34;진숙&amp;#34;], birth = [99,97,96,99], height = [161,157,159,162] )</description></item><item><title>줄리아에서 데이터프레임에 새 행 넣는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2236/</link><pubDate>Wed, 20 Jul 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2236/</guid><description>코드 using DataFrames Unit1 = DataFrame( member = [&amp;#34;다영&amp;#34;,&amp;#34;루다&amp;#34;,&amp;#34;수빈&amp;#34;,&amp;#34;진숙&amp;#34;], birth = [99,97,96,99], height = [161,157,159,162] )</description></item><item><title>줄리아에서 무한대 사용하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2234/</link><pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2234/</guid><description>개요 Infinities.jl은 줄리아에서 무한대 기호를 사용하게 도와주는 패키지다1. 과학계산에 관련된 코딩에 있어서 무한대는 의외로 유용하다. 코드 julia&amp;gt;</description></item><item><title>줄리아에서 패키지 특정 버전으로 설치하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2232/</link><pubDate>Tue, 12 Jul 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2232/</guid><description>가이드 1 (@v1.6) pkg&amp;gt; status JuMP Status `C:\Users\rmsms\.julia\environments\v1.6\Project.toml` [4076af6c] JuMP v0.20.0 REPL에서 ] 키를 누르면 패키지 모드로 진입한다. 예로써 위와 같이 버전이 v0.20.0인 패키지를 v0.21로 버전업하고 싶</description></item><item><title>줄리아에서 빈 데이터프레임 만드는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2230/</link><pubDate>Fri, 08 Jul 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2230/</guid><description>개요 많은 언어에서 데이터프레임을 지원함에도 의외로 할 때마다 새롭고 짜증나는 게 빈 배열 생성이다. 코드 타입 지정 julia&amp;gt; using DataFrames julia&amp;gt; df1 = DataFrame(x = Int64[], y = String[]) 0×2 DataFrame 실제로 빈 배</description></item><item><title>줄리아에서 계층적 군집화하는 방법</title><link>https://freshrimpsushi.github.io/ko/posts/3259/</link><pubDate>Sun, 03 Jul 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3259/</guid><description>설명 Clustering.jl 패키지의 hclust() 함수를 사용하면 된다. hclust(d::AbstractMatrix; [linkage], [uplo], [branchorder]) 거리행렬을 입력으로 받아 계층적 군집화 결과를 반환한다. 군집간의 거리는 단일 연결이 기본이다. 덴드로그램을</description></item><item><title>줄리아 문자열에서 특정 패턴 위치 찾는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2226/</link><pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2226/</guid><description>코드 julia&amp;gt; findfirst(&amp;#34;li&amp;#34;, &amp;#34;multicolinearlity&amp;#34;) 8:9 julia&amp;gt; findlast(&amp;#34;li&amp;#34;, &amp;#34;multicolinearlity&amp;#34;) 14:15 julia&amp;gt; findnext(&amp;#34;l&amp;#34;, &amp;#34;multicolinearlity&amp;#34;, 1) 3:3 julia&amp;gt; findnext(&amp;#34;l&amp;#34;, &amp;#34;multicolinearlity&amp;#34;, 4) 8:8 julia&amp;gt; findnext(&amp;#34;l&amp;#34;, &amp;#34;multicolinearlity&amp;#34;, 9) 14:14 julia&amp;gt; findfirst(r&amp;#34;t.+t&amp;#34;, &amp;#34;multicolinearlity&amp;#34;) 4:16 findfirst(pattern, A) 문자열 A에서 pattern과 일치하는 구간을 Range로 리턴한다. 패턴에는 정규표</description></item><item><title>줄리아에서 덴드로그램 그리는 방법</title><link>https://freshrimpsushi.github.io/ko/posts/3257/</link><pubDate>Wed, 29 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3257/</guid><description>설명 주어진 데이터를 hclust()로 계층적 군집화하여 덴드로그램을 그리려고 plot() 함수를 쓰면 다음과 같은 오류가 난다. using Clustering using Distances using Plots a = rand(2, 10) D_a = pairwise(Euclidean(), a, a) SL =</description></item><item><title>줄리아에서 특정 문자열 포함 여부 확인하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2224/</link><pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2224/</guid><description>코드 julia&amp;gt; contains(&amp;#34;qwerty&amp;#34;, &amp;#34;er&amp;#34;) true julia&amp;gt; contains(&amp;#34;qwerty&amp;#34;, &amp;#34;et&amp;#34;) false julia&amp;gt; contains(&amp;#34;qwerty&amp;#34;, r&amp;#34;q?&amp;#34;) true contains(haystack::AbstractString, needle) haystack에 needle이 포함되었는지 확인해 불리언으로 리턴한다. needle에는 r&amp;quot;...&amp;</description></item><item><title>줄리아에서 소인수분해 및 소수관련 함수 사용하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2222/</link><pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2222/</guid><description>개요 Primes.jl은 소수에 관련된 함수 및 소인수분해를 다루는 패키지다. 해석적 정수론에 관련된 함수에 대한 구현은 아직 미비한 편이다. 패키지의 모든 기능</description></item><item><title>줄리아에서 다항함수 사용하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2220/</link><pubDate>Sat, 18 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2220/</guid><description>개요 Polynomials.jl은 다항 함수의 표현 및 계산 등을 포함한 패키지다. 다항함수라는 게 수학적으로 쉬워서 그런지 코딩도 간단하게 생각하는 경우가 있</description></item><item><title>줄리아에서 문자열 합치는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2218/</link><pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2218/</guid><description>코드 문자열 합치기 * julia&amp;gt; &amp;#34;oh&amp;#34; * &amp;#34;my&amp;#34; * &amp;#34;girl&amp;#34; &amp;#34;ohmygirl&amp;#34; 파이썬의 +에 해당한다. 여러 문자열 합치기 string() julia&amp;gt; string(&amp;#34;oh&amp;#34;,&amp;#34;my&amp;#34;, &amp;#34;girl&amp;#34;) &amp;#34;ohmygirl&amp;#34; R의 paste0()에 해당한다. 문자열의 리스트의 아이템으로써</description></item><item><title>줄리아 그림에서 특정 데이터만 라벨 숨기는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2216/</link><pubDate>Fri, 10 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2216/</guid><description>코드 1 using Plots x = rand(30) y = rand(30) z = rand(30) plot(x) plot!(y) plot!(z) png(&amp;#34;result1&amp;#34;) 위와 같이 세 데이터에 대한 라벨 중 특정 데이터만 범례에서 나타나지 않게 하고 싶을 수 있다. label = &amp;quot;&amp;quot; plot(x, label = &amp;#34;&amp;#34;) plot!(y) png(&amp;#34;result2&amp;#34;) 그럴 땐 위와</description></item><item><title>줄리아 그림에 텍스트 넣는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2214/</link><pubDate>Mon, 06 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2214/</guid><description>코드 1 annotate!()를 사용하면 된다. 다음 코드는 브라운 모션에서 최대점과 최소점을 표시한 그림을 그려주는 코드다. using Plots cd(@__DIR__) data = cumsum(randn(100)) plot(data, color = :black, legend = :none) annotate!(argmax(data),</description></item><item><title>줄리아 그림에 한글 넣는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2212/</link><pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2212/</guid><description>환경 OS: Windows julia: v1.6.2 에러 julia&amp;gt; plot(data, color = :black, label = &amp;#34;값&amp;#34;, title = &amp;#34;브라운모션&amp;#34;) GKS: glyph missing from current font: 48652 GKS: glyph missing from current font: 46972 GKS: glyph missing from current font: 50868 GKS: glyph missing from</description></item><item><title>줄리아에서 파이썬처럼 문자열 다루는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2205/</link><pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2205/</guid><description>코드 1 2 3 julia&amp;gt; replace(&amp;#34;qwerty&amp;#34;, &amp;#34;q&amp;#34;=&amp;gt;&amp;#34;Q&amp;#34;) &amp;#34;Qwerty&amp;#34; julia&amp;gt; join(&amp;#34;qwerty&amp;#34;, &amp;#34;,&amp;#34;) &amp;#34;q,w,e,r,t,y&amp;#34; julia&amp;gt; split(&amp;#34;qwerty&amp;#34;, &amp;#34;&amp;#34;) 6-element Vector{SubString{String}}: &amp;#34;q&amp;#34; &amp;#34;w&amp;#34; &amp;#34;e&amp;#34; &amp;#34;r&amp;#34; &amp;#34;t&amp;#34; &amp;#34;y&amp;#34; 줄리아는 문자열 처리에 특출난 언어는 아니지만, 그 때문인지 파이썬을 많이 따라해서 쉽고 빠르게 배울 수 있다</description></item><item><title>줄리아에서 근사값 체크하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2203/</link><pubDate>Sun, 15 May 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2203/</guid><description>코드 비교연산자로써 $\approx$ 를 사용하면 두 값이 충분히 비슷할 때만 참을 반환한다. ≈ 는 $\TeX$에서와 마찬가지로 \approx 을 입력하고 탭(Tab)을 치면 쓸 수 있다. julia&amp;gt;</description></item><item><title>줄리아에서 딕셔너리와 페어</title><link>https://freshrimpsushi.github.io/ko/posts/2201/</link><pubDate>Wed, 11 May 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2201/</guid><description>코드 1 julia&amp;gt; d = Dict(&amp;#34;A&amp;#34;=&amp;gt;1, &amp;#34;B&amp;#34;=&amp;gt;2) Dict{String, Int64} with 2 entries: &amp;#34;B&amp;#34; =&amp;gt; 2 &amp;#34;A&amp;#34; =&amp;gt; 1 julia&amp;gt; push!(d,(&amp;#34;C&amp;#34;,3)) ERROR: MethodError: no method matching push!(::Dict{String, Int64}, ::Tuple{String, Int64}) julia&amp;gt; push!(d,&amp;#34;C&amp;#34; =&amp;gt; 3) Dict{String, Int64} with 3 entries: &amp;#34;B&amp;#34; =&amp;gt; 2 &amp;#34;A&amp;#34; =&amp;gt; 1 &amp;#34;C&amp;#34; =&amp;gt; 3 julia&amp;gt; typeof(&amp;#34;C&amp;#34; =&amp;gt; 3) Pair{String, Int64} 줄리아의 딕셔너리dictiona</description></item><item><title>줄리아에서 .mat처럼 데이터를 저장하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2199/</link><pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2199/</guid><description>개요 JLD.jl는 줄리아를 사용하면서 생기는 임시 데이터들을 저장할 수 있도록 해주는 패키지다1. 퓨어 줄리아 프로젝트를 하면서 데이터의 입출력이 번거롭다면</description></item><item><title>줄리아의 반복문에서 인덱스와 값을 동시에 참조하는 방법</title><link>https://freshrimpsushi.github.io/ko/posts/2197/</link><pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2197/</guid><description>코드 1 Base.Iterators.enumerate() 는 파이썬과 같이 배열의 인덱스와 값을 동시에 참조할 수 있는 반복자iterator를 반환한다. julia&amp;gt; x = [3,5,4,1,2] 5-element Vector{Int64}: 3 5 4 1 2 julia&amp;gt; for (idx, value) in enumerate(x) println(&amp;#34;x[$idx]: $value&amp;#34;) end x[1]: 3 x[2]: 5</description></item><item><title>줄리아에서의 심볼</title><link>https://freshrimpsushi.github.io/ko/posts/2195/</link><pubDate>Fri, 29 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2195/</guid><description>개요 줄리아를 처음 접하면서 적잖이 당황할 수 있는 것이 바로 심볼symbol 자료형이다. 심볼은 맨 앞에 :을 붙여서 사용하며, 어떤 내부 데이터도 없이 그 이름 그 자</description></item><item><title>줄리아에서 배열의 원소들이 어떤 리스트에 속하는지 체크하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2193/</link><pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2193/</guid><description>가이드 1 julia&amp;gt; x = rand(&amp;#39;a&amp;#39;:&amp;#39;c&amp;#39;, 10) 10-element Vector{Char}: &amp;#39;a&amp;#39;: ASCII/Unicode U+0061 (category Ll: Letter, lowercase) &amp;#39;a&amp;#39;: ASCII/Unicode U+0061 (category Ll: Letter, lowercase) &amp;#39;b&amp;#39;: ASCII/Unicode U+0062 (category Ll: Letter, lowercase) &amp;#39;c&amp;#39;: ASCII/Unicode U+0063 (category Ll: Letter, lowercase) &amp;#39;b&amp;#39;: ASCII/Unicode U+0062 (category Ll: Letter, lowercase) &amp;#39;c&amp;#39;: ASCII/Unicode U+0063 (category Ll: Letter, lowercase) &amp;#39;c&amp;#39;: ASCII/Unicode U+0063 (category Ll: Letter, lowercase) &amp;#39;c&amp;#39;: ASCII/Unicode U+0063 (category Ll: Letter, lowercase) &amp;#39;b&amp;#39;: ASCII/Unicode U+0062</description></item><item><title>줄리아에서 고차원 배열 직접 정의하는 방법</title><link>https://freshrimpsushi.github.io/ko/posts/3223/</link><pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3223/</guid><description>설명 1차원 배열(벡터)은 다음과 같이 정의한다. julia&amp;gt; A = [1; 2; 3] 3-element Vector{Int64}: 1 2 3 여기서 ;는 첫번째 차원을 기준으로 다음 성분으로 넘어간다는 의미를 갖는다. 이의 일반</description></item><item><title>줄리아에서 우아한 반복문을 사용하는 방법</title><link>https://freshrimpsushi.github.io/ko/posts/2191/</link><pubDate>Thu, 21 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2191/</guid><description>가이드 while while 문은 여타 언어들과 다를 게 없다. julia&amp;gt; while x &amp;lt; 10 x += 1 print(&amp;#34;$x - &amp;#34;) end 1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9 - 10 - for julia&amp;gt; for i in 1:10 print(&amp;#34;$i - &amp;#34;) end 1 - 2 - 3 - 4 - 5</description></item><item><title>줄리아 패키지 관리 모드에서 사용가능한 명령어 목록</title><link>https://freshrimpsushi.github.io/ko/posts/3217/</link><pubDate>Sun, 10 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3217/</guid><description>설명 줄리아 REPL에서 오른쪽 각괄호 ]를 입력하면 패키지 관리 모드로 전환할 수 있다. 패키지 관리 모드에서 사용가능한 명령어는 다음과 같다. 명령어 기능 add foo foo</description></item><item><title>줄리아에서 npy 파일 불러오는 방법</title><link>https://freshrimpsushi.github.io/ko/posts/3215/</link><pubDate>Wed, 06 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3215/</guid><description>설명 위 사진은 파이썬에서 팬텀 $f$의 라돈 변환 $\mathcal{R}f$를 계산하고, 이를 *.npy 파일로 저장하는 과정을 찍은 것이다. 줄리아에서 이 파일을 불</description></item><item><title>줄리아에서 히트맵 위에 플랏 겹쳐서 그리는 방법</title><link>https://freshrimpsushi.github.io/ko/posts/3213/</link><pubDate>Sat, 02 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3213/</guid><description>코드 우리가 $(5,5)$ 배열의 히트맵 위에 $0$부터 $2\pi$까지의 사인 곡선을 그리고 싶다고 하자. 다음과 같은 코드로 짜고 싶겠지만 그림에서 보이듯 원하는 대로 출력</description></item><item><title>줄리아에서 plot에 tex 사용하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2180/</link><pubDate>Wed, 30 Mar 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2180/</guid><description>코드 1 LaTeXStrings 라이브러리를 부르고 L&amp;quot;...&amp;quot; 과 같이 문자열 앞에 L을 적어주면 된다. @time using Plots @time using LaTeXStrings plot(0:0.1:2π, sin.(0:0.1:2π), xlabel = L&amp;#34;x&amp;#34;, ylabel</description></item><item><title>줄리아에서 서로 다른 크기의 벡터 성분 별로 연산하는 방법</title><link>https://freshrimpsushi.github.io/ko/posts/3207/</link><pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3207/</guid><description>설명 julia&amp;gt; x = [1 2 3] 1×3 Matrix{Int64}: 1 2 3 julia&amp;gt; y = [1 2 3 4] 1×4 Matrix{Int64}: 1 2 3 4 julia&amp;gt; x .+ y ERROR: DimensionMismatch 위와 같이 크기가 다른 두 벡터는 기본적으로 점별 연산을 할 수 없다. 이를 직접 구현</description></item><item><title>줄리아에서 그림 배경 투명하게 출력하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2173/</link><pubDate>Wed, 16 Mar 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2173/</guid><description>코드 1 브라우저를 다크모드로 보면 확실히 배경이 투명하게 출력되었음을 확인할 수 있다. background_color 옵션에 :transparent 심볼을 넣어주면 된다. *.png로는 잘 저장하지만 *.pd</description></item><item><title>줄리아에서 곡선에서부터 특정한 값까지/두 곡선 사이/폐곡선 내부 색칠하는 방법</title><link>https://freshrimpsushi.github.io/ko/posts/3203/</link><pubDate>Sun, 13 Mar 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3203/</guid><description>특정한 값까지 칠하기1 plot()의 속성으로 fillrange=a, fillalpha=b, fillcolor=:color를 사용하면, 플랏된 곡선에서부터 값 a까지 :color색깔을 b의 투</description></item><item><title>줄리아에서 ==과 ===의 차이점</title><link>https://freshrimpsushi.github.io/ko/posts/2157/</link><pubDate>Sat, 12 Feb 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2157/</guid><description>코드 1 ==는 값이 같은지를 비교하고, ===는 비교할 값이 가변mutable인지 아닌지에 따라 다르게 작동한다. Mutable: 두 항이 같은 오브젝트인지 확인한다. 다시</description></item><item><title>줄리아에서 비트 배열 반전시키는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2149/</link><pubDate>Thu, 27 Jan 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2149/</guid><description>코드 1 아주 간단한데 부정 연산 !과 ~을 그냥 단항 연산이 아니라 함수로 보고 !. 혹은 ~.을 취하는 실수를 많이 한다. .!이나 .~으로 쓰면 된다. julia&amp;gt; a = rand(1,10) .&amp;lt; 0.5 1×</description></item><item><title>줄리아에서 file.choose()처럼 대화창 열어서 파일 선택하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2143/</link><pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2143/</guid><description>코드 1 using Gtk file_name = open_dialog(&amp;#34;파일 열기&amp;#34;) 첫번째 인수로 주어지는 문자열은 대화창의 타이틀이다. 실행하면 다음과 같이 &amp;ls</description></item><item><title>줄리아에서 소수점 아래 특정 자리에서 반올림하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2133/</link><pubDate>Sun, 26 Dec 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2133/</guid><description>코드 사실 줄리아는 문자열 포맷 등이 아주 편리한 언어는 아니다. 콘솔에 출력할 때 문자열 자체 기능을 사용하는 방법도 있지만 round() 함수의 기본 옵션인 digits를 사용</description></item><item><title>줄리아에서 히트맵 색 범위 지정하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2126/</link><pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2126/</guid><description>코드 1 히트맵을 그릴 때 수치에 따라 값의 스케일이 고정되지 않으면 곤란할 때가 있다. 기본 히트맵 함수에서 clim 옵션을 통해 색의 범위를 고정할 수 있다. using Plots cd(@__DIR__) heatmap(rand(4,4)); png(&amp;#34;1.png&amp;#34;) heatmap(rand(4,4), clim</description></item><item><title>줄리아에서 zfill() 사용하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2124/</link><pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2124/</guid><description>개요 1 파이썬에서 zfill()은 사실 문자열 클래스의 메소드로써, 좌측을 0으로 채워주는 기능을 가지고 있다. 줄리아에서는 이보다 범용적이고 쓰임새가 많은</description></item><item><title>줄리아에서 구조체 속성 확인하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2120/</link><pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2120/</guid><description>코드 propertynames() propertynames() 함수로 확인하면 된다1. 줄리아에는 클래스가 없고 구조체만 있으니2 이 함수로 리턴되는 모든 심볼들은 정확히 프로퍼티들만의 이름들이다. 다음은 Graphs 패키</description></item><item><title>줄리아에서 도함수 구하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/3135/</link><pubDate>Thu, 28 Oct 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3135/</guid><description>개요1 이름은 Calculus.jl인데 적분은 지원하지 않는다. 머신러닝등에서 말하는 자동 미분이 필요하다면 Ztgote.jl 패키지를 참고하자. 일변수 함수의 미분 도함</description></item><item><title>줄리아에서 특정 값으로 채운 배열 만드는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2101/</link><pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2101/</guid><description>코드 fill() 함수를 사용하면 된다. R에서의 rep() 함수와 비슷한 기능을 한다. julia&amp;gt; fill(1, 4) 4-element Vector{Int64}: 1 1 1 1 julia&amp;gt; fill(false, 2, 3) 2×3 Matrix{Bool}: 0 0 0 0 0 0 julia&amp;gt; fill(3.14, 2, 3, 2) 2×3×2 Array{Float64, 3}: [:, :, 1] = 3.14</description></item><item><title>줄리아에서 shp 파일 읽는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2097/</link><pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2097/</guid><description>코드 위와 같이 XsDB_주거인구_100M_TM.shp라는 shp 파일을 읽어들이는 코드는 다음과 같다. using Shapefile cd(@__DIR__) path = &amp;#34;XsDB_주거인구_100</description></item><item><title>줄리아에서 소수점 아래 버리고 정수형으로 바꾸는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2095/</link><pubDate>Mon, 11 Oct 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2095/</guid><description>요약 trunc 함수의 첫번째 인수로써 Int 를 넣으면 된다. 코드 julia&amp;gt; @time for t in 1:10^8 Int64(ceil(t/1000)) end 0.189653 seconds julia&amp;gt; @time for t in 1:10^8 trunc(Int64, ceil(t/1000)) end 0.128472 seconds 두 반복문은 정확히 같은 기능을 하지만 1.5배 정도의 속도차</description></item><item><title>줄리아에서 데이터프레임의 열 이름 바꾸는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2093/</link><pubDate>Thu, 07 Oct 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2093/</guid><description>개요 rename!() 함수로 바꾸면 된다1. 문자열의 리스트를 줘서 한번에 바꾸는 방법도 있고, 개별적으로 바꾸는 방법도 있다. 코드 using DataFrames df = DataFrame(rand(1:9, 10, 3), :auto) rename!(df, [&amp;#34;X&amp;#34;, &amp;#34;Y&amp;#34;, &amp;#34;Z&amp;#34;]) rename!(df, :X =&amp;gt; :A) 실행 시</description></item><item><title>줄리아에서 NearstNeighbors.jl로 빠르게 거리 계산하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2088/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2088/</guid><description>개요 $n$ 개의 좌표끼리 거리를 계산하는데, 행렬을 만들 필요까지는 없고 단순히 거리만 계산하면 되는 경우 다차원 탐색에 유리한 자료구조인 k-d 트리1를 사용해 속도를 높</description></item><item><title>줄리아에서 2차원 배열 csv 파일로 출력하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2073/</link><pubDate>Sat, 28 Aug 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2073/</guid><description>코드 using CSV, DataFrames A = rand(1:10, 10) B = zeros(10) AB = DataFrame(hcat(A,B), [&amp;#34;A&amp;#34;, &amp;#34;B&amp;#34;]) CSV.write(&amp;#34;AB.csv&amp;#34;, AB) CSV 패키지의 write 함수를 통해 간단하게 2차원 배열을 출력할 수 있다. A, B는 1차원 배열로, hcat 함수로 묶어 데이터프레임으</description></item><item><title>줄리아 변수 이름에 그리스 문자, 첨자 쓰는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2065/</link><pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2065/</guid><description>개요 줄리아에서는 변수 이름으로 유니코드(UTF-8)을 허용한다. 따라서 그리스 문자는 물론 윗첨자, 아랫첨자, 심지어는 한글이나 이모지까지 쓸 수 있다. 굳</description></item><item><title>줄리아에서 변수의 값을 편리하게 출력하는 법, 보간법</title><link>https://freshrimpsushi.github.io/ko/posts/2041/</link><pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2041/</guid><description>개요 줄리아의 편의 기능인 보간법interpolation에 대해 설명한다. 인터폴레이션을 잘 이용하면 출력문을 쉽고 깔끔하게 쓸 수 있어 아주 편리하다. 수치</description></item><item><title>윈도 cmd, powershell에서 줄리아 사용하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2036/</link><pubDate>Tue, 15 Jun 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2036/</guid><description>가이드 Step 0. julia 1.6 이상 버전 설치 1.6 버전 이상부터는 인스톨 과정에서 환경변수에 넣을 수 있다. 표시된 옵션을 체크하고 설치하면 된다. 구버전을 사용하고 있다면 1.6 이상</description></item><item><title>줄리아에서의 메타 프로그래밍</title><link>https://freshrimpsushi.github.io/ko/posts/2024/</link><pubDate>Sat, 22 May 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2024/</guid><description>코드 1 줄리아에서는 메타 프로그래밍을 언어 차원에서 지원한다. 다음은 문자열을 코드 그 자체로 읽고 실행한 결과다. julia&amp;gt; text = &amp;#34;f(x) = 2x + 1; f(2)&amp;#34; &amp;#34;f(x) = 2x + 1; f(2)&amp;#34; julia&amp;gt; code = Meta.parse(text) :($(Expr(:toplevel,</description></item><item><title>줄리아에서 배열 Flatten 하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2022/</link><pubDate>Tue, 18 May 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2022/</guid><description>코드 vec() 함수를 쓰면 된다. julia&amp;gt; A = rand(0:9, 3,4) 3×4 Array{Int64,2}: 6 8 7 3 2 9 3 2 5 0 6 7 julia&amp;gt; vec(A) 12-element Array{Int64,1}: 6 2 5 8 9 0 7 3 6 3 2 7 사람이 생각하기로, 사람에게 보이기로는 똑같이 1</description></item><item><title>줄리아에서 거리 행렬 계산 최적화하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2020/</link><pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2020/</guid><description>결론 $n$ 개의 좌표끼리 거리를 계산한다고 하자. 모든 좌표끼리 계산할 필요가 없다면 그룹을 나누어 직사각 거리 행렬을 만들면 된다. 직사각 거리행렬은 pairwise() 함수로 쉽고 빠</description></item><item><title>줄리아에서 가중치를 주고 랜덤 샘플링 하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2018/</link><pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2018/</guid><description>개요 줄리아에서 R에서의 sample()이나 파이썬 패키지 numpy의 random.choice()와 같은 역할을 하는 함수인 sample()과 Weights 함</description></item><item><title>줄리아에서 문자와 정수의 이퀄 오퍼레이터 == 속도 비교</title><link>https://freshrimpsushi.github.io/ko/posts/2016/</link><pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2016/</guid><description>결론 배열의 각 원소를 Equal Operator ==를 통해 비교하면 정수보다 Char가 빠르다. 속도 비교 julia&amp;gt; integer = rand(1:5, N); print(typeof(integer)) Array{Int64,1} julia&amp;gt; character = rand([&amp;#39;S&amp;#39;,&amp;#39;E&amp;#39;,&amp;#39;I&amp;#39;,&amp;#39;R&amp;#39;,&amp;#39;D&amp;#39;], N); print(typeof(character)) Array{Char,1} julia&amp;gt; @time integer .== 1; 0.009222 seconds (6 allocations: 1.196 MiB) julia&amp;gt; @time character .== &amp;#39;S&amp;#39;; 0.005266 seconds (7</description></item><item><title>줄리아 패키지 설치 시 \General\registry.toml: No such file or directory 해결</title><link>https://freshrimpsushi.github.io/ko/posts/2069/</link><pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2069/</guid><description>에러 ERROR: SystemError: opening file &amp;quot;C:\\Users\\rmsms\\.julia\\registries\\General\\registry.toml&amp;quot;: No such file or directory 원인 사람 정말 열 받게 하는 에러인데, 말 그대로 해당 경로에 Registry.toml 파일이 없어서 일어나는 에러다. 해결법 C:\Users\사용자이름\</description></item><item><title>윈도우즈에서 줄리아 최신 버전 설치하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/2067/</link><pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2067/</guid><description>가이드 줄리아 버전 1.10 이후 터미널에서 위와 같이 winget install julia -s msstore 커맨드를 입력하면 된다. 줄리아 버전 1.10 이전 Step 1. 줄리아 설치 줄리아 다운로드 페이지에서 설치 파일을 받고</description></item><item><title>줄리아에서 16진법 RGB 코드(HEX) 사용하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/1921/</link><pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1921/</guid><description>코드 줄리아에서 색깔을 다루기 위해 제공되는 패키지는 Colors.jl이다. 시각화 패키지인 Plots.jl을 불러오면 Colors.jl 내의 기능도 같이 사용할 수 있다.</description></item><item><title>줄리아에서 데이터프레임과 2차원배열 간 변환 방법</title><link>https://freshrimpsushi.github.io/ko/posts/1930/</link><pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1930/</guid><description>코드 Matrix(df) 혹은 Array(df) 함수를 통해 데이터프레임을 같은 크기의 배열로 변환할 수 있다. 배열을 데이터프레임으로 만들 땐 DataFrmae(array, :auto)를 사용한다. 예전에는 convert 함수를 사용</description></item><item><title>줄리아에서 *.csv 파일 읽어들이는 법</title><link>https://freshrimpsushi.github.io/ko/posts/1923/</link><pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1923/</guid><description>가이드 구버전 julia v1.5.0에서는 다음과 같이 *.csv파일을 읽었다. 사실 줄리아는 아직 데이터 입력 면에서 특출나게 편리한 언어는 아니다. 그래도 빠른 속도</description></item><item><title>윈도우즈에서 줄리아 병렬연산 시 사용하는 쓰레드 수 바꾸는 법</title><link>https://freshrimpsushi.github.io/ko/posts/1933/</link><pubDate>Sat, 23 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1933/</guid><description>가이드 줄리아에서는 병렬 연산을 일상적으로 사용하기 때문에 경우에 따라서는 컴퓨터의 모든 소스를 계산에 집중할 필요가 있다. 이때 쓰레드 수를 바꾸는 방법은 여러가</description></item><item><title>줄리아에서 실행되는 코드 파일의 위치 확인하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/1935/</link><pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1935/</guid><description>가이드 줄리아를 사용하는 사람이라면 서버를 포함해서 여러 운영 체제나 여러 컴퓨터를 사용하는 것에 익숙할 가능성이 높다. 만약 파일 입출력이 있다면 개발환경이 달라</description></item><item><title>리눅스에서 줄리아 병렬연산 시 사용하는 쓰레드 수 바꾸는 법</title><link>https://freshrimpsushi.github.io/ko/posts/1937/</link><pubDate>Thu, 21 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1937/</guid><description>가이드 줄리아에서는 병렬 연산을 일상적으로 사용하기 때문에 경우에 따라서는 컴퓨터의 모든 소스를 계산에 집중할 필요가 있다. 이때 쓰레드 수를 바꾸는 방법은 여러가</description></item><item><title>줄리아에서 합성함수 사용하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/1942/</link><pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1942/</guid><description>코드 julia&amp;gt; f(x) = 2x + 1 f (generic function with 1 method) julia&amp;gt; g(x) = x^2 g (generic function with 1 method) julia&amp;gt; (g ∘ f)(3) 49 설명 줄리아에서 함수의 합성은 프로그래밍적으로는 파이프 오퍼레이터와 흡사하다. 이러한 합성</description></item><item><title>줄리아에서 움짤 찌는 법</title><link>https://freshrimpsushi.github.io/ko/posts/1863/</link><pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1863/</guid><description>코드 원래 생새우초밥집에서는 이보다는 훨씬 자세한 설명을 추가하는 편이지만, 줄리아에서 움짤을 찌는 게 얼마나 쉬운지를 강조하기 위해 가능한한 짧게 설명하도록 하</description></item><item><title>줄리아에서 거리 행렬 계산하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/1799/</link><pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1799/</guid><description>개요 거리 행렬distance matrix은 파티클 다이나믹스particle dynamics 및 무빙 에이전트moving Agent 기반 시뮬레이션 등에 흔히 사용되나, 막상</description></item><item><title>줄리아에서 빈 배열 만드는 법</title><link>https://freshrimpsushi.github.io/ko/posts/1797/</link><pubDate>Thu, 19 Nov 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1797/</guid><description>코드 크기 지정 julia&amp;gt; empty = Array{Float64, 2}(undef, 3, 4) 3×4 Array{Float64,2}: 3.39519e-313 3.18299e-313 4.66839e-313 1.061e-313 4.03179e-313 5.51719e-313 1.6976e-313 4.24399e-314 2.97079e-313 4.66839e-313 7.00259e-313 5.0e-324 위의 코드를 실행시키면 빈 배열이 만들어진다. 간혹 1.76297e-315처럼 이상한 값이</description></item><item><title>리눅스에서 줄리아 최신 버전 설치하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/1511/</link><pubDate>Mon, 17 Feb 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1511/</guid><description>가이드 줄리아 버전 1.10 이후 터미널에서 위와 같이 curl -fsSL https://install.julialang.org | sh 커맨드를 입력하면 된다. 줄리아 버전 1.10 이전 Step 1. 줄리아 다운로드 Generic Linux Binaries for x86에서 자기 CPU의 비트</description></item><item><title>줄리아에서 병렬처리 하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/1474/</link><pubDate>Sat, 08 Feb 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1474/</guid><description>코드 원래 생새우초밥집에는 상세한 설명을 포함하는데, 줄리아가 병렬처리를 얼마나 편하게 할 수 있는지 강조하기 위해 굳이 설명을 생략하려 한다. using Base.Threads for i in 1:10 println(i^2) end</description></item><item><title>줄리아의 강력한 편의 기능, 매크로</title><link>https://freshrimpsushi.github.io/ko/posts/1454/</link><pubDate>Wed, 15 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1454/</guid><description>개요 매크로는 줄리아로 코딩할 때 편의를 주는 기능들로써, 스코프 앞에 두어 실행한다. 예를 들어 자신의 프로그램이 얼마나 많은 시간을 소비하는지 알고 싶다면 다음과</description></item><item><title>줄리아에서 파이프 오퍼레이터 사용하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/1450/</link><pubDate>Sat, 11 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1450/</guid><description>개요 줄리아는 데이터를 다루는데에서 강점을 내세우는만큼 파이프라인 연산자를 지원한다. 코드 julia&amp;gt; (1:5) .|&amp;gt; (x -&amp;gt; sqrt(x+2)) .|&amp;gt; sin |&amp;gt; minimum 0.4757718381527513 julia&amp;gt; minimum(sin.((x -&amp;gt; sqrt(x+2)).(1:5))) 0.4757718381527513 위의 예제 코드는 배열 $[1,2,3,4,5]$ 를 $\sqrt{x +</description></item><item><title>줄리아에서의 람다식</title><link>https://freshrimpsushi.github.io/ko/posts/1448/</link><pubDate>Tue, 07 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1448/</guid><description>개요 줄리아에서 람다식은 다음과 같이 정의된다. (x -&amp;gt; 3x^2 - 2x + 3)(1) 이는 익명함수 $\lambda : \mathbb{Z} \to \mathbb{Z}$ 를 다음과 같이 정의하고, 거기에 $1$ 을 대입해서 $4$ 라는 함수값을 얻은 것에</description></item><item><title>줄리아에서 이미지 불러오고 행렬로 변환 저장하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/1446/</link><pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1446/</guid><description>코드 using Images cd(&amp;#34;C:/Users/rmsms/OneDrive/examples&amp;#34;) pwd() example = load(&amp;#34;example.jpg&amp;#34;) typeof(example) size(example) gray1 = Gray.(example) typeof(gray1) size(gray1) M = convert(Array{Float64},gray1) typeof(M) size(M) colorview(Gray, M.^(1/2)) save(&amp;#34;rgb.png&amp;#34;, colorview(RGB, example)) save(&amp;#34;gray1.png&amp;#34;, colorview(Gray, gray1)) save(&amp;#34;gray2.png&amp;#34;, colorview(Gray, transpose(gray1))) save(&amp;#34;gray3.png&amp;#34;, colorview(Gray, M.^(1/2))) 예제 코드를 위에서부터 간략하게 이해해보자: cd() : Change Directory, 작업 경로를 원하는 곳으로</description></item><item><title>줄리아에서 이미지 크기 변경하는 방법</title><link>https://freshrimpsushi.github.io/ko/posts/1466/</link><pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1466/</guid><description>이미지 크기 변경 Images 패키지의 imresize를 사용하면 된다. 함수 이름이 매트랩과 같다. imresize(X, ratio=a): 배열 X를 a배만큼 조정한 이미지를 반환한다. 매트랩에서와는 다</description></item><item><title>줄리아에서 이미지 배열을 회전하는 방법</title><link>https://freshrimpsushi.github.io/ko/posts/1462/</link><pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1462/</guid><description>이미지 회전 imrotate(X, theta) : 배열 X를 theta라디안만큼 회전시킨다. 여기서 주의해야할 점은 각도의 단위가 도($^{\circ})$인 매트랩과 달리 각도의 단위가</description></item><item><title>줄리아에서 2차원 배열 연산에 관한 함수들</title><link>https://freshrimpsushi.github.io/ko/posts/1460/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1460/</guid><description>$A = \begin{pmatrix} 1 &amp;amp; 2 &amp;amp; 1 \\ 0 &amp;amp; 3 &amp;amp; 0 \\ 2 &amp;amp; 3 &amp;amp; 4\end{pmatrix}$라고 하자. 전치행렬 julia&amp;gt; A =[1 2 1; 0 3 0; 2 3 4] 3×3 Array{Int64,2}: 1 2 1 0 3 0 2 3 4 julia&amp;gt; transpose(A) 3</description></item><item><title>줄리아에서 배열을 히트맵 이미지로 출력 저장하는 방법</title><link>https://freshrimpsushi.github.io/ko/posts/1459/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1459/</guid><description>Heatmap Plots 패키지의 heatmap 함수를 쓰면 2차원 배열을 히트맵 이미지로 출력할 수 있고, savefig 함수로 해당 이미지를 저장할 수 있다. @__DIR__은 줄리아 코드 파일의 위치를 알</description></item><item><title>줄리아에서 집합 자료형과 연산자</title><link>https://freshrimpsushi.github.io/ko/posts/1442/</link><pubDate>Sun, 29 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1442/</guid><description>개요 줄리아에서는 파이썬과 마찬가지로 집합 자료형을 지원한다. 원래 집합 자료형이 그렇듯 쓰는 사람은 요긴하게 쓰고 안 쓰는 사람은 일절 사용하지 않는데, 줄리아는</description></item><item><title>줄리아에서 배열의 슬라이싱과 인덱싱</title><link>https://freshrimpsushi.github.io/ko/posts/1437/</link><pubDate>Thu, 26 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1437/</guid><description>개요 줄리아는 R, 파이썬, 매트랩 의 장점이 모두 섞여있는 언어다. 배열은 프로그래밍의 근간이 되는만큼 그 활용에서 여러 언어들의 흔적을 찾아볼 수 있다. 코드 행렬 julia&amp;gt;</description></item><item><title>줄리아에서 배열을 평행이동시키는 방법</title><link>https://freshrimpsushi.github.io/ko/posts/1453/</link><pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1453/</guid><description>설명 circshifr(A, (n,m))를 사용하면 배열 A의 행을 $n$칸씩 아래로 밀고, 열을 $m$칸씩 오른쪽으로 민다. (n,m)은 정수로 이루어진 튜플이어야하고 당연히 음</description></item><item><title>줄리아에서 벡터를 생성하는 여러가지 방법</title><link>https://freshrimpsushi.github.io/ko/posts/1452/</link><pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1452/</guid><description>코드 julia&amp;gt; x1=[1 2 3] 1×3 Array{Int64,2}: 1 2 3 julia&amp;gt; x2=[1, 2, 3] 3-element Array{Int64,1}: 1 2 3 julia&amp;gt; x3=[i for i in 1:3] 3-element Array{Int64,1}: 1 2 3 julia&amp;gt; x4=[i for i in 1:3:10] 4-element Array{Int64,1}: 1 4 7 10 julia&amp;gt; x5=[i for i in 1:3:11] 4-element Array{Int64,1}: 1 4 7 10 x1은 2차원 배열이다. 생겨</description></item><item><title>줄리아에서 패키지 설치하고 사용하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/1416/</link><pubDate>Sun, 08 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1416/</guid><description>방법 1 using LinearAlgebra using Pkg Pkg.add(&amp;#34;Plots&amp;#34;) Pkg.add(&amp;#34;Distributions&amp;#34;) using Plots 위의 코드는 LinearAlgebra 패키지와 Pkg 패키지를 불러오며, .add() 함수를 통해 Plots, Distribution 패키지를 설치하는 코드를 나타낸다. 패키지를 불러오는 키워드 usin</description></item><item><title>줄리아의 타입과 애노테이션</title><link>https://freshrimpsushi.github.io/ko/posts/1379/</link><pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1379/</guid><description>코드 julia&amp;gt; typeof(0) Int64 julia&amp;gt; typeof(0.0) Float64 julia&amp;gt; typeof(0 == 0.0) Bool julia&amp;gt; typeof(Bool) DataType julia&amp;gt; typeof(NaN) Float64 julia&amp;gt; typeof(Inf) Float64 julia&amp;gt; typeof(&amp;#39;O&amp;#39;) Char julia&amp;gt; typeof(&amp;#34;Ohmygirl&amp;#34;) String julia&amp;gt; typeof(&amp;#34;O&amp;#34;) String 줄리아에는 온갖 타입들이 구현되어있다. $0$ 과 $0.0$ 은 같은 $0$ 이지만 다른 타입을 가지며, 보다</description></item><item><title>줄리아 프로그래밍 언어</title><link>https://freshrimpsushi.github.io/ko/posts/1374/</link><pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1374/</guid><description>개요 줄리아는 MIT에서 개발되어 2012년 공개된 프로그래밍 언어로써, 생산성이 높으면서도 속도가 높은 언어를 지향한다. C나 포트란에 준하는 속도를 내면서</description></item></channel></rss>