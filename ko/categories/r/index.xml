<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>R on 생새우초밥집</title><link>https://freshrimpsushi.github.io/ko/categories/r/</link><description>Recent content in R on 생새우초밥집</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Wed, 23 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://freshrimpsushi.github.io/ko/categories/r/index.xml" rel="self" type="application/rss+xml"/><item><title>R 파일 읽기나 경로 변경 시 Error: 'C:\U' used without hex digits in character string starting 'C:\U' 해결</title><link>https://freshrimpsushi.github.io/ko/posts/1860/</link><pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1860/</guid><description>해결만을 위한다면 어떻게 수정하는지만 봐도 되는데, 원리를 알고 다시는 같은 에러를 겪고 싶지 않다면 모두 읽는 것을 추천한다. 에러 진단 가령 바탕화면에 위와 같이 exampe.csv</description></item><item><title>R에서 폴더 내부 파일 목록 가져오는 법</title><link>https://freshrimpsushi.github.io/ko/posts/1451/</link><pubDate>Mon, 13 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1451/</guid><description>코드 setwd(&amp;#34;F:\\dsr\\project&amp;#34;) getwd() list.files(getwd()) list.files(getwd(),pattern=&amp;#34;*.csv&amp;#34;) list.files()는 여러개의 파일로 나눠진 데이터를 취합하거나 메타 프로그래밍 등에 유용하게 쓰이는 함수다: path: 첫번째 인자로써 디렉터리</description></item><item><title>R 패키지 설치 시 Warning in installpackages lib = CProgram FilesRR-361library is not writable 해결</title><link>https://freshrimpsushi.github.io/ko/posts/1414/</link><pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1414/</guid><description>개요 R 을 처음 접하는, 그 중에서 프로그래밍은 고사하고 컴퓨터에 익숙하지조차 않지만 당장 R을 사용해야하는 사용자의 눈높이에 맞췄으므로 지나치게 설명이 자세할</description></item><item><title>R 에서 데이터 파일 빠르게 읽기 read_csv</title><link>https://freshrimpsushi.github.io/ko/posts/1270/</link><pubDate>Mon, 02 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1270/</guid><description>개요 R 은 기본적으로 csv 데이터를 읽는 함수로써 read.csv()를 제공하지만, 그냥 간편하게 쓰는 정도가 아니라 실전적인 분석을 하고 있다면 성능이 너무 떨어</description></item><item><title>R 에서 병렬처리하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/1266/</link><pubDate>Fri, 30 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1266/</guid><description>개요 R 이 속도 때문에 쓰는 언어는 아니지만, 빠른 속도가 필요할 때도 분명히 있을 것이다. 코드를 깔끔하게 잘 짜더라도 너무 오래 걸린다면 보통 병렬처리나 GPU를 동</description></item><item><title>R 에서 코드 실행 시간 재는 법, 벤치마크하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/1246/</link><pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1246/</guid><description>개요 매트랩R 은 분명 통계 분석에 특화되어 있는 프로그래밍 언어지만, 모든 언어가 그러하듯 속도에 관심이 없는 것은 아니다. 속도가 강점이 아니라고 해도 벤치마킹은</description></item><item><title>R 에서 ts 함수의 start, end 옵션과 window 함수에서 start, end 옵션의 차이점</title><link>https://freshrimpsushi.github.io/ko/posts/1242/</link><pubDate>Tue, 20 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1242/</guid><description>설명 R 로 시계열 데이터를 다루다보면 ts() 함수와 window() 함수를 자주 사용하게 된다. ts()는 R 이 받아들일 수 있도록 시계열 데이터를 만들 때 쓰고, window()는</description></item><item><title>R 에서 색 테두리 있는 점 찍는 법</title><link>https://freshrimpsushi.github.io/ko/posts/1237/</link><pubDate>Sun, 18 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1237/</guid><description>코드 점 도표에서 테두리의 색을 바꾸거나 내부를 칠하기 위해서는 다음의 옵션들을 바꿔주면 된다: pch: 심볼을 바꿔서 색을 칠한다. 21번부터 25번까지를 사용하면 된</description></item><item><title>R 에서 파이프 오퍼레이터 %>% 사용하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/1235/</link><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1235/</guid><description>개요 R 에서 %&amp;gt;%은 파이프 연산자pipe Operater 로써, 다른 연산자가 모두 그러하듯 이항연산을 한다. 파이프 연산자는 이름 그대로 어떤 값들이 파이프를 통과하</description></item><item><title>R 에서 오퍼레이터 %% 정의하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/1224/</link><pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1224/</guid><description>개요 R 에서는 함수를 정의할 때 아예 이항연산자로 정의할 수가 있다. 이미 R 에서 기본적으로 정의된 나눗셈의 나머지 %%, 몫 %/%, 내적 %*%, %o%나 포함관계 %in%, 그리고 파이프</description></item><item><title>R 에서 로그로그 스케일 그림 그리는 법</title><link>https://freshrimpsushi.github.io/ko/posts/1131/</link><pubDate>Tue, 25 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1131/</guid><description>좋지 않은 방법 win.graph(7,4); par(mfrow=c(1,2)) plot(pressure,main=&amp;#39;Pressure\&amp;#39;) y&amp;lt;-pressure[-1,]$pressure; logtemp&amp;lt;-log(y) x&amp;lt;-pressure[-1,]$temperature; logpress&amp;lt;-log(x) plot(logpress,logtemp,main=&amp;#39;log scale\&amp;#39;) 로그로그 스케일로 그림을 그리는 가장 쉬운 방법은 데이터 자체에 로그를 취하는 것이다. 만약 로그로그 플랏을 처음 그려본다면 이 방</description></item><item><title>R 에서 범례 넣는 법</title><link>https://freshrimpsushi.github.io/ko/posts/1129/</link><pubDate>Sun, 23 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1129/</guid><description>코드 데이터는 분석하는 것만큼이나 표현하는 것이 중요하다. 그림이 복잡할 수록 꼼꼼한 주석과 깔끔한 범례가 데이터를 이해하는데에 큰 도움을 준다. legend() 함수는 굉장히</description></item><item><title>R 에서 메타데이터, attr 참조하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/1127/</link><pubDate>Fri, 21 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1127/</guid><description>개요 R 에서 함수들을 사용하다보면 간혹 attr(,&amp;quot;something&amp;quot;)과 같은 데이터를 접할 때가 있다. Attribute는 말</description></item><item><title>R 에서 문자열의 벡터를 하나의 문자열로 합치는 법</title><link>https://freshrimpsushi.github.io/ko/posts/1125/</link><pubDate>Tue, 18 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1125/</guid><description>개요 R 은 데이터를 다루기에 무척 편리한 언어지만, 다른 프로그래밍 언어에도 익숙한 사람이라면 R 의 문자열이 다소 낯설 수 있다. C 혹은 파이썬과 달리 R 자체에서 지</description></item><item><title>R 에서 리스트를 참조하는 여러가지 방법</title><link>https://freshrimpsushi.github.io/ko/posts/1123/</link><pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1123/</guid><description>개요 R 은 데이터를 다루기 위해 정말 좋은 기능들을 많이 제공하는데, 그 중에서도 리스트는 R 을 사용하게 만드는 가장 큰 이유 중 하나다. 파이썬을 위시한 다른 언어에도</description></item><item><title>R 에서 최대값과 최소값의 위치 구하기</title><link>https://freshrimpsushi.github.io/ko/posts/1120/</link><pubDate>Fri, 14 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1120/</guid><description>코드 set.seed(150421) x&amp;lt;-sample(100,10); x which.max(x) which.min(x) 통계를 목적으로 데이터를 보다보면 최대값과 최소값이 무엇인지 아는것만 중요한게 아니라 그 게 몇번째 값인지를 파악하는 것도 필요한 경우가 많다. 특</description></item><item><title>R 에서 벡터끼리 내적 계산하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/1089/</link><pubDate>Mon, 03 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1089/</guid><description>코드 x&amp;lt;-1:10; x y&amp;lt;-(-1)^(1:10); y sum(x*y) x %*% y x %o% y R 에서 분석 혹은 시뮬레이션을 하다보면 가중치가 적용된 기댓값을 구할 일이 종종 있다. 물론 수식적으로 $\displaystyle \left&amp;lt; \mathbb{x}, \mathbb{y} \right&amp;gt; = \sum_{i=1}^{n} x_{i} y_{i}$ 는 아주 간</description></item><item><title>R 에서 데이터 프레임 열기준으로 정렬하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/1043/</link><pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1043/</guid><description>개요 R 에서 데이터를 정렬하는 것 자체는 sort() 함수를 사용하면 간단하게 할 수 있으나, 기본적으로 sort() 함수는 벡터만을 소팅한다. 그러나 실제로는 데이터 프레임의 수많은</description></item><item><title>R 에서 히스토그램 더 세밀하게 보는 법</title><link>https://freshrimpsushi.github.io/ko/posts/1035/</link><pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1035/</guid><description>코드 R에서는 hist() 함수를 통해 히스토그램을 쉽게 그려볼 수 있다. 이 때 계급의 크기는 R 이 알아서 판단하고 결정하는데, 좀 더 세밀하게 보기 위해서는 nclalss 옵션을 사용하면</description></item><item><title>R 에서 데이터 표준화하기 표준화된 잔차 보기</title><link>https://freshrimpsushi.github.io/ko/posts/1026/</link><pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1026/</guid><description>코드 R 은 통계에 특화된 언어인만큼 Z-score $\displaystyle z:= {{x - \mu} \over {\sigma}}$ 를 구해야할 일이 많다. 이 때 내장된 scale() 함수를 사용하면 편리하다. 예제로써 $\mathbb{x} = ( 1, \cdots , 10 )$ 이라는 벡터를 표</description></item><item><title>R 에서 현재 날짜 시간 확인하기</title><link>https://freshrimpsushi.github.io/ko/posts/1020/</link><pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1020/</guid><description>코드 R 뿐만이 아니라 프로그래밍 언어를 사용해야하는 많은 작업에서 로그를 작성하고 해당 시각에 대한 정보가 필요하다. R에서는 Sys.Date() 함수를 통해 날짜를 확인할 수 있으</description></item><item><title>R 에서 야코비 행렬 헤세 행렬 구하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/994/</link><pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/994/</guid><description>코드 R 에서 야코비 행렬과 헤세 행렬을 구하기 위해서는 numDeriv 패키지의 jacobian() 함수와 hessian() 함수를 사용한다. install.packages(&amp;#34;numDeriv&amp;#34;) library(numDeriv) f &amp;lt;- function(v) {c(v[1]^2 + v[2]^2 - 1, sin(pi*v[1]/2) + v[2]^3)} g &amp;lt;- function(v) {(v[1])^3+(v[2])^2} jacobian(f, c(1,1)) hessian(g, c(1,1)) 위 코드를 실행시킨</description></item><item><title>R 에서 복소수 사용하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/981/</link><pubDate>Tue, 16 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/981/</guid><description>개요 R 에는 복소수 자료형이 구현되어있다. 굳이 스스로 구현할 필요 없이 가져다 쓰기만 하면 된다. 사칙연산은 물론 복소수를 다룰 때 빠질 수 없는 여러가지 함수 역시 만</description></item><item><title>R 에서 정적분 구하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/977/</link><pubDate>Sun, 14 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/977/</guid><description>개요 R 에서 정적분을 구하기 위해선 integrate() 함수를 사용할 수 있다. 예를 들어 코드 $\displaystyle \int_{0}^{3} \left( x^2 + 4x + 1 \right) dx$ 과 $\displaystyle \int_{0}^{\infty} e^{-x} dx$ 은 다음과 같이 구할 수 있다. 특히 적분구간에는 inf</description></item><item><title>R 에서 미분계수 구하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/971/</link><pubDate>Fri, 12 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/971/</guid><description>개요 R 에서 미분계수를 구하기 위해선 numDeriv 패키지의 grad() 함수를 사용할 수 있다. 코드 예를 들어 $f(x) = x^2 + 4x + 1$ 과 $g(x) = e^{-x}$ 의 미분계수는 다음과 같이 구할 수 있다. install.packages(&amp;#34;numDeriv&amp;#34;) library(numDeriv) f&amp;lt;-function(x) {x^2</description></item><item><title>R 에서 현재 OS 정보 확인하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/947/</link><pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/947/</guid><description>개요 R 은 이래저래 리눅스에서도 사용할 일이 있이 많다. 대표적으로 빅데이터를 다루기 위해 하둡을 쓰는 경우가 있다. 물론 윈도우나 리눅스나 R 자체는 크게 다른 게 없</description></item><item><title>우분투에서 R 설치하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/946/</link><pubDate>Thu, 14 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/946/</guid><description>가이드 Step 1. Ctrl+Alt+T 를 눌러 콘솔창을 띄운다. Step 2. 콘솔창에 다음과 같이 입력한다. sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 관리자 권한이 필요하므로 사용자 계정의 암호를 입력해야한다. Step 3. 콘</description></item><item><title>R 에서 그래프 그릴 때 축 이름에 아래첨자 넣기</title><link>https://freshrimpsushi.github.io/ko/posts/905/</link><pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/905/</guid><description>코드 R 에서도 변수의 이름에 언더바 _를 넣는 것은 허용되지만, 그래프에서도 그렇게 나타낸다면 심하게 가독성이 떨어진다. expression() 함수를 아래와 같이 사용하면 축 이름에</description></item><item><title>R 에서 두 배열의 성분 비교하기</title><link>https://freshrimpsushi.github.io/ko/posts/842/</link><pubDate>Mon, 04 Feb 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/842/</guid><description>개요 R 은 데이터의 형태, 구조보단 그 내용에 관심이 많은 분야에서 많이 쓰이므로 그 비교 역시 유용하다. 포함관계 (전혀 중요하지는 않지만, 예제에서 A는 삼각수 $\displaystyle</description></item><item><title>R 에서 데이터 프레임의 열과 행 이름 바꾸기</title><link>https://freshrimpsushi.github.io/ko/posts/840/</link><pubDate>Sat, 02 Feb 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/840/</guid><description>개요 R 에서 데이터 프레임을 이용해 복잡한 코드를 짜다보면 디폴트로 정해주는 열 이름들이 헷갈려서 바꿔줘야 할 상황이 있다. names() 예제로써 위 데이터 프레임을 보면 별 다</description></item><item><title>R 에서 자료구조 뜯어보는 법</title><link>https://freshrimpsushi.github.io/ko/posts/720/</link><pubDate>Mon, 12 Nov 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/720/</guid><description>개요 R에서 여러가지 함수를 사용하다보면 아래와 같이 친절하게 결과가 출력되는 경우를 자주 볼 수 있게 된다. 문제는 이 결과를 그냥 보는 게 아니라 아웃풋으로써 받아서</description></item><item><title>R 에서 리스트 해체하기, 중복 성분 제거하기</title><link>https://freshrimpsushi.github.io/ko/posts/688/</link><pubDate>Sun, 23 Sep 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/688/</guid><description>개요 온갖가지 정제되지 않은 데이터를 상대할 일이 많은 R 에서 리스트 자료형은 데이터를 정리하는데에 특히 유용하다. 그러나 반대급부로 데이터에 접근하는 것이 조금</description></item><item><title>R 에서 그래프 그릴 때 사용하는 심볼들</title><link>https://freshrimpsushi.github.io/ko/posts/669/</link><pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/669/</guid><description>코드 각종 그래프 관련 함수에서 찍히는 점의 모양을 바꿀 때 pch 옵션을 사용한다. 위 그림은 특히 자주 쓰는 심볼들을 한 눈에 볼 수 있게 나타낸 것이다.쓸만한 게 많지만 특히</description></item><item><title>R 에서 그림에 문자열 찍는 법</title><link>https://freshrimpsushi.github.io/ko/posts/667/</link><pubDate>Sun, 02 Sep 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/667/</guid><description>코드 text() 함수를 통해 그래프에 문자열이 찍히도록 할 수 있다. 첫번째 옵션은 $x$ 축 좌표의 벡터, 두번째 옵션은 $y$ 축 좌표의 벡터, 세번째 옵션은 입력될 문자열의 벡터를 받</description></item><item><title>R 에서 수평선 수직선 그리는 법</title><link>https://freshrimpsushi.github.io/ko/posts/664/</link><pubDate>Thu, 30 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/664/</guid><description>예시 1. abline(h=0) 수평선을 긋는다. 2. abline(v=0) 수직선을 긋는다. 3. abline(0,3/4) $y$ 절편이 $0$ 이고 기울기가 $3/4$ 인 직선을 긋는다. 애초에 abline() 함수 자체가 $y=a+bx$ 의 계수인 $a,b$ 에서 이름을 따온 것이다.</description></item><item><title>R 에서 그래프 그리기</title><link>https://freshrimpsushi.github.io/ko/posts/662/</link><pubDate>Tue, 28 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/662/</guid><description>개요 R 은 다른 언어와 비교했을때 그래프의 표현이 아주 쉽다는 장점이 있다. 여타 통계 패키지와 비교하자면 쉬운 그림은 패키지가 빨라도 세세한 표현이 많아지면 R 이 편</description></item><item><title>R 에서 조건부로 데이터 필터링하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/659/</link><pubDate>Sun, 26 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/659/</guid><description>개요 R 이 주로 통계학에서 쓰이기 때문인지, 필요한 데이터를 골라내고 편집하는 기능은 타의 추종을 불허한다. 이러한 데이터의 핸들링에 익숙해지는 것은 조금 어렵지</description></item><item><title>R 에서 조건부 합 조건부 평균 구하기</title><link>https://freshrimpsushi.github.io/ko/posts/656/</link><pubDate>Thu, 23 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/656/</guid><description>개요 엑셀이라고 치면 sumif() 혹은 averageif() 함수가 필요한 상황이 가끔 있다.R 에선 그처럼 단순한 함수는 없지만, 압도적인 상위호환으로 apply 계열 함수가 있다. 이 함수를 꼼꼼하게</description></item><item><title>R 에서 여러가지 분포함수</title><link>https://freshrimpsushi.github.io/ko/posts/578/</link><pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/578/</guid><description>설명 R 에서 특정 분포에 대한 함수들은 다음과 같은 접두어와 접미어의 조합으로 만들어진다. 접두 확률분포 $X$ 의 확률분포함수를 $f(x)$ 라고 하자. r-:랜덤 추출, 확률</description></item><item><title>R 에서 올림, 내림, 반올림, 자릿수 바꾸기</title><link>https://freshrimpsushi.github.io/ko/posts/577/</link><pubDate>Sat, 02 Jun 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/577/</guid><description>개요 ceiling() 함수는 올림 처리를, floor() 함수는 내림 처리를 해준다. 이런 함수들은 주로 통계를 다루는 R 에서는 필요 없어 보이지만 의외로 데이터 핸들링을 할 때 써먹기가 편하다</description></item><item><title>R 에서 문자열 다루기</title><link>https://freshrimpsushi.github.io/ko/posts/568/</link><pubDate>Fri, 25 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/568/</guid><description>개요 개발자들이 많이 사용하는 언어들에 비교하면 그 정도가 덜하지만, R 에서도 문자열을 다룰 일이 생각보다 많다. 데이터가 방대하고 제멋대로일수록 이런 사소한 테</description></item><item><title>R 에서 부트스트랩 함수 사용하는 법</title><link>https://freshrimpsushi.github.io/ko/posts/558/</link><pubDate>Thu, 17 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/558/</guid><description>개요 R 에서 부트스트랩을 시행하는 코드를 직접 짜볼 수도 있지만, 기본적으로 제공되는 함수를 이용할 수도 있다. 그 과정은 아래와 같이 단순하지만 다른 함수들과 사용</description></item><item><title>R 에서 멱함수 그래프 그리는 법</title><link>https://freshrimpsushi.github.io/ko/posts/538/</link><pubDate>Wed, 09 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/538/</guid><description>개요 간단하게 일변량 함수의 그래프를 그리는 법을 소개한다. 통계학에서 적절한 예로써 멱함수를 그려보자. 정의 귀무가설 $H_{0} : \theta \in \Theta_{0}$ 과 대립가설 $H_{1} : \theta \in \Theta_{1}$ 에 대해</description></item><item><title>R 에서 자리수 출력 제한 없애기</title><link>https://freshrimpsushi.github.io/ko/posts/528/</link><pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/528/</guid><description>개요 R 이 통계학을 위한 언어긴하지만 막상 R 콘솔은 데이터를 보는데 적합하지 않다. 그럼에도 불구하고 관측치가 수십만개에 달하는 빅데이터를 다룰 때나 핸들링이 잘</description></item><item><title>R 에서 NA 제거하기</title><link>https://freshrimpsushi.github.io/ko/posts/526/</link><pubDate>Sun, 29 Apr 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/526/</guid><description>개요 NA는 Not Available의 약자로, R 프로그래밍에선 주로 &amp;lsquo;결측값&amp;rsquo;을 의미한다. 일반적인 프로그래밍 언어에서의 nul</description></item><item><title>R 에서 범주형 데이터의 숫자를 숫자형 데이터로 바꾸기</title><link>https://freshrimpsushi.github.io/ko/posts/497/</link><pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/497/</guid><description>개요 숫자임에도 불구하고 범주형 자료로 읽혀서 연속형 데이터로 바꾸고 싶은데 생각대로 되지 않는 이들을 위한 팁이다. 이 포스트는 지면 대부분을 그 원리를 설명하기 위</description></item><item><title>R 에서 외부 데이터 불러오기</title><link>https://freshrimpsushi.github.io/ko/posts/496/</link><pubDate>Sun, 01 Apr 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/496/</guid><description>개요 R 은 기본적으로 통계학을 위해 태어난 언어기 때문에 데이터의 입력 역시 편리하게 되어있다. read.table(file, header = FALSE, sep = &amp;#34;&amp;#34;, na.strings = &amp;#34;NA&amp;#34;, fileEncoding = &amp;#34;&amp;#34;) 함수 소개 read.table()</description></item><item><title>R 에서 데이터 프레임의 행과 열의 위치 바꾸기</title><link>https://freshrimpsushi.github.io/ko/posts/332/</link><pubDate>Sat, 25 Nov 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/332/</guid><description>개요 R 의 강점 중 하나는 프로그래밍 언어가 익숙한 사람의 입장에서 상당히 어려운 조작들을 손쉽게 구현시켜준다는 것이다. 예컨대 배열을 사용할 때 미리 메모리를 할당</description></item><item><title>R 에서 내장 데이터셋 불러오는 법</title><link>https://freshrimpsushi.github.io/ko/posts/331/</link><pubDate>Fri, 24 Nov 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/331/</guid><description>개요 R 은 대표적인 통계 프로그래밍 언어로써 유용한 메소드 뿐만 아니라 예제로 쓰기 좋은 데이터셋도 제공한다. 만약 이런 데이터셋이 없다면 강의를 할 때마다 새로운 데</description></item><item><title>R 에서 행렬의 곱 역행렬 전치행렬 구하기</title><link>https://freshrimpsushi.github.io/ko/posts/317/</link><pubDate>Wed, 15 Nov 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/317/</guid><description>개요 R 의 강점은 행렬을 위시한 각종 데이터셋의 조작이 간편하다는 점과 풍부한 통계 패키지를 무료로 제공한다는 것이다. 당연한 이야기지만 통계적 분석에서 행렬의 계</description></item><item><title>R 에서 몫과 나머지 구하기</title><link>https://freshrimpsushi.github.io/ko/posts/316/</link><pubDate>Tue, 14 Nov 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/316/</guid><description>개요 프로그래밍 언어의 문법에서 정말 통일이 안 되는 게 바로 몫과 나머지 연산자다. 기본적으론 다 비슷비슷하게 생긴 것 같지만 오히려 그래서 헷갈리는데 한 몫한다.C</description></item><item><title>R 에서 모든 변수 제거하기 콘솔창 초기화</title><link>https://freshrimpsushi.github.io/ko/posts/315/</link><pubDate>Mon, 13 Nov 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/315/</guid><description>개요 R 은 인터프리터 언어기 때문에 콘솔을 계속 보며 작업을 하게 된다. 이때 디버그 등을 하기 위해서는 이런 저런 테스트도 같은 작업환경에서 할 수밖에 없는데, 테스트</description></item><item><title>R 에서 else if문 사용하기 Error: unexpected else in else 해결</title><link>https://freshrimpsushi.github.io/ko/posts/314/</link><pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/314/</guid><description>개요 R 에는 switch문과 같은 분기문이 없기 때문에 if문을 여러개 이어서 분기를 나누어야만 한다. 여기서 이 조건문이라는 게 프로그래밍 언어마다 if 와 els</description></item></channel></rss>