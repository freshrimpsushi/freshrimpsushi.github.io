<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>수치해석 on 생새우초밥집</title><link>https://freshrimpsushi.github.io/ko/categories/%EC%88%98%EC%B9%98%ED%95%B4%EC%84%9D/</link><description>Recent content in 수치해석 on 생새우초밥집</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Sat, 28 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://freshrimpsushi.github.io/ko/categories/%EC%88%98%EC%B9%98%ED%95%B4%EC%84%9D/index.xml" rel="self" type="application/rss+xml"/><item><title>상미분방정식의 솔버 중 명시적 메서드보다 암시적 메서드가 권장되는 상황</title><link>https://freshrimpsushi.github.io/ko/posts/2671/</link><pubDate>Sat, 28 Jun 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2671/</guid><description>개요 $$ \dot{y} = f(y) $$ 위와 같이 주어진 상미분방정식을 풀기 위한 수치적인 솔버는 그 계산 방식에따라 명시적 메서드explicit method와 암시적 메서드imp</description></item><item><title>복소수 스텝 미분 근사</title><link>https://freshrimpsushi.github.io/ko/posts/2630/</link><pubDate>Mon, 07 Apr 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2630/</guid><description>공식 함수 $f : \mathbb{R} \to \mathbb{R}$ 의 미분계수 $f ' (x)$ 는 다음과 같이 복소수를 이용해서 근사할 수 있다. $$ f ' (x) \approx \frac{\im \left( f \left( x + i h \right) \right)}{h} $$ 여기서 $\im$ 은 복소수의 허수부를 나타내</description></item><item><title>미분방정식의 솔버란?</title><link>https://freshrimpsushi.github.io/ko/posts/1093/</link><pubDate>Fri, 21 Mar 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1093/</guid><description>정의 미분방정식을 수치적으로 풀기 위한 알고리즘을 솔버solver라 한다. 설명 가령 4차 룽게-쿠타 메서드(RK4)로 미분 방정식을 풀었다면, &amp;quot</description></item><item><title>룽게-쿠타 메소드에서 계수 결정하는 방법</title><link>https://freshrimpsushi.github.io/ko/posts/1536/</link><pubDate>Wed, 25 Dec 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1536/</guid><description>개요1 다음과 같이 주어진 상미분 방정식을 생각하자. $y$는 $t$에 대한 함수이며, 프라임$(^{\prime})$은 $t$에 대한 미분을 의미한다. $$</description></item><item><title>파동 방정식의 수치적 풀이: k-space method</title><link>https://freshrimpsushi.github.io/ko/posts/1627/</link><pubDate>Wed, 11 Dec 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1627/</guid><description>메서드 아래와 같은 파동 방정식이 주어졌다고 하자. $$ \partial_{t}^{2} u(\mathbf{x}, t) = \Delta_{\mathbf{x}} u (\mathbf{x}, t), \qquad (\mathbf{x}, t) \in \mathbb{R}^{n} \times \mathbb{R} $$ 양변에 변수 $\mathbf{x}$에 대한 푸리에변환을 취하면 다음</description></item><item><title>파동 방정식의 수치적 풀이: 유한차분법(FDM)</title><link>https://freshrimpsushi.github.io/ko/posts/1628/</link><pubDate>Sat, 07 Dec 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1628/</guid><description>메서드 아래와 같은 1차원 파동 방정식이 주어졌다고 하자. $$ \dfrac{\partial^{2} u}{\partial t^{2}} = c^{2} \dfrac{\partial^{2} u}{\partial x^{2}}, \qquad 0 \le x \le 1, \quad t \ge 0 \tag{1} $$ 우리의 목적은 유한한 점으로 위의 솔루션을 근사하는 것이</description></item><item><title>Mur 흡수 경계 조건</title><link>https://freshrimpsushi.github.io/ko/posts/1631/</link><pubDate>Thu, 05 Dec 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1631/</guid><description>개요 파동의 전파를 수치적으로 계산하는 방법에는 유한차분법(FDM), $k$-space method 등이 있다. 이러한 방법들은 파동이 무한대로 전파되는 것을 가정하고 있지만, 실제 시</description></item><item><title>여러개의 점을 사용하는 유한 차분 유도</title><link>https://freshrimpsushi.github.io/ko/posts/2553/</link><pubDate>Sun, 14 Apr 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2553/</guid><description>정리 $N$번 미분가능한 함수 $f : \mathbb{R} \to \mathbb{R}$ 가 주어져 있다고 하자. 한 점 $t \in \mathbb{R}$ 에서 $d &amp;lt; N$ 인 $d$계 도함수의 함숫값 $f^{(d)} \left( t \right)$ 은 충분히 작은 $h &amp;gt; 0$ 에 대해 기수가 $n</description></item><item><title>열 방정식의 수치적 풀이: 유한차분법</title><link>https://freshrimpsushi.github.io/ko/posts/3495/</link><pubDate>Sun, 22 Oct 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3495/</guid><description>열 방정식의 수치적 풀이1 아래와 같은 1차원 열 방정식이 주어졌다고 하자. $$ \dfrac{\partial u}{\partial t} = \dfrac{\partial^{2} u}{\partial x^{2}},\qquad 0\le x \le 1,\quad t \ge 0 \tag{1} $$ 우리의 목적은 유한한 점으로 위의 솔루션을 근사하</description></item><item><title>유한차분법</title><link>https://freshrimpsushi.github.io/ko/posts/3494/</link><pubDate>Fri, 20 Oct 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3494/</guid><description>정의1 2 유한차분법finite difference method, FDM은 미분계수를 계산하는 수치적방법으로, 짧은 구간에서의 평균 변화율로 미분계수를 근사한다. 설명 공식 유도의 핵심</description></item><item><title>암시적 룽게-쿠타 메소드</title><link>https://freshrimpsushi.github.io/ko/posts/3319/</link><pubDate>Wed, 02 Nov 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3319/</guid><description>개요 상미분 방정식 솔버ODE solver인 룽게-쿠타 메소드를 소개한다. 흔히 사용되는 4차 룽게-쿠타 메소드 RK4는 명시적 룽게-쿠타 메소드의 한 종류이</description></item><item><title>명시적 룽게-쿠타 메소드</title><link>https://freshrimpsushi.github.io/ko/posts/3317/</link><pubDate>Sat, 29 Oct 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3317/</guid><description>개요 상미분 방정식 솔버ODE solver인 룽게-쿠타 메소드를 소개한다. 흔히 사용되는 4차 룽게-쿠타 메소드 RK4에 대한 구체적인 설명은 글이 따로 발행되</description></item><item><title>4차 룽게-쿠타 메소드</title><link>https://freshrimpsushi.github.io/ko/posts/796/</link><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/796/</guid><description>메소드 1 $D \subset \mathbb{R}^2$ 에서 정의된 연속함수 $f$ 에 대해 초기값 문제 $\begin{cases} y ' = f(x,y) \\ y( x_{0} ) = Y_{0} \end{cases}$ 가 주어져 있다. 구간 $(a,b)$ 을 $a \le x_{0} &amp;lt; x_{1} &amp;lt; \cdots &amp;lt; x_{n} &amp;lt; \cdots x_{N} \le b$ 와 같은 노드 포인트</description></item><item><title>디리클레 경계 조건이 주어진 열방정식에 대한 초기값 문제의 수치해석적 풀이</title><link>https://freshrimpsushi.github.io/ko/posts/790/</link><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/790/</guid><description>예제 1 $$ \begin{cases} u_{t} = \gamma u_{xx} \\ u(t,0) = u(t,l) = 0 \\ u(0,x) = f(x) \end{cases} $$ 주어진 문제는 대수적 풀이가 있을 정도로 쉽고 간단하지만, 미분방정식을 푸는 방법으로써의 수치해석을 왜 배우는지</description></item><item><title>A-스테이블</title><link>https://freshrimpsushi.github.io/ko/posts/774/</link><pubDate>Thu, 15 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/774/</guid><description>빌드업 미드포인트 메소드를 비롯한 멀티스텝 메소드는 $h$ 가 충분히 작지 않을 때 패러사이틱 솔루션이 있을 수 있다. 충분히 작지 않다는 건 $ y ' = \lambda y$ 와 같은 문제가 있</description></item><item><title>일관성을 가지는 멀티스텝 메소드의 수렴성과 루트 컨디션</title><link>https://freshrimpsushi.github.io/ko/posts/754/</link><pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/754/</guid><description>정리 만약 멀티스텝 메소드가 일관성을 가진다고 하면, 메소드는 수렴성을 가진다 $\iff$ 메소드는 루트 컨디션을 만족 시킨다 설명 폐구간 $[x_{0} , b]$ 에 대해 $h$ 를 단위로 잘라서 노</description></item><item><title>일관성을 가지는 멀티스텝 메소드의 안정성과 루트 컨디션</title><link>https://freshrimpsushi.github.io/ko/posts/734/</link><pubDate>Thu, 08 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/734/</guid><description>정리 만약 멀티스텝 메소드가 일관성을 가진다고 하면, 메소드는 안정성을 가진다 $\iff$ 메소드는 루트 컨디션을 만족 시킨다 설명 폐구간 $[x_{0} , b]$ 에 대해 $h$ 를 단위로 잘라서 노</description></item><item><title>멀티스텝 메소드의 루트 컨디션</title><link>https://freshrimpsushi.github.io/ko/posts/732/</link><pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/732/</guid><description>정의 1 멀티스텝 메소드: $D \subset \mathbb{R}^2$ 에서 정의된 연속함수 $f$ 에 대해 초기값 문제 $\begin{cases} y ' = f(x,y) \\ ( y( x_{0} ) , \cdots , y(x_{p}) ) = (Y_{0}, \cdots , Y_{p} ) \end{cases}$ 가 주어져 있다. 구간 $(a,b)$ 을 $a \le x_{0} &amp;lt; x_{1}</description></item><item><title>아담스 메소드</title><link>https://freshrimpsushi.github.io/ko/posts/724/</link><pubDate>Tue, 06 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/724/</guid><description>정의 1 멀티스텝 메소드: $D \subset \mathbb{R}^2$ 에서 정의된 연속함수 $f$ 에 대해 초기값 문제 $\begin{cases} y ' = f(x,y) \\ ( y( x_{0} ) , \cdots , y(x_{p}) ) = (Y_{0}, \cdots , Y_{p} ) \end{cases}$ 가 주어져 있다. 구간 $(a,b)$ 을 $a \le x_{0} &amp;lt; x_{1}</description></item><item><title>리차드슨 오차 추정</title><link>https://freshrimpsushi.github.io/ko/posts/706/</link><pubDate>Mon, 05 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/706/</guid><description>빌드업 미분방정식을 푸는 메소드의 퍼포먼스를 확인하는 방법으로 참값과 비교할 수 있다면 가장 좋겠지만, 당장 참값을 구하기 귀찮은 경우부터 시작해서 아예 트루 솔루</description></item><item><title>사다리꼴 메소드</title><link>https://freshrimpsushi.github.io/ko/posts/704/</link><pubDate>Sun, 04 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/704/</guid><description>정의 1 $D \subset \mathbb{R}^2$ 에서 정의된 연속함수 $f$ 에 대해 초기값 문제 $\begin{cases} y ' = f(x,y) \\ y( x_{0} ) = Y_{0} \end{cases}$ 가 주어져 있다. 구간 $(a,b)$ 을 $a \le x_{0} &amp;lt; x_{1} &amp;lt; \cdots &amp;lt; x_{n} &amp;lt; \cdots x_{N} \le b$ 와 같은 노드 포인트들</description></item><item><title>패러사이틱 솔루션</title><link>https://freshrimpsushi.github.io/ko/posts/701/</link><pubDate>Fri, 02 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/701/</guid><description>정의 1 패러사이틱 솔루션parasitic solution 이란 직역했을 때 &amp;lsquo;기생하는 해&amp;rsquo;라는 뜻으로 메소드가 진행될수록 크기가 커지며 부호가</description></item><item><title>미드포인트 메소드</title><link>https://freshrimpsushi.github.io/ko/posts/700/</link><pubDate>Thu, 01 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/700/</guid><description>메소드 $D \subset \mathbb{R}^2$ 에서 정의된 연속함수 $f$ 에 대해 초기값 문제 $\begin{cases} y ' = f(x,y) \\ ( y( x_{0} ), y (x_{1}) ) = ( Y_{0} , Y_{1} ) \end{cases}$ 가 주어져 있다. 구간 $(a,b)$ 를 $a \le x_{0} &amp;lt; x_{1} &amp;lt; \cdots &amp;lt; x_{n} &amp;lt; \cdots x_{N} \le b$ 와</description></item><item><title>멀티스텝 메소드의 수렴성과 오차</title><link>https://freshrimpsushi.github.io/ko/posts/698/</link><pubDate>Wed, 31 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/698/</guid><description>정리 초기값 문제 $\begin{cases} y ' = f(x,y) \\ ( y( x_{0} ) , \cdots , y(x_{p}) )= ( Y_{0} , \cdots , Y_{p} ) \end{cases}$ 에 대해 멀티스텝 메소드 $$ \displaystyle y_{n+1} = \sum_{j=0}^{p} a_{j} y_{n-j} + h \sum_{j = -1}^{p} b_{j} f (x_{n-j} , y_{n-j} ) $$ 가 일관성을 가지고, 초기</description></item><item><title>멀티스텝 메소드의 일관성과 수렴차수</title><link>https://freshrimpsushi.github.io/ko/posts/694/</link><pubDate>Mon, 29 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/694/</guid><description>정리 초기값 문제 $\begin{cases} y ' = f(x,y) \\ ( y( x_{0} ) , \cdots , y(x_{p}) )= ( Y_{0} , \cdots , Y_{p} ) \end{cases}$ 에 대해 멀티스텝 메소드 $$ \displaystyle y_{n+1} = \sum_{j=0}^{p} a_{j} y_{n-j} + h \sum_{j = -1}^{p} b_{j} f (x_{n-j} , y_{n-j} ) $$ 가 일관성을 가지는 필요충</description></item><item><title>멀티스텝 메소드</title><link>https://freshrimpsushi.github.io/ko/posts/693/</link><pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/693/</guid><description>정의 1 $D \subset \mathbb{R}^2$ 에서 정의된 연속함수 $f$ 에 대해 초기값 문제 $\begin{cases} y ' = f(x,y) \\ ( y( x_{0} ) , \cdots , y(x_{p}) ) = (Y_{0}, \cdots , Y_{p} ) \end{cases}$ 가 주어져 있다. 구간 $(a,b)$ 을 $a \le x_{0} &amp;lt; x_{1} &amp;lt; \cdots &amp;lt; x_{n} &amp;lt; \cdots x_{N} \le</description></item><item><title>초기값이 조금 달라졌을 때 오일러 메소드의 오차</title><link>https://freshrimpsushi.github.io/ko/posts/692/</link><pubDate>Thu, 25 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/692/</guid><description>정리 $[x_{0} , b] \times \mathbb{R}$ 에서 정의된 $f$ 에 대해 초기값 문제 $\begin{cases} y ' = f(x,y) \\ y( x_{0} ) = Y_{0} \end{cases}$ 의 해 $Y(x)$ 가 $Y \in C^{3} [ x_{0} , b ]$ 이고 $\displaystyle f_{y} (x,y) = {{ \partial f (x,y) } \over { \partial y }}$ 와 $\displaystyle f_{yy} (x,y) = {{ \partial^{2} f (x,y)</description></item><item><title>강한 립시츠 조건과 오일러 메소드의 오차</title><link>https://freshrimpsushi.github.io/ko/posts/689/</link><pubDate>Wed, 24 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/689/</guid><description>정리 $[x_{0} , b] \times \mathbb{R}$ 에서 정의된 $f$ 에 대해 초기값 문제 $\begin{cases} y ' = f(x,y) \\ y( x_{0} ) = Y_{0} \end{cases}$ 의 해 $Y(x)$ 가 $[x_{0} , b]$ 에서 두 번 미분가능하다고 하자. $f$ 가 모든 $x_{0} \le x \le b$ 와 $ y_{1} , y_{2} \in \mathbb{R}$,</description></item><item><title>수치해석에서의 오일러 메소드</title><link>https://freshrimpsushi.github.io/ko/posts/687/</link><pubDate>Tue, 23 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/687/</guid><description>메소드 1 $D \subset \mathbb{R}^2$ 에서 정의된 연속함수 $f$ 에 대해 초기값 문제 $\begin{cases} y ' = f(x,y) \\ y( x_{0} ) = Y_{0} \end{cases}$ 가 주어져 있다. 구간 $(a,b)$ 을 $a \le x_{0} &amp;lt; x_{1} &amp;lt; \cdots &amp;lt; x_{n} &amp;lt; \cdots x_{N} \le b$ 와 같은 노드 포인트</description></item><item><title>립시츠 조건</title><link>https://freshrimpsushi.github.io/ko/posts/684/</link><pubDate>Tue, 16 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/684/</guid><description>정의 우리는 1계 미분방정식에 대한 존재성-유일성 정리의 스테이트먼트에서 립시츠 조건lipschitz condition을 발견할 수 있다. $D \subset \mathbb{R}^2$ 에서 정</description></item><item><title>수치적으로 이상적분을 계산하기 위한 가우스 구적법</title><link>https://freshrimpsushi.github.io/ko/posts/1161/</link><pubDate>Mon, 15 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1161/</guid><description>정의 1 가우스-체비셰프 구적법 $$ \int_{-1}^{1} {{ 1 } \over { \sqrt{1 - x^2 } }} f(x) dx \approx \sum_{i=1}^{n} w_{i} f( x_{i} ) $$ $$ w_{i} = {{ \pi } \over { n }} $$ 여기서 $x_{i}$ 들은 제1체비셰프 함수의 근, 다시 말해 $T_{n}(x) = 0$</description></item><item><title>수치해석에서의 에르미트 다항함수</title><link>https://freshrimpsushi.github.io/ko/posts/1159/</link><pubDate>Sat, 13 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1159/</guid><description>정의 다음의 두 함수를 에르미트 다항함수라 한다. 확률론자의 에르미트 다항함수 $$ H_{e_{n}} := (-1)^{n} e^{{x^2} \over {2}} {{d^{n}} \over {dx^{n}}} e^{- {{x^2} \over {2}}} $$ 물리학자의 에르미트 다항함수 $$ H_{n} := (-1)^{n} e^{x^2} {{d^{n}} \over {dx^{n}}}</description></item><item><title>수치해석에서의 라게르 다항함수</title><link>https://freshrimpsushi.github.io/ko/posts/1156/</link><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1156/</guid><description>정의 $\displaystyle L_{n} := {{ e^{x} } \over { n! }} {{ d^{n} } \over { dx^{n} }} \left( e^{-x} x^{n} \right)$ 을 라게르 다항함수laguerre Polynomial라 한다. 기초 성질 다음과 같은 재귀 공식이 성립한</description></item><item><title>수치적으로 이상적분을 계산하기 위한 변수 치환 트릭</title><link>https://freshrimpsushi.github.io/ko/posts/1147/</link><pubDate>Sat, 06 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1147/</guid><description>정리 1 $0 &amp;lt; a &amp;lt; b &amp;lt; \infty$ 라고 하자. [1]: $ 0 &amp;lt; p &amp;lt; 1$ 면 $$\int_{0}^{b} {{ f(x) } \over {x^{p} }} dx = \int_{0}^{{{ 1 } \over { 1-p }} b^{1-p} } f \left( \left[ ( 1- p ) m \right]^{{{ 1 } \over { 1-p }}} \right) dm$$ [2]: $ 1 &amp;lt; p$ 면 $$\int_{a}^{ \infty } {{ f(x) }</description></item><item><title>가우스 구적법</title><link>https://freshrimpsushi.github.io/ko/posts/1144/</link><pubDate>Thu, 04 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1144/</guid><description>정의 1 $f : [a,b] \to \mathbb{R}$ 가 $[a,b]$ 에서 적분가능하고 $[a,b]$ 를 $a = x_{1} &amp;lt; \cdots &amp;lt; x_{n} = b$ 와 같은 노드 포인트들로 쪼갰다고 하자. $$ I_{n} (f) := \sum_{j=1}^{n} w_{j} f ( x_{j} ) \approx \int_{a}^{b} f(x) dx = I ( f ) $$ 위와 같이</description></item><item><title>뉴턴-코테스 적분 공식</title><link>https://freshrimpsushi.github.io/ko/posts/1138/</link><pubDate>Sat, 29 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1138/</guid><description>정의 1 $f : [a,b] \to \mathbb{R}$ 가 $[a,b]$ 에서 적분가능하고 $[a,b]$ 를 간격이 $\displaystyle h:= {{b-a} \over {n}}$ 로 일정한 $a = x_{0} &amp;lt; \cdots &amp;lt; x_{n} = b$ 와 같은 노드 포인트들로 쪼갰다고 하자. 다음과 같이 정의된 수치적 적</description></item><item><title>심슨 룰</title><link>https://freshrimpsushi.github.io/ko/posts/1132/</link><pubDate>Wed, 26 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1132/</guid><description>정의 $f : [a,b] \to \mathbb{R}$ 가 $[a,b]$ 에서 적분가능하고 $[a,b]$ 를 간격이 $\displaystyle h:= {{b-a} \over {n}}$ 로 일정한 $a = x_{0} &amp;lt; \cdots &amp;lt; x_{n} = b$ 와 같은 노드 포인트들로 쪼갰다고 하자. 다음과 같이 정의된 수치적 적분</description></item><item><title>사다리꼴 룰</title><link>https://freshrimpsushi.github.io/ko/posts/1130/</link><pubDate>Mon, 24 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1130/</guid><description>정의 $f : [a,b] \to \mathbb{R}$ 가 $[a,b]$ 에서 적분가능하고 $[a,b]$ 를 간격이 $\displaystyle h:= {{b-a} \over {n}}$ 로 일정한 $a = x_{0} &amp;lt; \cdots &amp;lt; x_{n} = b$ 와 같은 노드 포인트들로 쪼갰다고 하자. 다음과 같이 정의된 수치적 적분</description></item><item><title>수치적 적분</title><link>https://freshrimpsushi.github.io/ko/posts/1128/</link><pubDate>Sat, 22 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1128/</guid><description>정의 1 $f : [a,b] \to \mathbb{R}$ 가 $[a,b]$ 에서 적분가능하고 $[a,b]$ 를 $a = x_{0} &amp;lt; \cdots &amp;lt; x_{n} = b$ 와 같은 노드 포인트들로 쪼갰다고 하자. 적분 오퍼레이터 $I$ 를 $\displaystyle I(f) := \int_{a}^{b} f(x) dx$ 와 같이 정의한다. 적</description></item><item><title>체비셰프 노드</title><link>https://freshrimpsushi.github.io/ko/posts/1124/</link><pubDate>Mon, 17 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1124/</guid><description>정의 $[-1,1]$ 에서 $\displaystyle x_{k} = \cos \left( {{2k-1} \over {2n}} \pi \right)$, $k=1, \cdots , n$ 을 체비셰프 노드라 한다. 설명 체비셰프 노드는 일반적으로 사용하듯 일정한 간격의 노드 포인트와 달리 반원의 호를 일정한</description></item><item><title>체비셰프 전개</title><link>https://freshrimpsushi.github.io/ko/posts/1122/</link><pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1122/</guid><description>빌드업 1 체비셰프 전개를 이해하기 위해서는 어떻게 체비셰프 전개가 나오는지를 먼저 알아야한다. 우선 최소극대화 문제를 푸는 대신 최소제곱 문제를 푼다고 생각해보</description></item><item><title>수치해석학에서의 최소극대화 근사와 최소제곱 근사</title><link>https://freshrimpsushi.github.io/ko/posts/1116/</link><pubDate>Wed, 12 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1116/</guid><description>빌드업 1 주어진 함수 $f : [a,b] \to \mathbb{R}$ 를 근사하는 문제가 주어져 있다고 하자. 계산은 컴퓨터의 몫이므로 다항함수로 $f$ 를 근사하는 것이 목표다. 함수를 근사시킨다는 것은</description></item><item><title>수치해석에서의 함수 근사</title><link>https://freshrimpsushi.github.io/ko/posts/1107/</link><pubDate>Mon, 10 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1107/</guid><description>빌드업 수치적인 계산을 할 때 컴퓨터가 인간보다 압도적으로 빠른 것은 사실이지만, 딱히 컴퓨터가 초월함수와 무리수를 이해했기 때문은 아니다. 가령 $\displaystyle \sin {{ \pi } \over {6}}</description></item><item><title>수치해석학에서의 B-스플라인</title><link>https://freshrimpsushi.github.io/ko/posts/1045/</link><pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1045/</guid><description>글과 수식이 읽기 싫으면 그냥 그림으로 보고 이해해도 무방하다. 정의 1 구간 $[a,b]$ 를 $a \le x_{0} &amp;lt; x_{1} &amp;lt; \cdots &amp;lt; x_{n} &amp;lt; \cdots x_{N} \le b$ 와 같은 노드 포인트들로 쪼갰다고 하자. 주어진 자유</description></item><item><title>수치해석에서의 스플라인</title><link>https://freshrimpsushi.github.io/ko/posts/1036/</link><pubDate>Thu, 16 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1036/</guid><description>빌드업 인터폴레이션이란 정확한 함수를 복원하는 게 아니라 그와 유사하면서도 다루기 편한 함수를 구하는 것이 목적이다. 물론 익스플릭시트explicit하고 계</description></item><item><title>에르미트 인터폴레이션</title><link>https://freshrimpsushi.github.io/ko/posts/1034/</link><pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1034/</guid><description>정의 1 서로 다른 $x_{1} , \cdots , x_{n}$ 의 데이터 $(x_{1}, y_{1} , y&amp;rsquo;_{1}) , \cdots , (x_{n} , y_{n}, y&amp;rsquo;_{n})$ 에 대해 $\begin{cases} p (x_{i} ) = y_{i} \\ p '(x_{i} ) = y&amp;rsquo;_{i} \end{cases}$ 와 $\deg H \le 2n-1$ 을 만족하는 인터폴레이션인 다항 함수 $H$ 를 에르미트</description></item><item><title>에르미트-제노키 공식</title><link>https://freshrimpsushi.github.io/ko/posts/1031/</link><pubDate>Sun, 12 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1031/</guid><description>공식 서로 다른 $x_{0}, \cdots , x_{n}$ 에 대해 $f \in C^{n} \left( \mathscr{H} \left\{ x_{0}, \cdots , x_{n} \right\} \right)$ 이라 하자. 그러면 표준 심플렉스 $$ \tau_{n} := \left\{ ( t_{1} , \cdots , t_{n} ) : t_{i} \ge 0 \land \sum_{i=1}^{t} t_{i} \le 1 \right\} $$ 과 $\displaystyle t_{0} = 1 - \sum_{i=1}^{n} t_{i}$ 에</description></item><item><title>뉴턴 계차상 공식 유도</title><link>https://freshrimpsushi.github.io/ko/posts/1025/</link><pubDate>Fri, 10 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1025/</guid><description>공식 서로 다른 $x_{0} , \cdots , x_{n}$ 의 데이터 $(x_{0}, f(x_{0} )) , \cdots , (x_{n} , f( x_{n} ) )$ 에 대해 $$ p_{n} (x) =\sum_{i=0}^{n} f [ x_{0} , \cdots , x_{i} ] \prod_{j=0}^{i-1} (x - x_{j} ) $$ 설명 복잡해보이지만 $n=0,1,2$ 에 대해서 실제로 전개를 해보</description></item><item><title>라그랑주 공식 유도</title><link>https://freshrimpsushi.github.io/ko/posts/1023/</link><pubDate>Wed, 08 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1023/</guid><description>공식 1 서로 다른 $x_{0} , \cdots , x_{n}$ 의 데이터 $(x_{0}, y_{0}) , \cdots , (x_{n} , y_{n})$ 에 대해 $\displaystyle l_{i} (x) := \prod_{i \ne j} \left( {{ x - x_{j} } \over { x_{i} - x_{j} }} \right)$ 이라고 하면 $$ p_{n} (x) = \sum_{i=0}^{n} y_{i} l_{i} (X) $$ 설명 라그랑주 공식은</description></item><item><title>폴리노미얼 인터폴레이션</title><link>https://freshrimpsushi.github.io/ko/posts/1021/</link><pubDate>Mon, 06 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1021/</guid><description>정의 1 서로 다른 $x_{0} , \cdots , x_{n}$ 의 데이터 $(x_{0}, y_{0}) , \cdots , (x_{n} , y_{n})$ 에 대해 $p (x_{i} ) = y_{i}$ 와 $\deg p \le n$ 을 만족하는 인터폴레이션인 다항 함수 $p$ 를 폴리노미얼 인터폴레이션poly</description></item><item><title>수치해석에서의 인터폴레이션</title><link>https://freshrimpsushi.github.io/ko/posts/1016/</link><pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1016/</guid><description>정의 1 주어진 $(n+1)$쌍의 데이터 $(x_{0}, y_{0}) , \cdots , (x_{n} , y_{n})$ 에 대해 $f (x_{i} ) = y_{i}$ 를 만족하면서 어떤 특정한 성질을 가지는 $f$ 를 찾는 방법이나 그 함수 자체를 보간법 혹은</description></item><item><title>넌리니어 시스템을 풀기 위한 뉴턴 메소드</title><link>https://freshrimpsushi.github.io/ko/posts/1005/</link><pubDate>Fri, 26 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1005/</guid><description>메소드 1 $\mathbf{f} ( \mathbf{x} ) := \begin{bmatrix} f_{1}( \mathbf{x} ) \\ \vdots \\ f_{N} ( \mathbf{x} ) \end{bmatrix}$ 와 같은 다변수 함수 $\mathbf{f} : \mathbb{R}^{N} \to \mathbb{R}^{N}$ 가 $\mathbf{f} \in C^{2} \left( N ( \alpha ) \right)$ 이고 $\mathbf{f} ( \alpha ) = \mathbb{0}$, $\left[ D \mathbf{f} ( \alpha ) \right]^{-1}$ 이 존재한다고 하자. $\alpha$ 와</description></item><item><title>뮬러 메소드</title><link>https://freshrimpsushi.github.io/ko/posts/976/</link><pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/976/</guid><description>메소드 $f (\alpha) = 0$ 이라고 하자. 초기값 $x_{0} , x_{1} , x_{2}$ 과 $$ w_{n} := f [x_{n} , x_{n-1} ] + f [ x_{n} , x_{n-2} ] - f [ x_{n-2} , x_{n-1} ] $$ 에 대해 $$ x_{n+1} : = x_{n} - {{ 2 f ( x_{n} ) } \over { w_{n} \pm \sqrt{ w_{n}^{2} - 4 f</description></item><item><title>시컨트 메소드</title><link>https://freshrimpsushi.github.io/ko/posts/682/</link><pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/682/</guid><description>메소드 $f,f&amp;rsquo;,f&amp;rsquo;&amp;rsquo;$ 가 $\alpha$ 의 근방에서 연속이고 $f(\alpha) = 0, f '(\alpha) \ne 0$ 이라고 하자. $\alpha$ 와 충분히 가까운 초기값 $x_{0} , x_{1}$ 에 대해 $$ x_{n+1} := x_{n} - f ( x_{n} ) {{ x_{n} - x_{n-1} } \over { f ( x_{n} ) - f ( x_{n-1} )</description></item><item><title>수치해석학에서의 계차상</title><link>https://freshrimpsushi.github.io/ko/posts/969/</link><pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/969/</guid><description>정의 함수 $f : \mathbb{R} \to \mathbb{R}$ 와 서로 다른 $x_{1} , \cdots , x_{n}$ 에 대해 다음을 $f$ 의 계차상divided Difference이라고 한다. $$ \begin{align*} f[x_{0}] :=&amp;amp; f( x_{0} ) \\ f [ x_{0} , x_{1} ] :=&amp;amp; {{ f</description></item><item><title>뉴턴-랩슨 메소드</title><link>https://freshrimpsushi.github.io/ko/posts/678/</link><pubDate>Sat, 23 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/678/</guid><description>메소드 1 $f,f&amp;rsquo;,f&amp;rsquo;&amp;rsquo;$ 가 $\alpha$ 의 근방에서 연속이고 $f(\alpha) = 0, f '(\alpha) \ne 0$ 이라고 하자. $\alpha$ 와 충분히 가까운 초기값 $x_{0}$ 에 대해 $$ x_{n+1} := x_{n} - {{ f ( x_{n} ) } \over { f ' ( x_{n} ) }} $$ 과 같이 정의된</description></item><item><title>바이섹션 메소드</title><link>https://freshrimpsushi.github.io/ko/posts/676/</link><pubDate>Fri, 22 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/676/</guid><description>메소드 1 연속함수 $f$ 가 폐구간 $[a,b]$ 에서 $f(a) f(b) &amp;lt; 0$ 이라고 하자. 허용오차는 $\varepsilon$ 이다. $f(c) = 0$ 를 만족하는 $c \in [a,b]$ 는 다음과 같이 구할 수 있다. Step 1. $$c:= {{a+b} \over {2}}$$ Step 2. $b-c \le \varepsilon$ 이</description></item><item><title>수치해석에서의 수렴률</title><link>https://freshrimpsushi.github.io/ko/posts/674/</link><pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/674/</guid><description>정의 1 $\alpha$ 로 수렴하는 수열 $\left\{ x_{n} \right\}$ 이 차수order $p \ge 1$ 에 대해 $$ | \alpha - x_{n+1} | \le c | \alpha - x_{n} | ^{p} $$ 을 만족시키는 $c \ge 0$ 가 존재하면 $\left\{ x_{n} \right\}$ 이 수렴률 $c$ 로 $\alpha$ 에 $p$ 차</description></item><item><title>제1종 제2종 체비셰프 다항함수의 관계</title><link>https://freshrimpsushi.github.io/ko/posts/780/</link><pubDate>Wed, 19 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/780/</guid><description>정리 제1종 체비셰프 다항함수 $T_{n} (x) = \cos \left( n \cos^{-1} x \right)$ 과 제2종 체비셰프 다항함수 $\displaystyle U_{n} (x) = {{1} \over {n+1} } T_{n+1} &amp;rsquo; (X)$ 은 다음의 관계를 가진다. [1]: $$U_{n} (x) - U_{n-2} (x) = 2 T_{n} (X)$$ [2]: $$T_{n} (x) -</description></item><item><title>제2종 체비셰프 다항함수</title><link>https://freshrimpsushi.github.io/ko/posts/779/</link><pubDate>Tue, 18 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/779/</guid><description>정의 $$U_{n} (x) := {{1} \over {n+1} } T_{n+1} &amp;rsquo; (x) = {{\sin \left( ( n +1 ) \theta \right)} \over { \sin \theta }} $$ 을 제2종 체비셰프 다항함수라 한다. 기초 성질 재귀 공식 [0]: $$U_{n+1} (x) = 2x U_{n} (x) - U_{n-1} (X)$$ 직교 집합 [1] 함수의 내</description></item><item><title>제1종 체비셰프 다항함수</title><link>https://freshrimpsushi.github.io/ko/posts/777/</link><pubDate>Sun, 16 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/777/</guid><description>정의 1 $T_{n} (x) = \cos \left( n \cos^{-1} x \right)$ 을 제1종 체비셰프 다항함수라 한다. 기초 성질 재귀 공식 [0]: $$T_{n+1} (x) = 2x T_{n} (x) - T_{n-1} (X)$$ 직교 집합 [1] 함수의 내적: $\displaystyle \left&amp;lt;f, g\right&amp;gt;:=\int_a^b f(x) g(x) w(x) dx$ 에 대해 웨이트</description></item><item><title>수치해석에서의 차분</title><link>https://freshrimpsushi.github.io/ko/posts/722/</link><pubDate>Wed, 14 Nov 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/722/</guid><description>정의 1 전방차분: $$ \begin{align*} \Delta f(x) =&amp;amp; f(x+h) - f(x) \\ \Delta^{r+1} f(x) =&amp;amp; \Delta^{r} f(x+h) - \Delta^{r} f(x) \end{align*} $$ 후방차분: $$ \begin{align*} \nabla f(x) =&amp;amp; f(x) - f(x- h) \\ \nabla^{r+1} f(x) =&amp;amp; \nabla^{r} f(x) - \nabla^{r} f(x- h) \end{align*} $$ 설명 일반적으로 계차differen</description></item></channel></rss>