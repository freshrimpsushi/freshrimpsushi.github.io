<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>그래프이론 on 생새우초밥집</title><link>https://freshrimpsushi.github.io/ko/categories/%EA%B7%B8%EB%9E%98%ED%94%84%EC%9D%B4%EB%A1%A0/</link><description>Recent content in 그래프이론 on 생새우초밥집</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Wed, 16 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://freshrimpsushi.github.io/ko/categories/%EA%B7%B8%EB%9E%98%ED%94%84%EC%9D%B4%EB%A1%A0/index.xml" rel="self" type="application/rss+xml"/><item><title>길버트 모델</title><link>https://freshrimpsushi.github.io/ko/posts/2118/</link><pubDate>Fri, 26 Nov 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2118/</guid><description>정의 1 2 쉬운 정의 심플 네트워크의 링크가 각각 독립적으로 확률 $p \in [0,1]$ 에 따라 연결되는 랜덤 네트워크를 길버트 모델gilbert model $\mathbb{G}_{n,p}$ 라 한다. 어려운 정의 확률 공</description></item><item><title>에르되시-레니 모델</title><link>https://freshrimpsushi.github.io/ko/posts/2116/</link><pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2116/</guid><description>빌드업 $n$ 개의 라벨링 된labeled 버텍스와 $m$ 개의 에지를 가진 심플 그래프라는 프로퍼티 $\mathscr{G}_{n,m} \subset 2^{\binom{n}{2}}$ 를 생각해보자. 정확히 $m$ 개의 링크를 가진 랜덤 그래프는 $\mathbb{G}_{n, m} :</description></item><item><title>그래프 라플라시안</title><link>https://freshrimpsushi.github.io/ko/posts/925/</link><pubDate>Wed, 16 Apr 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/925/</guid><description>정의 그래프 $G$의 차수행렬를 $D$, 인접행렬를 $A$라고 하자. 이때, $G$의 그래프 라플라시안graph Laplacian $L$은 다음과 같이 정의된다. $$ L := D - A $$</description></item><item><title>그래프 임베딩, 노드 임베딩, 에지 임베딩</title><link>https://freshrimpsushi.github.io/ko/posts/975/</link><pubDate>Mon, 14 Apr 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/975/</guid><description>정의1 그래프 $G(V, E)$가 주어졌다고 하자. 함수 $f: V \to \mathbb{R}^{n}$을 노드 임베딩node embedding, 함수 $g: E \to \mathbb{R}^{m}$</description></item><item><title>그래프와 그래프 사이의 편집 거리</title><link>https://freshrimpsushi.github.io/ko/posts/85/</link><pubDate>Wed, 23 Oct 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/85/</guid><description>정의 1 버텍스의 유한집합 $X$ 와 유한한 알파뱃의 집합을 $\alpha$ 이라 하자. 여기서 알파뱃은 공백 혹은 널null을 포함한다고 간주한다. 버텍스 라벨링vertex labeling $V</description></item><item><title>그래프와 그래프 사이의 스펙트럴 거리</title><link>https://freshrimpsushi.github.io/ko/posts/80/</link><pubDate>Sat, 19 Oct 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/80/</guid><description>정의 버텍스의 수가 $n$ 인 두 그래프 $G_{1}$, $G_{2}$ 의 인접행렬을 $A_{1}$, $A_{2}$ 라 하자. 이들이 내림차순으로 정렬된 고유값, 즉 스펙트라spectra를 각각 다음과 같이 나타내자. $$</description></item><item><title>수학에서 그래프의 레이아웃</title><link>https://freshrimpsushi.github.io/ko/posts/68/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/68/</guid><description>개요 수학에서 그래프 혹은 네트워크의 레이아웃layout이라 함은 어쨌거나 2D 혹은 3D로 시각화할 때 구체적으로 버텍스와 에지를 어떻게 배치할지에 대한 알고리</description></item><item><title>하이퍼그래프의 정의</title><link>https://freshrimpsushi.github.io/ko/posts/2619/</link><pubDate>Wed, 28 Aug 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2619/</guid><description>정의 어떤 유한집합 $V \ne \emptyset$ 을 하이퍼버텍스 셋hypervertex set이라 한다. 하이퍼에지hyperedge란 하이퍼버텍스 셋의 부분집합을 말하고,</description></item><item><title>네트워크 이론에서의 고유벡터 중심성</title><link>https://freshrimpsushi.github.io/ko/posts/2528/</link><pubDate>Sat, 24 Feb 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2528/</guid><description>정의 1 네트워크 $\left( V , E \right)$의 인접행렬 $A$ 의 스펙트럴 래디어스 $\lambda_{1}$ 에 대응되는 고유벡터 $\mathbf{v}_{1}$ 의 $i$번째 성분을 $i$번째 노드 $v_{i}$ 의 고유벡터 중심성</description></item><item><title>네트워크 이론에서의 근접 중심성</title><link>https://freshrimpsushi.github.io/ko/posts/2526/</link><pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2526/</guid><description>정의 1 네트워크 $\left( V, E \right)$의 지오데식 거리를 $d$ 라 하자. 다음과 같이 정의된 $C_{C} : V \to \mathbb{R}$ 을 노드 $v \in V$ 의 근접 중심성closeness Centr</description></item><item><title>네트워크 이론에서의 매개 중심성</title><link>https://freshrimpsushi.github.io/ko/posts/2524/</link><pubDate>Fri, 16 Feb 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2524/</guid><description>정의 1 스트레스 중심성 네트워크 $\left( V, E \right)$ 에서 두 노드 $s,t \in V$ 를 잇는 최단 거리인 패스의 갯수를 $\sigma_{st} = \sigma_{ts}$ 라 하고, 특히 $s,t$ 를 잇는 패스 중 또 다른 노드 $v \in V$ 를 포함하는 패</description></item><item><title>네트워크 이론에서의 스트레스 중심성</title><link>https://freshrimpsushi.github.io/ko/posts/2522/</link><pubDate>Mon, 12 Feb 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2522/</guid><description>정의 1 네트워크 $\left( V, E \right)$ 에서 두 노드 $s,t \in V$ 를 잇는 최단 거리인 패스의 갯수를 $\sigma_{st} = \sigma_{ts}$ 라 하고, 특히 $s,t$ 를 잇는 패스 중 또 다른 노드 $v \in V$ 를 포함하는 패스의 갯수를 $\sigma_{st} (v)$</description></item><item><title>네트워크 이론에서의 차수 중심성</title><link>https://freshrimpsushi.github.io/ko/posts/2520/</link><pubDate>Thu, 08 Feb 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2520/</guid><description>정의 1 네트워크 $G (V, E)$ 의 각 노드 $v \in V$ 에 대해 다음을 차수 중심성degree Centrality이라 한다. $$ \deg v $$ 설명 중심성 중심성centralit</description></item><item><title>유클리드 그래프</title><link>https://freshrimpsushi.github.io/ko/posts/2396/</link><pubDate>Mon, 05 Jun 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2396/</guid><description>정의 1 쉬운 정의 유클리드 공간의 유한 부분집합 $V \subset \mathbb{R}^{p}$ 와 컷오프cutoff $\delta \ge 0$ 가 주어져 있다고 하자. 유클리드 그래프란 $V$ 를 버텍스vertex로 가지고 두</description></item><item><title>NetworkX에서 GEXF 파일 읽고 쓰기</title><link>https://freshrimpsushi.github.io/ko/posts/3352/</link><pubDate>Sat, 07 Jan 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3352/</guid><description>설명1 2 GEXF는 Graph Exchange XML Format의 약자로, 그래프 구조 묘사를 위한 언어이다. Gephi 프로젝트와 함께 시작됐다는 설명을 봐서는 Gephi에서 다루기 용이한</description></item><item><title>줄리아의 그래프(네트워크) 분석 패키지 Graphs.jl</title><link>https://freshrimpsushi.github.io/ko/posts/3350/</link><pubDate>Tue, 03 Jan 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3350/</guid><description>소개 Graphs.jl은 파이썬의 NetworkX와 같이 그래프(네트워크) 분석을 위한 패키지이다. LightGraphs.jl라는 패키지를 리부트</description></item><item><title>파이썬의 그래프(네트워크) 분석 패키지 NetworkX</title><link>https://freshrimpsushi.github.io/ko/posts/3348/</link><pubDate>Fri, 30 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3348/</guid><description>소개 NetworkX는 그래프(네트워크) 분석을 위한 파이썬 패키지이다. 코드 설치 터미널에서 다음과 같이 입력한다. #설치 &amp;gt; pip install networkx #버전 업데이트 &amp;gt; pip install</description></item><item><title>그래프(네트워크) 시각화 및 분석 프로그램 Gephi</title><link>https://freshrimpsushi.github.io/ko/posts/3346/</link><pubDate>Mon, 26 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/3346/</guid><description>소개 Gephi는 그래프(네트워크) 분석을 위한 오픈소스, 무료 프로그램으로, 특히 시각화에 큰 장점을 갖는다. 윈도우, 맥, 리눅스를 지원한다. 기초적인 사</description></item><item><title>네트워크 이론에서의 허브 노드</title><link>https://freshrimpsushi.github.io/ko/posts/2189/</link><pubDate>Sun, 17 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2189/</guid><description>정의 1 네트워크에서 다른 많은 노드와 연결된 노드를 허브hub라 한다. 설명 네트워크 이론에서의 중심성이란 그 중에서 &amp;lsquo;중요한 노드가 무엇인가&amp;r</description></item><item><title>바라바시-알버트 모델</title><link>https://freshrimpsushi.github.io/ko/posts/2187/</link><pubDate>Wed, 13 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2187/</guid><description>알고리즘 1 Input 링크 파라미터 $m \in \mathbb{N}$ 과 네트워크 사이즈 $N$ 이 주어져 있다고 하자. Step 1. 초기화 노드가 $m$ 개인 최초의 네트워크를 구성한다. 별 다른 이유가 없다면 그 네트</description></item><item><title>청-루 피트니스 모델</title><link>https://freshrimpsushi.github.io/ko/posts/2185/</link><pubDate>Sat, 09 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2185/</guid><description>정의 각 노드 별로 가중치weight를 주고 그에 따라 링크가 연결되는 확률을 다르게 주는 랜덤 네트워크를 피트니스 모델fitness model이라 한다. 알고</description></item><item><title>스케일 프리 네트워크</title><link>https://freshrimpsushi.github.io/ko/posts/2183/</link><pubDate>Tue, 05 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2183/</guid><description>정의 1 차수분포가 파레토 분포인 랜덤 네트워크를 무척도 네트워크scale-free Network라고 한다. 설명 스케일-프리(SF) 네트워크라는 명명</description></item><item><title>네트워크에서 차수의 분포</title><link>https://freshrimpsushi.github.io/ko/posts/2122/</link><pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2122/</guid><description>빌드업 랜덤 네트워크는 그 함수값이 네트워크인 랜덤 엘러먼트이므로, 샘플링을 할 때마다 다른 네트워크를 얻는다. 네트워크를 구축하는 방법에 따라, 즉 모델에 따라</description></item><item><title>랜덤 그래프</title><link>https://freshrimpsushi.github.io/ko/posts/2114/</link><pubDate>Thu, 18 Nov 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2114/</guid><description>정의 쉬운 정의 비결정론적인 절차로 만들어지거나 어떤 확률 분포에 따라 표현되는 그래프를 랜덤 그래프random graph라 한다. 어려운 정의 확률 공간 $( \Omega ,</description></item><item><title>그래프의 패밀리와 프로퍼티</title><link>https://freshrimpsushi.github.io/ko/posts/2112/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/2112/</guid><description>빌드업 $n$ 개의 라벨링 된labeled 버텍스의 집합 $V = [n] = \left\{ 1 ,\cdots , n \right\}$ 를 가진 심플 그래프를 생각해보자. 이 그래프의 에지는 서로 다른 두 버텍스를 고르는 경우</description></item><item><title>완벽 그래프</title><link>https://freshrimpsushi.github.io/ko/posts/1662/</link><pubDate>Sat, 12 Sep 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1662/</guid><description>정의 그래프 $G$ 의 모든 유도 서브 그래프 $H$ 가 다음을 만족하면 완벽 그래프라 한다. $$ \chi (H) = \omega (H) $$ $\chi (H)$ 는 그래프 $H$ 의 크로마틱 수다. $\omega (H)$ 는 그래프 $H$ 의 클리크 수다.</description></item><item><title>앤더슨-리빙스톤 정리 증명</title><link>https://freshrimpsushi.github.io/ko/posts/20/</link><pubDate>Fri, 14 Aug 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/20/</guid><description>정리 1 $R$ 이 유니티 $1$ 을 가지는 가환 링이고 그 영인자들의 집합을 $Z(R)$ 라 하면 그 영인자 그래프 $\Gamma (R)$ 는 연결 그래프고 $\text{diam}(\Gamma (R)) \le 3$ $\text{diam}$ 은 그래프의 지름을 의미한다. 설명 앤더슨</description></item><item><title>영인자 그래프</title><link>https://freshrimpsushi.github.io/ko/posts/1604/</link><pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1604/</guid><description>정의 가환 링 $R$ 이 주어져 있다고 하자. $R$ 의 영인자 집합을 $Z(R)$ 이라고 할 때, 다음과 같이 정의된 그래프 $\Gamma (R)$ 을 $R$ 에 대한 영인자 그래프zero divisor graph라고 한다.</description></item><item><title>4색 지도 문제</title><link>https://freshrimpsushi.github.io/ko/posts/1592/</link><pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1592/</guid><description>빌드업 4색 지도 문제란 어떤 지도든 이웃된 구역이 서로 구별되도록 채색하는데 4가지 색이면 충분한지 묻는 문제다. 지도가 복잡할수록 색은 많아져야할 것 같지만, 바</description></item><item><title>5색 정리 증명</title><link>https://freshrimpsushi.github.io/ko/posts/1590/</link><pubDate>Thu, 16 Jul 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1590/</guid><description>정리 1 모든 심플 평면 그래프는 $5$-채색가능하다. 설명 이 정리는 4색 문제와 구분하는 의미에서 5색 정리라는 이름이 붙었다. 역사적으로는 4색 정리를 증명하</description></item><item><title>그래프 이론에서 지도의 정의</title><link>https://freshrimpsushi.github.io/ko/posts/1586/</link><pubDate>Sun, 12 Jul 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1586/</guid><description>정의 1 $3$-연결 평면 그래프를 지도라 정의한다. 같은 에지를 사이에 두고 이웃한 페이스끼리 다른 색이 되도록 $k$ 개의 색을 칠할 수 있는 지도를 $k$-페이스 채색</description></item><item><title>심플 평면 그래프의 성질</title><link>https://freshrimpsushi.github.io/ko/posts/1584/</link><pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1584/</guid><description>정리 1 $G$ 가 심플 평면 그래프라고 하자. [1]: $G$ 가 연결 그래프고 $n \ge 3$ 개의 버텍스, $m$ 개의 에지를 가지면 $m \le 3n - 6$ [2]: 모든 심플 평면 그래프 $G$ 는 $\deg v \le 5$ 인 버텍스 $v</description></item><item><title>추상적 듀얼 그래프</title><link>https://freshrimpsushi.github.io/ko/posts/1582/</link><pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1582/</guid><description>빌드업 기하적 듀얼 그래프의 성질 [3]: 평면 그래프 $G$ 와 그 기하적 듀얼 그래프 $G^{ \ast }$ 에 대해,$C \subset E(G)$ 가 사이클 $\iff$ $C^{ \ast } \subset E \left( G^{ \ast } \right)$ 는 컷셋 추상적 듀얼 그래프는 직</description></item><item><title>기하적 듀얼 그래프</title><link>https://freshrimpsushi.github.io/ko/posts/1570/</link><pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1570/</guid><description>정의 1 주어진 평면 그래프 $G$ 에 대해 기하적 듀얼 그래프 $G^{ \ast }$ 는 다음과 같이 만들어진다. Step 1. $G$ 의 각 페이스 $f$ 에 대응되는 버텍스 $v^{ \ast }$ 를 찍는다. Step 2. $G$ 의 각 에지</description></item><item><title>그래프의 k-연결성과 멩거 정리</title><link>https://freshrimpsushi.github.io/ko/posts/1576/</link><pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1576/</guid><description>정의 주어진 그래프 $G$ 에 대해 컴포넌트의 수를 $\text{comp} (G)$ 라고 나타내자. 에지-연결성 다음을 만족하는 에지의 집합 $D \subset E(G)$ 를 $G$ 의 단절 집합disconnecting s</description></item><item><title>오일러의 다면체 정리 증명</title><link>https://freshrimpsushi.github.io/ko/posts/82/</link><pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/82/</guid><description>개요 오일러의 다면체 정리는 오일러의 표수 , 그래프 이론에서는 그냥 오일러 공식 으로도 불린다. 기하학적으로는 공간도형의 점, 선, 면이 #점-#선+#면=2 의</description></item><item><title>평면 그래프와 쿠라토프스키 정리</title><link>https://freshrimpsushi.github.io/ko/posts/1565/</link><pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1565/</guid><description>정의 평면 그래프 그래프를 평면에 그렸을 때 에지가 겹치지 않게 그릴 수 있으면 그 그래프를 평면 그래프라 한다. 설명 평면 그래프가 그려지면서 평면 상에서 구분되는 영역</description></item><item><title>그래프의 호메오멀피즘</title><link>https://freshrimpsushi.github.io/ko/posts/1563/</link><pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1563/</guid><description>정의 1 두 그래프 $G_{1}$ 와 $G_{2}$ 가 주어져 있다고 하자. $G_{1}$ 의 어떤 세분 $G_{1} ' $ 과 $G_{2}$ 의 어떤 세분 $G_{2} ' $ 에 대해 그래프 아이소멀피즘이 존재하면 $G_{1}$ 와 $G_{2}$ 가 호메오멀픽homeo</description></item><item><title>그래프 컬러링과 브룩스 정리</title><link>https://freshrimpsushi.github.io/ko/posts/1561/</link><pubDate>Mon, 08 Jun 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1561/</guid><description>정의 루프가 없는 그래프 $G$ 에 대해 다음과 같은 함수 $f : V(G) \to [k]$ 를 $G$ 의 $k$-컬러링이라 한다. $$ u \sim v \implies f(u) \ne f(v) $$ 그래프 $G$ 가 $k$-컬러링을 가지면 $k$-</description></item><item><title>하벨-하키미 알고리즘 증명</title><link>https://freshrimpsushi.github.io/ko/posts/1559/</link><pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1559/</guid><description>정리 증가하지 않는 시퀀스 $D = (d_{1} , \cdots , d_{n})$ 가 주어져있다고 하자. $D$ 가 그래픽하다면 다음과 같은 방법으로 $D$ 의 실현 $G$ 를 찾을 수 있다. Step 1. $n$ 개의 버텍스 $v_{1} , \cdots , v_{n}$</description></item><item><title>에르되시-갈라이 정리</title><link>https://freshrimpsushi.github.io/ko/posts/1557/</link><pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1557/</guid><description>빌드업 그래프 $G$ 의 차수를 중복을 포함해 모아놓은 집합을 그래프 스코어graph Score라 하고, $G$ 의 그래프 스코어를 내림차순으로 정렬한 시퀀스를 $G$ 의 디그</description></item><item><title>레이블 트리와 케일리 정리</title><link>https://freshrimpsushi.github.io/ko/posts/1555/</link><pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1555/</guid><description>정의 각 버텍스에 서로 다른 수가 부여된 트리를 레이블 트리라 한다. 설명 레이블은 버텍스의 집합과 같이 실제로 원소가 같은지 다른지 구분하는 것과는 다른 개념이다. 가</description></item><item><title>트리 그래프</title><link>https://freshrimpsushi.github.io/ko/posts/1552/</link><pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1552/</guid><description>정의 1 사이클이 존재하지 않는 연결 그래프를 트리라 한다. 설명 트리는 컴퓨터 공학의 자료 구조 등에서 흔히 볼 수 있는 개념으로써, 컴퓨터를 조금이라도 다루는 이공계</description></item><item><title>그래프 이론에서의 디락 정리 증명</title><link>https://freshrimpsushi.github.io/ko/posts/1550/</link><pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1550/</guid><description>정리 1 $G$ 가 $n ( \ge 3)$ 개의 버텍스를 가진 심플 그래프라고 하자. [1] 디락 정리: $G$ 의 모든 버텍스 $v$ 에 대해 $\deg (v) \ge n / 2$ 면 $G$ 는 해밀톤 그래프다. [2] 오레 정리: $G$ 의 모</description></item><item><title>해밀톤 그래프</title><link>https://freshrimpsushi.github.io/ko/posts/1548/</link><pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1548/</guid><description>정의 1 $G$ 가 연결 그래프라고 하자. $G$ 의 모든 버텍스를 포함하는 닫힌 패스가 존재하면 $G$ 를 해밀톤 그래프라 하고 그 사이클을 해밀턴 사이클이라 한다. 모든 버텍스를 포</description></item><item><title>플뢰리 알고리즘 증명</title><link>https://freshrimpsushi.github.io/ko/posts/1546/</link><pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1546/</guid><description>정의 1 $G$ 가 오일러 그래프라고 하자. 그러면 다음과 같은 방법으로 오일러 트레일을 만들 수 있다. 임의의 버텍스 $u$ 에서 시작해서 다음의 두 규칙을 따라 트레일을 만든다</description></item><item><title>쾨니히스베르크의 다리 문제와 풀이</title><link>https://freshrimpsushi.github.io/ko/posts/1542/</link><pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1542/</guid><description>문제 1 쾨니히스베르크의 다리 문제는 다음과 같이 도시에 놓인 7개의 다리를 한 번씩만 건너면서 처음 있는 위치로 돌아올 수 있는지에 관한 것이었다. 해법을 모른다면 언</description></item><item><title>오일러 그래프</title><link>https://freshrimpsushi.github.io/ko/posts/1541/</link><pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1541/</guid><description>정의 $G$ 가 연결 그래프라고 하자. $G$ 의 모든 에지를 포함하는 닫힌 트레일이 존재하면 $G$ 를 오일러 그래프라 하고 그 트레일을 오일러 트레일이라 한다. 모든 에지를 포함하</description></item><item><title>쾨닉의 정리 증명</title><link>https://freshrimpsushi.github.io/ko/posts/1534/</link><pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1534/</guid><description>정리 1 $G$ 가 국소적으로 유한인 연결 그래프라고 하자. 그러면 모든 $v \in V(G)$ 에 대해 $v$ 가 시점인 원웨이 무한 패스가 존재한다. 증명 $G$ 는 연결 그래프이므로 $v$ 가 아닌 모든</description></item><item><title>그래프의 오리엔테이션</title><link>https://freshrimpsushi.github.io/ko/posts/1532/</link><pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1532/</guid><description>빌드업 유향 그래프 $D$ 가 주어져 있다고 하자. 아크의 유한 시퀀스를 유향 워크directed walk라 하고 다음과 같이 나타낸다. $$ v_{0} v_{1} , v_{1} v_{2} , \cdots , v_{m-1} v_{m} \\ v_{0}</description></item><item><title>그래프에서의 거리, 네이버후드, 지름, 둘레</title><link>https://freshrimpsushi.github.io/ko/posts/1530/</link><pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1530/</guid><description>정의 그래프 $G$ 에서 시점이 $v \in V(G)$ 고 종점이 $w \in V(G)$ 인 패스의 집합을 $P(v,w)$ 이라 하고 $v \in V(G)$ 를 포함하는 사이클의 집합을 $C(v)$ 라 하자. 그리고 워크 $x$ 의 길이를 $l(x)$ 과 같이 나타내</description></item><item><title>그래프 이론에서의 워크, 트레일, 패스, 사이클</title><link>https://freshrimpsushi.github.io/ko/posts/1528/</link><pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1528/</guid><description>정의 1 그래프 $G$ 가 주어져 있다고 하자. 에지의 유한 시퀀스를 워크라 하고 다음과 같이 나타낸다. $$ v_{0} v_{1} , v_{1} v_{2} , \cdots , v_{m-1} v_{m} \\ v_{0} \rightarrow v_{1} \rightarrow v_{2} \rightarrow \cdots \rightarrow v_{m-1} \rightarrow v_{m} $$ 이 때 $v_{0}$ 을 시</description></item><item><title>무한 그래프</title><link>https://freshrimpsushi.github.io/ko/posts/1526/</link><pubDate>Tue, 14 Apr 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1526/</guid><description>정의 1 그래프 $G$ 의 버텍스 집합 $V(G)$ 나 에지 집합 $E(G)$ 가 무한 집합이면 $G$ 를 무한 그래프라고 한다. $V(G)$ 와 $E(G)$ 가 모두 가산 집합인 무한 그래프 $G$ 를 가산 그래프countabl</description></item><item><title>이분 그래프</title><link>https://freshrimpsushi.github.io/ko/posts/1524/</link><pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1524/</guid><description>정의 1 그래프 $G$ 의 버텍스 $V(G)$ 에 대해 파티션 $\left\{ A,B \right\}$ 가 존재하고 모든 $xy \in E(G)$ 에 대해 $x \in A, y \in B$ 혹은 $x \in B , y \in A$ 이면 $G$ 를 이분 그래프라 부르고 $G = G(A,B)$ 와 같이 나타</description></item><item><title>레귤러 그래프</title><link>https://freshrimpsushi.github.io/ko/posts/1522/</link><pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1522/</guid><description>정의 1 모든 버텍스의 차수가 같은 그래프를 레귤러 그래프regular graph라고 한다. 특히 모든 버텍스의 차수가 $r$ 이면 $r$-레귤러 그래프라고 한다.</description></item><item><title>널 그래프와 컴플리트 그래프</title><link>https://freshrimpsushi.github.io/ko/posts/1520/</link><pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1520/</guid><description>정의 1 심플 그래프 $G$ 가 주어져 있다고 하자. $E(G) = \emptyset$ 이면 $G$ 를 널 그래프라고 한다. $E \left( \overline{G} \right) = \emptyset$ 이면 $G$ 를 컴플리트 그래프라고 한다. 설명 널 그래프는 말 그대로 비어</description></item><item><title>그래프 컴플리먼트</title><link>https://freshrimpsushi.github.io/ko/posts/1515/</link><pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1515/</guid><description>정의 1 심플 그래프 $G$ 에 대해 다음을 만족하는 그래프 $\overline{G}$ 를 $G$ 의 컴플리먼트라 한다. $$ V \left( \overline{G} \right) = V(G) \\ vw \in E \left( \overline{G} \right) \iff vw \notin E(G) $$ 설명 보통의 수학에서 컴플리먼트co</description></item><item><title>서브 그래프</title><link>https://freshrimpsushi.github.io/ko/posts/1513/</link><pubDate>Wed, 25 Mar 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1513/</guid><description>정의 1 그래프 $G$ 에 대해서 그래프 $H$ 가 $V(H) \subset V(G)$ 와 $ E(H) \subset E(G)$ 를 만족하면 $H$ 가 $G$ 의 서브 그래프라 한다. 설명 주의해야하는 것은 $H$ 가 $G$ 의 서브 그래프라고 $H \subset G$ 와 같이 나</description></item><item><title>그래프의 집합 표현</title><link>https://freshrimpsushi.github.io/ko/posts/1512/</link><pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1512/</guid><description>정의 1 두 그래프 $G_{1}$ 과 $G_{2}$ 에 대해 $V(G_{1}) \cap V(G_{2}) = \emptyset$ 이라고 하자. 두 그래프의 유니언union $G = G_{1} \cup G_{2}$ 은 버텍스 셋 $V(G_{1}) \cup V(G_{2})$ 과 에지 셋 $E (G_{1}) \cup E ( G_{2} )$ 을 가지는 그래프다.</description></item><item><title>그래프의 행렬 표현</title><link>https://freshrimpsushi.github.io/ko/posts/1499/</link><pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1499/</guid><description>정의 1 그래프 $G(V,E)$가 주어졌다고 하자. 차수 행렬 각 버텍스 $v_{i}\in V$ 의 차수 $d(v_{i})$를 간단히 $d_{i}$라고 표기하자. 다음과 같은 행</description></item><item><title>악수 딜레마 증명</title><link>https://freshrimpsushi.github.io/ko/posts/1506/</link><pubDate>Fri, 13 Mar 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1506/</guid><description>정리 1 임의의 유향 그래프에서, 입력 차수의 합과 출력 차수의 합은 같다. 설명 악수 딜레마는 유향 그래프에서의 악수 렘마라고 할 수 있다. 증명 유향 그래프에서 출력 차</description></item><item><title>악수 렘마 증명</title><link>https://freshrimpsushi.github.io/ko/posts/1504/</link><pubDate>Mon, 09 Mar 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1504/</guid><description>정리 1 임의의 그래프에서, 모든 버텍스의 차수의 합은 짝수다. 설명 이름의 &amp;lsquo;악수&amp;rsquo;는 보다시피 각각의 버텍스가 인접한 버텍스와 악수를</description></item><item><title>그래프 이론에서의 차수</title><link>https://freshrimpsushi.github.io/ko/posts/1496/</link><pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1496/</guid><description>정의 1 유향 그래프 $G$ 가 주어져있다고 하자. 에지 $vw$ 가 존재하면 에지가 $v$ 에서 나가고 $w$ 로 들어간다고 말한다. 버텍스 $v$ 로 들어오는 에지의 수를 입력 차수indeg</description></item><item><title>그래프의 아이소멀피즘</title><link>https://freshrimpsushi.github.io/ko/posts/1492/</link><pubDate>Fri, 28 Feb 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/1492/</guid><description>정의 1 두 그래프 $G_{1}$ 와 $G_{2}$ 가 주어져 있다고 하자. $V(G_{1})$ 과 $V(G_{2})$ 사이에 전단사가 존재하고 $G_{1}$ 의 버텍스끼리의 에지의 수와 그에 대응하는 $G_{2}$ 의 버텍스끼리의 에지의 수가 같으면 그</description></item><item><title>수학에서의 그래프와 네트워크</title><link>https://freshrimpsushi.github.io/ko/posts/966/</link><pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/ko/posts/966/</guid><description>정의 1 정점과 정점들을 연결한 선들로 이루어진 집합을 그래프 혹은 네트워크라고 한다. 정점들의 집합을 $V$, 선들의 집합을 $E$라고 하자. $V(G) := V$ 의 원소를 $G$ 의 버텍</description></item></channel></rss>