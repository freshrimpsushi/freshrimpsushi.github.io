<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>최적화이론 on 생새우초밥집</title>
    <link>https://freshrimpsushi.github.io/categories/%EC%B5%9C%EC%A0%81%ED%99%94%EC%9D%B4%EB%A1%A0/</link>
    <description>Recent content in 최적화이론 on 생새우초밥집</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <lastBuildDate>Sun, 31 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://freshrimpsushi.github.io/categories/%EC%B5%9C%EC%A0%81%ED%99%94%EC%9D%B4%EB%A1%A0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>이계도함수법: 뉴턴 메서드</title>
      <link>https://freshrimpsushi.github.io/posts/second-order-derivative-method-newtons-method/</link>
      <pubDate>Sun, 31 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/second-order-derivative-method-newtons-method/</guid>
      <description>정의1 2 목적함수 $J : \mathbb{R}^{n} \to \mathbb{R}$를 최적화하는 문제에서, 다음과 같은 반복 알고리즘을 뉴턴 메서드Newton&amp;rsquo;s metho</description>
    </item>
    
    <item>
      <title>최적화이론의 라그랑주 승수법</title>
      <link>https://freshrimpsushi.github.io/posts/lagrangian-multiplier-in-optimization-theory/</link>
      <pubDate>Wed, 21 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/lagrangian-multiplier-in-optimization-theory/</guid>
      <description>⚡ 이 포스트는 패스트 트랙Fast Track으로 작성되었습니다. 설명 비선형인 목적 함수를 가지는 비선형 최적화 문제에서 제약조건에 라그랑주 승수Lagra</description>
    </item>
    
    <item>
      <title>R로 선형계획문제 푸는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-solve-linear-programming-problem-using-r/</link>
      <pubDate>Wed, 29 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-solve-linear-programming-problem-using-r/</guid>
      <description>개요 lpSolve 패키지를 사용하면 된다.1 행렬 꼴로 나타난 선형계획문제의 $A, \mathbf{b}, \mathbf{c}$ 를 넣어서 쓴다. 코드 $$ \begin{matrix} \text{Maximize} &amp;amp; &amp;amp; x_{1} &amp;amp; + &amp;amp; x_{2} \\ \text{subject to} &amp;amp;-&amp;amp; x_{1} &amp;amp; + &amp;amp; x_{2} &amp;amp; \le &amp;amp; 1 \\ &amp;amp; &amp;amp; x_{1} &amp;amp; &amp;amp;</description>
    </item>
    
    <item>
      <title>매트랩으로 선형계획문제 푸는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-solve-linear-programming-problem-using-matlab/</link>
      <pubDate>Sat, 25 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-solve-linear-programming-problem-using-matlab/</guid>
      <description>개요 Optimization Toolbox를 사용하면 된다.1 행렬 꼴로 나타난 선형계획문제의 $A, \mathbf{b}, \mathbf{c}$ 를 넣어서 쓴다. 코드 $$ \begin{matrix} \text{Maximize} &amp;amp; &amp;amp; x_{1} &amp;amp; + &amp;amp; x_{2} \\ \text{subject to} &amp;amp;-&amp;amp; x_{1} &amp;amp; + &amp;amp; x_{2} &amp;amp; \le &amp;amp; 1 \\ &amp;amp;</description>
    </item>
    
    <item>
      <title>파이썬으로 선형계획문제 푸는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-solve-linear-programming-problem-using-python/</link>
      <pubDate>Tue, 21 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-solve-linear-programming-problem-using-python/</guid>
      <description>개요 scipy 패키지를 사용하면 된다.1 행렬 꼴로 나타난 선형계획문제의 $A, \mathbf{b}, \mathbf{c}$ 를 넣어서 쓴다. 코드 $$ \begin{matrix} \text{Maximize} &amp;amp; &amp;amp; x_{1} &amp;amp; + &amp;amp; x_{2} \\ \text{subject to} &amp;amp;-&amp;amp; x_{1} &amp;amp; + &amp;amp; x_{2} &amp;amp; \le &amp;amp; 1 \\ &amp;amp; &amp;amp; x_{1} &amp;amp; &amp;amp;</description>
    </item>
    
    <item>
      <title>줄리아로 선형계획문제 푸는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-solve-linear-programming-problem-using-julia/</link>
      <pubDate>Fri, 17 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-solve-linear-programming-problem-using-julia/</guid>
      <description>개요 JuMP 패키지를 사용하면 된다.1 JuMP는 Julia Mathematical Programming의 준말이다. 다른 언어와 비교해보자면 줄리아에서의 코딩은 거의 수식을 있는 그대로 옮</description>
    </item>
    
    <item>
      <title>엑셀로 선형계획문제 푸는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-solve-linear-programming-problem-using-excel/</link>
      <pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-solve-linear-programming-problem-using-excel/</guid>
      <description>가이드 Step 1. 해 찾기 추가 기능 활성화 파일/옵션/추가 기능 탭에서 관리(A)의 Excel 추가 기능 옆에 있는 이동(G) 버튼을 클릭한다. 다음과 같이 추가 기능이라는 창이</description>
    </item>
    
    <item>
      <title>선형계획법에서의 강한 쌍대성 정리 증명</title>
      <link>https://freshrimpsushi.github.io/posts/proof-of-strong-duality-theorem-in-linear-programming/</link>
      <pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/proof-of-strong-duality-theorem-in-linear-programming/</guid>
      <description>정리 $$ \begin{align*} \text{Maximize} &amp;amp; \sum_{j=1}^{n} c_{j} x_{j} &amp;amp; \text{(Primal)} \\ \text{subject to} &amp;amp; \sum_{j=1}^{n} a_{ij} x_{j} \le b_{i} &amp;amp; i = 1 ,\cdots , m \\ &amp;amp; x_{j} \ge 0 &amp;amp; j = 1, \cdots , n \end{align*} $$ $$ \begin{align*} \text{Minimize} &amp;amp; \sum_{i=1}^{m} b_{i} y_{i} &amp;amp; \text{(Dual)} \\ \text{subject to} &amp;amp; \sum_{i=1}^{m} y_{i} a_{ij} \ge c_{j} &amp;amp; j = 1 ,\cdots , n \\ &amp;amp; y_{i} \ge</description>
    </item>
    
    <item>
      <title>선형계획법에서의 약한 쌍대성 정리 증명</title>
      <link>https://freshrimpsushi.github.io/posts/proof-of-weak-duality-theorem-in-linear-programming/</link>
      <pubDate>Sun, 05 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/proof-of-weak-duality-theorem-in-linear-programming/</guid>
      <description>정리 $$ \begin{align*} \text{Maximize} &amp;amp; \sum_{j=1}^{n} c_{j} x_{j} &amp;amp; \text{(Primal)} \\ \text{subject to} &amp;amp; \sum_{j=1}^{n} a_{ij} x_{j} \le b_{i} &amp;amp; i = 1 ,\cdots , m \\ &amp;amp; x_{j} \ge 0 &amp;amp; j = 1, \cdots , n \end{align*} $$ $$ \begin{align*} \text{Minimize} &amp;amp; \sum_{i=1}^{m} b_{i} y_{i} &amp;amp; \text{(Dual)} \\ \text{subject to} &amp;amp; \sum_{i=1}^{m} y_{i} a_{ij} \ge c_{j} &amp;amp; j = 1 ,\cdots , n \\ &amp;amp; y_{i} \ge</description>
    </item>
    
    <item>
      <title>선형계획법에서의 듀얼</title>
      <link>https://freshrimpsushi.github.io/posts/duality-in-linear-programming/</link>
      <pubDate>Wed, 01 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/duality-in-linear-programming/</guid>
      <description>빌드업 $x_{1} , x_{2} \ge 0$ 에 대해 다음과 같은 선형계획문제가 주어져 있다고 하자. $$ \begin{matrix} \text{Maximize} &amp;amp; &amp;amp; 2x_{1} &amp;amp; + &amp;amp; 3x_{2} \\ \text{subject to} &amp;amp; &amp;amp; 4x_{1} &amp;amp; + &amp;amp; 8x_{2} &amp;amp; \le &amp;amp; 12 \\ &amp;amp; &amp;amp; 2x_{1} &amp;amp; + &amp;amp; x_{2} &amp;amp; \le &amp;amp; 3 \\ &amp;amp;</description>
    </item>
    
    <item>
      <title>선형계획법의 기본정리 증명</title>
      <link>https://freshrimpsushi.github.io/posts/proof-of-fundamental-theorem-of-linear-programming/</link>
      <pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/proof-of-fundamental-theorem-of-linear-programming/</guid>
      <description>정리 방정식 폼의 선형계획문제에 대해, 다음 셋 중 하나는 참이다. (1): 만약 최적해가 존재하지 않는다면, 애초에 문제 자체가 비가용Infeasible이거나 언바</description>
    </item>
    
    <item>
      <title>심플렉스 메소드의 브랜드 룰</title>
      <link>https://freshrimpsushi.github.io/posts/brand-rule-of-simplex-method/</link>
      <pubDate>Tue, 21 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/brand-rule-of-simplex-method/</guid>
      <description>정리 딕셔너리: $i = 1 , \cdots , m$ 에 대해서 다음과 같은 꼴의 연립방정식을 딕셔너리Dictionary라 한다. $$ \begin{align*} \zeta &amp;amp;=&amp;amp; &amp;amp; &amp;amp; \sum_{j=1}^{n} c_{j} x_{j} \\ x_{n+i} &amp;amp;=&amp;amp; b_{i} &amp;amp;-&amp;amp; \sum_{j=1}^{n} a_{ij} x_{j} \end{align*} $$ $\zeta$ 를</description>
    </item>
    
    <item>
      <title>심플렉스 메소드의 사이클링</title>
      <link>https://freshrimpsushi.github.io/posts/cycling-of-simplex-method/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/cycling-of-simplex-method/</guid>
      <description>정의 $$ \begin{matrix} \text{Maximize} &amp;amp; \mathbf{c}^{T} \mathbf{x} \\ \text{subject to} &amp;amp; A \mathbf{x} = \mathbf{b} \\ &amp;amp; \mathbf{x} \ge \mathbf{0} \end{matrix} $$ 행렬 $A \in \mathbb{R}^{m \times n}$ 과 $\mathbf{b} \in \mathbb{R}^{m \times 1}$ 와 $\mathbf{c} \in \mathbb{R}^{n}$ 에 대해 선형계획문제가 위와 같이 방정식 폼으로 나타난다고 하고, $i =</description>
    </item>
    
    <item>
      <title>선형계획법에서 목적 함수의 무한성</title>
      <link>https://freshrimpsushi.github.io/posts/unboundedness-of-objective-function-in-linear-programming/</link>
      <pubDate>Mon, 13 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/unboundedness-of-objective-function-in-linear-programming/</guid>
      <description>설명 $$ \begin{matrix} \text{Maximize} &amp;amp; \mathbf{c}^{T} \mathbf{x} \\ \text{subject to} &amp;amp; A \mathbf{x} = \mathbf{b} \\ &amp;amp; \mathbf{x} \ge \mathbf{0} \end{matrix} $$ 행렬 $A \in \mathbb{R}^{m \times n}$ 과 $\mathbf{b} \in \mathbb{R}^{m \times 1}$ 와 $\mathbf{c} \in \mathbb{R}^{n}$ 에 대해 선형계획문제가 위와 같이 방정식 폼으로 나타난다고 하자. 제약</description>
    </item>
    
    <item>
      <title>심플렉스 메소드의 초기화와 보조문제</title>
      <link>https://freshrimpsushi.github.io/posts/initialization-and-auxiliary-problem-of-simplex-method/</link>
      <pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/initialization-and-auxiliary-problem-of-simplex-method/</guid>
      <description>빌드업 $$ \begin{matrix} \text{Maximize} &amp;amp; \mathbf{c}^{T} \mathbf{x} \\ \text{subject to} &amp;amp; A \mathbf{x} = \mathbf{b} \\ &amp;amp; \mathbf{x} \ge \mathbf{0} \end{matrix} $$ 행렬 $A \in \mathbb{R}^{m \times n}$ 과 $\mathbf{b} \in \mathbb{R}^{m \times 1}$ 와 $\mathbf{c} \in \mathbb{R}^{n}$ 에 대해 선형계획문제가 위와 같이 방정식 폼으로 나타난다고 하자. 그</description>
    </item>
    
    <item>
      <title>선형계획법의 심플렉스 메소드</title>
      <link>https://freshrimpsushi.github.io/posts/simplex-method-of-linear-programming/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/simplex-method-of-linear-programming/</guid>
      <description>빌드업 1 $x_{1} , x_{2} \ge 0$ 에 대해 다음과 같은 선형계획문제가 주어져 있다고 하자. $$ \begin{matrix} \text{Maximize} &amp;amp; &amp;amp; x_{1} &amp;amp; + &amp;amp; x_{2} \\ \text{subject to} &amp;amp;-&amp;amp; x_{1} &amp;amp; + &amp;amp; x_{2} &amp;amp; \le &amp;amp; 1 \\ &amp;amp; &amp;amp; x_{1} &amp;amp; &amp;amp; &amp;amp; \le &amp;amp; 3 \\ &amp;amp; &amp;amp; &amp;amp;</description>
    </item>
    
    <item>
      <title>선형계획법에서의 딕셔너리와 태블로</title>
      <link>https://freshrimpsushi.github.io/posts/dictionary-and-tableau-in-linear-programming/</link>
      <pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/dictionary-and-tableau-in-linear-programming/</guid>
      <description>노테이션 $$ \begin{matrix} \text{Maximize} &amp;amp; \mathbf{c}^{T} \mathbf{x} \\ \text{subject to} &amp;amp; A \mathbf{x} = \mathbf{b} \\ &amp;amp; \mathbf{x} \ge \mathbf{0} \end{matrix} $$ 행렬 $A \in \mathbb{R}^{m \times n}$ 과 $\mathbf{b} \in \mathbb{R}^{m \times 1}$ 와 $\mathbf{c} \in \mathbb{R}^{n}$ 에 대해 선형계획문제가 위와 같이 방정식 폼으로 나타난다고 하고,</description>
    </item>
    
    <item>
      <title>선형계획문제에서 최적해가 존재한다면 그 중 하나는 기저가용해다</title>
      <link>https://freshrimpsushi.github.io/posts/at-least-one-of-optima-is-basic-feasible-in-linear-program/</link>
      <pubDate>Wed, 06 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/at-least-one-of-optima-is-basic-feasible-in-linear-program/</guid>
      <description>정리 1 $$ \begin{matrix} \text{Maximize} &amp;amp; \mathbf{c}^{T} \mathbf{x} \\ \text{subject to} &amp;amp; A \mathbf{x} = \mathbf{b} \\ &amp;amp; \mathbf{x} \ge \mathbf{0} \end{matrix} $$ 행렬 $A \in \mathbb{R}^{m \times n}$ 과 $\mathbf{b} \in \mathbb{R}^{m \times 1}$ 와 $\mathbf{c} \in \mathbb{R}^{n}$ 에 대해 선형계획문제가 위와 같이 방정식 폼으로 나타난다고 하자. 만</description>
    </item>
    
    <item>
      <title>선형계획문제의 방정식 폼에서 최적해의 존재성 증명</title>
      <link>https://freshrimpsushi.github.io/posts/proof-of-existence-of-optimal-solution-of-linear-program/</link>
      <pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/proof-of-existence-of-optimal-solution-of-linear-program/</guid>
      <description>정리 1 $$ \begin{matrix} \text{Maximize} &amp;amp; \mathbf{c}^{T} \mathbf{x} \\ \text{subject to} &amp;amp; A \mathbf{x} = \mathbf{b} \\ &amp;amp; \mathbf{x} \ge \mathbf{0} \end{matrix} $$ 행렬 $A \in \mathbb{R}^{m \times n}$ 과 $\mathbf{b} \in \mathbb{R}^{m \times 1}$ 와 $\mathbf{c} \in \mathbb{R}^{n}$ 에 대해 선형계획문제가 위와 같이 방정식 폼으로 나타난다고 하자. 만</description>
    </item>
    
    <item>
      <title>기저가용해의 유일성 증명</title>
      <link>https://freshrimpsushi.github.io/posts/proof-of-uniqueness-of-basic-feasible-solution-of-linear-program/</link>
      <pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/proof-of-uniqueness-of-basic-feasible-solution-of-linear-program/</guid>
      <description>정리 1 $$ \begin{matrix} \text{Maximize} &amp;amp; \mathbf{c}^{T} \mathbf{x} \\ \text{subject to} &amp;amp; A \mathbf{x} = \mathbf{b} \\ &amp;amp; \mathbf{x} \ge \mathbf{0} \end{matrix} $$ 행렬 $A \in \mathbb{R}^{m \times n}$ 과 $\mathbf{b} \in \mathbb{R}^{m \times 1}$ 와 $\mathbf{c} \in \mathbb{R}^{n}$ 에 대해 선형계획문제가 위와 같이 방정식 폼으로 나타난다고 할 때, 그</description>
    </item>
    
    <item>
      <title>선형 계획 문제의 기저가용해</title>
      <link>https://freshrimpsushi.github.io/posts/basic-feasible-solution-of-linear-program/</link>
      <pubDate>Fri, 24 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/basic-feasible-solution-of-linear-program/</guid>
      <description>정의 1 $$ \begin{matrix} \text{Maximize} &amp;amp; \mathbf{c}^{T} \mathbf{x} \\ \text{subject to} &amp;amp; A \mathbf{x} = \mathbf{b} \\ &amp;amp; \mathbf{x} \ge \mathbf{0} \end{matrix} $$ 행렬 $A \in \mathbb{R}^{m \times n}$ 과 $\mathbf{b} \in \mathbb{R}^{m \times 1}$ 와 $\mathbf{c} \in \mathbb{R}^{n}$ 에 대해 선형계획문제가 위와 같이 방정식 폼으로 나타난다고 할 때, 그</description>
    </item>
    
    <item>
      <title>선형 계획 문제의 방정식 폼</title>
      <link>https://freshrimpsushi.github.io/posts/equational-form-of-a-linear-program/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/equational-form-of-a-linear-program/</guid>
      <description>정의 1 행렬 $A \in \mathbb{R}^{m \times n}$ 과 $\mathbf{b} \in \mathbb{R}^{m \times 1}$ 와 $\mathbf{c} \in \mathbb{R}^{n}$ 에 대해 다음과 같은 선형계획문제를 표준형Standard Form 혹은 방정식 폼Equational Form이라 한</description>
    </item>
    
    <item>
      <title>선형 계획 문제의 정의</title>
      <link>https://freshrimpsushi.github.io/posts/definition-of-linear-programming-problem/</link>
      <pubDate>Mon, 23 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/definition-of-linear-programming-problem/</guid>
      <description>정의 1 목적 함수Objective Function와 제약Constraint들이 리니어한 최적화 문제를 선형 계획 문제Linear Programming Problem, 짧게는 선형 문제</description>
    </item>
    
    <item>
      <title>최적해: 최대인수와 최소인수</title>
      <link>https://freshrimpsushi.github.io/posts/optimizer-argmax-and-argmin/</link>
      <pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/optimizer-argmax-and-argmin/</guid>
      <description>어려운 정의 임의의 집합 $X$ 과 전순서집합 $\left( Y, \le \right)$ 가 주어져 있다고 하자. $X$ 의 부분집합 $S \subset X$ 에 대해 함수 $f : X \to Y$ 의 최대인수Argument of Maxima $\argmax_{S} : Y^{X} \to 2^{X}$</description>
    </item>
    
    <item>
      <title>최적값: 최대값과 최소값</title>
      <link>https://freshrimpsushi.github.io/posts/optimum-maximum-minimum/</link>
      <pubDate>Fri, 28 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/optimum-maximum-minimum/</guid>
      <description>쉬운 정의 최대값Maximum과 최소값Minimum을 통틀어 최적값Optimum이라 한다. 집합 $X$ 에서 가장 큰 원소를 최대값 $\max X$, 가장 작은 원소를 최소값</description>
    </item>
    
    <item>
      <title>확률적 경사 하강법</title>
      <link>https://freshrimpsushi.github.io/posts/stochastic-gradient-descent-method/</link>
      <pubDate>Wed, 29 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/stochastic-gradient-descent-method/</guid>
      <description>정의 목적 함수 $Q$ 와 러닝 레이트 $\alpha &amp;gt; 0$, 배치사이즈 $m$ 과 $i$번째 데이터에 대해 $$ \omega_{n+1} := \omega_{n} - \alpha {{ 1 } \over { n }} \sum_{i=1}^{m} \nabla Q_{i} ( \omega_{n} ) $$ 를 확률적 경사 하강법이라 한다. 설명</description>
    </item>
    
    <item>
      <title>수학에서의 최적화 기법</title>
      <link>https://freshrimpsushi.github.io/posts/optimization-method/</link>
      <pubDate>Sat, 25 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/optimization-method/</guid>
      <description>정의 함수 $f : \mathbb{R}^{n} \to \mathbb{R}$ 의 함수값이 최소가 되도록 하는 $x^{ \ast } = \argmin_{x} f(x)$ 를 구하는 문제를 최적화 문제Optimization Problem라 하고, 그 문제를 푸는 알</description>
    </item>
    
    <item>
      <title>수학에서의 경사하강법</title>
      <link>https://freshrimpsushi.github.io/posts/gradient-descent-method/</link>
      <pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/gradient-descent-method/</guid>
      <description>정의 1 스칼라 함수 $\varphi : \mathbb{R}^{n} \to \mathbb{R}$ 을 비용 함수Cost Function이라 한다. 비용 함수 $ \varphi ( \mathbb{x} )$ 의 극소값을 구하기 위해 $\mathbb{x} = \mathbb{x}_{n}$ 에서 $\varphi ( \mathbb{x}_{n+1} ) &amp;lt; \varphi ( \mathbb{x}_{n} )$ 를 만</description>
    </item>
    
    <item>
      <title>Proximal Alternating Linearized Minimization 알고리즘</title>
      <link>https://freshrimpsushi.github.io/posts/proximal-alternating-linearzied-minimization-algorithm/</link>
      <pubDate>Sun, 11 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/proximal-alternating-linearzied-minimization-algorithm/</guid>
      <description>개요 Jérôme Bolte, Shoham Sabach, 그리고 Marc Teboulle의 논문 Proximal alternating linearized minimization for nonconvex and nonsmooth problems에서 소개된 최적화 기법인 Proximal Alternating Linearized Minimization(PALM) 알고리즘에 대해 설명한다. 알</description>
    </item>
    
    <item>
      <title>프락시멀 그래디언트 메서드</title>
      <link>https://freshrimpsushi.github.io/posts/proximal-gradient-method/</link>
      <pubDate>Fri, 09 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/proximal-gradient-method/</guid>
      <description>정의 1 미분불가능한 목적함수 $H(\mathbf{x}) : \mathbb{R}^{n} \to \mathbb{R}$가 미분가능한 함수 $f$와 미분불가능한 함수 $g$로 분해된다고 하자. $$ H(\mathbf{x}) = f(\mathbf{x}) + g(\mathbf{x}) $$ 다음과</description>
    </item>
    
    <item>
      <title>서브그래디언트 메서드</title>
      <link>https://freshrimpsushi.github.io/posts/subgradient-method/</link>
      <pubDate>Wed, 07 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/subgradient-method/</guid>
      <description>정의1 목적함수 $f : \mathbb{R}^{n} \to \mathbb{R}$가 컨벡스 함수라고 하자. 점 $\mathbf{x}^{(k)}$에서 $f$의 서브그래디언트를 $\ma</description>
    </item>
    
    <item>
      <title>서브그래디언트</title>
      <link>https://freshrimpsushi.github.io/posts/subgradient/</link>
      <pubDate>Mon, 05 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/subgradient/</guid>
      <description>정의 1 2 함수 $f : \mathbb{R}^{n} \to \mathbb{R}$에 대해서, 다음을 만족하는 $\mathbf{g} \in \mathbb{R}^{n}$를 점 $\mathbf{x}$에서의 $f$</description>
    </item>
    
    <item>
      <title>교대 최적화</title>
      <link>https://freshrimpsushi.github.io/posts/alternating-optimization/</link>
      <pubDate>Sat, 03 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/alternating-optimization/</guid>
      <description>정의 다변수함수인 목적함수를 최적화할 때, 하나의 변수에 대해서만 최적화하는 것을 각 변수마다 번갈아가면서 시행하는 것을 교대 최적화alternating o</description>
    </item>
    
    <item>
      <title>프락시멀 최소화 알고리즘</title>
      <link>https://freshrimpsushi.github.io/posts/proximal-minimization-algorithm/</link>
      <pubDate>Thu, 01 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/proximal-minimization-algorithm/</guid>
      <description>정의1 목적함수 $f : \mathbb{R}^{n} \to \mathbb{R}^{n}$에 대한 최적화문제를 풀 때, 프락시멀 오퍼레이터를 반복 적용하여 최적해 $\mathbf{x}^{</description>
    </item>
    
    <item>
      <title>프락시멀 오퍼레이터</title>
      <link>https://freshrimpsushi.github.io/posts/proximal-operator/</link>
      <pubDate>Tue, 29 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/proximal-operator/</guid>
      <description>정의1 벡터공간 $X$의 놈을 $\left\| \cdot \right\|_{X}$라 하자. 함수 $f : X \to \mathbb{R}$에 대한 프락시멀 오퍼레이터proximal operator</description>
    </item>
    
    <item>
      <title>다변수함수의 극값에 대한 1계 필요 조건</title>
      <link>https://freshrimpsushi.github.io/posts/first-order-necessary-condition-for-local-minimum-of-multivariate-function/</link>
      <pubDate>Wed, 08 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/first-order-necessary-condition-for-local-minimum-of-multivariate-function/</guid>
      <description>정리1 함수 $f : \mathbb{R}^{n} \to \mathbb{R}$가 주어졌다고 하자. 만약 $x^{\ast}$가 지역 최적해local optimizer이고, $x^{\a</description>
    </item>
    
    <item>
      <title>다변수함수의 극값에 대한 2계 필요/충분 조건</title>
      <link>https://freshrimpsushi.github.io/posts/second-order-necessary-sufficient-condition-for-local-minimum-of-multivariate-function/</link>
      <pubDate>Mon, 06 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/second-order-necessary-sufficient-condition-for-local-minimum-of-multivariate-function/</guid>
      <description>정리1 함수 $f : \mathbb{R}^{n} \to \mathbb{R}$가 주어졌다고 하자. $\nabla f$, $\nabla^{2}f$를 각각 $f$의 그래디언트와 헤시안이라고 하자. 2계 필요</description>
    </item>
    
  </channel>
</rss>
