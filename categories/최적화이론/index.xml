<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>최적화이론 on 생새우초밥집</title>
    <link>https://freshrimpsushi.github.io/categories/%EC%B5%9C%EC%A0%81%ED%99%94%EC%9D%B4%EB%A1%A0/</link>
    <description>Recent content in 최적화이론 on 생새우초밥집</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <lastBuildDate>Wed, 06 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://freshrimpsushi.github.io/categories/%EC%B5%9C%EC%A0%81%ED%99%94%EC%9D%B4%EB%A1%A0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>선형계획문제에서 최적해가 존재한다면 그 중 하나는 기저가용해다</title>
      <link>https://freshrimpsushi.github.io/posts/at-least-one-of-optima-is-basic-feasible-in-linear-program/</link>
      <pubDate>Wed, 06 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/at-least-one-of-optima-is-basic-feasible-in-linear-program/</guid>
      <description>정리 1 $$ \begin{matrix} \text{Maximize} &amp;amp; \mathbf{c}^{T} \mathbf{x} \\ \text{subject to} &amp;amp; A \mathbf{x} = \mathbf{b} \\ &amp;amp; \mathbf{x} \ge \mathbf{0} \end{matrix} $$ 행렬 $A \in \mathbb{R}^{m \times n}$ 과 $\mathbf{b} \in \mathbb{R}^{m \times 1}$ 와 $\mathbf{c} \in \mathbb{R}^{n}$ 에 대해 선형계획문제가 위와 같이 방정식 폼으로 나타난다고 하자. 만약 최적해가 존재한다면, 최적기저가용해도 존재한다. $\mathbf{c}^{T}$ 는 전치를 의미한다. 가용해란 최적화와 관계 없이 일단 제약 조건을 만족시키는 해를 말한다. 증명 전략: 이 증명은 본질적으로 최적</description>
    </item>
    
    <item>
      <title>선형계획문제의 방정식 폼에서 최적해의 존재성 증명</title>
      <link>https://freshrimpsushi.github.io/posts/proof-of-existence-of-optimal-solution-of-linear-program/</link>
      <pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/proof-of-existence-of-optimal-solution-of-linear-program/</guid>
      <description>정리 1 $$ \begin{matrix} \text{Maximize} &amp;amp; \mathbf{c}^{T} \mathbf{x} \\ \text{subject to} &amp;amp; A \mathbf{x} = \mathbf{b} \\ &amp;amp; \mathbf{x} \ge \mathbf{0} \end{matrix} $$ 행렬 $A \in \mathbb{R}^{m \times n}$ 과 $\mathbf{b} \in \mathbb{R}^{m \times 1}$ 와 $\mathbf{c} \in \mathbb{R}^{n}$ 에 대해 선형계획문제가 위와 같이 방정식 폼으로 나타난다고 하자. 만약 적어도 하나의 가용해가 존재하며, 가용해의 집합에서 $\mathbf{c}^{T} \mathbf{x}$ 가 위로 유계Bounded Above면 최적해가 존재한다. $\mathbf{c}^{T}$ 는 전치를 의미한다. 가용해란 최적화와 관계 없이 일단 제약 조</description>
    </item>
    
    <item>
      <title>기저가용해의 유일성 증명</title>
      <link>https://freshrimpsushi.github.io/posts/proof-of-uniqueness-of-basic-feasible-solution-of-linear-program/</link>
      <pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/proof-of-uniqueness-of-basic-feasible-solution-of-linear-program/</guid>
      <description>정리 1 $$ \begin{matrix} \text{Maximize} &amp;amp; \mathbf{c}^{T} \mathbf{x} \\ \text{subject to} &amp;amp; A \mathbf{x} = \mathbf{b} \\ &amp;amp; \mathbf{x} \ge \mathbf{0} \end{matrix} $$ 행렬 $A \in \mathbb{R}^{m \times n}$ 과 $\mathbf{b} \in \mathbb{R}^{m \times 1}$ 와 $\mathbf{c} \in \mathbb{R}^{n}$ 에 대해 선형계획문제가 위와 같이 방정식 폼으로 나타난다고 할 때, 그 기저가용해는 기저 $B$ 에 따라 유일하게 결정된다. $\mathbf{c}^{T}$ 는 전치를 의미한다. 가용해란 최적화와 관계 없이 일단 제약 조건을 만족시키는 해를 말한다. $[n] = \left\{ 1, \cdots , n \right\}$ 은 $1$ 부터 $n$ 까지의 자연수</description>
    </item>
    
    <item>
      <title>선형 계획 문제의 기저가용해</title>
      <link>https://freshrimpsushi.github.io/posts/basic-feasible-solution-of-linear-program/</link>
      <pubDate>Fri, 24 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/basic-feasible-solution-of-linear-program/</guid>
      <description>정의 1 $$ \begin{matrix} \text{Maximize} &amp;amp; \mathbf{c}^{T} \mathbf{x} \\ \text{subject to} &amp;amp; A \mathbf{x} = \mathbf{b} \\ &amp;amp; \mathbf{x} \ge \mathbf{0} \end{matrix} $$ 행렬 $A \in \mathbb{R}^{m \times n}$ 과 $\mathbf{b} \in \mathbb{R}^{m \times 1}$ 와 $\mathbf{c} \in \mathbb{R}^{n}$ 에 대해 선형계획문제가 위와 같이 방정식 폼으로 나타난다고 할 때, 그 가용해 $\mathbf{x} \in \mathbb{R}^{n}$ 에 대해 기수가 $m$ 인 집합 $B \subseteq [n]$ 이 존재해서 다음 두 조건을 만족시키면 $\mathbf{x} = \left( x_{1} , \cdots , x_{n} \right)$ 를 기저가용해Basic Feasible Solution라 한다. (i): $\exists A_{B}^{-1}$ (ii): $x_{j} = 0 \forall j \notin B$ 이</description>
    </item>
    
    <item>
      <title>선형 계획 문제의 방정식 폼</title>
      <link>https://freshrimpsushi.github.io/posts/equational-form-of-a-linear-program/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/equational-form-of-a-linear-program/</guid>
      <description>정의 1 행렬 $A \in \mathbb{R}^{m \times n}$ 과 $\mathbf{b} \in \mathbb{R}^{m \times 1}$ 와 $\mathbf{c} \in \mathbb{R}^{n}$ 에 대해 다음과 같은 선형계획문제를 표준형Standard Form 혹은 방정식 폼Equational Form이라 한다. $$ \begin{matrix} \text{Maximize} &amp;amp; \mathbf{c}^{T} \mathbf{x} \\ \text{subject to} &amp;amp; A \mathbf{x} = \mathbf{b} \\ &amp;amp; \mathbf{x} \ge \mathbf{0} \end{matrix} $$ $\mathbf{c}^{T}$ 는 전치를 의미한다. 최적화는 최대화 혹은 최소화를 말한다. 설명 표준형으로의 변환 기본적으로는 어떤 선형계획문제라도 표준형으</description>
    </item>
    
    <item>
      <title>선형 계획 문제의 정의</title>
      <link>https://freshrimpsushi.github.io/posts/definition-of-linear-programming-problem/</link>
      <pubDate>Mon, 23 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/definition-of-linear-programming-problem/</guid>
      <description>정의 1 목적 함수Objective Function와 제약Constraint들이 리니어한 최적화 문제를 선형 계획 문제Linear Programming Problem, 짧게는 선형 문제LP라 한다. 쉽게 말해, 선형 문제란 선형성을 가지는 목적 함수 $f: \mathbb{R}^{n} \to \mathbb{R}$ 가 주어진 벡터 $\mathbf{c} \in \mathbb{R}^{n}$ 에 대해 $$ f \left( \mathbf{x} \right) := \mathbf{c}^{T} \mathbf{x} $$ 이고 주어진 행렬 $A \in \mathbb{R}^{m \times n}$ 과 $\mathbf{b} \in \mathbb{R}^{m \times 1}$ 에 대해 $$ A \mathbf{x} \le \mathbf{b} $$ 을</description>
    </item>
    
    <item>
      <title>최적해: 최대인수와 최소인수</title>
      <link>https://freshrimpsushi.github.io/posts/optimizer-argmax-and-argmin/</link>
      <pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/optimizer-argmax-and-argmin/</guid>
      <description>어려운 정의 임의의 집합 $X$ 과 전순서집합 $\left( Y, \le \right)$ 가 주어져 있다고 하자. $X$ 의 부분집합 $S \subset X$ 에 대해 함수 $f : X \to Y$ 의 최대인수Argument of Maxima $\argmax_{S} : Y^{X} \to 2^{X}$ 와 최소인수Argument of Minima $\argmin_{S} : Y^{X} \to 2^{X}$ 는 다음과 같이 정의된다. $$ \argmax_{S} f := \left\{ x_{\ast} \in S : f \left( x_{\ast} \right) \ge f(x) , \forall x \in X \right\} \\ \argmin_{S} f := \left\{ x_{\ast} \in S : f \left( x_{\ast} \right) \le f(x) , \forall x \in X \right\} $$ $2^{X}$ 은 $X$ 의 멱집</description>
    </item>
    
    <item>
      <title>최적값: 최대값과 최소값</title>
      <link>https://freshrimpsushi.github.io/posts/optimum-maximum-minimum/</link>
      <pubDate>Fri, 28 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/optimum-maximum-minimum/</guid>
      <description>쉬운 정의 최대값Maximum과 최소값Minimum을 통틀어 최적값Optimum이라 한다. 집합 $X$ 에서 가장 큰 원소를 최대값 $\max X$, 가장 작은 원소를 최소값 $\min X$ 과 같이 나타낸다. 함수 $f : X \to \mathbb{R}$ 의 가장 큰 함수값을 $\max_{X} f$, 가장 작은 함수값을 $\min_{X} f$ 와 같이 나타낸다. $\mathbb{R}$ 은 실수 전체의 집합을 나타낸다. 최대, 최소는 한자어고 값은 순우리말이므로 사</description>
    </item>
    
    <item>
      <title>확률적 경사 하강법</title>
      <link>https://freshrimpsushi.github.io/posts/stochastic-gradient-descent-method/</link>
      <pubDate>Wed, 29 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/stochastic-gradient-descent-method/</guid>
      <description>정의 목적 함수 $Q$ 와 러닝 레이트 $\alpha &amp;gt; 0$, 배치사이즈 $m$ 과 $i$번째 데이터에 대해 $$ \omega_{n+1} := \omega_{n} - \alpha {{ 1 } \over { n }} \sum_{i=1}^{m} \nabla Q_{i} ( \omega_{n} ) $$ 를 확률적 경사 하강법이라 한다. 설명 머신러닝 확률적 경사 하강법은 데이터를 다루는만큼 필연적으로 머신러닝과 깊은 관계를 가지고 있을 수밖에 없다. 몇몇 단어가 익숙하지 않더라도 일단 예시를 통해 이해해보는 게 좋다: $x_{1}$ 와 $x_{2}$</description>
    </item>
    
    <item>
      <title>수학에서의 최적화 기법</title>
      <link>https://freshrimpsushi.github.io/posts/optimization-method/</link>
      <pubDate>Sat, 25 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/optimization-method/</guid>
      <description>정의 함수 $f : \mathbb{R}^{n} \to \mathbb{R}$ 의 함수값이 최소가 되도록 하는 $x^{ \ast } = \argmin_{x} f(x)$ 를 구하는 문제를 최적화 문제Optimization Problem라 하고, 그 문제를 푸는 알고리즘을 최적화 기법이라 부른다. 최적화 문제에서 주어진 함수 $f$ 를 특히 목적 함수Objective Function라 한다. 정의역의 모든 $x$ 에 대해 $f(x^{ \ast }) \le f(x)$ 를 만족하는 $x^{ \ast }$ 를</description>
    </item>
    
    <item>
      <title>수학에서의 경사하강법</title>
      <link>https://freshrimpsushi.github.io/posts/gradient-descent-method/</link>
      <pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/gradient-descent-method/</guid>
      <description>정의 1 스칼라 함수 $\varphi : \mathbb{R}^{n} \to \mathbb{R}$ 을 비용 함수Cost Function이라 한다. 비용 함수 $ \varphi ( \mathbb{x} )$ 의 극소값을 구하기 위해 $\mathbb{x} = \mathbb{x}_{n}$ 에서 $\varphi ( \mathbb{x}_{n+1} ) &amp;lt; \varphi ( \mathbb{x}_{n} )$ 를 만족시키는 $\mathbb{x}_{n+1}$ 를 찾는 알고리즘을 하강법Descent Method이라 한다. 설명 $\varphi$ 를 비용 함수라고 부를만한 예로써 집을 한 채 짓는다고 하자. 집 한 채에 들어가는 자원은 목재, 석재, 철</description>
    </item>
    
    <item>
      <title>최적화이론의 라그랑주 승수법</title>
      <link>https://freshrimpsushi.github.io/posts/lagrangian-multiplier-in-optimization-theory/</link>
      <pubDate>Fri, 21 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/lagrangian-multiplier-in-optimization-theory/</guid>
      <description>⚡ 이 포스트는 패스트 트랙Fast Track으로 작성되었습니다. 설명 비선형인 목적 함수를 가지는 비선형 최적화 문제에서 제약조건에 라그랑주 승수Lagrangian Multiplier라는 것을 곱해서 목적 함수에 반영시키는 풀이법을 라그랑주 승수법이라 한다. $$ \begin{matrix} \text{Maximize} &amp;amp; f(x) \\ \text{subject to} &amp;amp; g(x) = 0 \end{matrix} $$ 가령 미분가능한 스칼라함수 $f,g : \mathbb{R}^{p} \to \mathbb{R}$ 에</description>
    </item>
    
    <item>
      <title>R로 선형계획문제 푸는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-solve-linear-programming-problem-using-r/</link>
      <pubDate>Thu, 29 Mar 1923 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-solve-linear-programming-problem-using-r/</guid>
      <description>개요 lpSolve 패키지를 사용하면 된다.1 행렬 꼴로 나타난 선형계획문제의 $A, \mathbf{b}, \mathbf{c}$ 를 넣어서 쓴다. 코드 $$ \begin{matrix} \text{Maximize} &amp;amp; &amp;amp; x_{1} &amp;amp; + &amp;amp; x_{2} \\ \text{subject to} &amp;amp;-&amp;amp; x_{1} &amp;amp; + &amp;amp; x_{2} &amp;amp; \le &amp;amp; 1 \\ &amp;amp; &amp;amp; x_{1} &amp;amp; &amp;amp; &amp;amp; \le &amp;amp; 3 \\ &amp;amp; &amp;amp; &amp;amp; &amp;amp; x_{2} &amp;amp; \le &amp;amp; 2 \end{matrix} $$ 간단한 예제로써 $x_{1} , x_{2} \ge 0$ 에서 위와 같은 최대화 문제를 풀어보자. 생새우초밥집에서는 이 문제를 심플렉스 메소드를 써서 손으로 풀어보았고 그 답 $\left( x_{1}^{\ast},</description>
    </item>
    
    <item>
      <title>매트랩으로 선형계획문제 푸는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-solve-linear-programming-problem-using-matlab/</link>
      <pubDate>Sun, 25 Mar 1923 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-solve-linear-programming-problem-using-matlab/</guid>
      <description>개요 Optimization Toolbox를 사용하면 된다.1 행렬 꼴로 나타난 선형계획문제의 $A, \mathbf{b}, \mathbf{c}$ 를 넣어서 쓴다. 코드 $$ \begin{matrix} \text{Maximize} &amp;amp; &amp;amp; x_{1} &amp;amp; + &amp;amp; x_{2} \\ \text{subject to} &amp;amp;-&amp;amp; x_{1} &amp;amp; + &amp;amp; x_{2} &amp;amp; \le &amp;amp; 1 \\ &amp;amp; &amp;amp; x_{1} &amp;amp; &amp;amp; &amp;amp; \le &amp;amp; 3 \\ &amp;amp; &amp;amp; &amp;amp; &amp;amp; x_{2} &amp;amp; \le &amp;amp; 2 \end{matrix} $$ 간단한 예제로써 $x_{1} , x_{2} \ge 0$ 에서 위와 같은 최대화 문제를 풀어보자. 생새우초밥집에서는 이 문제를 심플렉스 메소드를 써서 손으로 풀어보았고</description>
    </item>
    
    <item>
      <title>파이썬으로 선형계획문제 푸는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-solve-linear-programming-problem-using-python/</link>
      <pubDate>Wed, 21 Mar 1923 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-solve-linear-programming-problem-using-python/</guid>
      <description>개요 scipy 패키지를 사용하면 된다.1 행렬 꼴로 나타난 선형계획문제의 $A, \mathbf{b}, \mathbf{c}$ 를 넣어서 쓴다. 코드 $$ \begin{matrix} \text{Maximize} &amp;amp; &amp;amp; x_{1} &amp;amp; + &amp;amp; x_{2} \\ \text{subject to} &amp;amp;-&amp;amp; x_{1} &amp;amp; + &amp;amp; x_{2} &amp;amp; \le &amp;amp; 1 \\ &amp;amp; &amp;amp; x_{1} &amp;amp; &amp;amp; &amp;amp; \le &amp;amp; 3 \\ &amp;amp; &amp;amp; &amp;amp; &amp;amp; x_{2} &amp;amp; \le &amp;amp; 2 \end{matrix} $$ 간단한 예제로써 $x_{1} , x_{2} \ge 0$ 에서 위와 같은 최대화 문제를 풀어보자. 생새우초밥집에서는 이 문제를 심플렉스 메소드를 써서 손으로 풀어보았고 그 답 $\left( x_{1}^{\ast},</description>
    </item>
    
    <item>
      <title>줄리아로 선형계획문제 푸는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-solve-linear-programming-problem-using-julia/</link>
      <pubDate>Sat, 17 Mar 1923 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-solve-linear-programming-problem-using-julia/</guid>
      <description>개요 JuMP 패키지를 사용하면 된다.1 JuMP는 Julia Mathematical Programming의 준말이다. 다른 언어와 비교해보자면 줄리아에서의 코딩은 거의 수식을 있는 그대로 옮겨적는 수준으로 직관적이다. 코드 $$ \begin{matrix} \text{Maximize} &amp;amp; &amp;amp; x_{1} &amp;amp; + &amp;amp; x_{2} \\ \text{subject to} &amp;amp;-&amp;amp; x_{1} &amp;amp; + &amp;amp; x_{2} &amp;amp; \le &amp;amp; 1 \\ &amp;amp; &amp;amp; x_{1} &amp;amp; &amp;amp; &amp;amp; \le &amp;amp; 3 \\ &amp;amp; &amp;amp; &amp;amp; &amp;amp; x_{2} &amp;amp; \le &amp;amp; 2 \end{matrix} $$ 간단한 예제로써 $x_{1} , x_{2} \ge 0$ 에서 위와 같은 최대</description>
    </item>
    
    <item>
      <title>엑셀로 선형계획문제 푸는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-solve-linear-programming-problem-using-excel/</link>
      <pubDate>Tue, 13 Mar 1923 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-solve-linear-programming-problem-using-excel/</guid>
      <description>가이드 Step 1. 해 찾기 추가 기능 활성화 파일/옵션/추가 기능 탭에서 관리(A)의 Excel 추가 기능 옆에 있는 이동(G) 버튼을 클릭한다. 다음과 같이 추가 기능이라는 창이 뜬다. 해 찾기 추가 기능을 체크하고 확인을 클릭한다. 데이터 탭의 분석에 해 찾기 기능이 활성화 되었다. Step 2. 선형계획문제 옮겨적기 $$ \begin{matrix} \text{Maximize} &amp;amp; &amp;amp; x_{1} &amp;amp; + &amp;amp; x_{2} \\ \text{subject to} &amp;amp;-&amp;amp; x_{1} &amp;amp; + &amp;amp; x_{2} &amp;amp; \le &amp;amp; 1 \\</description>
    </item>
    
    <item>
      <title>선형계획법에서의 강한 쌍대성 정리 증명</title>
      <link>https://freshrimpsushi.github.io/posts/proof-of-strong-duality-theorem-in-linear-programming/</link>
      <pubDate>Fri, 09 Mar 1923 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/proof-of-strong-duality-theorem-in-linear-programming/</guid>
      <description>정리 $$ \begin{align*} \text{Maximize} &amp;amp; \sum_{j=1}^{n} c_{j} x_{j} &amp;amp; \text{(Primal)} \\ \text{subject to} &amp;amp; \sum_{j=1}^{n} a_{ij} x_{j} \le b_{i} &amp;amp; i = 1 ,\cdots , m \\ &amp;amp; x_{j} \ge 0 &amp;amp; j = 1, \cdots , n \end{align*} $$ $$ \begin{align*} \text{Minimize} &amp;amp; \sum_{i=1}^{m} b_{i} y_{i} &amp;amp; \text{(Dual)} \\ \text{subject to} &amp;amp; \sum_{i=1}^{m} y_{i} a_{ij} \ge c_{j} &amp;amp; j = 1 ,\cdots , n \\ &amp;amp; y_{i} \ge 0 &amp;amp; i = 1, \cdots , m \end{align*} $$ 주어진 선형계획문제의 프라이멀 문제와 듀얼 문제가 위와 같이 나타난다고 하자. 만약 $\mathbf{x}^{\ast} = \left( x_{1}^{\ast} , \cdots , x_{n}^{\ast} \right)$ 가 프라이멀 문제의 최적해고, $\mathbf{y}^{\ast} =\left( y_{1}^{\ast} , \cdots , y_{m}^{\ast} \right)$ 가 듀얼 문</description>
    </item>
    
    <item>
      <title>선형계획법에서의 약한 쌍대성 정리 증명</title>
      <link>https://freshrimpsushi.github.io/posts/proof-of-weak-duality-theorem-in-linear-programming/</link>
      <pubDate>Mon, 05 Mar 1923 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/proof-of-weak-duality-theorem-in-linear-programming/</guid>
      <description>정리 $$ \begin{align*} \text{Maximize} &amp;amp; \sum_{j=1}^{n} c_{j} x_{j} &amp;amp; \text{(Primal)} \\ \text{subject to} &amp;amp; \sum_{j=1}^{n} a_{ij} x_{j} \le b_{i} &amp;amp; i = 1 ,\cdots , m \\ &amp;amp; x_{j} \ge 0 &amp;amp; j = 1, \cdots , n \end{align*} $$ $$ \begin{align*} \text{Minimize} &amp;amp; \sum_{i=1}^{m} b_{i} y_{i} &amp;amp; \text{(Dual)} \\ \text{subject to} &amp;amp; \sum_{i=1}^{m} y_{i} a_{ij} \ge c_{j} &amp;amp; j = 1 ,\cdots , n \\ &amp;amp; y_{i} \ge 0 &amp;amp; i = 1, \cdots , m \end{align*} $$ 주어진 선형계획문제의 프라이멀 문제와 듀얼 문제가 위와 같이 나타난다고 하자. 만약 $\left( x_{1} , \cdots , x_{n} \right)$ 가 프라이멀 문제의 가용해고, $\left( y_{1} , \cdots , y_{m} \right)$ 가 듀얼 문제의 가</description>
    </item>
    
    <item>
      <title>선형계획법에서의 듀얼</title>
      <link>https://freshrimpsushi.github.io/posts/duality-in-linear-programming/</link>
      <pubDate>Thu, 01 Mar 1923 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/duality-in-linear-programming/</guid>
      <description>빌드업 $x_{1} , x_{2} \ge 0$ 에 대해 다음과 같은 선형계획문제가 주어져 있다고 하자. $$ \begin{matrix} \text{Maximize} &amp;amp; &amp;amp; 2x_{1} &amp;amp; + &amp;amp; 3x_{2} \\ \text{subject to} &amp;amp; &amp;amp; 4x_{1} &amp;amp; + &amp;amp; 8x_{2} &amp;amp; \le &amp;amp; 12 \\ &amp;amp; &amp;amp; 2x_{1} &amp;amp; + &amp;amp; x_{2} &amp;amp; \le &amp;amp; 3 \\ &amp;amp; &amp;amp; 3x_{1} &amp;amp; + &amp;amp; 2x_{2} &amp;amp; \le &amp;amp; 4 \end{matrix} $$ 우리의 목표는 주어진 제약조건 아래에서 목적 함수 $\zeta = 2x_{1} + 3x_{2}$ 를 최대로 하는 최적해 $x_{1}^{\ast}, x_{2}^{\ast}$ 를 구하는 것이긴 하다. 그런데 식을 잘 보면 문제를 안 풀어봐도 최대값의 상</description>
    </item>
    
    <item>
      <title>선형계획법의 기본정리 증명</title>
      <link>https://freshrimpsushi.github.io/posts/proof-of-fundamental-theorem-of-linear-programming/</link>
      <pubDate>Sun, 25 Feb 1923 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/proof-of-fundamental-theorem-of-linear-programming/</guid>
      <description>정리 방정식 폼의 선형계획문제에 대해, 다음 셋 중 하나는 참이다. (1): 만약 최적해가 존재하지 않는다면, 애초에 문제 자체가 비가용Infeasible이거나 언바운드Unbounded된 것이다. (2): 만약 가용해가 존재한다면, 가용기저해도 존재한다. (3): 만약 최적해가 존재한다면, 최적기저해도 존재한다. 증명 전략: 기본정리Fundame</description>
    </item>
    
    <item>
      <title>심플렉스 메소드의 브랜드 룰</title>
      <link>https://freshrimpsushi.github.io/posts/brand-rule-of-simplex-method/</link>
      <pubDate>Wed, 21 Feb 1923 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/brand-rule-of-simplex-method/</guid>
      <description>정리 딕셔너리: $i = 1 , \cdots , m$ 에 대해서 다음과 같은 꼴의 연립방정식을 딕셔너리Dictionary라 한다. $$ \begin{align*} \zeta &amp;amp;=&amp;amp; &amp;amp; &amp;amp; \sum_{j=1}^{n} c_{j} x_{j} \\ x_{n+i} &amp;amp;=&amp;amp; b_{i} &amp;amp;-&amp;amp; \sum_{j=1}^{n} a_{ij} x_{j} \end{align*} $$ $\zeta$ 를 제외한 좌변의 변수들을 기저변수Basic Variable, 우변의 변수들을 비기저변수Nonbasic Variable라 한다. 이들의 인덱스를 다음과 같이 나타낸다. $$ \begin{align*} \mathcal{B} :=&amp;amp; \left\{ n+1 , n+2 , \cdots ,</description>
    </item>
    
    <item>
      <title>심플렉스 메소드의 사이클링</title>
      <link>https://freshrimpsushi.github.io/posts/cycling-of-simplex-method/</link>
      <pubDate>Sat, 17 Feb 1923 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/cycling-of-simplex-method/</guid>
      <description>정의 $$ \begin{matrix} \text{Maximize} &amp;amp; \mathbf{c}^{T} \mathbf{x} \\ \text{subject to} &amp;amp; A \mathbf{x} = \mathbf{b} \\ &amp;amp; \mathbf{x} \ge \mathbf{0} \end{matrix} $$ 행렬 $A \in \mathbb{R}^{m \times n}$ 과 $\mathbf{b} \in \mathbb{R}^{m \times 1}$ 와 $\mathbf{c} \in \mathbb{R}^{n}$ 에 대해 선형계획문제가 위와 같이 방정식 폼으로 나타난다고 하고, $i = 1 , \cdots , m$ 에 대해 그 딕셔너리를 다음과 같이 나타내자. $$ \begin{align*} \zeta &amp;amp;=&amp;amp; &amp;amp; &amp;amp; \sum_{j=1}^{n} c_{j} x_{j} \\ x_{n+i} &amp;amp;=&amp;amp; b_{i} &amp;amp;-&amp;amp; \sum_{j=1}^{n} a_{ij} x_{j} \end{align*} $$ 어떤 $i \in \mathcal{B}$ 에 대해 $b_{i} = 0$ 이면 이 딕셔너리가 타락했다Degenerate라 하고,</description>
    </item>
    
    <item>
      <title>선형계획법에서 목적 함수의 무한성</title>
      <link>https://freshrimpsushi.github.io/posts/unboundedness-of-objective-function-in-linear-programming/</link>
      <pubDate>Tue, 13 Feb 1923 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/unboundedness-of-objective-function-in-linear-programming/</guid>
      <description>설명 $$ \begin{matrix} \text{Maximize} &amp;amp; \mathbf{c}^{T} \mathbf{x} \\ \text{subject to} &amp;amp; A \mathbf{x} = \mathbf{b} \\ &amp;amp; \mathbf{x} \ge \mathbf{0} \end{matrix} $$ 행렬 $A \in \mathbb{R}^{m \times n}$ 과 $\mathbf{b} \in \mathbb{R}^{m \times 1}$ 와 $\mathbf{c} \in \mathbb{R}^{n}$ 에 대해 선형계획문제가 위와 같이 방정식 폼으로 나타난다고 하자. 제약조건에 따름에도 불구하고 목적 함수Objective Function가 언바운드Unbounded될 수 있다. 백마디 말보다 그림 한 번 보는 게 낫다.1 기하적으로 심플렉스 메소드</description>
    </item>
    
    <item>
      <title>심플렉스 메소드의 초기화와 보조문제</title>
      <link>https://freshrimpsushi.github.io/posts/initialization-and-auxiliary-problem-of-simplex-method/</link>
      <pubDate>Fri, 09 Feb 1923 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/initialization-and-auxiliary-problem-of-simplex-method/</guid>
      <description>빌드업 $$ \begin{matrix} \text{Maximize} &amp;amp; \mathbf{c}^{T} \mathbf{x} \\ \text{subject to} &amp;amp; A \mathbf{x} = \mathbf{b} \\ &amp;amp; \mathbf{x} \ge \mathbf{0} \end{matrix} $$ 행렬 $A \in \mathbb{R}^{m \times n}$ 과 $\mathbf{b} \in \mathbb{R}^{m \times 1}$ 와 $\mathbf{c} \in \mathbb{R}^{n}$ 에 대해 선형계획문제가 위와 같이 방정식 폼으로 나타난다고 하자. 그리고 모든 $j = 1 , \cdots , n+m$ 에 대해 $x_{k} \ge 0$ 이고, $i = 1 , \cdots , m$ 에 대해 $$ \begin{align*} \zeta &amp;amp;=&amp;amp; &amp;amp; &amp;amp; \sum_{j=1}^{n} c_{j} x_{j} \\ x_{n+i} &amp;amp;=&amp;amp; b_{i} &amp;amp;-&amp;amp; \sum_{j=1}^{n} a_{ij} x_{j} \end{align*} $$ 선형계획문제의 첫 딕셔너리가 위와 같이 주어져 있다고 하자. 심플렉스 메</description>
    </item>
    
    <item>
      <title>선형계획법의 심플렉스 메소드</title>
      <link>https://freshrimpsushi.github.io/posts/simplex-method-of-linear-programming/</link>
      <pubDate>Mon, 05 Feb 1923 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/simplex-method-of-linear-programming/</guid>
      <description>빌드업 1 $x_{1} , x_{2} \ge 0$ 에 대해 다음과 같은 선형계획문제가 주어져 있다고 하자. $$ \begin{matrix} \text{Maximize} &amp;amp; &amp;amp; x_{1} &amp;amp; + &amp;amp; x_{2} \\ \text{subject to} &amp;amp;-&amp;amp; x_{1} &amp;amp; + &amp;amp; x_{2} &amp;amp; \le &amp;amp; 1 \\ &amp;amp; &amp;amp; x_{1} &amp;amp; &amp;amp; &amp;amp; \le &amp;amp; 3 \\ &amp;amp; &amp;amp; &amp;amp; &amp;amp; x_{2} &amp;amp; \le &amp;amp; 2 \end{matrix} $$ 다시 말해, 우리는 주어진 제약조건을 모두 만족시키면서 $x_{1} + x_{2}$ 를 최대화하길 원한다. 이를 방정식 폼으로 바꾸려면 슬랙 변수Slack Variable $x_{3}, x_{4}, x_{5} \ge 0$ 을 도입해서 $$ \begin{matrix} \text{Maximize}</description>
    </item>
    
    <item>
      <title>선형계획법에서의 딕셔너리와 태블로</title>
      <link>https://freshrimpsushi.github.io/posts/dictionary-and-tableau-in-linear-programming/</link>
      <pubDate>Thu, 01 Feb 1923 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/dictionary-and-tableau-in-linear-programming/</guid>
      <description>노테이션 $$ \begin{matrix} \text{Maximize} &amp;amp; \mathbf{c}^{T} \mathbf{x} \\ \text{subject to} &amp;amp; A \mathbf{x} = \mathbf{b} \\ &amp;amp; \mathbf{x} \ge \mathbf{0} \end{matrix} $$ 행렬 $A \in \mathbb{R}^{m \times n}$ 과 $\mathbf{b} \in \mathbb{R}^{m \times 1}$ 와 $\mathbf{c} \in \mathbb{R}^{n}$ 에 대해 선형계획문제가 위와 같이 방정식 폼으로 나타난다고 하고, 그 성분들을 다음과 같이 적도록 하자. $$ \begin{align*} A =&amp;amp; \left( a_{ij} \right) \\ \mathbf{b} =&amp;amp; \left( b_{1} , \cdots , b_{m} \right) \\ \mathbf{c} =&amp;amp; \left( c_{1} , \cdots , c_{n} \right) \\ \mathbf{x} =&amp;amp; \left( x_{1} , \cdots , x_{n} \right) \end{align*} $$ 딕셔너리 1 $i = 1 , \cdots , m$ 에 대해서 다음과 같은 꼴의 연립</description>
    </item>
    
  </channel>
</rss>
