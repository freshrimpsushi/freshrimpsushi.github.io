<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>양자정보이론 on 생새우초밥집</title>
    <link>https://freshrimpsushi.github.io/categories/%EC%96%91%EC%9E%90%EC%A0%95%EB%B3%B4%EC%9D%B4%EB%A1%A0/</link>
    <description>Recent content in 양자정보이론 on 생새우초밥집</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <lastBuildDate>Wed, 26 Jun 2013 00:00:00 +0000</lastBuildDate><atom:link href="https://freshrimpsushi.github.io/categories/%EC%96%91%EC%9E%90%EC%A0%95%EB%B3%B4%EC%9D%B4%EB%A1%A0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>정보이론에서 부호화, 복호화</title>
      <link>https://freshrimpsushi.github.io/posts/encoding-and-decoding-in-information-theory/</link>
      <pubDate>Wed, 26 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/encoding-and-decoding-in-information-theory/</guid>
      <description>정의1 알파벳들의 집합을 $\Sigma$라고 하자. 다음과 같이 정의되는 $f_{n}$을 압축률compression rate이 $0 \lt \alpha \le 1$인 코딩 함수encoding scheme, 부호화라고 한다. $$ f_{n} : \Sigma^{n} \to \left\{ 0, 1 \right\}^{\lfloor \alpha n \rfloor} $$ 아래와 같은 $g_{n}$을 압축률이 $\alpha$인 디코딩 함수decoding scheme, 복호화라고 한다. $$</description>
    </item>
    
    <item>
      <title>복제 불가 정리</title>
      <link>https://freshrimpsushi.github.io/posts/no-cloning-theorem/</link>
      <pubDate>Tue, 18 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/no-cloning-theorem/</guid>
      <description>정리1 다음과 같이 큐비트를 복제하는 양자 게이트는 존재하지 않는다. $$ \begin{equation} \begin{aligned} (\mathbb{C}^{2})^{\otimes 2} &amp;amp;\to (\mathbb{C}^{2})^{\otimes 2} \\ \ket{x} \otimes \ket{0} &amp;amp;\mapsto \ket{x} \otimes \ket{x},\quad \forall \ket{x} \in \mathbb{C}^{2} \end{aligned} \end{equation} $$ 여기서 $(\mathbb{C}^{2})^{\otimes 2}$는 벡터공간의 텐서곱, $\ket{a} \otimes \ket{b}$는 곱벡터이다. 설명 양자컴퓨터를 활용한 계산이 고전컴퓨터에서의 계산과 근본적으로 다른 이유 중 하나는 양자 정보를 복제할 수 없기 때문이다. 위 정리의 의미에 대해</description>
    </item>
    
    <item>
      <title>솔베이-키타예프 정리</title>
      <link>https://freshrimpsushi.github.io/posts/solovay-kitaev-theorem/</link>
      <pubDate>Sun, 16 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/solovay-kitaev-theorem/</guid>
      <description>정리1 $\mathcal{G}$를 특수 유니터리 군 $\mathrm{SU}(2)$의 (역원에 대해 닫혀있는) 유한 부분집합이라고 하자. $$ \mathcal{G} \subset \mathrm{SU}(2), \qquad g \in \mathcal{G} \implies g^{-1} \in \mathcal{G} $$ 그러면 $\mathcal{G}$로 생성되는 프리그룹 $\braket{\mathcal{G}}$는 $\mathrm{SU}(2)$에서 조밀dense</description>
    </item>
    
    <item>
      <title>양자 프레드킨/CSWAP 게이트</title>
      <link>https://freshrimpsushi.github.io/posts/quantum-fredkin-cswap-gate/</link>
      <pubDate>Fri, 14 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/quantum-fredkin-cswap-gate/</guid>
      <description>정의1 (고전적 프레드킨 게이트 $(a, b, c) \mapsto \big(a, (\lnot a \land b) \lor (a \land c), (\lnot a \land c) \lor (a \land b) \big)$의 정의로부터) $3$큐비트 $\ket{a, b, c} = \ket{a} \otimes \ket{b} \otimes \ket{c}$에 대해서 양자 토폴리 게이트quantum Toffoli gate 를 다음과 같이 정의한다. $$ \begin{align*} F_{q} : (\mathbb{C}^{2})^{\otimes 3} &amp;amp;\to (\mathbb{C}^{2})^{\otimes 3} \\ \ket{a, b, c} &amp;amp;\mapsto \ket{a, (\lnot a \land b) \lor (a \land c), (\lnot a \land c) \lor (a \land b)},\quad \forall a,b,c \in \left\{ 0, 1 \right\} \end{align*} $$ $$ F_{q}(\ket{a} \otimes \ket{b} \otimes \ket{c}) = \ket{a}</description>
    </item>
    
    <item>
      <title>양자 토폴리/CCNOT 게이트</title>
      <link>https://freshrimpsushi.github.io/posts/quantum-toffoli-ccnot-gate/</link>
      <pubDate>Wed, 12 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/quantum-toffoli-ccnot-gate/</guid>
      <description>정의1 (고전적 토폴리 게이트 $(a, b, c) \mapsto (a, b, (a \land b) \oplus c)$의 정의로부터) $3$큐비트 $\ket{a, b, c} = \ket{a} \otimes \ket{b} \otimes \ket{c}$에 대해서 양자 토폴리 게이트quantum Toffoli gate 를 다음과 같이 정의한다. $$ \begin{align*} T_{q} : (\mathbb{C}^{2})^{\otimes 3} &amp;amp;\to (\mathbb{C}^{2})^{\otimes 3} \\ \ket{a, b, c} &amp;amp;\mapsto \ket{a, b, (a \land b) \oplus c},\quad \forall a,b,c \in \left\{ 0, 1 \right\} \end{align*} $$ $$ \operatorname{CNOT}_{q} (\ket{a} \otimes \ket{b} \otimes \ket{c}) = \ket{a} \otimes \ket{b} \otimes \ket{ (a \land b) \oplus c } $$ 여기서 $(\mathbb{C}^{2})^{\otimes 3}$는 벡터공간의</description>
    </item>
    
    <item>
      <title>교환 게이트</title>
      <link>https://freshrimpsushi.github.io/posts/exchange-gate/</link>
      <pubDate>Mon, 10 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/exchange-gate/</guid>
      <description>정의1 $2$큐비트 $\ket{a, b} = \ket{a} \otimes \ket{b}$에 대해서 교환 게이트exchage gate $\text{ex}$를 다음과 같이 정의한다. $$ \begin{align*} \text{ex} : (\mathbb{C}^{2})^{\otimes 2} &amp;amp;\to (\mathbb{C}^{2})^{\otimes 2} \\ \ket{a, b} &amp;amp;\mapsto \ket{b, a},\quad \forall a,b \in \left\{ 0, 1 \right\} \end{align*} $$ $$ \text{ex} (\ket{a} \otimes \ket{b}) = \ket{b} \otimes \ket{a} $$ 설명 교환 게이트는 두 큐비트의 상태를 서로 바꾼다. 구체적인 입출력은 다음과 같다. $$ \text{ex} (\ket{00}) = \ket{00} \\[0.5em] \text{ex} (\ket{01}) = \ket{10} \\[0.5em] \text{ex} (\ket{10}) = \ket{01} \\[0.5em] \text{ex} (\ket{11}) =</description>
    </item>
    
    <item>
      <title>양자 CNOT 게이트</title>
      <link>https://freshrimpsushi.github.io/posts/quantum-controlled-notcnot-gate/</link>
      <pubDate>Sat, 08 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/quantum-controlled-notcnot-gate/</guid>
      <description>정의1 (고전적 $\operatorname{CNOT}$ 게이트 $(a, b) \mapsto (a, a \oplus b)$의 정의로부터) $2$큐비트 $\ket{a, b} = \ket{a} \otimes \ket{b}$에 대해서 양자 $\operatorname{CNOT}$ 게이트를 다음과 같이 정의한다. $$ \begin{align*} \operatorname{CNOT}_{q} : (\mathbb{C}^{2})^{\otimes 2} &amp;amp;\to (\mathbb{C}^{2})^{\otimes 2} \\ \ket{a, b} &amp;amp;\mapsto \ket{a, a \oplus b},\quad \forall a,b \in \left\{ 0, 1 \right\} \end{align*} $$ $$ \operatorname{CNOT}_{q} (\ket{a} \otimes \ket{b}) = \ket{a} \otimes \ket{a \oplus b} $$ 여기서 $(\mathbb{C}^{2})^{\otimes 2}$는 벡터공간의 텐서곱, $\ket{a} \otimes \ket{b}$는 곱벡터, $\oplus$는 배타적 논</description>
    </item>
    
    <item>
      <title>파울리 게이트</title>
      <link>https://freshrimpsushi.github.io/posts/pauli-gate/</link>
      <pubDate>Thu, 06 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/pauli-gate/</guid>
      <description>정의1 다음과 같이 정의되는 $1$큐비트 게이트 $X, Y, Z$를 파울리 게이트Pauli gate라고 한다. $$ X, Y, Z : \mathbb{C}^{2} \to \mathbb{C}^{2} $$ $$ \begin{array}{l} X \ket{0} = \ket{1} \\ X \ket{1} = \ket{0} \end{array} \qquad \begin{array}{l} Y \ket{0} = -\ket{1} \\ Y \ket{1} = \ket{0} \end{array} \qquad \begin{array}{l} Z \ket{0} = \ket{0} \\ Z \ket{1} = -\ket{1} \end{array} $$ 행렬표현은 각각 아래와 같다. $$ X = \begin{bmatrix} 0 &amp;amp; 1 \\ 1 &amp;amp; 0 \end{bmatrix} \qquad Y = \begin{bmatrix} 0 &amp;amp; 1 \\ -1 &amp;amp; 0 \end{bmatrix} \qquad Z = \begin{bmatrix} 1 &amp;amp; 0 \\ 0 &amp;amp; -1 \end{bmatrix} $$ 설명 각각의 행렬표</description>
    </item>
    
    <item>
      <title>위상 게이트</title>
      <link>https://freshrimpsushi.github.io/posts/phase-gate/</link>
      <pubDate>Tue, 04 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/phase-gate/</guid>
      <description>정의1 $\theta \in \mathbb{R}$에 대해, 다음과 같이 정의되는 $1$큐비트 게이트를 위상 게이트phase gate라고 한다. $$ R_{\theta} : \mathbb{C}^{2} \to \mathbb{C}^{2} $$ $$ \textstyle R_{\theta} \ket{0} = \ket{0} \\[1em] R_{\theta} \ket{1} = e^{\rm{i}\theta} \ket{1} $$ 행렬표현은 아래와 같다. $$ R_{\theta} = \begin{bmatrix} 1 &amp;amp; 0 \\ 0 &amp;amp; e^{i\theta} \end{bmatrix} $$ 설명 위상 게이트는 $\ket{0}$는 변화시키지 않고, $\ket{1}$만 $e^{\rm{i}\theta} \ket{1}$로 변화</description>
    </item>
    
    <item>
      <title>아다마르 게이트</title>
      <link>https://freshrimpsushi.github.io/posts/hadamard-gate/</link>
      <pubDate>Sun, 02 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/hadamard-gate/</guid>
      <description>정의1 다음과 같이 정의되는 $1$큐비트 게이트를 아다마르 게이트Hadamard gate라고 한다. $$ H : \mathbb{C}^{2} \to \mathbb{C}^{2} $$ $$ \textstyle H \ket{0} = \frac{1}{\sqrt{2}} \ket{0} + \frac{1}{\sqrt{2}} \ket{1} \\[1em] H \ket{1} = \frac{1}{\sqrt{2}} \ket{0} - \frac{1}{\sqrt{2}} \ket{1} $$ 행렬표현은 아래와 같다. $$ H = \dfrac{1}{\sqrt{2}} \begin{bmatrix} 1 &amp;amp; 1 \\ 1 &amp;amp; -1 \end{bmatrix} $$ 설명 아다마르 게이트는 $\ket{0}$이나 $\ket{1}$인 상태로만 존재하는 큐비트를 둘이 동시에 존재하는</description>
    </item>
    
    <item>
      <title>양자게이트와 양자회로</title>
      <link>https://freshrimpsushi.github.io/posts/quantum-gate-and-quantum-circuit/</link>
      <pubDate>Fri, 31 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/quantum-gate-and-quantum-circuit/</guid>
      <description>정의1 $n \in \mathbb{N}$에 대해, 다음과 같은 [유니터리 작용소] $G$를 양자 게이트quantum gate 혹은 $n$큐비트 게이트 라 한다. $$ G : \left( \mathbb{C}^{2} \right)^{\otimes n} \to \left( \mathbb{C}^{2} \right)^{\otimes n} $$ 양자 게이트의 합성을 양자 회로quantum circuit라 한다. 여기서 $\otimes$는 벡터공간의 텐서곱이다. 설명 고전컴퓨터에서의 게이트와 회로</description>
    </item>
    
    <item>
      <title>큐비트: 양자컴퓨터에서 정보의 기본단위</title>
      <link>https://freshrimpsushi.github.io/posts/qubit-unit-information-in-quantum-computer/</link>
      <pubDate>Wed, 29 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/qubit-unit-information-in-quantum-computer/</guid>
      <description>정의1 $\mathbb{C}$ 위의 벡터공간 $\mathbb{C}^{2}$의 두 단위벡터 $\begin{bmatrix} 1 \\ 0 \end{bmatrix}$, $\begin{bmatrix} 0 \\ 1 \end{bmatrix}$를 디랙 노테이션으로 다음과 같이 표기하자. $$ \ket{0} = \begin{bmatrix} 1 \\ 0 \end{bmatrix}\qquad \ket{1} = \begin{bmatrix} 0 \\ 1 \end{bmatrix} $$ 집합 $\left\{ \ket{0}, \ket{1} \right\}$의 원소를 큐비트qubit, 양자비트라 한다. $n$qubit라 한다. 여기서 $\otimes$ -- $\mathbb</description>
    </item>
    
    <item>
      <title>비트: 고전컴퓨터에서 정보의 기본단위</title>
      <link>https://freshrimpsushi.github.io/posts/bit-unit-of-information-classical-computer/</link>
      <pubDate>Mon, 27 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/bit-unit-of-information-classical-computer/</guid>
      <description>정의 집합 $\left\{ 0, 1 \right\}$의 원소를 비트bit라고 한다. 집합 $\left\{ 0, 1 \right\}^{n}$의 원소를 $n$비트$n$bit라고 한다. 설명 bit는 binary digit의 줄임말이다. 흔히 &amp;quot;$0$ 또는 $1$을 값으로 가질 수 있는 것&amp;quot;으로 설명된다. (양자 컴퓨터와 대비되는 용어로서)고전 컴퓨터가 처리하는 최소 정보 단위</description>
    </item>
    
    <item>
      <title>사영과 주입</title>
      <link>https://freshrimpsushi.github.io/posts/boolean-projection-and-injection/</link>
      <pubDate>Thu, 09 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/boolean-projection-and-injection/</guid>
      <description>정의1 $n \in \mathbb{N}$과 $0 \le i \le n$에 대해서, 다음과 같은 함수 $p_{i}$ $$ \begin{align*} p_{i} : &amp;amp;\left\{ 0, 1 \right\}^{n+1} \to \left\{ 0, 1 \right\}^{n} \\ &amp;amp; (a_{0}, \dots, a_{n}) \mapsto (a_{0}, \dots, a_{i-1}, a_{i+1}, \dots, a_{n}) \end{align*} $$ 를 사영projection이라 한다. 다음의 두 함수 $\imath_{i}$, $\jmath_{i}$ $$ \begin{align*} \imath : &amp;amp;\left\{ 0, 1 \right\}^{n} \to \left\{ 0, 1 \right\}^{n+1} \\ &amp;amp; (a_{0}, \dots, a_{n-1}) \mapsto (a_{0}, \dots, a_{i-1}, 0, a_{i+1}, \dots, a_{n-1}) \end{align*} $$ $$ \begin{align*} \jmath : &amp;amp;\left\{ 0, 1 \right\}^{n} \to \left\{ 0, 1 \right\}^{n+1} \\ &amp;amp; (a_{0}, \dots, a_{n-1}) \mapsto (a_{0}, \dots, a_{i-1}, 1, a_{i+1}, \dots, a_{n-1}) \end{align*} $$ 를 주입in</description>
    </item>
    
    <item>
      <title>프레드킨/CSWAP 게이트</title>
      <link>https://freshrimpsushi.github.io/posts/fredkin-cswap-gate/</link>
      <pubDate>Tue, 07 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/fredkin-cswap-gate/</guid>
      <description>정의1 다음과 같은 벡터값 부울함수를 프레드킨 게이트Fredkin gate라고 한다. $$ F : \left\{ 0, 1 \right\}^{3} \to \left\{ 0, 1 \right\}^{3} $$ $$ F (a, b, c) = \Big(a, (\lnot a \land b) \lor (a \land c), (\lnot a \land c) \lor (a \land b) \Big) $$ $\text{CSWAP}$ 게이트Controlled SWAP(CSWAP) gate라고도 한다. 설명 에드워드 프레드킨Edward Fredkin에 의해 소개되었다. 프레드킨 게이트는 첫번째 입력은 바꾸</description>
    </item>
    
    <item>
      <title>토폴리/CCNOT 게이트</title>
      <link>https://freshrimpsushi.github.io/posts/toffoli-ccnot-gate/</link>
      <pubDate>Sun, 05 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/toffoli-ccnot-gate/</guid>
      <description>정의1 다음과 같은 벡터값 부울함수를 토폴리 게이트Toffoli gate라고 한다. $$ T : \left\{ 0, 1 \right\}^{3} \to \left\{ 0, 1 \right\}^{3} $$ $$ T (a, b, c) = (a, b, (a \land b) \oplus c) $$ $\text{CCNOT}$ 게이트Controlled Controlled NOT(CCNOT) gate라고도 한다. 설명 토폴리 게이트에서는 처음 두 입력이 모두 $1$이면, 세번째 입력이 반전된다. 나머지 경우에는 입력과 출력이 같다. 구체적인 계산은</description>
    </item>
    
    <item>
      <title>CNOT 게이트</title>
      <link>https://freshrimpsushi.github.io/posts/controlled-not-cnot-gate/</link>
      <pubDate>Fri, 03 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/controlled-not-cnot-gate/</guid>
      <description>정의1 다음과 같은 벡터값 부울함수를 $\operatorname{CNOT}$ 게이트Controlled NOT(CNOT) gate라고 한다. $$ \operatorname{CNOT} : \left\{ 0, 1 \right\}^{2} \to \left\{ 0, 1 \right\}^{2} $$ $$ \operatorname{CNOT} (a,b) = (a, a \oplus b) $$ 파인만 게이트Feynman gate라고도 한다.2 설명 $\operatorname{CNOT}$ 게이트 입출력의 구체적인 계산은 다음과 같다. $$ \begin{align*} \operatorname{CNOT} (0,0) &amp;amp;= (0, 0 \oplus 0) = (0, 0) \\ \operatorname{CNOT} (0,1) &amp;amp;= (0, 0 \oplus 1) = (0, 1) \\ \operatorname{CNOT} (1,0) &amp;amp;= (1, 1 \oplus 0) = (1, 1) \\ \operatorname{CNOT} (1,1) &amp;amp;= (1, 1 \oplus</description>
    </item>
    
    <item>
      <title>복제 함수</title>
      <link>https://freshrimpsushi.github.io/posts/cloning-function/</link>
      <pubDate>Wed, 01 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/cloning-function/</guid>
      <description>정의1 다음과 같은 벡터값 부울함수를 복제 함수cloning function라 한다. $$ \text{cl} : \left\{ 0, 1 \right\} \to \left\{ 0, 1 \right\}^{2} $$ $$ \text{cl}(a) = (a, a) $$ 설명 이름 그대로 진리값을 복제하는 함수이다. (양자 컴퓨터와 달리) 고전 컴퓨터에서는 시그널을 복제하는 것이 쉽기 때문에 제약없이 사용할 수 있다. $\text{NAND}$ 게이트가 함수적으로 완전하다는 것을 증명하는데 필요하다. 김</description>
    </item>
    
    <item>
      <title>함수적으로 완전한 집합이란?</title>
      <link>https://freshrimpsushi.github.io/posts/functionally-complete-set/</link>
      <pubDate>Mon, 29 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/functionally-complete-set/</guid>
      <description>정의1 부울함수들의 집합 $\left\{ f_{k} \right\} = \left\{ f_{k} : \left\{ 0, 1 \right\}^{n_{k}} \to \left\{ 0, 1 \right\} \right\}_{k\in \Gamma}$이 주어졌다고 하자. $\Gamma$는 유한집합이다. $\left\{ f_{k} \right\}$들의 합성으로 임의의 부울함수 $$ \left\{ 0, 1 \right\}^{n} \to \left\{ 0, 1 \right\}\quad (n \in \mathbb{N}) $$ 을 표현할 수 있으면, 집합 $\left\{ f_{k} \right\}$를 함수적으로 완전하다functionally complet</description>
    </item>
    
    <item>
      <title>부정논리합, NOR 게이트</title>
      <link>https://freshrimpsushi.github.io/posts/nor-gate/</link>
      <pubDate>Sat, 27 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/nor-gate/</guid>
      <description>정의1 다음과 같은 부울함수를 $\text{NOR}$ 게이트NOR gate 혹은 부정논리합이라 하고 다음과 같이 표기한다. $$ \downarrow : \left\{ 0, 1 \right\}^{2} \to \left\{ 0, 1 \right\} $$ $$ 0\downarrow 0 = 1,\quad 0\downarrow 1 = 0,\quad 1\downarrow 0 = 0,\quad 1\downarrow 1 = 0 $$ 설명 $\text{NOT}$ 게이트와 $\text{OR}$ 게이트의 합성이고, $\text{N(OT)}$과 $\text{OR}$을 따와서 $\text{NOR}$라고 명명하였다. $$ \begin{equation} \downarrow = \lnot \circ \lor \end{equation} $$ $$</description>
    </item>
    
    <item>
      <title>부정논리곱, NAND 게이트</title>
      <link>https://freshrimpsushi.github.io/posts/nand-gate/</link>
      <pubDate>Thu, 25 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/nand-gate/</guid>
      <description>정의1 다음과 같은 부울함수를 $\text{NAND}$ 게이트NAND gate 혹은 부정논리곱이라 하고 다음과 같이 표기한다. $$ \uparrow : \left\{ 0, 1 \right\}^{2} \to \left\{ 0, 1 \right\} $$ $$ 0\uparrow 0 = 1,\quad 0\uparrow 1 = 1,\quad 1\uparrow 0 = 1,\quad 1\uparrow 1 = 0 $$ 설명 $\text{NOT}$ 게이트와 $\text{AND}$ 게이트의 합성이고, $\text{N(OT)}$과 $\text{AND}$를 따와서 $\text{NAND}$라고 명명하였다. $$ \begin{equation} \uparrow = \lnot \circ \land</description>
    </item>
    
    <item>
      <title>배타적 논리합, XOR 게이트</title>
      <link>https://freshrimpsushi.github.io/posts/exclusive-disjuction-xor-gate/</link>
      <pubDate>Tue, 23 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/exclusive-disjuction-xor-gate/</guid>
      <description>정의1 다음과 같은 부울함수를 $\text{XOR}$ 게이트XOR gate 혹은 배타적 논리합exclusive disjuction/or이라 하고 다음과 같이 표기한다. $$ \oplus : \left\{ 0, 1 \right\}^{2} \to \left\{ 0, 1 \right\} $$ $$ 0\oplus 0 = 0,\quad 0\oplus 1 = 1,\quad 1\oplus 0 = 1,\quad 1\oplus 1 = 0 $$ 설명 $\text{XOR}$ 게이트는 두 진리값 중 하나만 참일 때, 즉 참이 홀수일 때 참을 반환한다. 다시말하면 두 값이 같으면 $0$, 다르면 $1$을 반환</description>
    </item>
    
    <item>
      <title>논리 부정, NOT 게이트</title>
      <link>https://freshrimpsushi.github.io/posts/negation-not-gate/</link>
      <pubDate>Sun, 21 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/negation-not-gate/</guid>
      <description>정의1 다음과 같은 부울함수를 $\text{NOT}$ 게이트NOT gate 혹은 논리 부정negation이라 하고 다음과 같이 표기한다. $$ \lnot : \left\{ 0, 1 \right\} \to \left\{ 0, 1 \right\} $$ $$ \lnot 0 = 1,\quad \lnot 1 = 0 $$ 설명 $\text{NOT}$ 게이트는 입력의 반대를 반환한다. 부울 함수 기호 진리표 $\text{NOT}$ $a$ $\lnot a$ $0$ $1$ $1$ $0$ $\text{NOT}$ 게이트와 $\text{AND}$ 게이트로 표현 가능하다. $$ a \lnot b = \lnot(\lnot a \land \lnot b) $$ 같이보기 $\text{AND}$ 게이트논리곱 $\text{OR}$ 게이트</description>
    </item>
    
    <item>
      <title>논리합, OR 게이트</title>
      <link>https://freshrimpsushi.github.io/posts/disjunction-or-gate/</link>
      <pubDate>Fri, 19 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/disjunction-or-gate/</guid>
      <description>정의1 다음과 같은 부울함수를 $\text{OR}$ 게이트OR gate 혹은 논리합disjunction이라 하고 다음과 같이 표기한다. $$ \lor : \left\{ 0, 1 \right\}^{2} \to \left\{ 0, 1 \right\} $$ $$ 0\lor 0 = 0,\quad 0\lor 1 = 1,\quad 1\lor 0 = 1,\quad 1\lor 1 = 1 $$ 설명 $\text{OR}$ 게이트는 두 진리값을 하나의 진리값으로 보내며, 두 진리값 중 하나라도 참이 있으면 참을 반환한다. 부울 함수 기호 진리표 $\text{OR}$ $a$ $b$ $a \lor b$ $0$ $0$ $0$ $0$ $1$ $1$ $1$ $0$ $1$</description>
    </item>
    
    <item>
      <title>논리곱, AND 게이트</title>
      <link>https://freshrimpsushi.github.io/posts/conjunction-and-gate/</link>
      <pubDate>Wed, 17 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/conjunction-and-gate/</guid>
      <description>정의1 다음과 같은 부울함수를 $\text{AND}$ 게이트AND gate 혹은 논리곱conjunction이라 하고 다음과 같이 표기한다. $$ \land : \left\{ 0, 1 \right\}^{2} \to \left\{ 0, 1 \right\} $$ $$ 0\land 0 = 0,\quad 0\land 1 = 0,\quad 1\land 0 = 0,\quad 1\land 1 = 1 $$ 설명 $\text{AND}$ 게이트는 두 진리값을 하나의 진리값으로 보내며, 두 진리값이 모두 참일 때만 참을 반환한다. 부울 함수 기호 진리표 $\text{AND}$ $a$ $b$ $a \land b$ $0$ $0$ $0$ $0$ $1$ $0$ $1$ $0$ $0$ $1$ $1$</description>
    </item>
    
    <item>
      <title>부울 함수</title>
      <link>https://freshrimpsushi.github.io/posts/boolean-function/</link>
      <pubDate>Mon, 15 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/boolean-function/</guid>
      <description>정의1 다음과 같은 함수를 부울 함수Boolean function라 한다. $n \in \mathbb{N}$에 대해서, $$ f : \left\{ 0, 1 \right\}^{n} \to \left\{ 0, 1 \right\} $$ 여기서 $1 =$ 참(True), $0 =$ 거짓(False)이라 한다. 일반화 $n, m \in \mathbb{N} (m \gt 2)$에 대해서, $$ f : \left\{ 0, 1 \right\}^{n} \to \left\{ 0, 1 \right\}^{m} $$ 벡터값 부울 함수vector-valued Boolean funct</description>
    </item>
    
    <item>
      <title>정보이론에서 엔트로피란?</title>
      <link>https://freshrimpsushi.github.io/posts/shannon-entropy-in-information-theory/</link>
      <pubDate>Sat, 13 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/shannon-entropy-in-information-theory/</guid>
      <description>정의1 2 확률변수 $X$의 엔트로피Shannon entropy $H$를 다음과 같이 정의한다. $$ \begin{equation} H(X) := \sum_{i=1}^{N} P(x_{i}) I(x_{i}) = -\sum_{i=1}^{N} P(x_{i}) \log_{2}P(x_{i}) \end{equation} $$ 이때 $I$는 정보량이고, $P(x_{i}) = P(X=x_{i})$이다. 설명 쉽게 말해서 엔트로피란 정보의 기대값(평균)이다. 엔트로피를 통해 부호화의 효율과 통신의 한계에 대해서 수학적으로 다룰 수 있다. 엔트로피는 흔히 무질서도라</description>
    </item>
    
    <item>
      <title>정보이론에서 정보량이란?</title>
      <link>https://freshrimpsushi.github.io/posts/shannon-information-in-information-theory/</link>
      <pubDate>Tue, 09 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/shannon-information-in-information-theory/</guid>
      <description>정의1 확률변수 $X$에 대해서, $X=x$인 사건의 정보(량)information $I$를 다음과 같이 정의한다. $$ \begin{equation} I(x) = -\log_{2} P(X=x) \end{equation} $$ 설명 추상적 개념인 정보에 대한 정량적인 정의를 제시한 사람은 디지털 논리회로 이론과 정보이론을 창시한 클래드 섀넌Claude Shannon이다. 정보량를 &#39;확률의 마이너스 로그&#39;로 정의한 것을 처음</description>
    </item>
    
  </channel>
</rss>
