<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>토모그래피 on 생새우초밥집</title>
    <link>https://freshrimpsushi.github.io/categories/%ED%86%A0%EB%AA%A8%EA%B7%B8%EB%9E%98%ED%94%BC/</link>
    <description>Recent content in 토모그래피 on 생새우초밥집</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <lastBuildDate>Fri, 08 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://freshrimpsushi.github.io/categories/%ED%86%A0%EB%AA%A8%EA%B7%B8%EB%9E%98%ED%94%BC/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>역문제란?</title>
      <link>https://freshrimpsushi.github.io/posts/inverse-problem-and-forward-problem/</link>
      <pubDate>Fri, 08 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/inverse-problem-and-forward-problem/</guid>
      <description>정의 수식으로 표현되는 물리 현상이 있을 때, 원인에 따라 수식을 풀어 결과에 대한 정보를 찾는 과정을 정문제direct problem 혹은 전방문제forward problem이라고 한다. 반대로, 결과에 대한 정보로부터 원인에 대한 정보를 구하는 과정을 역문제inverse problem라고 한다. 설명 많은 문제가 정문제이며, 예를들어 초기 속도가</description>
    </item>
    
    <item>
      <title>줄리아, 매트랩, 파이썬에서 Shepp-Logan 팬텀 쓰는 법</title>
      <link>https://freshrimpsushi.github.io/posts/shepp-logan-phantom-in-julia-matlab-python/</link>
      <pubDate>Wed, 28 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/shepp-logan-phantom-in-julia-matlab-python/</guid>
      <description>줄리아1 phantom(m,n=1): $m\times m$ 크기의 Shepp-Logan 팬텀을 생성한다. n=1일 때는 Shepp-Logan 팬텀, n=2일 때는 Modified Shepp-Logan 팬텀을 생성한다. using Tomography using Plots # 팬텀 생성 p = phantom(256,2) # 그림 출력 heatmap(reverse(p, dims=1)) 환경 OS: Windows10 Version: Julia 1.7.1, Tomography 0.1.5 매트랩2 phantom으로 Shepp-Logan 팬텀을 생성할 수 있다. 아무런 변수도 입력하지 않으면 $256 \times 256$의 배열이 만들어진다. 첫번째 변수에는 팬텀의 종류, 두번째 변수에는 크기를 입</description>
    </item>
    
    <item>
      <title>줄리아, 매트랩 파이썬에서 라돈 변환 쓰는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-radon-transform-in-a-julia-matlab-python/</link>
      <pubDate>Mon, 26 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-radon-transform-in-a-julia-matlab-python/</guid>
      <description>줄리아1 토모그래피 패키지 Tomography.jl에서 radon()함수를 사용하면 된다. radon(f, θ): f는 이미지, θ는 프로젝션 각도이다. 입력하지 않으면 기본적으로 0도에서 $\pi$까지 계산한다. using Tomography using Plots # 팬텀 생성 f = phantom(256,2) # 라돈 변환 계산 ℛf = radon(f) # 그림 출력 h1 = heatmap(reverse(f, dims=1), size=(400,400)); h2 = heatmap(reverse(ℛf, dims=1), size=(400,400)); heatmap(h1,</description>
    </item>
    
    <item>
      <title>라돈 변환</title>
      <link>https://freshrimpsushi.github.io/posts/derivation-and-properties-of-radon-transform/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/derivation-and-properties-of-radon-transform/</guid>
      <description>개요 라돈 변환 은 적분 변환의 일종으로 오스트리아의 수학자 라돈Johann Radon, 1887-1956에서 이름을 따왔다. 방사성 원소인 라돈의 경우, 수학자 라돈의 이름에서 따온 것이 아니라 방사성radiactive이라는 단어에 비활성기체접미사 &amp;lsquo;-on&amp;rsquo;을 붙여 이름 지어졌다. 라돈 변환은 CT 촬영의 핵심 원리중 하</description>
    </item>
    
    <item>
      <title>컴프턴 카메라의 원리</title>
      <link>https://freshrimpsushi.github.io/posts/principle-of-the-compton-camera/</link>
      <pubDate>Mon, 31 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/principle-of-the-compton-camera/</guid>
      <description>원리 컴프턴 카메라는 컴프턴 산란을 이용하여 감마선을 내뿜는 물질의 위치를 찾아내는 장치이다. Compton telescope 혹은 Compton imager라고도 한다. 그림의 오른쪽에는 컴프턴 카메라가 간단하게 두 디텍터로 표현돼있다. 디텍터는 감마선의 에너지를 측정하며, 첫번째 디텍터에서는 감마선의 산란이 일어난다. 그림 왼쪽의 검은 사각형은 파괴하지 않고 내부 구조를 파악</description>
    </item>
    
    <item>
      <title>토모그래피(단층촬영)란?</title>
      <link>https://freshrimpsushi.github.io/posts/what-is-tomography/</link>
      <pubDate>Mon, 31 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/what-is-tomography/</guid>
      <description>토모그래피란?1 토모그래피는 한국어로 단층촬영이라고 하며, 어원은 그리스어 τoμoσslice와 γραψετεwrite이다. 이를 풀어보면 잘라서 기록한다는 것이고, 실제 CT 촬영 후 보는 사진들도 신체의 각 단면 사진2이다. 단층촬영에서는 파동 혹은 입자로 된 신호를 불투명한 물체에 통과시켜 그 내부 구조에 대한 정보를 얻는다. 이때 주</description>
    </item>
    
    <item>
      <title>CT 촬영의 원리</title>
      <link>https://freshrimpsushi.github.io/posts/principle-of-ct-radon-transform/</link>
      <pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/principle-of-ct-radon-transform/</guid>
      <description>Computer Tomography CT는 Computer Tomography의 약자로 컴퓨터 단층촬영이라는 뜻이다. 몸의 단면 사진을 얻는 기술인데 컴퓨터 계산이 필요하기 때문에 이러한 이름이 붙었다. CT는 각각의 물질마다 X-선1을 흡수하는 정도가 다르다는 점을 이용한다. 아래의 그림을 보자. 그림 가운데 원을 신체 어딘가의 단면이라고 하자. 잘라서 보지 않는 한 내부는 어떻게 생긴지</description>
    </item>
    
    <item>
      <title>힐베르트 변환</title>
      <link>https://freshrimpsushi.github.io/posts/hilbert-transform/</link>
      <pubDate>Tue, 02 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/hilbert-transform/</guid>
      <description>빌드업 라돈 역변환 $$ f(x,y)=\dfrac{1}{2} \mathcal{B} \left\{ \mathcal{F}^{-1} \Big[ |S|\mathcal{F} (\mathcal{R}f) (S,\ \theta) \Big]&amp;gt; \right\} (x,y) $$ 위 공식은 $f$의 라돈 변환 $\mathcal{R}f$로부터 $f$를 구하는 공식이다 우선 다음과 같은 푸리에 변환의 성질을 떠올려보자. $$ \mathcal{F} [f^{\prime} ] (\xi) = i\xi \mathcal{F}(\xi) $$ 여기서 $f$ 대신 $\mathcal{R}f$를 대입하면 다음을 얻는다. $$ \begin{equation} \mathcal{F} \left( \dfrac{\partial (\mathcal{R}f)(t,\ \theta) } {\partial t} \right) (S,\ \theta) = i S \mathcal{F}(\mathcal{R}f)(S,\ \theta) \label{eq1} \end{equation} $$ 그리고 $|S|=S\cdot</description>
    </item>
    
    <item>
      <title>라돈 역변환</title>
      <link>https://freshrimpsushi.github.io/posts/inverse-radon-transform-filtered-back-projection-formular/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/inverse-radon-transform-filtered-back-projection-formular/</guid>
      <description>정리 $f : \mathbb{R}^{2} \to \mathbb{R}$에 대해서 다음의 식이 성립한다. $$ f(x,y)=\dfrac{1}{2} \mathcal{B} \left\{ \mathcal{F}^{-1} \Big[ |S|\mathcal{F} (\mathcal{R}f) (S,\ \theta) \Big]\right\} (x,y) $$ 설명 The filtered back projection formular 이라고도 한다. $f$의 라돈변환 $\mathcal{R}f$가 주어졌을 때, 푸리에 변환과 백 프로젝션을 사용하여 $f$를 얻을 수 있다는 말이다. 즉 라돈 변환에 푸리에 변환을 취하고, $|S|$를 곱한 뒤 다시 푸리에 역 변환</description>
    </item>
    
    <item>
      <title>백 프로젝션: 라돈 변환의 듀얼</title>
      <link>https://freshrimpsushi.github.io/posts/back-projection-dual-transform-of-radon-transform/</link>
      <pubDate>Sun, 30 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/back-projection-dual-transform-of-radon-transform/</guid>
      <description>정의1 2 라돈 변환 $\mathcal{R} : L^{2}(\mathbb{R}^{n}) \to L^{2}(Z_{n})$의 듀얼 오퍼레이터 $\mathcal{R}^{\#} : L^{2}(Z_{n}) \to L^{2}(\mathbb{R}^{n})$를 백 프로젝션back projection, 배경투사이라 한다. $$ \left\langle \mathcal{R}f ,g \right\rangle_{L^{2}(Z_{n})} = \left\langle f , \mathcal{R}^{\#}g \right\rangle_{L^{2}(\mathbb{R}^{n})} $$ 여기서 $Z_{n} := \mathbb{R}^{1} \times S^{n-1}$는 $\mathbb{R}^{n+1}$의 유닛 실린더이다. 정리 수식 백 프로젝션은 구체적으로 다</description>
    </item>
    
    <item>
      <title>푸리에 슬라이스 정리</title>
      <link>https://freshrimpsushi.github.io/posts/fourier-slice-theorem/</link>
      <pubDate>Sun, 30 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/fourier-slice-theorem/</guid>
      <description>정리 $f : \mathbb{R}^{2} \to \mathbb{R}$에 대해서 다음의 식이 성립한다. $$ \begin{equation} \mathcal{F}_2 f(\xi \cos\theta,\ \xi \sin\theta)=\mathcal{F}(\mathcal{R}f)(\xi ,\ \theta) \label{thm1} \end{equation} $$ 여기서 $\mathcal{F}$는 1차원 푸리에 변환, $\mathcal{F}_2$는 2차원 푸리에 변환, $\mathcal{R}$은 라돈 변환을 의미한다. $$ \begin{align*} \mathcal{F}f (y) &amp;amp;= \int f(x) e^{-i xy } dx \\ \mathcal{F}_{2} f (y_{1}, y_{2}) &amp;amp;= \int \int f(x_{1}, x_{2}) e^{-i (x_{1}, x_{2}) \cdot (y_{1}, y_{2})} dx_{1} dx_{2} \\ \mathcal{R}f(s,\theta) &amp;amp;=</description>
    </item>
    
    <item>
      <title>라돈 변환의 성질</title>
      <link>https://freshrimpsushi.github.io/posts/properties-of-radon-transform/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/properties-of-radon-transform/</guid>
      <description>성질1 라돈 변환 $\mathcal{R} : L^{2}(\mathbb{R}^{n}) \to L^{2}(\Lambda)$은 다음의 성질을 갖는다. 선형성 $\alpha, \beta \in \mathbb{R}$, $f, g \in L^{2}(\mathbb{R}^{2})$에 대해 다음이 성립한다. $$ \mathcal{R} \left( \alpha f + \beta g \right) = \alpha \mathcal{R}f + \beta \mathcal{R}g $$ 평행 불변성shift invariance $\mathbf{a} \in \mathbb{R}^{n}$에 대해, $T_{\mathbf{a}}$를 트랜슬레이</description>
    </item>
    
    <item>
      <title>극좌표로 결정되는 직선</title>
      <link>https://freshrimpsushi.github.io/posts/a-straightlinedetermined-by-polar-coordinates/</link>
      <pubDate>Wed, 29 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/a-straightlinedetermined-by-polar-coordinates/</guid>
      <description>설명 극좌표로 결정되는 직선 그림(1)과 같은 직선은 기울기 $a$와 $y$절편 $b$로 결정된다. 기울기와 절편만 있으면 평면 위의 모든 직선을 표현할 수 있을 것 같지만 그렇지 않다. 정확하게는 함수로 직선만 나타낼 수 있다. 따라서 그림(2)와 같이 $x$축에 수직인 직선은 기울기와 절편으로 나타낼 수 없다. 이제 그림(3)을 보자. 이 직선은 원</description>
    </item>
    
  </channel>
</rss>
