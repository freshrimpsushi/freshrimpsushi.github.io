<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on 생새우초밥집</title>
    <link>https://freshrimpsushi.github.io/categories/r/</link>
    <description>Recent content in R on 생새우초밥집</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <lastBuildDate>Wed, 23 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://freshrimpsushi.github.io/categories/r/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>R 파일 읽기나 경로 변경 시 Error: &#39;C:\U&#39; used without hex digits in character string starting &#39;C:\U&#39; 해결</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-fix-error-used-without-hex-digits-in-character-string-starting/</link>
      <pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-fix-error-used-without-hex-digits-in-character-string-starting/</guid>
      <description>해결만을 위한다면 어떻게 수정하는지만 봐도 되는데, 원리를 알고 다시는 같은 에러를 겪고 싶지 않다면 모두 읽는 것을 추천한다. 에러 진단 가령 바탕화면에 위와 같이 exampe.csv 파일을 읽고싶다고 할 때, 다음과 같은 에러가 뜨는 경우가 있다. Error: &#39;\U&#39; used without hex digits in character string starting &amp;quot;&amp;quot;C:\U&amp;quot; 아무리 봐도 모든 경로에 문제가 없기 때문에 이런 저런 시도를 하다가 &amp;lsquo;바탕 화면&amp;rs</description>
    </item>
    
    <item>
      <title>R에서 폴더 내부 파일 목록 가져오는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-get-list-of-folder-in-r/</link>
      <pubDate>Mon, 13 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-get-list-of-folder-in-r/</guid>
      <description>코드 setwd(&amp;quot;F:\\dsr\\project&amp;quot;) getwd() list.files(getwd()) list.files(getwd(),pattern=&amp;quot;*.csv&amp;quot;) list.files()는 여러개의 파일로 나눠진 데이터를 취합하거나 메타 프로그래밍 등에 유용하게 쓰이는 함수다: path: 첫번째 인자로써 디렉터리를 지정해주면 해당 폴더에 있는 파일들의 목록을 반환한다. pattern: 두번째 인자로써 정규표현식으로 규칙을 받아 조건에 만족하는 파일들의 목록만을 반환한다. 예제에서는 와일드카드 를 사용해 p</description>
    </item>
    
    <item>
      <title>R 패키지 설치 시 Warning in installpackages  lib = CProgram FilesRR-361library is not writable 해결</title>
      <link>https://freshrimpsushi.github.io/posts/1414/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/1414/</guid>
      <description>개요 R 을 처음 접하는, 그 중에서 프로그래밍은 고사하고 컴퓨터에 익숙하지조차 않지만 당장 R을 사용해야하는 사용자의 눈높이에 맞췄으므로 지나치게 설명이 자세할 수 있다. WARNING: Rtools is required to build R packages but is not currently installed. Please download and install the appropriate version of Rtools before proceeding: https://cran.rstudio.com/bin/windows/Rtools/ 빨리 R 을 써서 뭔가를 해야하는데 위와 같은 경고가 뜨면서 패키지가 설치되지 않는 경우가 종종 있다. 주로 R을 처음 쓰거나</description>
    </item>
    
    <item>
      <title>R 에서 데이터 파일 빠르게 읽기</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-read-data-file-fast-in-r/</link>
      <pubDate>Mon, 02 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-read-data-file-fast-in-r/</guid>
      <description>개요 R 은 기본적으로 csv 데이터를 읽는 함수로써 read.csv()를 제공하지만, 그냥 간편하게 쓰는 정도가 아니라 실전적인 분석을 하고 있다면 성능이 너무 떨어져서 써먹을 것이 못 된다. 그 대안으로써, readr 패키지에서 제공하는 read\_csv()를 사용할 것을 강력하게 권장한다. read\_csv()는 c++로 작성되었으며, 매우 빠</description>
    </item>
    
    <item>
      <title>R 에서 병렬처리하는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-use-parallel-processing-in-r/</link>
      <pubDate>Fri, 30 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-use-parallel-processing-in-r/</guid>
      <description>개요 R 이 속도 때문에 쓰는 언어는 아니지만, 빠른 속도가 필요할 때도 분명히 있을 것이다. 코드를 깔끔하게 잘 짜더라도 너무 오래 걸린다면 보통 병렬처리나 GPU를 동원하게 된다. 언뜻 생각했을 때 R 에서 병렬처리를 할 일이 뭐 있나 싶겠지만, 빅데이터를 다루게 되거나 규모가 큰 시뮬레이션을 하게 된다면 병렬처리가 특히 유용한 수단이 된다. 오히려 R 이야</description>
    </item>
    
    <item>
      <title>R 에서 코드 실행 시간 재는 법, 벤치마크하는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-benchmark-in-r/</link>
      <pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-benchmark-in-r/</guid>
      <description>개요 매트랩R 은 분명 통계 분석에 특화되어 있는 프로그래밍 언어지만, 모든 언어가 그러하듯 속도에 관심이 없는 것은 아니다. 속도가 강점이 아니라고 해도 벤치마킹은 할 수 있어야한다. R 에서는 간단하게도 코드 전문을 system.time({})에 넣어서 시간을 잴 수 있다. 예시 다음은 에라토스테네스의 체를 R 로 구현하고 $2*10^{5}$ 이하의 홀수를 30개</description>
    </item>
    
    <item>
      <title>R 에서 ts 함수의 start, end 옵션과 window 함수에서 start, end 옵션의 차이점</title>
      <link>https://freshrimpsushi.github.io/posts/1242/</link>
      <pubDate>Tue, 20 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/1242/</guid>
      <description>설명 R 로 시계열 데이터를 다루다보면 ts() 함수와 window() 함수를 자주 사용하게 된다. ts()는 R 이 받아들일 수 있도록 시계열 데이터를 만들 때 쓰고, window()는 시계열 데이터의 일부를 추출하는데 쓰인다. 두 함수 모두 start, end를 옵션으로 갖는데, 그 차이는 다음과 같다. ts() 내가 인덱스를 주기 위한 옵션이다. start: 시계열 데이터로 만들어질 데이터의 첫</description>
    </item>
    
    <item>
      <title>R 에서 색 테두리 있는 점 찍는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-colorize-scatter-plot/</link>
      <pubDate>Sun, 18 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-colorize-scatter-plot/</guid>
      <description>코드 점 도표에서 테두리의 색을 바꾸거나 내부를 칠하기 위해서는 다음의 옵션들을 바꿔주면 된다: pch: 심볼을 바꿔서 색을 칠한다. 21번부터 25번까지를 사용하면 된다. bg: 백그라운드 컬러로써, 내부에 칠해지는 색을 결정한다. 위 그림에선 연두색이다. col: 심볼 그 자체의 컬러로써, 실제로는 테두리에 해당한다. 위 그림에선 빨간색이다. set.seed(150421) win.graph(4,4) plot(rnorm(10), pch=21, bg=&#39;green&#39;, col=&#39;red&#39;)</description>
    </item>
    
    <item>
      <title>R 에서 파이프 오퍼레이터 %&gt;% 사용하는 법</title>
      <link>https://freshrimpsushi.github.io/posts/in-r/</link>
      <pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/in-r/</guid>
      <description>개요 R 에서 %&amp;gt;%은 파이프 연산자Pipe Operater 로써, 다른 연산자가 모두 그러하듯 이항연산을 한다. 파이프 연산자는 이름 그대로 어떤 값들이 파이프를 통과하는 것처럼 함수와 함수들을 타고다닐 수 있게 해준다. 백마디 말보다 다음의 예시가 더 도움이 될 것이다. 예시 위의 예시는 $1$ 부터 $10$ 까지의 제곱근을 구하고 거기에 로그를 취한 뒤 그 중에서 중위수</description>
    </item>
    
    <item>
      <title>R 에서 오퍼레이터 %% 정의하는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-define-binary-operator-in-r/</link>
      <pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-define-binary-operator-in-r/</guid>
      <description>개요 R 에서는 함수를 정의할 때 아예 이항연산자로 정의할 수가 있다. 이미 R 에서 기본적으로 정의된 나눗셈의 나머지 %%, 몫 %/%, 내적 %*%, %o%나 포함관계 %in%, 그리고 파이프 연산자 %&amp;gt;% 등도 이러한 이항연산자에 속한다. 코드 가령 파이썬과 같은 언어에서는 문자열끼리 덧셈을 하면 문자열이 연결되기 때문에 아주 편한데, R 은 이에 비해서는 다소 불편한 감이 있다. 이</description>
    </item>
    
    <item>
      <title>R 에서 로그로그 스케일 그림 그리는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-plot-loglog-scale-graph/</link>
      <pubDate>Tue, 25 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-plot-loglog-scale-graph/</guid>
      <description>좋지 않은 방법 win.graph(7,4); par(mfrow=c(1,2)) plot(pressure,main=&#39;Pressure\&#39;) y&amp;lt;-pressure[-1,]$pressure; logtemp&amp;lt;-log(y) x&amp;lt;-pressure[-1,]$temperature; logpress&amp;lt;-log(x) plot(logpress,logtemp,main=&#39;log scale\&#39;) 로그로그 스케일로 그림을 그리는 가장 쉬운 방법은 데이터 자체에 로그를 취하는 것이다. 만약 로그로그 플랏을 처음 그려본다면 이 방법은 반드시 숙지하는 편이 좋다. 이 방법은 R 이든 어떤 언어든 먹히기 때문에 급한대로 써먹을 수 있기 때문이다. 물론 이 방법은 머리가 편한만큼 손이 다소 수고스럽다. win.graph(5,5) plot(pressure,main=&#39;Pressure\&#39;,log=&amp;quot;xy&amp;quot;) 권장되는 방법 R 자</description>
    </item>
    
    <item>
      <title>R 에서 범례 넣는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-plot-legend-in-r/</link>
      <pubDate>Sun, 23 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-plot-legend-in-r/</guid>
      <description>코드 데이터는 분석하는 것만큼이나 표현하는 것이 중요하다. 그림이 복잡할 수록 꼼꼼한 주석과 깔끔한 범례가 데이터를 이해하는데에 큰 도움을 준다. legend() 함수는 굉장히 많은 옵션을 가지고 있으나, 아래 코드와 같이 아주 필수적인 요소만 사용해도 좋다. 위치를 나타내는 첫번째 옵션은 &amp;ldquo;top&amp;rdquo;, &amp;ldquo;bottom&amp;rdquo; + &amp;ldquo;left&amp;rdquo;, &amp;ldquo;right&amp;rdquo; 의 조합과 &amp;ldquo;center&amp;quot;로 편하게</description>
    </item>
    
    <item>
      <title>R 에서 메타데이터, attr 참조하는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-refer-attr-in-r/</link>
      <pubDate>Fri, 21 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-refer-attr-in-r/</guid>
      <description>개요 R 에서 함수들을 사용하다보면 간혹 attr(,&amp;quot;something&amp;quot;)과 같은 데이터를 접할 때가 있다. Attribute는 말 그대로 속성 을 의미하는데, 파이썬과 같은 언어와 달리 R 에서는 메타 데이터로써 데이터에 들어있는 일종의 주석으로 받아들여도 좋다. 그런데 R 을 쓰다보면 가끔 이 데이터를 참조하고 싶을 때</description>
    </item>
    
    <item>
      <title>R 에서 문자열의 벡터를 하나의 문자열로 합치는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-join-string-vector-in-r/</link>
      <pubDate>Tue, 18 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-join-string-vector-in-r/</guid>
      <description>개요 R 은 데이터를 다루기에 무척 편리한 언어지만, 다른 프로그래밍 언어에도 익숙한 사람이라면 R 의 문자열이 다소 낯설 수 있다. C 혹은 파이썬과 달리 R 자체에서 지원하는 기능이 많고, 반대로 그 기능들을 써야만 수월하게 다룰 수 있다. 그래서 내장 함수들이 생각하는대로 작동하지 않으면 답답한 면이 있다. 예시 예를 들어 위와 같이 캐릭터들로 이루어진 벡</description>
    </item>
    
    <item>
      <title>R 에서 리스트를 참조하는 여러가지 방법</title>
      <link>https://freshrimpsushi.github.io/posts/some-way-to-refer-list-in-r/</link>
      <pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/some-way-to-refer-list-in-r/</guid>
      <description>개요 R 은 데이터를 다루기 위해 정말 좋은 기능들을 많이 제공하는데, 그 중에서도 리스트는 R 을 사용하게 만드는 가장 큰 이유 중 하나다. 파이썬을 위시한 다른 언어에도 리스트 자료형 자체는 많이 구현되어 있으나 R 만큼 데이터를 다루기 편하고 직관적으로 구현되어 있지는 않다. 리스트를 잘 다룰 수 있게 되면 다른 프로그래밍 언어로는 다소 복잡하고 귀찮은 코딩</description>
    </item>
    
    <item>
      <title>R 에서 최대값과 최소값의 위치 구하기</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-get-argmax-argmin-or-index-of-maximum-or-minimum-in-r/</link>
      <pubDate>Fri, 14 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-get-argmax-argmin-or-index-of-maximum-or-minimum-in-r/</guid>
      <description>코드 set.seed(150421) x&amp;lt;-sample(100,10); x which.max(x) which.min(x) 통계를 목적으로 데이터를 보다보면 최대값과 최소값이 무엇인지 아는것만 중요한게 아니라 그 게 몇번째 값인지를 파악하는 것도 필요한 경우가 많다. 특히 시계열 데이터는 더더욱 그러하다. 물론 R 은 이런 함수가 없어도 조작이 쉽지만, 가능하다면 복잡한 코드는 지양하는 게 좋다. 데이터 x 의 최대값이 어디인지 궁금해서 which(max</description>
    </item>
    
    <item>
      <title>R 에서 벡터끼리 내적 계산하는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-inner-product-in-r/</link>
      <pubDate>Mon, 03 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-inner-product-in-r/</guid>
      <description>코드 x&amp;lt;-1:10; x y&amp;lt;-(-1)^(1:10); y sum(x*y) x %*% y x %o% y R 에서 분석 혹은 시뮬레이션을 하다보면 가중치가 적용된 기댓값을 구할 일이 종종 있다. 물론 수식적으로 $\displaystyle \left&amp;lt; \mathbb{x}, \mathbb{y} \right&amp;gt; = \sum_{i=1}^{n} x_{i} y_{i}$ 는 아주 간단하고 R 자체의 벡터 계산이 아주 편리하기 때문에 sum() 함수만 있다면 쉽게 내적을 할 수 있다. 그러나 이는 길게 보았을 때 코드의 가독성을 떨어뜨리는 요인이 된다. 한편 $n$ 차원 벡터는 $1 \times n$ 차원</description>
    </item>
    
    <item>
      <title>R 에서 데이터 프레임 열기준으로 정렬하는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-sort-data-frame-by-a-column/</link>
      <pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-sort-data-frame-by-a-column/</guid>
      <description>개요 R 에서 데이터를 정렬하는 것 자체는 sort() 함수를 사용하면 간단하게 할 수 있으나, 기본적으로 sort() 함수는 벡터만을 소팅한다. 그러나 실제로는 데이터 프레임의 수많은 카테고리를 다루기 때문에 열 단위로도 정렬할 수 있는 방법이 필요한 경우가 많다. 코드 x&amp;lt;-c(pi,3,99,0,-1) order(x) x[order(x)] head(iris) head(iris[order(iris$Petal.Length),]) order() 함수는 주어진 벡터가 오름차순이 되도록 하는 데이터의 넘버를 반환해준다. 위의 예시를 보</description>
    </item>
    
    <item>
      <title>R 에서 히스토그램 더 세밀하게 보는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-change-histogram-class-range/</link>
      <pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-change-histogram-class-range/</guid>
      <description>코드 R 에서는 hist() 함수를 통해 히스토그램을 쉽게 그려볼 수 있다. 이 때 계급의 크기는 R 이 알아서 판단하고 결정하는데, 좀 더 세밀하게 보기 위해서는 nclalss 옵션을 사용하면 된다. set.seed(150421) x&amp;lt;-runif(50) win.graph(7,4); par(mfrow=c(1,2)) hist(x) hist(x,nclass=20) 위 코드를 실행시킨 결과는 다음과 같다.</description>
    </item>
    
    <item>
      <title>R 에서 데이터 표준화하기 표준화된 잔차 보기</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-standardize-data-in-r/</link>
      <pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-standardize-data-in-r/</guid>
      <description>코드 R 은 통계에 특화된 언어인만큼 Z-score $\displaystyle z:= {{x - \mu} \over {\sigma}}$ 를 구해야할 일이 많다. 이 때 내장된 scale() 함수를 사용하면 편리하다. 예제로써 $\mathbb{x} = ( 1, \cdots , 10 )$ 이라는 벡터를 표준화해보자. center(평균)나 scale(표준편차)과 같이 지저분하게 뜨는 게 보기 싫다면 그냥 벡터를 취하면 된다. 한편 표준화를 가장 많이 하게 되는 일 중 하나가 회귀분석 후 잔</description>
    </item>
    
    <item>
      <title>R 에서 현재 날짜 시간 확인하기</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-check-time-and-date-in-r/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-check-time-and-date-in-r/</guid>
      <description>코드 R 뿐만이 아니라 프로그래밍 언어를 사용해야하는 많은 작업에서 로그를 작성하고 해당 시각에 대한 정보가 필요하다. R 에서는 Sys.Date() 함수를 통해 날짜를 확인할 수 있으며, Sys.time() 함수를 통해 초 단위까지의 정확한 시각을 알 수 있다. 대소문자에 주의해야하며, 만약 날짜가 필요 없다면 문자열을 쪼개서 시각에 대한 정보만 취하면 될 것이다.</description>
    </item>
    
    <item>
      <title>R 에서 야코비 행렬 헤세 행렬 구하는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-find-jacobian-matrix-hessian-matrix-in-r/</link>
      <pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-find-jacobian-matrix-hessian-matrix-in-r/</guid>
      <description>코드 R 에서 야코비 행렬과 헤세 행렬을 구하기 위해서는 numDeriv 패키지의 jacobian() 함수와 hessian() 함수를 사용한다. install.packages(&amp;quot;numDeriv&amp;quot;) library(numDeriv) f &amp;lt;- function(v) {c(v[1]^2 + v[2]^2 - 1, sin(pi*v[1]/2) + v[2]^3)} g &amp;lt;- function(v) {(v[1])^3+(v[2])^2} jacobian(f, c(1,1)) hessian(g, c(1,1)) 위 코드를 실행시킨 결과는 다음과 같다. 위는 $f(x,y) := \begin{bmatrix} x^2 + y^2 -1 \\ \displaystyle \sin {{ \pi } \over {2} } x + y^3 \end{bmatrix}$ 의 야코비 행렬에 $x=y=1$ 을 대입한 결과, 아래는 $g(x,y) := x^3 + y^2$ 의 헤세 행렬에 $x=y=1$ 을 대입한 결과다. 실제로 $f$ 의 야코비 행렬은</description>
    </item>
    
    <item>
      <title>R 에서 복소수 사용하는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-use-complex-number-in-r/</link>
      <pubDate>Tue, 16 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-use-complex-number-in-r/</guid>
      <description>개요 R 에는 복소수 자료형이 구현되어있다. 굳이 스스로 구현할 필요 없이 가져다 쓰기만 하면 된다. 사칙연산은 물론 복소수를 다룰 때 빠질 수 없는 여러가지 함수 역시 만들어져 있다. 코드 $z_{1} : = 1- i$, $z_{2} := 1+ i$ 이라고 하자. z_1 = 1-1i z_2 = 1+1i z_1 + z_2 z_1 - z_2 z_1 * z_2 z_1 / z_2 Re(z_1) Im(z_1) Mod(z_1) Arg(z_1) Conj(z_1) 위의 코드를 실행시키면 다음과 같은 결과를 얻을 수 있다. 수식으로 확인해보자.</description>
    </item>
    
    <item>
      <title>R 에서 정적분 구하는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-integrate-in-r/</link>
      <pubDate>Sun, 14 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-integrate-in-r/</guid>
      <description>개요 R 에서 정적분을 구하기 위해선 integrate() 함수를 사용할 수 있다. 예를 들어 코드 $\displaystyle \int_{0}^{3} \left( x^2 + 4x + 1 \right) dx$ 과 $\displaystyle \int_{0}^{\infty} e^{-x} dx$ 은 다음과 같이 구할 수 있다. 특히 적분구간에는 inf를 넣음으로써 이상적분까지 할 수 있다. f&amp;lt;-function(x) {x^2 + 4*x + 1} g&amp;lt;-function(x) {exp(-x)} integrate(f,0,3) integrate(g,0,Inf) 실제로 계산해보면 $$ \int_{0}^{3} \left( x^2 + 4x + 1 \right) dx = \left[ {{1} \over {3}} x^{3} + 2 x^2 + x \right]_{x=0}^{3} = 9 + 18 + 3 = 30 $$ 이고 $$ \int_{0}^{\infty} e^{-x} dx = \left[ - e^{-x} \right]_{x = 0}^{\infty} =</description>
    </item>
    
    <item>
      <title>R 에서 미분계수 구하는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-differentiate-in-r/</link>
      <pubDate>Fri, 12 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-differentiate-in-r/</guid>
      <description>개요 R 에서 미분계수를 구하기 위해선 numDeriv 패키지의 grad() 함수를 사용할 수 있다. 코드 예를 들어 $f(x) = x^2 + 4x + 1$ 과 $g(x) = e^{-x}$ 의 미분계수는 다음과 같이 구할 수 있다. install.packages(&amp;quot;numDeriv&amp;quot;) library(numDeriv) f&amp;lt;-function(x) {x^2 + 4*x + 1} g&amp;lt;-function(x) {exp(-x)} grad(f,2) grad(g,0) 실제로 계산해보면 $f &#39; (2) = 2 \cdot 2 + 4 = 8$ 이고 $g&#39;(0) = - e^{0} = -1$ 인 것을 확인할 수 있다. 참고로 스칼라 함수의 경우에도 x 옵션에 벡터를 넣어주면 그래디언트를 잘 계산해준</description>
    </item>
    
    <item>
      <title>R 에서 현재 OS 정보 확인하는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-check-operating-system-in-r/</link>
      <pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-check-operating-system-in-r/</guid>
      <description>개요 R 은 이래저래 리눅스에서도 사용할 일이 있이 많다. 대표적으로 빅데이터를 다루기 위해 하둡을 쓰는 경우가 있다. 물론 윈도우나 리눅스나 R 자체는 크게 다른 게 없지만, 작업환경이 다르기 때문에 작업경로가 달라져서 파일의 입출력이 다소 귀찮아지는 경우가 있다. 작업환경에 관계 없이 작업경로를 편하게 설정하기 위해선 현재의 OS가 어떤 것인지 확인</description>
    </item>
    
    <item>
      <title>우분투에서 R 설치하는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-install-r-in-ubuntu/</link>
      <pubDate>Thu, 14 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-install-r-in-ubuntu/</guid>
      <description>가이드 Step 1. Ctrl+Alt+T 를 눌러 콘솔창을 띄운다. Step 2. 콘솔창에 다음과 같이 입력한다. sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 관리자 권한이 필요하므로 사용자 계정의 암호를 입력해야한다. Step 3. 콘솔창에 다음과 같이 입력한다. sudo add-apt-repository &#39;deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/&#39; Step 4. 콘솔창에 다음과 같이 입력한다. sudo apt update Step 5. 콘솔창에 다음과 같이 입력한다. sudo apt install r-base *Step 6. 성공적으로 설치되었는지 확인하기 위해 콘솔창에</description>
    </item>
    
    <item>
      <title>R 에서 그래프 그릴 때 축 이름에 아래첨자 넣기</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-use-subscript-in-plot-in-r/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-use-subscript-in-plot-in-r/</guid>
      <description>코드 R 에서도 변수의 이름에 언더바 _를 넣는 것은 허용되지만, 그래프에서도 그렇게 나타낸다면 심하게 가독성이 떨어진다. expression() 함수를 아래와 같이 사용하면 축 이름에도 보기 좋게 아래첨자를 넣을 수 있다. data&amp;lt;-as.numeric(lynx) win.graph(4,4) plot(data[-1],data[-length(data)],type=&#39;p&#39;,main=&#39;아래첨자 사용&#39;, xlab=expression(Y[t]),ylab=expression(Y[t-1]))</description>
    </item>
    
    <item>
      <title>R 에서 두 배열의 성분 비교하기</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-compare-array-in-r/</link>
      <pubDate>Mon, 04 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-compare-array-in-r/</guid>
      <description>개요 R 은 데이터의 형태, 구조보단 그 내용에 관심이 많은 분야에서 많이 쓰이므로 그 비교 역시 유용하다. 포함관계 (전혀 중요하지는 않지만, 예제에서 A는 삼각수 $\displaystyle {{n(n+1)} \over {2}}$ 이고 B는 사각수 $m^2$ 를 나타낸다.) 이항연산자 %in% 을 사용해 두 배열을 비교해보면 A의 성분 중 B에도 속하는 성분에 대해 참, 그렇지 않으면 거짓으로 반환해준다. 다음과 같이 문자열을</description>
    </item>
    
    <item>
      <title>R 에서 데이터 프레임의 열과 행 이름 바꾸기</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-change-row-and-column-name-of-dataframe-in-r/</link>
      <pubDate>Sat, 02 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-change-row-and-column-name-of-dataframe-in-r/</guid>
      <description>개요 R 에서 데이터 프레임을 이용해 복잡한 코드를 짜다보면 디폴트로 정해주는 열 이름들이 헷갈려서 바꿔줘야 할 상황이 있다. names() 예제로써 위 데이터 프레임을 보면 별 다른 언급이 없으면 V1, V2, V3처럼 무성의하고 구분하기 힘든 열 이름이 주어진다. 여기에 names() 함수를 씌우면 열 이름을 반환하며, 반대로 거기에 바로 문자열을 넣어 열 이름을 바꿀 수 있다. 그냥 단순</description>
    </item>
    
    <item>
      <title>R 에서 자료구조 뜯어보는 법</title>
      <link>https://freshrimpsushi.github.io/posts/data-structure-in-r/</link>
      <pubDate>Mon, 12 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/data-structure-in-r/</guid>
      <description>개요 R에서 여러가지 함수를 사용하다보면 아래와 같이 친절하게 결과가 출력되는 경우를 자주 볼 수 있게 된다. 문제는 이 결과를 그냥 보는 게 아니라 아웃풋으로써 받아서 써먹고 싶을 때다. 예시 가령 위 스크린샷에서 잔차의 최댓값이 필요하면 그냥 15.9719을 베껴써도 되긴 한다. 하지만 수십 수백번을 반복하면서 각 분석에서 잔차의 최댓값이 궁금하다면</description>
    </item>
    
    <item>
      <title>R 에서 리스트 해체하기, 중복 성분 제거하기</title>
      <link>https://freshrimpsushi.github.io/posts/unlist-unique/</link>
      <pubDate>Sun, 23 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/unlist-unique/</guid>
      <description>개요 온갖가지 정제되지 않은 데이터를 상대할 일이 많은 R 에서 리스트 자료형은 데이터를 정리하는데에 특히 유용하다. 그러나 반대급부로 데이터에 접근하는 것이 조금 번거롭고 원하는 내용을 찾는데에 불리한 점이 있다. 이때 unlist() 함수를 통해 리스트 자료형을 깨주면 이러한 조작이 한결 편해진다. unique() 함수는 받은 배열에서 중복되는 원소를 모두 제거하고 하나씩만</description>
    </item>
    
    <item>
      <title>R 에서 그래프 그릴 때 사용하는 심볼들</title>
      <link>https://freshrimpsushi.github.io/posts/symbols-for-plots-in-r/</link>
      <pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/symbols-for-plots-in-r/</guid>
      <description>코드 각종 그래프 관련 함수에서 찍히는 점의 모양을 바꿀 때 pch 옵션을 사용한다. 위 그림은 특히 자주 쓰는 심볼들을 한 눈에 볼 수 있게 나타낸 것이다.쓸만한 게 많지만 특히 16번이 자주 쓰이며, 25번 이후에도 일단 마크 자체는 정해져 있으나 쓸만한 게 없다. 아래 예제 코드에서 sym을 26부터 50으로 고치고 확인해볼 수 있다. 한편 21번부터 25번은 bg</description>
    </item>
    
    <item>
      <title>R 에서 그림에 문자열 찍는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-print-text-in-plot/</link>
      <pubDate>Sun, 02 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-print-text-in-plot/</guid>
      <description>코드 text() 함수를 통해 그래프에 문자열이 찍히도록 할 수 있다. 첫번째 옵션은 $x$ 축 좌표의 벡터, 두번째 옵션은 $y$ 축 좌표의 벡터, 세번째 옵션은 입력될 문자열의 벡터를 받는다. 아래의 예제코드에서 t만 바꿔가면서 실행시켜보면 바로 이해가 될 것이다. win.graph(6,5) plot(x=0,y=0,xlim=c(-1,5),ylim=c(-1,4),xlab=&amp;quot;x&amp;quot;,ylab=&amp;quot;y&amp;quot;) points(4,3,col=&amp;quot;red&amp;quot;,pch=19) #1 abline(h=0) #2 abline(v=0) #3 abline(0,3/4) #4 segments(4,0,4,3) x=c(2,-0.2,2,4.2) y=c(-0.2,2,2,2) t=c(&amp;quot;(1)&amp;quot;,&amp;quot;(2)&amp;quot;,&amp;quot;(3)&amp;quot;,&amp;quot;(4)&amp;quot;) t=c(&amp;quot;(하나)&amp;quot;,&amp;quot;(둘)&amp;</description>
    </item>
    
    <item>
      <title>R 에서 수평선 수직선 그리는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-draw-horizontal-or-vertical-line-in-r/</link>
      <pubDate>Thu, 30 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-draw-horizontal-or-vertical-line-in-r/</guid>
      <description>예시 1. abline(h=0) 수평선을 긋는다. 2. abline(v=0) 수직선을 긋는다. 3. abline(0,3/4) $y$ 절편이 $0$ 이고 기울기가 $3/4$ 인 직선을 긋는다. 애초에 abline() 함수 자체가 $y=a+bx$ 의 계수인 $a,b$ 에서 이름을 따온 것이다. 통계를 목적으로 R 을 쓰고 있다면 막상 회귀직선을 그릴 때 빼곤 쓸 일이 없다. segments(4,0,4,3) $(4,0)$ 에서 $(4,3)$ 으로 이어지는 선분을 그린다.깔끔하게 필요한 부분만 그리고 싶을때 필요하다. win.graph(6,5) plot(x=0,y=0,xlim=c(-1,5),ylim=c(-1,4),xlab=&amp;quot;x&amp;quot;,ylab=&amp;quot;y&amp;quot;) points(4,3,col=&amp;quot;red&amp;quot;,pch=19) #1 abline(h=0) #2 abline(v=0) #3 abline(0,3/4)</description>
    </item>
    
    <item>
      <title>R 에서 그래프 그리기</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-plot-in-r/</link>
      <pubDate>Tue, 28 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-plot-in-r/</guid>
      <description>개요 R 은 다른 언어와 비교했을때 그래프의 표현이 아주 쉽다는 장점이 있다. 여타 통계 패키지와 비교하자면 쉬운 그림은 패키지가 빨라도 세세한 표현이 많아지면 R 이 편해지는 경향이 있다. 물론 R이 꼭 그래픽만을 위한 언어는 아니지만, 매우 큰 장점이니만큼 자유자재로 다룰 수 있게 연습하는 게 좋다. 코드 set.seed(150421) x&amp;lt;-1:10 y&amp;lt;-rnorm(10,5) z&amp;lt;-rexp(10) win.graph(4,4) plot(x,y,main=&amp;qu</description>
    </item>
    
    <item>
      <title>R 에서 조건부로 데이터 필터링하는 법</title>
      <link>https://freshrimpsushi.github.io/posts/conditionally-data-filtering-in-r/</link>
      <pubDate>Sun, 26 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/conditionally-data-filtering-in-r/</guid>
      <description>개요 R 이 주로 통계학에서 쓰이기 때문인지, 필요한 데이터를 골라내고 편집하는 기능은 타의 추종을 불허한다. 이러한 데이터의 핸들링에 익숙해지는 것은 조금 어렵지만, 완벽하게 터득하고 나면 다른 언어가 너무나 불편할 것이다. 사실 이러한 팁들은 읽는 것만으로는 크게 도움이 되지 않는다. (실제로 정확성을 기하려다보니 설명도 간결할 수밖에 없다.)</description>
    </item>
    
    <item>
      <title>R 에서 조건부 합 조건부 평균 구하기</title>
      <link>https://freshrimpsushi.github.io/posts/conditional-sum-and-conditional-mean-in-r/</link>
      <pubDate>Thu, 23 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/conditional-sum-and-conditional-mean-in-r/</guid>
      <description>개요 엑셀이라고 치면 sumif() 혹은 averageif() 함수가 필요한 상황이 가끔 있다.R 에선 그처럼 단순한 함수는 없지만, 압도적인 상위호환으로 apply 계열 함수가 있다. 이 함수를 꼼꼼하게 익혀놓으면 좋긴한데, 당장은 급한대로 조건부 합과 조건부 평균만 구해보자. 예제 iris 데이터셋을 불러보자. 임의로 10, 50, 90, 130번째 데이터를 살펴보면 범주형 변수로써 종을 분류해놓은 것</description>
    </item>
    
    <item>
      <title>R 에서 여러가지 분포함수</title>
      <link>https://freshrimpsushi.github.io/posts/random-number-generate-in-r/</link>
      <pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/random-number-generate-in-r/</guid>
      <description>설명 R 에서 특정 분포에 대한 함수들은 다음과 같은 접두어와 접미어의 조합으로 만들어진다. 접두 확률분포 $X$ 의 확률분포함수를 $f(x)$ 라고 하자. r-:랜덤 추출, 확률분포 $X$ 에서 나온 $x_{1}, \cdots , x_{n}$ 을 생각하면 좋다. d-: 분포함수, $f(x)$ p-: 누적분포함수, $F(x) = \displaystyle \int_{\infty}^{x} f(t) dt$ q-: 분위수함수, $F^{-1}(\alpha)$ 접미 이름이 알려진 분포는 거의 다 있지만 특히 자주 쓰는 분포는 아래와 같다.</description>
    </item>
    
    <item>
      <title>R 에서 올림, 내림, 반올림, 자릿수 바꾸기</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-round-numbers/</link>
      <pubDate>Sat, 02 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-round-numbers/</guid>
      <description>개요 ceiling() 함수는 올림 처리를, floor() 함수는 내림 처리를 해준다. 이런 함수들은 주로 통계를 다루는 R 에서는 필요 없어 보이지만 의외로 데이터 핸들링을 할 때 써먹기가 편하다. 설명 trunc() 함수는 소수점 아래를 모두 버려주는 건 똑같지만 $0$ 에 더 가까운 쪽으로 값을 반환해준다. round() 함수와 signif() 함수 모두 자리수를 남기지만 round()는 소수점 아래를, signif(</description>
    </item>
    
    <item>
      <title>R 에서 문자열 다루기</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-handle-strings-in-r/</link>
      <pubDate>Fri, 25 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-handle-strings-in-r/</guid>
      <description>개요 개발자들이 많이 사용하는 언어들에 비교하면 그 정도가 덜하지만, R 에서도 문자열을 다룰 일이 생각보다 많다. 데이터가 방대하고 제멋대로일수록 이런 사소한 테크닉들이 엄청나게 중요해진다. 팁 nchar() 함수는 단순히 문자열의 길이를 반환한다. 다른 언어를 먼저 접한 사람은 아마 십중팔구 length를 먼저 쳐봤을 것이다. substring() 함수는 그 이름에서 쉽게 짐</description>
    </item>
    
    <item>
      <title>R 에서 부트스트랩 함수 사용하는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-use-boot-in-r/</link>
      <pubDate>Thu, 17 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-use-boot-in-r/</guid>
      <description>개요 R 에서 부트스트랩을 시행하는 코드를 직접 짜볼 수도 있지만, 기본적으로 제공되는 함수를 이용할 수도 있다. 그 과정은 아래와 같이 단순하지만 다른 함수들과 사용법에 다른 점이 많아서 처음엔 많이 낯설 것이다. 가이드 Step 1. 구하고 싶은 통계량을 반환하는 함수 boot.fn()을 정의한다.당연히 여기서 함수의 이름은 어찌되든 상관 없다. 이때 인수</description>
    </item>
    
    <item>
      <title>R 에서 멱함수 그래프 그리는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-plot-power-function-in-r/</link>
      <pubDate>Wed, 09 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-plot-power-function-in-r/</guid>
      <description>개요 간단하게 일변량 함수의 그래프를 그리는 법을 소개한다. 통계학에서 적절한 예로써 멱함수를 그려보자. 정의 귀무가설 $H_{0} : \theta \in \Theta_{0}$ 과 대립가설 $H_{1} : \theta \in \Theta_{1}$ 에 대해 유의수준 $\alpha$ 의 기각역을 $C_{\alpha}$ 라고 하자. 참값 $\theta$ 에 대한 함수 $\gamma_{C_{\alpha}}(\theta) : = P_{\theta} [ \mathbb{x} \in C_{\alpha} ]$ 를 멱함수Power Function라 한다. 설명 다른 표현으로는 $\gamma_{C_{\alpha}}(\theta) : = 1 - P_{\theta}[\text{Type 2 Error}]$ 이다. 유의확률과 마</description>
    </item>
    
    <item>
      <title>R 에서 자리수 출력 제한 없애기</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-unlimit-digits-and-print-in-r/</link>
      <pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-unlimit-digits-and-print-in-r/</guid>
      <description>개요 R 이 통계학을 위한 언어긴하지만 막상 R 콘솔은 데이터를 보는데 적합하지 않다. 그럼에도 불구하고 관측치가 수십만개에 달하는 빅데이터를 다룰 때나 핸들링이 잘 되었나 확인할 땐 단순 출력이 편하다. 팁 관측치가 조금 많을 때 콘솔로 출력해보면 위와 같이 아랫부분이 뭉텅 잘려나온다. 이럴 땐 콘솔창에 options(max.print = .Machine$integer.max</description>
    </item>
    
    <item>
      <title>R 에서 NA 제거하기</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-delete-na-in-r/</link>
      <pubDate>Sun, 29 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-delete-na-in-r/</guid>
      <description>개요 NA는 Not Available의 약자로, R 프로그래밍에선 주로 &amp;lsquo;결측값&amp;rsquo;을 의미한다. 일반적인 프로그래밍 언어에서의 null과는 그 의미도 쓰임새도 전혀 다름에 주의하도록 하자. 교과서에서 다루는 예제들은 보통 분석하기에 알맞도록 잘 정리되어 있지만, 실제로 분석에 임할 땐 전혀 그렇지가 않다. 그런 데이터를</description>
    </item>
    
    <item>
      <title>R 에서 범주형 데이터의 숫자를 숫자형 데이터로 바꾸기</title>
      <link>https://freshrimpsushi.github.io/posts/factor-to-numeric-in-r/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/factor-to-numeric-in-r/</guid>
      <description>개요 숫자임에도 불구하고 범주형 자료로 읽혀서 연속형 데이터로 바꾸고 싶은데 생각대로 되지 않는 이들을 위한 팁이다. 이 포스트는 지면 대부분을 그 원리를 설명하기 위해 할애하고 있으므로 결론만 필요하면 아래의 실전 예시부터 읽기를 추천한다. 참고로, 보통 자료형을 바꿀 때는 Cast라는 표현을 사용한다. 원리 R 을 이용해서 통계분석을 할 때 가장 중요</description>
    </item>
    
    <item>
      <title>R 에서 외부 데이터 불러오기</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-solve-eof-within-quoted-string/</link>
      <pubDate>Sun, 01 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-solve-eof-within-quoted-string/</guid>
      <description>개요 R 은 기본적으로 통계학을 위해 태어난 언어기 때문에 데이터의 입력 역시 편리하게 되어있다. read.table(file, header = FALSE, sep = &amp;quot;&amp;quot;, na.strings = &amp;quot;NA&amp;quot;, fileEncoding = &amp;quot;&amp;quot;) 함수 소개 read.table()은 데이터 테이블을 불러들이는 함수로써 위와 같이 여러가지 유용한 옵션을 제공한다. 옵션자체는 더 많이 있지만, 자주 쓰이고 반드시 알아두어야할 것을 추린 것이다. 다음의 설명들을 참고하</description>
    </item>
    
    <item>
      <title>R 에서 데이터 프레임의 행과 열의 위치 바꾸기</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-swap-row-and-column-in-r/</link>
      <pubDate>Sat, 25 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-swap-row-and-column-in-r/</guid>
      <description>개요 R 의 강점 중 하나는 프로그래밍 언어가 익숙한 사람의 입장에서 상당히 어려운 조작들을 손쉽게 구현시켜준다는 것이다. 예컨대 배열을 사용할 때 미리 메모리를 할당 시키지 않아도 스스로 확장이 되는가하면, 변수의 값을 바꾸는 등의 조작이 아주 쉽다. 예시 아이리스 데이터셋에서 Sepal.Width 열과 Species 열을 바꿔보자. 방법은 너무나 간단하다. 2번째 열에 5번째 열을</description>
    </item>
    
    <item>
      <title>R 에서 내장 데이터셋 불러오는 법</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-load-built-in-dataset-in-r/</link>
      <pubDate>Fri, 24 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-load-built-in-dataset-in-r/</guid>
      <description>개요 R 은 대표적인 통계 프로그래밍 언어로써 유용한 메소드 뿐만 아니라 예제로 쓰기 좋은 데이터셋도 제공한다. 만약 이런 데이터셋이 없다면 강의를 할 때마다 새로운 데이터를 다운로드하고 불러들어들이는 짓을 해야할 것이다. 가이드 데이터셋을 불러오는 방법은 아주 간단하다. 불러올 데이터셋의 이름을 우리가 사용할 변수에 할당하기만 하면 된다. 통계학</description>
    </item>
    
    <item>
      <title>R 에서 행렬의 곱 역행렬 전치행렬 구하기</title>
      <link>https://freshrimpsushi.github.io/posts/matrix-product-inverse-matrix-transpose-matrix/</link>
      <pubDate>Wed, 15 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/matrix-product-inverse-matrix-transpose-matrix/</guid>
      <description>개요 R 의 강점은 행렬을 위시한 각종 데이터셋의 조작이 간편하다는 점과 풍부한 통계 패키지를 무료로 제공한다는 것이다. 당연한 이야기지만 통계적 분석에서 행렬의 계산은 매우 중요하고, R 은 이러한 니즈를 훌륭하게 충족시켜준다. 매트랩이나 줄리아가 아닌 이상 다른 언어에선 행렬의 연산부터 귀찮게 따로 정의를 해줘야 할 것이다. 코드 행렬의 곱 예로써 행</description>
    </item>
    
    <item>
      <title>R 에서 몫과 나머지 구하기</title>
      <link>https://freshrimpsushi.github.io/posts/quotient-and-remainder-in-r/</link>
      <pubDate>Tue, 14 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/quotient-and-remainder-in-r/</guid>
      <description>개요 프로그래밍 언어의 문법에서 정말 통일이 안 되는 게 바로 몫과 나머지 연산자다. 기본적으론 다 비슷비슷하게 생긴 것 같지만 오히려 그래서 헷갈리는데 한 몫한다.C는 몫을 /, 나머지를 %으로 쓰고 파이썬은 몫을 //, 나머지를 % 으로 쓰며, 이렇게 헷갈리는 예는 얼마든지 더 들 수 있다. 도대체 통계와 행렬 계산에 초점을 맞춘 R 에서 몫과 나머지를 구할 일이 어디</description>
    </item>
    
    <item>
      <title>R 에서 모든 변수 제거하기 콘솔창 초기화</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-clear-console-and-remove-all-variable-in-r/</link>
      <pubDate>Mon, 13 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-clear-console-and-remove-all-variable-in-r/</guid>
      <description>개요 R 은 인터프리터 언어기 때문에 콘솔을 계속 보며 작업을 하게 된다. 이때 디버그 등을 하기 위해서는 이런 저런 테스트도 같은 작업환경에서 할 수밖에 없는데, 테스트 중간에 생성된 특정 변수가 아주 중요한데 프로그래머가 알아채지 못하고 완성본엔 포함시키지 않는 등의 일이 있을 수 있다. 어제 집에서 할 땐 분명히 돌아갔는데 오늘 발표 때 갑자기 안 돌아가는 등</description>
    </item>
    
    <item>
      <title>R 에서 else if문 사용하기 Error: unexpected else in else 해결</title>
      <link>https://freshrimpsushi.github.io/posts/how-to-fix-error-unexpected-else-in-else-in-r/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/how-to-fix-error-unexpected-else-in-else-in-r/</guid>
      <description>개요 R 에는 switch문과 같은 분기문이 없기 때문에 if문을 여러개 이어서 분기를 나누어야만 한다. 여기서 이 조건문이라는 게 프로그래밍 언어마다 if 와 else는 다 똑같은데 유독 else if 만 다를 수가 있다. elseif로 붙여쓰거나 아예 elif 처럼 줄여쓰는 경우가 그 예고, R은 제대로 띄어쓰기가 들어간 else if 를 사용한다. 여러가지 프로그래밍 언어를</description>
    </item>
    
  </channel>
</rss>
