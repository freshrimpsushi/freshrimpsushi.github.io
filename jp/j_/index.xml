<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>J_s on 生エビ寿司屋</title>
    <link>https://freshrimpsushi.github.io/jp/j_/</link>
    <description>Recent content in J_s on 生エビ寿司屋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Wed, 24 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://freshrimpsushi.github.io/jp/j_/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>絶対連続実関数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3542/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3542/</guid>
      <description>定義1 関数 $f : \mathbb{R} \to \mathbb{R} (\text{または } \mathbb{C})$ が与えられたとする。$f$が任意の有限個の互いに素な区間 $(a_{i}, b_{i}) \subset [a,b]$に対しても以下の条件を</description>
    </item>
    <item>
      <title>適応的な学習率: AdaGrad, RMSProp, Adam</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3529/</link>
      <pubDate>Fri, 29 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3529/</guid>
      <description>概要1 2 勾配降下法で使用されるアダプティブラーニングレートと、これを適用したモデルであるAdaGrad、RMSProp、Adamについて説明</description>
    </item>
    <item>
      <title>勾配降下における運動量法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3528/</link>
      <pubDate>Wed, 27 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3528/</guid>
      <description>概要1 2 勾配降下法におけるモーメンタム技術は、パラメーターを更新する際に以前の勾配もすべて使用することである。これが本質であり、これに尽きる</description>
    </item>
    <item>
      <title>磁場の記号にBを使う理由</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3523/</link>
      <pubDate>Sun, 17 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3523/</guid>
      <description>질문 電磁気学は文字通り電場 $\mathbf{E}$と磁場 $\mathbf{B}$について学ぶ学問です。電磁気学を学ぶ中で一度は次のような疑問</description>
    </item>
    <item>
      <title>モンテカルロ積分</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3515/</link>
      <pubDate>Fri, 01 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3515/</guid>
      <description>概要 モンテカルロ積分は、与えられた関数の積分を計算するのが困難な場合に使用される数値的近似方法の一つである。次のような状況を想定しよう。与え</description>
    </item>
    <item>
      <title>双線形形式とエルミート形式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3513/</link>
      <pubDate>Mon, 27 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3513/</guid>
      <description>定義1 二つのベクトル$\mathbf{x}, \mathbf{u} \in \mathbb{R}^{n}$が次のようであるとする。 $$ \mathbf{x}=\begin{bmatrix} x_{1} \\ x_{2} \\ \vdots \\ x_{n} \end{bmatrix},\quad \mathbf{u}^{T} = \begin{bmatrix} u_{1} &amp;amp; u_{2} &amp;amp; \cdots &amp;amp;</description>
    </item>
    <item>
      <title>二次形式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3512/</link>
      <pubDate>Sat, 25 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3512/</guid>
      <description>定義 $V$を$n$次元のベクトル空間と呼ぶ。与えられた定数$a_{ij} \in \mathbb{R}(\text{or } \mathbb{C})$について、以下の2次斉次関数$A : V \to</description>
    </item>
    <item>
      <title>ジュリアで軸、目盛りなどをすべて無くしてきれいに出力する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3501/</link>
      <pubDate>Fri, 03 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3501/</guid>
      <description>コード Plots.jlは基本的にグリッド、目盛り、軸、カラーバーなどを全て出力するけど、これらをなくしてすっきりと描きたい場合は、次のオプシ</description>
    </item>
    <item>
      <title>ジュリアでメッシュグリッドを作成する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3500/</link>
      <pubDate>Wed, 01 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3500/</guid>
      <description>概要 PythonやMATLABで使うmeshgrid()のような直接的な関数はない。グリッド上での関数値だけを求めたいなら、格子を作らないも</description>
    </item>
    <item>
      <title>ジュリアにおける多変数関数のブロードキャス팅</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3499/</link>
      <pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3499/</guid>
      <description>概要 Juliaで多変数関数をブロードキャストする方法を紹介する。Pythonなどで行うように、meshgridを作成する方法もあるし、各次元</description>
    </item>
    <item>
      <title>高速フーリエ変換アルゴリズム</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3492/</link>
      <pubDate>Mon, 16 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3492/</guid>
      <description>概要1 離散フーリエ変換DFTは、数式的な定義に従って計算すると、$\mathcal{O}(N^{2})$の時間計算量を持ちますが、以下で説明</description>
    </item>
    <item>
      <title>Julia Plotsで軸、軸名、目盛り、目盛り値の色を指定する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3490/</link>
      <pubDate>Thu, 12 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3490/</guid>
      <description>要約 Plots.jlで軸と目盛りの色を指定する関連キーワードは以下の通りである。 キーワード名 機能 guidefontcolor 軸名の色を指定 foreground_color_border, fgcolor_border 軸の色を指定 foreground_color_axis, fgcolor_axis 目盛りの</description>
    </item>
    <item>
      <title>Flux-PyTorch-TensorFlowチートシート</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3489/</link>
      <pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3489/</guid>
      <description>概要 Flux、PyTorch、TensorFlowで同じ機能をするコードを整理します。 Julia-MATLAB-Python-R チートシート Fluxについて次のような環境とします。</description>
    </item>
    <item>
      <title>측도론과 확률론 요약 정리</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3473/</link>
      <pubDate>Fri, 08 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3473/</guid>
      <description>概要 測度論と確率論を学んだ人向けの定義と概念の要約資料です。迅速な復習と定義の参照のために作成されました。 測度論 代数 $X \ne \varnothin</description>
    </item>
    <item>
      <title>ジュリアで与えられた分布からランダムにサンプリングする方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3463/</link>
      <pubDate>Sat, 19 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3463/</guid>
      <description>正規分布 julia&amp;gt; using Distributions julia&amp;gt; d = Normal() Normal{Float64}(μ=0.0, σ=1.0) julia&amp;gt; rand(d, 2,2) 2×2 Matrix{Float64}: -0.618228 -0.729552 -1.46898 -0.636276 一様分布 julia&amp;gt; rand(Uniform(), 2,2) 2×2 Matrix{Float64}: 0.0952175 0.348995 0.845515 0.768308 julia&amp;gt; rand(Uniform(1,10), 2,2) 2×</description>
    </item>
    <item>
      <title>ジュリアでランダムに抽出する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3462/</link>
      <pubDate>Thu, 17 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3462/</guid>
      <description>説明1 Juliaでランダム抽出する関数は以下の通りです。 rand([rng=default_rng()], [S], [dims...]) rngはRandom Number Generatorの略で、乱数抽出アルゴリズムを指定しま</description>
    </item>
    <item>
      <title>CSSカラー名札</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3459/</link>
      <pubDate>Wed, 09 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3459/</guid>
      <description>개요1 名前のある140以上のCSSカラーパレットです。 코드</description>
    </item>
    <item>
      <title>一般リニア群</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3450/</link>
      <pubDate>Sat, 22 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3450/</guid>
      <description>定義 実数の可逆な $n \times n$ 行列の集合を $\mathrm{GL}(n, \mathbb{R})$ または $\mathrm{GL}_{n}(\mathbb{R})$ と表記し、$n$次の一般線型群general linear group of degree $n$と呼ぶ。 $$ \mathrm{GL}(n, \mathbb{R}) := \left\{ n \times n \text{ invertible matrix} \right\} = M_{n</description>
    </item>
    <item>
      <title>MNIST Database</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3444/</link>
      <pubDate>Mon, 10 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3444/</guid>
      <description>概要1 $$ \includegraphics[height=20em]{https://upload.wikimedia.org/wikipedia/commons/2/27/MnistExamples.png} $$ MNISTmodified national institute of standards and technology データベースとは、アメリカの高校生と人口調査局の職員の数字の手書き文字に関するデータセットを指す。一般に[エムニス</description>
    </item>
    <item>
      <title>ジュリアで高速フーリエ変換（FFT）を使用する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3440/</link>
      <pubDate>Sun, 02 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3440/</guid>
      <description>概要 1 2 The Fastest Fourier Transform in the West(FFTW)は、マサチューセッツ工科大学(MIT)のMatteo FrigoとSteven G. Johnsonによって</description>
    </item>
    <item>
      <title>ジュリアで基本データ型を変更する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3439/</link>
      <pubDate>Fri, 30 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3439/</guid>
      <description>概要 機械学習のような分野では、計算速度の向上やメモリの節約などのために、64ビットの実数ではなく32ビットの実数が配列のデータ型として使われ</description>
    </item>
    <item>
      <title>交換ゲート</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3429/</link>
      <pubDate>Sat, 10 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3429/</guid>
      <description>양자정보이론 [ 펼치기 · 접기 ] 양자계산 논리게이트 비트 · 부울함수(AND · OR · NOT · XOR · NAND · NOR · CNOT · CCNOT · CSWAP) · 범용 게이트 · 복제 함수 · 사영 · 주입 양자게</description>
    </item>
    <item>
      <title>量子ゲートと量子回路</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3424/</link>
      <pubDate>Wed, 31 May 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3424/</guid>
      <description>양자정보이론 [ 펼치기 · 접기 ] 양자계산 논리게이트 비트 · 부울함수(AND · OR · NOT · XOR · NAND · NOR · CNOT · CCNOT · CSWAP) · 범용 게이트 · 복제 함수 · 사영 · 주입 양자게</description>
    </item>
    <item>
      <title>キュービット：量子コンピュータにおける情報の基本単位</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3423/</link>
      <pubDate>Mon, 29 May 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3423/</guid>
      <description>양자정보이론 [ 펼치기 · 접기 ] 양자계산 논리게이트 비트 · 부울함수(AND · OR · NOT · XOR · NAND · NOR · CNOT · CCNOT · CSWAP) · 범용 게이트 · 복제 함수 · 사영 · 주입 양자게</description>
    </item>
    <item>
      <title>ビット: 古典的なコンピュータにおける情報の基本単位</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3422/</link>
      <pubDate>Sat, 27 May 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3422/</guid>
      <description>양자정보이론 [ 펼치기 · 접기 ] 양자계산 논리게이트 비트 · 부울함수(AND · OR · NOT · XOR · NAND · NOR · CNOT · CCNOT · CSWAP) · 범용 게이트 · 복제 함수 · 사영 · 주입 양자게</description>
    </item>
    <item>
      <title>テンソル積の積ベクトル</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3415/</link>
      <pubDate>Sat, 13 May 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3415/</guid>
      <description>ビルドアップ 便宜上、複素数空間$\mathbb{C}$について展開するが、$\mathbb{R}$や任意のベクトル空間でも構わない。 有限集合</description>
    </item>
    <item>
      <title>ベクトル空間のテンソル積</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3414/</link>
      <pubDate>Thu, 11 May 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3414/</guid>
      <description>ビルドアップ1 便宜上、複素数空間$\mathbb{C}$について展開するが、$\mathbb{R}$や任意のベクター空間でも問題ない。 有限集</description>
    </item>
    <item>
      <title>フレドキン・CSWAPゲート</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3412/</link>
      <pubDate>Sun, 07 May 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3412/</guid>
      <description>定義1 以下のようなベクトル値ブール関数をフレドキンゲートFredkin gateと呼ぶ。 $$ F : \left\{ 0, 1 \right\}^{3} \to \left\{ 0, 1 \right\}^{3} $$ $$ F (a, b, c) = \Big(a, (\lnot a \land b) \lor (a \land</description>
    </item>
    <item>
      <title>トッフォリ/CCNOTゲート</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3411/</link>
      <pubDate>Fri, 05 May 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3411/</guid>
      <description>定義1 以下のようなベクトル値ブール関数をトフォリゲートToffoli gateと呼ぶ。 $$ T : \left\{ 0, 1 \right\}^{3} \to \left\{ 0, 1 \right\}^{3} $$ $$ T (a, b, c) = (a, b, (a \land b) \oplus c) $$ $\text{CCNOT}$</description>
    </item>
    <item>
      <title>制御NOT(CNOT)ゲート</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3410/</link>
      <pubDate>Wed, 03 May 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3410/</guid>
      <description>양자정보이론 [ 펼치기 · 접기 ] 양자계산 논리게이트 비트 · 부울함수(AND · OR · NOT · XOR · NAND · NOR · CNOT · CCNOT · CSWAP) · 범용 게이트 · 복제 함수 · 사영 · 주입 양자게</description>
    </item>
    <item>
      <title>関数的に完全な集合とは何か？</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3408/</link>
      <pubDate>Sat, 29 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3408/</guid>
      <description>定義1 ブール関数の集合$\left\{ f_{k} \right\} = \left\{ f_{k} : \left\{ 0, 1 \right\}^{n_{k}} \to \left\{ 0, 1 \right\} \right\}_{k\in \Gamma}$が与えられたとしよう。$\Gamma$は有限集合だ。任</description>
    </item>
    <item>
      <title>否定論理和、NORゲート</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3407/</link>
      <pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3407/</guid>
      <description>양자정보이론 [ 펼치기 · 접기 ] 양자계산 논리게이트 비트 · 부울함수(AND · OR · NOT · XOR · NAND · NOR · CNOT · CCNOT · CSWAP) · 범용 게이트 · 복제 함수 · 사영 · 주입 양자게</description>
    </item>
    <item>
      <title>負論理積、NANDゲート</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3406/</link>
      <pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3406/</guid>
      <description>양자정보이론 [ 펼치기 · 접기 ] 양자계산 논리게이트 비트 · 부울함수(AND · OR · NOT · XOR · NAND · NOR · CNOT · CCNOT · CSWAP) · 범용 게이트 · 복제 함수 · 사영 · 주입 양자게</description>
    </item>
    <item>
      <title>排他的論理和、XORゲート</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3405/</link>
      <pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3405/</guid>
      <description>양자정보이론 [ 펼치기 · 접기 ] 양자계산 논리게이트 비트 · 부울함수(AND · OR · NOT · XOR · NAND · NOR · CNOT · CCNOT · CSWAP) · 범용 게이트 · 복제 함수 · 사영 · 주입 양자게</description>
    </item>
    <item>
      <title>論理否定、NOTゲート</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3404/</link>
      <pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3404/</guid>
      <description>양자정보이론 [ 펼치기 · 접기 ] 양자계산 논리게이트 비트 · 부울함수(AND · OR · NOT · XOR · NAND · NOR · CNOT · CCNOT · CSWAP) · 범용 게이트 · 복제 함수 · 사영 · 주입 양자게</description>
    </item>
    <item>
      <title>論理和、ORゲート</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3403/</link>
      <pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3403/</guid>
      <description>양자정보이론 [ 펼치기 · 접기 ] 양자계산 논리게이트 비트 · 부울함수(AND · OR · NOT · XOR · NAND · NOR · CNOT · CCNOT · CSWAP) · 범용 게이트 · 복제 함수 · 사영 · 주입 양자게</description>
    </item>
    <item>
      <title>論理積、ANDゲート</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3402/</link>
      <pubDate>Mon, 17 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3402/</guid>
      <description>양자정보이론 [ 펼치기 · 접기 ] 양자계산 논리게이트 비트 · 부울함수(AND · OR · NOT · XOR · NAND · NOR · CNOT · CCNOT · CSWAP) · 범용 게이트 · 복제 함수 · 사영 · 주입 양자게</description>
    </item>
    <item>
      <title>ブール関数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3401/</link>
      <pubDate>Sat, 15 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3401/</guid>
      <description>양자정보이론 [ 펼치기 · 접기 ] 양자계산 논리게이트 비트 · 부울함수(AND · OR · NOT · XOR · NAND · NOR · CNOT · CCNOT · CSWAP) · 범용 게이트 · 복제 함수 · 사영 · 주입 양자게</description>
    </item>
    <item>
      <title>고전정보이론에서 정보량이란?</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3398/</link>
      <pubDate>Sun, 09 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3398/</guid>
      <description>양자정보이론 [ 펼치기 · 접기 ] 양자계산 논리게이트 비트 · 부울함수(AND · OR · NOT · XOR · NAND · NOR · CNOT · CCNOT · CSWAP) · 범용 게이트 · 복제 함수 · 사영 · 주입 양자게</description>
    </item>
    <item>
      <title>ゼロ行列</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3394/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3394/</guid>
      <description>定義 サイズが$m\times n$で、全ての要素が$0$である行列を零行列zero matrixと言い、$O_{m\times n}$または簡単に</description>
    </item>
    <item>
      <title>ジュリアプロットにおける軸のスタイルの変更方法 `framestyle`e`</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3376/</link>
      <pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3376/</guid>
      <description>##概要1 framestyle 属性を使って図の軸や枠線のスタイルを変更できる。可能なオプションは次の通りだ。 :box :semi :axes :origin :zerolines :grid :none コード デフォルト設定は :axes だ。 using Plots x =</description>
    </item>
    <item>
      <title>ベクトル空間における部分空間の和</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3371/</link>
      <pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3371/</guid>
      <description>定義1 $W_{1}, W_{2}$をベクトル空間$V$の部分空間としよう。$W_{1}$と$W_{2}$の和sumを$W_{1} + W_{2}$と表して、以</description>
    </item>
    <item>
      <title>古典情報理論におけるシャノン・エントロピー</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3400/</link>
      <pubDate>Tue, 31 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3400/</guid>
      <description>양자정보이론 [ 펼치기 · 접기 ] 양자계산 논리게이트 비트 · 부울함수(AND · OR · NOT · XOR · NAND · NOR · CNOT · CCNOT · CSWAP) · 범용 게이트 · 복제 함수 · 사영 · 주입 양자게</description>
    </item>
    <item>
      <title>線形代数学における剰余類と商空間</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3359/</link>
      <pubDate>Sat, 21 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3359/</guid>
      <description>定義1 $V$を$F$-ベクトル空間、$W \le V$を部分空間としよう。$v \in V$について、以下の集合 $$ \left\{ v \right\} + W := \left\{ v + w : w \in W \right\} $$ を$v$を</description>
    </item>
    <item>
      <title>ベクトル空間の不変部分空間</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3353/</link>
      <pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3353/</guid>
      <description>概要 $\beta = v_{1}, \dots, v_{k}$を線形変換 $T : V \to V$の固有ベクトルの集合としよう。ならば、$T$が$\span{\beta}$を$\span{\b</description>
    </item>
    <item>
      <title>線形変換の固有空間と幾何的重複度</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3349/</link>
      <pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3349/</guid>
      <description>定義1 $V$と$n$を次元ベクトル空間、$T : V \to V$を線形変換としよう。$\lambda$を$T$の固有値とする。以下のように定義された集</description>
    </item>
    <item>
      <title>対角化可能な線型変換</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3335/</link>
      <pubDate>Wed, 14 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3335/</guid>
      <description>定義 1 $V$を有限次元のベクトル空間とする。$T : V \to V$を線形変換とする。$T$の行列表示$\begin{bmatrix} T \end{bm</description>
    </item>
    <item>
      <title>線形変換の特性多項式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3339/</link>
      <pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3339/</guid>
      <description>概要 線形変換の特性多項式を定義する。以下の定理から、式$\det(A - \lambda I) = 0$を解くことが固有値を見つけることと同じであることが分かる。し</description>
    </item>
    <item>
      <title>有限次元の線形変換の固有値と固有ベクトル</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3337/</link>
      <pubDate>Thu, 08 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3337/</guid>
      <description>定義1 $V$を有限次元$F$-ベクトル空間としよう。$T : V \to V$を線形変換とする。$\lambda \in F$について、 $$ Tx = \lambda x $$ これを満たす</description>
    </item>
    <item>
      <title>ブロック行列</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3323/</link>
      <pubDate>Thu, 10 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3323/</guid>
      <description>定義 $A$を行列$m \times n$とする。 $$ A = \begin{bmatrix} a_{11} &amp;amp; a_{12} &amp;amp; \cdots &amp;amp; a_{1n} \\ a_{21} &amp;amp; a_{22} &amp;amp; \cdots &amp;amp; a_{2n} \\ \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \\ a_{m1} &amp;amp; a_{m2} &amp;amp; \cdots &amp;amp; a_{mn} \\ \end{bmatrix} $$ この時、行列を切る任意の垂直線</description>
    </item>
    <item>
      <title>基底の拡張と縮小</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3321/</link>
      <pubDate>Sun, 06 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3321/</guid>
      <description>要約1 $S$を有限次元ベクター空間$V$の有限部分集合とする。 (a) $S$が$V$を生成しつつ$V$の基底ではない場合、$S$の要素を適切に削除</description>
    </item>
    <item>
      <title>ジュリア、Python（NumPy、PyTorch）の配列の次元の違い</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3315/</link>
      <pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3315/</guid>
      <description>概要 JuliaとNumPy、PyTorch（以降、便宜上Pythonと呼ぶ）の高次元配列を扱う際、各次元が意味するものが異なるため注意が必要</description>
    </item>
    <item>
      <title>微分多様体の曲率</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3314/</link>
      <pubDate>Fri, 21 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3314/</guid>
      <description>定義1 $M$をリーマン多様体、$\frak{X}(M)$を$M$の上のすべてのベクトル場の集合としよう。 $$ \frak{X}(M) = \text{the set of all vector fileds of calss } C^{\infty} \text{ on } M $$</description>
    </item>
    <item>
      <title>論文レビュー: 物理情報基盤ニューラルネットワーク(PINN)</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3313/</link>
      <pubDate>Wed, 19 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3313/</guid>
      <description>概要 レファレンスと数式の番号や表記法は、論文をそのまま踏襲する。 Physics-informed neural networks (PINN[ピン]と読む)は、数値的に解くために設計された微分方程式の</description>
    </item>
    <item>
      <title>ジュリアでのシンボリック演算の方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3311/</link>
      <pubDate>Sat, 15 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3311/</guid>
      <description>## 概要 Juliaでの記号演算は、`SymEngine.jl`[^1]パッケージを通じて使うことができる。 [^1]: https://symengine.org/SymEngine.jl/ ## コード ### シンボルの定義 シンボル</description>
    </item>
    <item>
      <title>べき乗行列</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3307/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3307/</guid>
      <description>定義1 ある行列 $n \times n$ $A$について、$A^{k} = O$を満たす正の数 $k$が存在する場合、$A$を冪零nilpotentという。このとき$O</description>
    </item>
    <item>
      <title>三角行列</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3305/</link>
      <pubDate>Mon, 03 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3305/</guid>
      <description>定義1 主対角線より上の要素がすべて$0$である行列$A = [a_{ij}]$を下三角行列lower triangular matrixという。 $$ A \text{ is lower triangluar matrix if } a_{ij} =</description>
    </item>
    <item>
      <title>レヴィチビタ接続、リーマン接続、接続の係数、クリストッフェル記号</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3292/</link>
      <pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3292/</guid>
      <description>定理1 $(M,g)$をリーマン多様体とする。すると、次を満たす$M$上のアフィン接続$\nabla$が唯一に存在する。 $\nabla$が対称</description>
    </item>
    <item>
      <title>同型写像</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3287/</link>
      <pubDate>Sun, 28 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3287/</guid>
      <description>定義1 二つのベクトル空間$V, W$に対して、可逆な線形変換$T : V \to W$が存在する場合、$V$が$W$と同型$V$ is isomorphic to $W$であると言い、</description>
    </item>
    <item>
      <title>線形変換の逆</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3285/</link>
      <pubDate>Wed, 24 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3285/</guid>
      <description>定義1 $V, W$をベクトル空間、$T : V \to W$を線形変換とする。線形変換$U : W \to V$が次を満たすなら、$U$を$T$の逆inverse of $T$</description>
    </item>
    <item>
      <title>アフィン接続</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3282/</link>
      <pubDate>Thu, 18 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3282/</guid>
      <description>ビルドアップ 微分多様体上のベクトル場$\mathbf{V}$が与えられたとしよう。多様体上で定義された関数は、ベクトル場を通して微分できる。</description>
    </item>
    <item>
      <title>線形汎関数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3281/</link>
      <pubDate>Tue, 16 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3281/</guid>
      <description>定義1 $V$をベクトル空間としよう。$V$から$\mathbb{C}$（または$\mathbb{R}$）への写像$f$を汎関数functio</description>
    </item>
    <item>
      <title>順序基底と座標ベクトル</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3279/</link>
      <pubDate>Fri, 12 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3279/</guid>
      <description>定義1 $V$を有限次元ベクトル空間としよう。$V$の基底に特定の順序が与えられた場合、これを順序基底という。 $\beta = \left\{ \mathbf{v}_{1}, \dots, \mathbf{v}_{n} \right\}$を</description>
    </item>
    <item>
      <title>リーマン計量とリーマン多様体</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3276/</link>
      <pubDate>Sat, 06 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3276/</guid>
      <description>定義1 $n$次元の微分可能多様体 $M$に対するリーマン計量Riemannian metric, リーマン計量 $g$とは、各点$p \in M$を$g_{p}$に対応</description>
    </item>
    <item>
      <title>ジュリアでデータフレームに新しい列を追加する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3273/</link>
      <pubDate>Sun, 31 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3273/</guid>
      <description>コード 宇宙少女のデータフレームが以下のように与えられたとしよう。 WJSN = DataFrame( member = [&amp;#34;다영&amp;#34;,&amp;#34;다원&amp;#34;,&amp;#34;루</description>
    </item>
    <item>
      <title>ベクトル場のリー括弧</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3272/</link>
      <pubDate>Fri, 29 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3272/</guid>
      <description>定義1 微分多様体 $M$ における二つの微分可能なベクトル場 $X, Y$に対して、$[X, Y]$を以下のように定義し、(リー-)ブラケット(Lie-)br</description>
    </item>
    <item>
      <title>微分可能多様体上のベクトル場</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3270/</link>
      <pubDate>Mon, 25 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3270/</guid>
      <description>ビルドアップ1 ベクトル場の簡単な定義を考えてみよう。3次元空間でのベクトル場ベクトル関数、ベクトル場とは、3次元ベクトルを3次元ベクトルにマ</description>
    </item>
    <item>
      <title>微分可能多様体上の接空間バンドル</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3268/</link>
      <pubDate>Thu, 21 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3268/</guid>
      <description>定義1 $M$を$n$次元の微分多様体とする。点$p \in M$での接空間を$T_{p}M$とする。$M$の接束tangent bundle, 接バンドル $TM$を</description>
    </item>
    <item>
      <title>過飽和系と未飽和系</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3265/</link>
      <pubDate>Fri, 15 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3265/</guid>
      <description>定義1 $m \times n$行列$A$について、以下の線形システムを考えよう。 $$ A \mathbf{x} = \mathbf{b} $$ もし$m \gt n$ならば、未知数より制約条件が多い場合であり、このよ</description>
    </item>
    <item>
      <title>微分幾何学におけるプルバック</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3262/</link>
      <pubDate>Sat, 09 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3262/</guid>
      <description>概要 微分多様体上のプルバックを定義する。微分多様体が難しい場合は、$M = \mathbb{R}^{m}$、$N = \mathbb{R}^{n}$</description>
    </item>
    <item>
      <title>ジュリアで階層的クラスタリングを行う方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3259/</link>
      <pubDate>Sun, 03 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3259/</guid>
      <description>説明 Clustering.jl パッケージの hclust() 関数を使えばいい。 hclust(d::AbstractMatrix; [linkage], [uplo], [branchorder]) 距離行列 を入力として受け取り、階層的クラスタリング の結果を返す。クラスタ間の距離のデフォルトは</description>
    </item>
    <item>
      <title>k次の微分形式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3258/</link>
      <pubDate>Fri, 01 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3258/</guid>
      <description>概要 2階微分形式を定義した方法と同様に、微分多様体 $M$に対する $k$階形式 を定義する。 微分多様体が難しいなら、$M = \mathbb{R}^</description>
    </item>
    <item>
      <title>ジュリアでデンドログラムを描く方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3257/</link>
      <pubDate>Wed, 29 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3257/</guid>
      <description>説明 与えられたデータをhclust()で階層的クラスタリングした後、plot()関数を使ってデンドログラムを描こうとすると、以下のようなエラ</description>
    </item>
    <item>
      <title>二階微分形式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3256/</link>
      <pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3256/</guid>
      <description>概要 二項演算 $\wedge$を定義し、1次微分形式を定義した感覚で、微分多様体 $M$に対する2次形式を定義する。 微分多様体が難しいと感じるな</description>
    </item>
    <item>
      <title>余接空間と一階微分形式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3254/</link>
      <pubDate>Thu, 23 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3254/</guid>
      <description>概要 余接空間と微分1形式を定義する。微分多様体が難しいなら、$M = \mathbb{R}^{n}$だと思ってもいい。 アインシュタイン表記を使う</description>
    </item>
    <item>
      <title>ガウス・ボーネの定理</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3238/</link>
      <pubDate>Sun, 22 May 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3238/</guid>
      <description>ガウス・ボンネの定理 $\mathbf{x} : U \to \mathbb{R}^{3}$を単連結な測地線座標切片写像、$\boldsymbol{\gamma}(I) \subset \m</description>
    </item>
    <item>
      <title>単純連結領域</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3236/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3236/</guid>
      <description>定義 $\mathscr{R}$を曲面 $M$のリージョンとする。$\mathscr{R}$内の全ての閉曲線がヌル・ホモトピックであれば、$\m</description>
    </item>
    <item>
      <title>微分幾何学における曲面と領域の境界</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3230/</link>
      <pubDate>Fri, 06 May 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3230/</guid>
      <description>リージョン1 曲面 $M$ の部分集合 $\mathscr{R}$ を考えよう。$\mathscr{R}$ が開集合であり、$\mathscr{R}$ の任意の二点に対して、それらを</description>
    </item>
    <item>
      <title>ジュリアにおいて多次元配列を直接定義する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3223/</link>
      <pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3223/</guid>
      <description>説明 1次元配列（ベクトル）は次のように定義される。 julia&amp;gt; A = [1; 2; 3] 3-element Vector{Int64}: 1 2 3 ここで、;は第一次元を基準に次の要素に移る意味を持つ。これを一般化す</description>
    </item>
    <item>
      <title>ジュリアパッケージ管理モードで使用可能なコマンドのリスト</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3217/</link>
      <pubDate>Sun, 10 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3217/</guid>
      <description>説明 Julia REPLで右の角括弧 ] を入力すると、パッケージ管理モードに切り替えることができる。パッケージ管理モードで利用可能なコマンドは以下の通り</description>
    </item>
    <item>
      <title>ジュリアでnpyファイルを読み込む方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3215/</link>
      <pubDate>Wed, 06 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3215/</guid>
      <description>説明 この写真は、Pythonでファントム$f$のラドン変換$\mathcal{R}f$を計算し、それを*.npyファイルとして保存する過程を</description>
    </item>
    <item>
      <title>ジュリアでヒートマップにプロットを重ねて描く方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3213/</link>
      <pubDate>Sat, 02 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3213/</guid>
      <description>コード 例えば、$(5,5)$の配列のヒートマップの上に、$0$から$2\pi$までのサイン曲線を描きたいとしよう。こんなコードを書きたくなる</description>
    </item>
    <item>
      <title>ジュリアで異なるサイズのベクトル成分ごとに操作する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3207/</link>
      <pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3207/</guid>
      <description>説明 julia&amp;gt; x = [1 2 3] 1×3 Matrix{Int64}: 1 2 3 julia&amp;gt; y = [1 2 3 4] 1×4 Matrix{Int64}: 1 2 3 4 julia&amp;gt; x .+ y ERROR: DimensionMismatch サイズが異なる二つのベクトルは、基本的に要素ごとの演算を行うことがで</description>
    </item>
    <item>
      <title>微分幾何学におけるリーマン曲率テンソル、ガウスの方程式、コダッチ-マイナルディの方程式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3206/</link>
      <pubDate>Sat, 19 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3206/</guid>
      <description>定義1 リーマン曲率テンソルの係数coefficients of Riemannian curvature tensor $R_{ijk}^{l}$は以下のように定義される。 $$ R_{ijk}^{l} = \dfrac{\partial \Gamma_{ik}^{l}}{\partial u^{j}} - \dfrac{\partial \Gamma_{ij}^{l}}{\partial u^{k}} + \sum_{p}</description>
    </item>
    <item>
      <title>ジュリアでの曲線から特定の値まで/二つの曲線の間/閉曲線の内部の塗り方</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3203/</link>
      <pubDate>Sun, 13 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3203/</guid>
      <description>特定の値まで塗る1 plot()の属性でfillrange=a、fillalpha=b、fillcolor=:colorを使うと、プロットされ</description>
    </item>
    <item>
      <title>ガウス曲率と平均曲率</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3200/</link>
      <pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3200/</guid>
      <description>定義1 曲面 $M$ 上の点 $p$ における主曲率を $\kappa_{1}, \kappa_{2}$ としよう。$L$ を ワインガルテンマップ と称する。ガウス曲率Gaussian curvature $K$ を次のように定義する。</description>
    </item>
    <item>
      <title>主曲線の曲率</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3194/</link>
      <pubDate>Wed, 23 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3194/</guid>
      <description>ビルドアップ1 曲面 $M$がどの方向に、どれだけ曲がっているかを知るためには、各方向の法曲率 $\kappa_{n}$を知ればいい。つまり、点$</description>
    </item>
    <item>
      <title>Python Pandasデータフレームの列と行の名前を取得する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3189/</link>
      <pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3189/</guid>
      <description>コード import pandas as pd data = { &amp;#39;나이&amp;#39; : [26,23,22,22,21,21,20,20,20,20,18,17], &amp;#39;키&amp;#39; : [160, 163, 163, 162, 164, 163, 164, 150, 158, 162, 172, 173], &amp;#39;별명&amp;#39; : [&amp;#39;땡모&amp;</description>
    </item>
    <item>
      <title>バインガルテン・マップ</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3188/</link>
      <pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3188/</guid>
      <description>定義1 $M$を曲面、$p \in M$を曲面上の点とする。次のように定義される写像$L : T_{p}M \to \mathbb{R}^{3}$をバインガルテン・マップと</description>
    </item>
    <item>
      <title>曲面に沿った平行ベクトル場の定義</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3174/</link>
      <pubDate>Fri, 14 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3174/</guid>
      <description>曲線に沿ったベクトル場[^1] 定義 曲面 $M$と曲線 $\alpha : \left[ a, b \right] \to M$が与えられたとする。それぞれの$t \in \left[ a,b \right]$を点$\alph</description>
    </item>
    <item>
      <title>微分幾何学における回転面</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3170/</link>
      <pubDate>Thu, 06 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3170/</guid>
      <description>定義1 $z$を与えられた軸の変数とし、$r&amp;gt;0$を$z-$軸からの距離とする。そうすると、下の図のような$rz-$平面上の曲線$\al</description>
    </item>
    <item>
      <title>同一関数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3167/</link>
      <pubDate>Fri, 31 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3167/</guid>
      <description>定義1 集合 $X$に対して、以下の関数 $I_{X} : X \to X$を恒等関数identity functionという。 $$ I_{X}(x) = x,\quad \forall x \in X $$ 説明 主に以下のような記法</description>
    </item>
    <item>
      <title>クリストッフェル記号は内在的である</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3164/</link>
      <pubDate>Sat, 25 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3164/</guid>
      <description>要旨1 クリストッフェル記号 $\Gamma_{ij}^{k}$は次の式を満たす。つまり、固有的である。 $$ \Gamma_{ij}^{k} = \dfrac{1}{2} \sum \limits_{l=1}^{2} g^{lk} \left( \dfrac{\partial g_{lj}}{\partial u_{i}} - \dfrac{\partial g_{ij}}{\partial u_{l}} + \dfrac{\partial g_{il}}{\partial u_{j}} \right)</description>
    </item>
    <item>
      <title>多変数関数のテイラーの定理</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3163/</link>
      <pubDate>Thu, 23 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3163/</guid>
      <description>まとめ1 $f : \mathbb{R}^{n} \to \mathbb{R}$を$C^{k}$ 関数、$\mathbf{a} = (a_{1}, \dots, a_{n}) \in \mathbb{R}^{n}$としよう。そしたら</description>
    </item>
    <item>
      <title>微分幾何学における内在的/本質的な定義</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3162/</link>
      <pubDate>Tue, 21 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3162/</guid>
      <description>定義1 微分幾何学では、(単位ノーマル $\mathbf{n}$には依存せずに) 第一基本形式の係数 $g_{ij}$のみに依存する関数を 内在的in</description>
    </item>
    <item>
      <title>微分幾何学におけるガウスの定理</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3160/</link>
      <pubDate>Fri, 17 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3160/</guid>
      <description>整理1 $\mathbf{x} : U \to \R^{3}$を座標パッチと言おう。$(u_{1}, u_{2})$を$U$の座標としよう。 $\mathbf{n}$を単位ノーマ</description>
    </item>
    <item>
      <title>微分幾何学におけるクリストッフェル記号</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3158/</link>
      <pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3158/</guid>
      <description>ビルドアップ $\mathbf{x} : U \to \mathbb{R}^{3}$を座標写像とする。微分幾何学では、幾何学的な対象の特徴や性質を微分を通して説明する。したが</description>
    </item>
    <item>
      <title>微分幾何学における第2基本形式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3156/</link>
      <pubDate>Thu, 09 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3156/</guid>
      <description>ビルドアップ $\mathbf{x} : U \to \mathbb{R}^{3}$を座標チャートと呼ぼう。微分幾何学では、幾何学的な対象の特徴や性質を微分を通じて説明する。</description>
    </item>
    <item>
      <title>ガウス曲率と測地曲率</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3154/</link>
      <pubDate>Sun, 05 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3154/</guid>
      <description>ビルドアップ1 $$ \left\{ T(s), N(s), B(s), \kappa (s), \tau (s) \right\} $$ 曲線を分析するとき、フレネ・セレ装置を使ったのを思い出してほしい。曲面について学ぶときも、同様のものを考</description>
    </item>
    <item>
      <title>単純曲面上の媒介変数曲線</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3152/</link>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3152/</guid>
      <description>定義1 2 $\mathbf{x} : U \to \R^{3}$を単純な表面としよう。$U$の座標を$(u, v)$としよう。ある点$(u_{0}, v_{0})$において、以下</description>
    </item>
    <item>
      <title>偏微分方程式における境界値問題</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3151/</link>
      <pubDate>Mon, 29 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3151/</guid>
      <description>定義 開集合$\Omega$で定義された偏微分方程式が与えられたとしよう。$\Omega$の境界である$\partial \Omega$で未知数</description>
    </item>
    <item>
      <title>第1 基本形式、リーマン計量</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3148/</link>
      <pubDate>Tue, 23 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3148/</guid>
      <description>ビルドアップ リーマン計量は、表面上の曲線の長さを計算する過程から出てくる概念であり、その過程は次の通りです。 $\boldsymbol{\al</description>
    </item>
    <item>
      <title>符号関数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3147/</link>
      <pubDate>Sun, 21 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3147/</guid>
      <description>定義 符号関数sign function $\mathrm{sgn} : \mathbb{R} \to \mathbb{R}$は以下のように定義される。 $$ \mathrm{sgn}(x) :=\begin{cases} 1 &amp;amp; x&amp;gt;0 \\ 0 &amp;amp; x=0 \\ -1 &amp;amp; x&amp;lt;0 \end{cases} $$ 説明 式や定義を簡単に記述するた</description>
    </item>
    <item>
      <title>微分幾何学における曲面の定義</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3146/</link>
      <pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3146/</guid>
      <description>定義1 $M \subset \R^{3}$という$P \in M$の全ての点に対して、イメージ$\mathbf{x}(U)$が$P$のある$\epsilon-$近傍$</description>
    </item>
    <item>
      <title>ギリシャ文字の読み方・書き方と数学・科学における意味</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3145/</link>
      <pubDate>Wed, 17 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3145/</guid>
      <description>アルファ $\Alpha, \alpha$ アルファalphaと読む。TeXコードはそれぞれ\Alpha、\alpha ギリシャ文字の最初の文字で、「アルファでありオメガ」は</description>
    </item>
    <item>
      <title>単純な曲面上の接ベクトル</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3142/</link>
      <pubDate>Thu, 11 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3142/</guid>
      <description>定義1 座標パッチ $\mathbf{x} : U \to \mathbb{R}^{3}$ 上の点 $p = \mathbf{x}(a,b)$ を考えよう。ベクトル $\mathbf{X}$ が $p$ を通るある曲線 $\mathbf{x}(U)$ 上の$p$での速度ベクトルならば、$\mathbf{X}$ を</description>
    </item>
    <item>
      <title>微分多様体上で定義された関数の微分</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3136/</link>
      <pubDate>Sat, 30 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3136/</guid>
      <description>まとめ1 $M_{1}^{n}, M_{2}^{m}$をそれぞれ$m, n$次元の微分多様体としよう。$\varphi : M_{1} \to M_{2}$を微分可能な関数としよう。そし</description>
    </item>
    <item>
      <title>ジュリアでの微分の求め方</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3135/</link>
      <pubDate>Thu, 28 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3135/</guid>
      <description>概要1 名前はCalculus.jlだけど、積分はサポートしない。 機械学習などで話される自動微分が必要ならZygote.jlパッケージを参照し</description>
    </item>
    <item>
      <title>多変数ベクトル関数の連鎖律</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3134/</link>
      <pubDate>Tue, 26 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3134/</guid>
      <description>要約 二つの関数 $\mathbf{g} : D \subset \mathbb{R}^{m} \to \mathbb{R}^{k}$、$\mathbf{f} : \mathbf{g}(\mathbb{R}^{k}) \subset \mathbb{R}^{k} \to \mathbb{R}^{n}$が微分可能だとしよう</description>
    </item>
    <item>
      <title>微分可能多様体上の接線ベクトル</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3132/</link>
      <pubDate>Fri, 22 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3132/</guid>
      <description>ビルドアップ1 微分多様体 $M$ の各点で接ベクトルを定義しようとしている。微分可能な曲線 $\alpha : (-\epsilon , \epsilon) \to M$が与えられたとする。これから、微分幾何学で</description>
    </item>
    <item>
      <title>微分可能多様体から微分可能多様体への微分可能関数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3130/</link>
      <pubDate>Mon, 18 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3130/</guid>
      <description>定義1 $M_{1}, M_{2}$をそれぞれ$n, m$次元の微分多様体とする。マッピング$\varphi : M_{1} \to M_{2}$が以下の条件を満たせば、$p \in M</description>
    </item>
    <item>
      <title>関数の拡張と縮小</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3123/</link>
      <pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3123/</guid>
      <description>定義1 関数 $f : X \to Y$が与えられたとしよう。$U \subset X \subset V$が成立するとしよう。 縮小写像 次を満たす$f |_{U} \to Y$を$f$の縮小写像Uへの$f$の</description>
    </item>
    <item>
      <title>ヘルムホルツ方程式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3122/</link>
      <pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3122/</guid>
      <description>定義 以下の偏微分方程式をヘルムホルツ方程式Helmholtz equationという。 $$ \nabla^{2}u(x) + k^{2} u(x) = \Delta u(x) + k^{2} u(x) = (\Delta + k^{2} )u(x) = 0,\quad x \in \mathbb{R}^{n} $$ ここで、$\</description>
    </item>
    <item>
      <title>微分可能な多様体</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3116/</link>
      <pubDate>Mon, 20 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3116/</guid>
      <description>定義1 $M$を任意の集合、$U_{\alpha} \subset \mathbb{R}^{n}$を開集合とする。関数$1-1$ $\mathbf{x}_{\alpha} : U_{\alpha} \to M$に対して、以下の条</description>
    </item>
    <item>
      <title>滑らかな関数の定義</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3110/</link>
      <pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3110/</guid>
      <description>定義 関数$f$が無限に微分可能ならば、$f$をスムーズな関数という。 関数$f$が微分可能であり、$f^{\prime}$が連続している場合、</description>
    </item>
    <item>
      <title>方向微分の定義</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3109/</link>
      <pubDate>Mon, 06 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3109/</guid>
      <description>ビルドアップ 多変数関数$f = \mathbb{R}^{n} \to \mathbb{R}$が与えられたとしよう。$f$の導関数を求める場合には、一変数関数の時にはしなかった**</description>
    </item>
    <item>
      <title>コーシー問題、初期値問題</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3093/</link>
      <pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3093/</guid>
      <description>定義1 開いた集合 $\Omega=\mathbb{R}^{n}$で定義された偏微分方程式が与えられたとする。時間が $t=0$の時の$\Omeg</description>
    </item>
    <item>
      <title>波動方程式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3092/</link>
      <pubDate>Tue, 03 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3092/</guid>
      <description>定義1 次の偏微分方程式を波動方程式wave equationと呼ぶ。 $$ u_{tt} - \Delta u =0 $$ この式は、波の伝播速度を定数$1$とする場合である。波の伝播</description>
    </item>
    <item>
      <title>ディリクレ境界条件</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3087/</link>
      <pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3087/</guid>
      <description>定義1 開集合$\Omega$で定義された偏微分方程式が与えられたとする。以下の境界条件をディリクレ境界条件Dirichlet boundary conditi</description>
    </item>
    <item>
      <title>絶対値関数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3083/</link>
      <pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3083/</guid>
      <description>定義 次のように定義される関数 $f$ を絶対値関数absolute value functionと呼び、関数の値を $|x|$ のように表記する。 $$ |x| := f(x) = \begin{cases} x &amp;amp;\text{if } x&amp;gt;0 \\ 0 &amp;amp;\text{if</description>
    </item>
    <item>
      <title>偏導関数：多変数ベクトル関数の導関数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3082/</link>
      <pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3082/</guid>
      <description>ビルドアップ1 一変数関数の導関数の定義を思い出そう。 $$ \lim \limits_{h\to 0} \dfrac{f(x+h) - f(x)}{h} = f^{\prime}(x) $$ 左辺の分子を$h$に対する線形関数で近似すると、次のようになる。 $$ \begin{equation}</description>
    </item>
    <item>
      <title>スカラー場のラプラシアン</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3081/</link>
      <pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3081/</guid>
      <description>定義 スカラー関数の$u : \mathbb{R}^{n} \to \mathbb{R}$のグラジエントのダイバージェンスをラプラシアンLaplacianと呼んで、次のように表記す</description>
    </item>
    <item>
      <title>線形変換の行列表現</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3078/</link>
      <pubDate>Tue, 06 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3078/</guid>
      <description>定義1 $V, W$を有限次元のベクトル空間とする。$\beta = \left\{ \mathbf{v}_{1}, \dots, \mathbf{v}_{n} \right\}$と$\gamma = \left\{ \mathbf{w}_{1}, \dots, \mathbf{w}_{m} \right\}$をそれぞれ$</description>
    </item>
    <item>
      <title>逆伝播アルゴリズム</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3077/</link>
      <pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3077/</guid>
      <description>この文は逆転派アルゴリズムの原理を数学専攻者が理解しやすいように作成された。 表記法 上図のような 人工ニューラルネットワーク が与えられたとする。</description>
    </item>
    <item>
      <title>線形変換の合成</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3074/</link>
      <pubDate>Sat, 26 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3074/</guid>
      <description>定義1 線形変換$T_{1} : V \to W$と$T_{2} : W \to Z$が与えられたとする。次に定義される変換$T_{2} T_{1}$を$T_{1}$と</description>
    </item>
    <item>
      <title>線形変換の階数、零空間の次元、次元定理</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3072/</link>
      <pubDate>Tue, 22 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3072/</guid>
      <description>定義1 $T : V \to W$を線形変換とする。 $T$の値域 $R(T)$が有限次元ならば、$R(T)$の次元を**$T$のランク**rankといい、次の</description>
    </item>
    <item>
      <title>線形変換：カーネルと値域</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3071/</link>
      <pubDate>Sun, 20 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3071/</guid>
      <description>定義1 $T : V \to W$を線形変換とする。$T$が$\mathbf{0}$にマッピングする$V$の要素の集合をカーネルまたは零空間と言い、以下のよ</description>
    </item>
    <item>
      <title>重み付きLp空間</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1856/</link>
      <pubDate>Mon, 03 May 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1856/</guid>
      <description>定義1 以下のように定義される関数空間を重み付き$L^{p}$空間あるいは具体的に**$w$-重み付き$L^{p}$空間**という。 $$ L_{w}^{p}(a,b):= \left\{ f :</description>
    </item>
    <item>
      <title>関数の合成</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3048/</link>
      <pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3048/</guid>
      <description>定義 関数 $f: X \to Y$, $g: f(X) \to Z$について次のように定義される$h: X \to Z$を**$f$と$g$の合成**composition of $g$ with $f$と呼び、</description>
    </item>
    <item>
      <title>線形変換</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3026/</link>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3026/</guid>
      <description>定義1 関数 $T : V \to W$がベクトル空間からベクトル空間への写像である場合、つまり $V$、$W$がベクトル空間である場合、$T$を変換trans</description>
    </item>
    <item>
      <title>同時同次一次方程式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3020/</link>
      <pubDate>Sun, 28 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3020/</guid>
      <description>定義1 線形システムで、定数項が全部$0$だったら、同次homogeneousという。 $$ \begin{align*} a_{11}x_{1} + a_{12}x_{2} + \cdots + a_{1n}x_{n} &amp;amp;= 0 \\ a_{21}x_{1} + a_{22}x_{2} + \cdots + a_{2n}x_{n} &amp;amp;= 0 \\ &amp;amp;\vdots \\ a_{m1}x_{1} + a_{m2}x_{2} +</description>
    </item>
    <item>
      <title>ガウス-ジョルダン消去法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3019/</link>
      <pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3019/</guid>
      <description>定義1 拡大行列が次の条件を満たす場合、行段階形echelon formと言います。 $0$じゃない要素がある行で、最初に現れる$0$じゃない数が</description>
    </item>
    <item>
      <title>ベクトル空間の基底</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3017/</link>
      <pubDate>Thu, 18 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3017/</guid>
      <description>定義1 $S = \left\{ \mathbf{v}_{1}, \mathbf{v}_{2}, \dots, \mathbf{v}_{r} \right\}$をベクトル空間$V$の部分集合としよう。$S$が下記の二条件を満たす時、$S$を$V$の基底basis</description>
    </item>
    <item>
      <title>様々な関数空間</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3032/</link>
      <pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3032/</guid>
      <description>定義 関数の集合 $X$ がベクトル空間である場合、$X$を関数空間function spaceと呼ぶ。 説明 関数空間 $X$ では、内積は以下のように積分で定義</description>
    </item>
    <item>
      <title>固有値と固有ベクトル</title>
      <link>https://freshrimpsushi.github.io/jp/posts/319/</link>
      <pubDate>Wed, 10 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/319/</guid>
      <description>定義1 $n\times n$ 行列 $A$が与えられたとしよう。$\mathbf{0}$でない$n\times 1$列ベクトル$\mathbf{x}$、そして定数$</description>
    </item>
    <item>
      <title>偏微分_functions</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3036/</link>
      <pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3036/</guid>
      <description>定義1 $E\subset \mathbb{R}^{n}$を開集合とし、$\mathbf{x}\in E$、そして$\mathbf{f} : E \to \mathbb{R}</description>
    </item>
    <item>
      <title>行列式の性質</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3015/</link>
      <pubDate>Tue, 02 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3015/</guid>
      <description>性質 $A,B$を$n\times n$行列とし、$k$を定数とする。行列式は次の性質を満たす。 (a) $\det(kA) = k^{n}\det(A)$ (b) $\det(AB) = \det(A)\det(B)$ (c) $\det(AB)=\det(BA)$ (d) $A$が可逆行列ならば、$</description>
    </item>
    <item>
      <title>ガウス曲率による回転面の分類</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3034/</link>
      <pubDate>Sun, 28 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3034/</guid>
      <description>説明 $r&amp;gt; 0$を単位速度曲線としよう。そして、$\boldsymbol{\alpha}$から得られる回転面を$M$とする。 $$ M = \left\{ \left( r(s)\cos\theta, r(s)\sin\theta, z(s) \right) : 0</description>
    </item>
    <item>
      <title>行列式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/252/</link>
      <pubDate>Sat, 27 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/252/</guid>
      <description>定義 $A$を次のような$2 \times 2$ 行列としよう。 $$ A = \begin{bmatrix} a &amp;amp; b \\ c &amp;amp; d \end{bmatrix} $$ $A$の行列式determinantを以下のように定義し、$\det(</description>
    </item>
    <item>
      <title>拡張行列と基本行操作</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3014/</link>
      <pubDate>Fri, 26 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3014/</guid>
      <description>定義1 次のような線形システムが与えられたとしよう。 $$ \begin{equation} \begin{aligned} a_{11}x_{1} + a_{12}x_{2} + \cdots + a_{1n}x_{n} &amp;amp;= b_{1}\\ a_{21}x_{1} + a_{22}x_{2} + \cdots + a_{2n}x_{n} &amp;amp;= b_{2}\\ &amp;amp;\vdots\\ a_{m1}x_{1} + a_{m2}x_{2} + \cdots + a_{mn}x_{n} &amp;amp;= b_{m} \end{aligned} \label{linsys2} \end{equation} $$ 線形システムの定数を</description>
    </item>
    <item>
      <title>連立一次方程式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3013/</link>
      <pubDate>Mon, 22 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3013/</guid>
      <description>定義1 定数$a_{1}$、$a_{2}$、$\dots$、$a_{n}$、$b$に対して、変数$x_{1}$、$x_{2}$、$\dots$</description>
    </item>
    <item>
      <title>線形関数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3037/</link>
      <pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3037/</guid>
      <description>定義 関数 $f : X \to Y$が以下の二つの条件を満たす場合、線形linearという。$x,x_{1},x_{2}\in X$、$a \in \mathbb{R</description>
    </item>
    <item>
      <title>ユニタリ行列</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3008/</link>
      <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3008/</guid>
      <description>定義 ユニタリ行列 $A$を正方形の複素数行列とする。$A$が以下の式を満たす時、ユニタリ行列unitaryと呼ぶ。 $$ A^{-1}=A^{\ast} $$ この時、$A^{-1}</description>
    </item>
    <item>
      <title>エルミート行列</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3007/</link>
      <pubDate>Fri, 12 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3007/</guid>
      <description>定義 $A$を正方の複素数行列とする。$A$が下の式を満たせば、エルミート行列Hermitianまたは自己共役行列self-adjoint ma</description>
    </item>
    <item>
      <title>トレース</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1924/</link>
      <pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1924/</guid>
      <description>定義 $n\times n$ 行列が以下のように与えられたとする。 $$ A= \begin{bmatrix} a_{11} &amp;amp; a_{12} &amp;amp; \cdots &amp;amp; a_{1n} \\ a_{21} &amp;amp; a_{22} &amp;amp; \cdots &amp;amp; a_{2n} \\ \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \\ a_{n1} &amp;amp; a_{n2} &amp;amp; \cdots &amp;amp; a_{nn} \end{bmatrix} $$ $A$の対角要素の合計を</description>
    </item>
    <item>
      <title>機械学習における強化学習とは？</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3029/</link>
      <pubDate>Thu, 04 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3029/</guid>
      <description>定義 強化学習とは、エージェントが環境と相互作用して累積報酬を最大化するポリシーを見つけることができるようにすることである。 説明1 強化学習を構</description>
    </item>
    <item>
      <title>直交行列</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3009/</link>
      <pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3009/</guid>
      <description>定義 $A$を正方実数行列としよう。$A$が下の式を満たす場合、直交行列orthogonal matrixという。 $$ A^{-1} = A^{T} $$ この条件を別の形で表</description>
    </item>
    <item>
      <title>行列の内積</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3011/</link>
      <pubDate>Sun, 31 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3011/</guid>
      <description>定義：二つの列ベクトルの内積1 大きさが$n \times 1$の二つの列ベクトル$\mathbf{u}$、$\mathbf{v}$ $\in \mathbb{R}^</description>
    </item>
    <item>
      <title>共役転置行列</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3006/</link>
      <pubDate>Fri, 29 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3006/</guid>
      <description>定義 $A$をサイズが$m \times n $の複素数行列とする。$\overline{A}$を次のように定義して、$A$の共役行列conjugate mat</description>
    </item>
    <item>
      <title>対称行列、歪対称行列</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3005/</link>
      <pubDate>Wed, 27 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3005/</guid>
      <description>定義1 任意の正方行列$A$が次の式を満たすとき、$A$を対称行列symmetric matrixと呼ぶ。 $$ A=A^{T} $$ このとき、$A^{T}$は$A$</description>
    </item>
    <item>
      <title>正則行列であるための同値条件</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3004/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3004/</guid>
      <description>まとめ1 $A$を大きさ$n\times n$の正方行列とする。すると、下記の命題は全て同値である。 (a) $A$は可逆行列である。 (b) 同次線形システム</description>
    </item>
    <item>
      <title>逆行列、可逆行列</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3003/</link>
      <pubDate>Sat, 23 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3003/</guid>
      <description>定義 $A$をサイズ$n\times n$の任意の正方行列としよう。$A$と行列の積が可能で、以下の式を満たす行列$L$を$A$の左逆行列という</description>
    </item>
    <item>
      <title>転置行列</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3002/</link>
      <pubDate>Thu, 21 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3002/</guid>
      <description>定義1 サイズが$m\times n$の行列を$A$としよう。$A$の行と列を入れ替えた行列を$A$の転置行列transpose, 転置と言い、$</description>
    </item>
    <item>
      <title>同一行列、単位行列</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3001/</link>
      <pubDate>Tue, 19 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3001/</guid>
      <description>定義 大きさが$n\times n$で、対角成分がすべて$1$の対角行列を 単位行列identity matrixあるいは 単位行列unit matri</description>
    </item>
    <item>
      <title>対角行列</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1958/</link>
      <pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1958/</guid>
      <description>対角行列1 $A$をサイズが$n\times m$の行列としよう。行と列の番号が同じ要素、つまり$a_{ii} (1 \le i \le \min(n,m))$を主</description>
    </item>
    <item>
      <title>正方行列</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1956/</link>
      <pubDate>Fri, 15 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1956/</guid>
      <description>定義 任意の行列 $A$の行と列の数が同じならば、行列 $A$を正方行列という。 説明 正方行列は取り扱いやすく、多くの良い性質がある。 例 単位行列 可逆</description>
    </item>
    <item>
      <title>行列の演算: スカラー乗法、加法、乗法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1957/</link>
      <pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1957/</guid>
      <description>スカラー乗算 サイズが$m \times n$の任意の行列 $A$とスカラー $k$の積は、$A$の各成分に$k$を掛けることで定義され、以下のように表記される</description>
    </item>
    <item>
      <title>MATLABで2次元配列をヒートマップ画像として出力および保存する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1948/</link>
      <pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1948/</guid>
      <description>Imagesc imagesc 함수를 사용하면 2차원 배열을 히트맵으로 출력할 수 있다. colorbar는 스케일을 보여주는 컬러바를 같이 출력하는 설정이다. N=2^8; p=phantom(&amp;#39;Modified Shepp-Logan&amp;#39;,N); figure() imagesc(p) colorbar 保存 方法1</description>
    </item>
    <item>
      <title>行列の定義</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1955/</link>
      <pubDate>Sat, 09 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1955/</guid>
      <description>定義1 数を次のように長方形の形に並べたものを行列matrixという。 $$ A=\begin{bmatrix} 10 &amp;amp; 0 &amp;amp; 3 \\ 0 &amp;amp; 8 &amp;amp; 22 \end{bmatrix} $$ 並べた各々の数をエントリーentryまたは</description>
    </item>
    <item>
      <title>デル演算子を含む乗法則</title>
      <link>https://freshrimpsushi.github.io/jp/posts/93/</link>
      <pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/93/</guid>
      <description>公式 $f=f(x,y,z)$をスカラー関数とする。$\mathbf{A} = A_{x}\hat{\mathbf{x}} + A_{y}\hat{\mathbf{y}} + A_{z}\hat{\mathbf{z}}, \mathbf{B} = B_{x}\hat{\mathbf{x}} + B_{y}\hat{\mathbf{y}} + B_{z}\hat{\mathbf{z}}$</description>
    </item>
    <item>
      <title>ラドン変換</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1945/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1945/</guid>
      <description>定義 ある2次元ドメイン$D\subset \mathbb{R}^{2}$で定義された関数$f :D \to \mathbb{R}$が与えられたとする。$f</description>
    </item>
    <item>
      <title>級数解を用いた微分方程式の解法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/888/</link>
      <pubDate>Sun, 03 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/888/</guid>
      <description>説明 係数が定数の微分方程式は、変数分離法を使ったり、積分因子法を使ったりするなどして比較的簡単に解くことができる。しかし、以下のように係数に</description>
    </item>
    <item>
      <title>ベクトル空間における凸集合</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1914/</link>
      <pubDate>Tue, 22 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1914/</guid>
      <description>定義 ベクター空間 $V$の部分集合$M$に対して、次の式が成り立つ場合、$M$を凸集合convex setと言う。 $$ \lambda x +(1-\lambda)y \in M,\quad \forall \lambda\in[0,1],\ \forall x,y \in M $$ 説明</description>
    </item>
    <item>
      <title>内積空間における直交性、直交集合、正規直交集合</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1912/</link>
      <pubDate>Mon, 07 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1912/</guid>
      <description>定義1 $\left( X, \left\langle \cdot, \cdot \right\rangle \right)$を内積空間としよう。二つの元 $\mathbf{x}, \mathbf{y}\in X$が$\left\langle \mathbf{x}, \mathbf{y} \right\rangle =0$を満たすなら、$\mathbf</description>
    </item>
    <item>
      <title>フーリエ変換の複数の定義と記法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1898/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1898/</guid>
      <description>概要 フーリエ変換の定義や記法は、作者のニーズや好みによってさまざまに表れる。だから、教科書や講義、論文などでフーリエ変換を扱う前に、定義や記</description>
    </item>
    <item>
      <title>三次元デカルト座標系におけるスカラー関数のラプラシアン</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1879/</link>
      <pubDate>Sun, 15 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1879/</guid>
      <description>定義 3次元のスカラー関数 $f=f(x,y,z)$のグラディエントのダイバージェンスを $f$のラプラシアンLaplacianと言い、$\nab</description>
    </item>
    <item>
      <title>部分積分法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1867/</link>
      <pubDate>Mon, 09 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1867/</guid>
      <description>要約 1 $F$、$G$が区間$[a,b]$で微分可能であり、$F^{\prime}=f$、$G^{\prime}=g$が積分可能であるとしよう</description>
    </item>
    <item>
      <title>解析学における微分積分学の基本定理2</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1866/</link>
      <pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1866/</guid>
      <description>要約1 関数 $f$が区間 $[a,b]$でリーマン積分可能であり、$F^{\prime}=f$を満たす$[a,b]$で微分可能な関数 $F$が存在</description>
    </item>
    <item>
      <title>畳み込みの一般的な定義</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1848/</link>
      <pubDate>Sat, 31 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1848/</guid>
      <description>定義 積分変換 $J$と二つの関数 $f$、$g$が与えられたとする。以下の条件を満たす関数 $f \ast g$を$J$に対する$f$と$g$のコンボリューシ</description>
    </item>
    <item>
      <title>積分変換</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1847/</link>
      <pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1847/</guid>
      <description>定義 関数空間から関数空間へのマップ$J$が下のような積分で定義される場合、$J$を積分変換integral transformという。 $$ (Jf) (x) =</description>
    </item>
    <item>
      <title>内積空間とコーシー・シュワルツの不等式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1843/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1843/</guid>
      <description>まとめ1 $(H, \langle \cdot ,\cdot \rangle)$を内積空間としよう。すると、以下の不等式が成り立ち、これをコーシー・シュワルツの不等式Cauchy-Sch</description>
    </item>
    <item>
      <title>内積空間</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1842/</link>
      <pubDate>Sun, 25 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1842/</guid>
      <description>定義1 $X$をベクトル空間とする。$\mathbf{x}, \mathbf{y}, \mathbf{z} \in X$ 及び $\alpha, \beta \in \mathbb{C}$(または $\mathbb{R}$)に対して</description>
    </item>
    <item>
      <title>内積空間、ノルム空間、距離空間の関係</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1840/</link>
      <pubDate>Fri, 23 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1840/</guid>
      <description>説明 内積空間 $\left( X, \langle\cdot, \cdot\rangle \right)$が与えられているとする。そうすると、下記のように内積から自然にノルムを定義できる。 $$ \begin{equation} \left\| x \right\| := \sqrt{ \langle x, x\rangle},\quad x\in</description>
    </item>
    <item>
      <title>解析学において厳密に定義される左極限と右極限</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1830/</link>
      <pubDate>Sat, 17 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1830/</guid>
      <description>定義 距離空間 $X$で定義された関数 $f :X \to \mathbb{R}$が与えられたとする。もし $f$が $x\in X$で連続ではない場合、$f$は $x$で不連</description>
    </item>
    <item>
      <title>単調関数、増加関数、減少関数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/848/</link>
      <pubDate>Thu, 15 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/848/</guid>
      <description>定義 関数 $f:[a,b] \rightarrow \mathbb{R}$が与えられたとする。$x_{1}$、$x_{2}$、$\in [a,b]$に対して $$ x_{1} \lt x_{2} \ \implies f(x_{1}) \le f(x_{2}) $$ を満た</description>
    </item>
    <item>
      <title>解析学における微分の連鎖律</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1823/</link>
      <pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1823/</guid>
      <description>要約1 $f :[a,b] \to \mathbb{R}$が連続関数であり、$x\in [a,b]$で微分可能だとしよう。$g : f([a,b])\to \mathbb{R}$が$f (x)\in f([</description>
    </item>
    <item>
      <title>微分可能な関数の性質</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1821/</link>
      <pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1821/</guid>
      <description>要約1 $f, g : [a,b] \to \mathbb{R}$としよう。もし$f,g$が$x\in [a,b]$で微分可能であれば、$f+g$、$fg$、$f/g$も</description>
    </item>
    <item>
      <title>複素数表示のフーリエ級数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/964/</link>
      <pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/964/</guid>
      <description>式 区間$[-L,\ L)$で定義された関数$f$の複素フーリエ級数complex Fourier seriesは次の通りである。 $$ f(t) = \sum \limits_{n=-\infty}^{\infty} c_{n} e^{i\frac{n\pi t}{L}} $$ ここで複素フ</description>
    </item>
    <item>
      <title>偏微分方程式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1818/</link>
      <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1818/</guid>
      <description>定義1 偏微分方程式 自然数$k \in \mathbb{N}$と、開集合$U \subset \mathbb{R}^{n}$に対して、次の表現を**$k$次の偏微分方</description>
    </item>
    <item>
      <title>曲線座標系におけるベクトル関数の発散</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1817/</link>
      <pubDate>Thu, 08 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1817/</guid>
      <description>要約 曲線座標系でのベクトル関数$\mathbf{F}=\mathbf{F}(q_{1},q_{2},q_{3})=F_{1}\hat{\ma</description>
    </item>
    <item>
      <title>曲線座標系でのスカラー関数の勾配</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1816/</link>
      <pubDate>Wed, 07 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1816/</guid>
      <description>概要 曲線座標系でスカラー関数の$f=f(q_{1},q_{2},q_{3})$の勾配は次の通りだ。 $$ \nabla f= \frac{1}{h_{1}}\frac{ \partial f }{ \partial q_{1} } \hat{\mathbf{q}}_{1} + \frac{1}{h_{2}}\frac{ \partial f }{ \partial q _{2}}\hat{\mathbf{q}}_{2}+\frac{1}{h_{3}}\frac{ \partial f</description>
    </item>
    <item>
      <title>解析学におけるスプライン、B-スプライン</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1815/</link>
      <pubDate>Tue, 06 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1815/</guid>
      <description>定義1 関数 $f:\mathbb{R} \to \mathbb{R}$ が 区間ごとの多項式piecewise polynomialである場合、$f$を $\mathbb{R}$上の スプラインsplin</description>
    </item>
    <item>
      <title>マシンラーニングにおけるオーバーフィッティングと正則化とは？</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1807/</link>
      <pubDate>Tue, 29 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1807/</guid>
      <description>オーバーフィッティング トレーニングロスは減っていくが、テストロス（バリデーションロス）が減らない、あるいは増えてしまう現象をオーバーフィッテ</description>
    </item>
    <item>
      <title>シュワルツ空間とシュワルツ関数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1805/</link>
      <pubDate>Sun, 27 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1805/</guid>
      <description>定義 以下の二つの条件を満たす関数$\phi : \mathbb{R}^{n} \to \mathbb{C}$の集合をシュワルツ空間Schwartz spaceと呼び、$\mathc</description>
    </item>
    <item>
      <title>三次元空間の曲線座標系</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1774/</link>
      <pubDate>Sat, 26 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1774/</guid>
      <description>ビルドアップ 3次元空間で位置を表現する最も一般的な方法はデカルト座標系だ。デカルトによって考案されたのでこの名前が付けられ、また直交座標系と</description>
    </item>
    <item>
      <title>近似導関数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1085/</link>
      <pubDate>Sat, 26 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1085/</guid>
      <description>ビルドアップ 超関数の微分を定義するアイデアを思い出そう。$u \in {L}_{\mathrm{loc}}^1(\Omega)$に対して、正則超関数</description>
    </item>
    <item>
      <title>ノルム空間内の数列の収束</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1800/</link>
      <pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1800/</guid>
      <description>定義 $(X, \left\| \cdot \right\|)$をノルム空間と呼ぼう。$X$の列$\left\{ x_{n} \right\}$が $$ \lim \limits_{n \to \infty} \left\| x - x_{n} \right\| = 0,\quad x\in X $$ を満たせば</description>
    </item>
    <item>
      <title>全微分、完全微分</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1773/</link>
      <pubDate>Thu, 24 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1773/</guid>
      <description>定義 多変数関数$f : \mathbb{R}^{n} \to \mathbb{R}$が与えられたとしよう。変数$\mathbf{x} = (x_{1}, x_{2}, \dots, x_{n})$の変化に伴う$f(\ma</description>
    </item>
    <item>
      <title>直交座標系におけるベクトル関数の発散</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1796/</link>
      <pubDate>Wed, 23 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1796/</guid>
      <description>定義 ベクトル関数 $\mathbf{F}(x,y,z)=F_{x}\hat{\mathbf{x}}+F_{y}\hat{\mathbf{y}} + F_{z}\hat{\mathbf{z}}$について、以下のようなスカラー関数を$\mathbf{F}$のダイバージェン</description>
    </item>
    <item>
      <title>超関数の微分</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1084/</link>
      <pubDate>Wed, 23 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1084/</guid>
      <description>ビルドアップ 配布物超関数は、その定義域が関数空間であるため、実数空間で定義された関数のように微分することはできません。しかし、正則超関数の場</description>
    </item>
    <item>
      <title>特性関数、指示関数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1790/</link>
      <pubDate>Mon, 21 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1790/</guid>
      <description>定義 $A \subset X$ について、以下のように定義される 関数 $\chi_{A} : X \to \mathbb{R}$ を 特性関数 または 指示関数 と言う。 $$ \chi _{A}(x) := \begin{cases} 1, &amp;amp; x\in A \\ 0 ,&amp;amp; x \notin A \end{cases} $$ 説明 $\chi$ はギリシャ文</description>
    </item>
    <item>
      <title>すべての局所可積分関数が超関数に拡張可能であることを証明</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1078/</link>
      <pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1078/</guid>
      <description>要約1 すべての$u \in L_{\mathrm{loc} }^1(\Omega) $に対して、次のように定義される超関数 $T_{u} \in D^{\ast}(\Omega)$が存在する。 $$ T_{u} (\phi) := \int_{\Omega} u(x)\phi (x)dx, \quad \phi \in D(\Omega) $$ 説明</description>
    </item>
    <item>
      <title>テスト関数とテスト関数空間</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1782/</link>
      <pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1782/</guid>
      <description>定義1 開集合 $\Omega \subset \mathbb{R}^{n}$と関数 $\phi : \Omega \to \mathbb{C}$が与えられているとする。$\phi$が無限に微分可能で、そ</description>
    </item>
    <item>
      <title>テスト関数の空間における収束</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1077/</link>
      <pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1077/</guid>
      <description>テスト関数空間では、「収束」を特別な方法で定義する。ある空間 $X$が与えられたとき、通常は$X$で定義されたノルムや距離を使用して収束を定義</description>
    </item>
    <item>
      <title>局所積分可能な関数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1783/</link>
      <pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1783/</guid>
      <description>定義 $\Omega \subset \mathbb{R}^{n}$を開集合と呼ぶ。 定義１1 すべての有界な可測集合 $K \subset \Omega$に対して、 $$ \int_{K} \left| u(x) \right| dx \lt \infty $$ を満たす関</description>
    </item>
    <item>
      <title>超関数、一般化された関数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1009/</link>
      <pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1009/</guid>
      <description>定義1 2 $\Omega \subset \mathbb{R}^{n}$が開集合だとしよう。テスト関数空間の連続な線形汎関数 $T : \mathcal{D}(\Omega) \to \mathbb{C}$を超関数dist</description>
    </item>
    <item>
      <title>ファンクショナルがファンクショナルと名付けられた理由</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1780/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1780/</guid>
      <description>関数解析学は英語でfunctional analysisです。function analysisではなくfunctionalは一体何を意味してい</description>
    </item>
    <item>
      <title>3次元デカルト座標系におけるスカラー関数の勾配</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1778/</link>
      <pubDate>Sat, 12 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1778/</guid>
      <description>定義 スカラー関数 $f=f(x,y,z)$に対して、以下のようなベクトル関数を $f$のグラディエントgradient, 勾配と定義し、$\nab</description>
    </item>
    <item>
      <title>MATLABで作業スペースを初期化し、すべての変数を削除する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1758/</link>
      <pubDate>Sun, 06 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1758/</guid>
      <description>方法 clear コマンド コマンドウィンドウにclearと入力すると、作業スペースが初期化される。 作業スペースを消去する(Alt+T+O) 作業スペースウ</description>
    </item>
    <item>
      <title>3次元デカルト座標系におけるベクトル関数のカール(回転)</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1752/</link>
      <pubDate>Thu, 03 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1752/</guid>
      <description>定義 ベクトル関数 $\mathbf{F}(x,y,z)=(F_{x},F_{y},F_{z})=F_{x}\hat{\mathbf{x}} + F_{y}\hat{\mathbf{y}} + F_{z}\hat{\mathbf{z}}$に対して、以下のようなベクトルを$\mathbf{F}$のカールcurl</description>
    </item>
    <item>
      <title>減衰調和振動</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1736/</link>
      <pubDate>Sat, 29 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1736/</guid>
      <description>減衰調和振動1 バネ定数を$k$とするとき、単振動の運動方程式は次のようになる。 $$ m \ddot {x}+kx=0 $$ 単振動ではバネの復元力のみを考慮する。しかし、実際に</description>
    </item>
    <item>
      <title>コンパクト距離空間上の連続関数が一様連続であることの証明</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1727/</link>
      <pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1727/</guid>
      <description>要約 $(X,d_{X})$がコンパクト距離空間で、$(Y,d_{Y})$が距離空間で、 $f:X\to Y$が連続だとする。すると、$f$は$X$で一様連続</description>
    </item>
    <item>
      <title>距離空間における最大最小定理</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1725/</link>
      <pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1725/</guid>
      <description>要旨 $X$をコンパクトな距離空間、$f : X \to \mathbb{R}$を連続とする。そうしたら、次のようになる。 $$ M = \sup \limits_{x\in X} f(x),\quad m=\inf \limits_{x \in X}f(x) $$ そうする</description>
    </item>
    <item>
      <title>距離空間における連続性とコンパクト性</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1724/</link>
      <pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1724/</guid>
      <description>要約 $X$をコンパクト距離空間、$Y$を距離空間、$f:X\to Y$が連続だとする。すると、$f(X)$はコンパクトである。 コンパクトという</description>
    </item>
    <item>
      <title>距離空間における関数の連続性の同値条件</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1722/</link>
      <pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1722/</guid>
      <description>定理2 二つの距離空間$(X,d_{X})$と$(Y,d_{Y})$について、$f : X \to Y$とする。すると、以下の三つの命題は同値である。 (2a) $</description>
    </item>
    <item>
      <title>距離空間における数列の収束</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1713/</link>
      <pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1713/</guid>
      <description>定義1 $\left\{ p_{n} \right\}$が距離空間 $(X,d)$の点の列であるとしよう。以下の条件を満たす点 $p \in X$が存在するなら、列 $\left\{ p_{n} \right\</description>
    </item>
    <item>
      <title>距離空間内のコーシー数列と完備性</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1718/</link>
      <pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1718/</guid>
      <description>定義 $\left\{ p_{n} \right\}$を距離空間$(X,d)$の点の数列とする。全ての正の数$\varepsilon$に対して $$ n\ge N,\ m\ge N \implies d(p_{n},p_{m})&amp;lt;\varepsilon $$ が成り立つ</description>
    </item>
    <item>
      <title>すべてのk-cellはコンパクトである：ユークリッド空間でコンパクトである同値条件。</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1711/</link>
      <pubDate>Tue, 18 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1711/</guid>
      <description>定義 $a_i, b_i \in \mathbb{R} (1 \le i \le k)$に対して、集合$I=[a_{1}, b_{1}] \times [a_{2}, b_{2}] \times \cdots \times [a_{k}, b_{k}]$を**$k$-セル**と言う。ここで$\times</description>
    </item>
    <item>
      <title>距離空間におけるコンパクト性</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1705/</link>
      <pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1705/</guid>
      <description>Definition Open Cover Given a metric space $(X,d)$ and a subset $E\subset X$, a set $\left\{ O_{\alpha} \right\}$ of open sets that satisfies the following equation is called an open coveropen cover of $E$. $$ E\subset \bigcup _{\alpha} O_{\alpha} $$ A subset of an open cover is called a subcover. In particular, a subcover with a finite number of elements is called a finite subcover. Compactness Let&amp;rsquo;s assume we have</description>
    </item>
    <item>
      <title>距離空間におけるコンパクト集合の閉部分集合はコンパクトである</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1706/</link>
      <pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1706/</guid>
      <description>定理1 距離空間 $X$において、コンパクト集合 $K$の[($X$に対して)閉じている]部分集合はコンパクトだ。 証明 距離空間 $X$で $F\subset K \subset X$と</description>
    </item>
    <item>
      <title>距離空間における開集合と閉集合の性質</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1702/</link>
      <pubDate>Fri, 14 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1702/</guid>
      <description>$(X,d)$が距離空間だとする。$p \in X$であり、$E \subset X$とする。 $d(q,p)&amp;lt;r$を満たす全ての$q$を含む集合を点$p$の近</description>
    </item>
    <item>
      <title>メートル空間における近傍、限界点、オープン、クローズド</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1700/</link>
      <pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1700/</guid>
      <description>定義 $(X,d)$が距離空間だとしよう。$p \in X$であり、$E \subset X$とする。 $d(q,p)&amp;lt;r$を満たすすべての$q$を含む集合を点$</description>
    </item>
    <item>
      <title>計量空間における閉包と派生集合</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1701/</link>
      <pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1701/</guid>
      <description>定義 $(X,d)$が距離空間であるとする。$p \in X$であり、$E \subset X$であるとする。 $d(q,p)&amp;lt;r$を満たす全ての$q$を含む集合</description>
    </item>
    <item>
      <title>楕円</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1685/</link>
      <pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1685/</guid>
      <description>定義 平面上で二つの固定された点$F$、$F^{\prime}$への距離の合計が一定である点の集合を楕円ellipseという。 楕円の要素は以下</description>
    </item>
    <item>
      <title>万有引力の法則：重力</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1678/</link>
      <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1678/</guid>
      <description>万有引力の法則1 万有引力の法則law of universal gravityは、ニュートンが1687年に『プリンキピア』を通じて発表した物理法則である。「すべての</description>
    </item>
    <item>
      <title>角運動量とトルク</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1674/</link>
      <pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1674/</guid>
      <description>角運動量1 運動量は、物体が直線運動する際の運動の状態を表す物理量である。質量が大きければ大きいほど、速度が速ければ速いほど、運動量は大きくな</description>
    </item>
    <item>
      <title>ニュートンの運動の法則</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1671/</link>
      <pubDate>Thu, 16 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1671/</guid>
      <description>ニュートンの運動法則 1 イギリスの数学者であり物理学者であるアイザック・ニュートンIssac Newtonは1687年、プリンキピアPrinci</description>
    </item>
    <item>
      <title>物理学における質量、力、運動量の定義</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1673/</link>
      <pubDate>Thu, 16 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1673/</guid>
      <description>質量1 ニュートンの運動の法則では、慣性とは運動の変化に抵抗する性質と説明されている。つまり、慣性が大きいほど動かしづらく、慣性が小さいほど動</description>
    </item>
    <item>
      <title>粒子系の質量中心と線運動量</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1670/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1670/</guid>
      <description>定義 粒子の集まりを粒子系system of particlesと呼ぶ。 説明 1 質量が$m_{1}$、$m_2$、$\cdots$、$m_{n}$の粒</description>
    </item>
    <item>
      <title>リーマン(-シュティールス)積分の線形性</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1666/</link>
      <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1666/</guid>
      <description>정리1 この記事はリーマン・スティルチェス積分を基準に書かれています。$\alpha=\alpha (x)=x$とすると、リーマン積分と同じです</description>
    </item>
    <item>
      <title>一次線形微分方程式システム</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1659/</link>
      <pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1659/</guid>
      <description>ビルドアップ1 質量が$m$、減衰係数が$\gamma$、バネ定数が$k$の時、スプリングに吊るされた物体の振動を示す運動方程式は以下の通りだ</description>
    </item>
    <item>
      <title>物理学における微分作用素とは?</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1638/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1638/</guid>
      <description>説明 微分方程式を解く方法の一つに、微分演算子を使って解く方法がある。微分演算子$D$を以下のように定義しよう。 $$ D:= \frac{d}{dx} $$ 微分される変数を明確に</description>
    </item>
    <item>
      <title>変形ベッセル方程式と変形ベッセル関数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1624/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1624/</guid>
      <description>ビルドアップ 以下の微分方程式は、変形ベッセル方程式と呼ばれる。 $$ x^2 y^{\prime \prime} + xy^{\prime}-(x^2-\nu^2)y=0 $$ ベッセル方程式で$y$項の符号が$+ \rightarrow -$に変わった形式だ。この</description>
    </item>
    <item>
      <title>ベッセル方程式の第二の級数解：第二種ベッセル関数、ノイマン関数、ウェーバー関数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1618/</link>
      <pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1618/</guid>
      <description>定義[^1] ベッセル方程式の二番目の解をノイマン関数と呼び、$N_{\nu}(x)$または$Y_{\nu}(x)$で表される。非整数の$\n</description>
    </item>
    <item>
      <title>ルジャンドル多項式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1611/</link>
      <pubDate>Fri, 08 May 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1611/</guid>
      <description>定義 ルジャンドル多項式Legendre polynomialは、いくつかの方法で定義される。 微分方程式の解として 次のルジャンドル微分方程式の解</description>
    </item>
    <item>
      <title>関連するルジャンドル微分方程式と多項式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1605/</link>
      <pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1605/</guid>
      <description>定義1 下の微分方程式を、関連ルジャンドル微分方程式という。 $$ \begin{equation} \begin{aligned} &amp;amp;&amp;amp;(1-x^{2})\frac{ d^{2}y }{ dx^{2} }-2x \frac{dy}{dx}+\left[ +l(l+1)-\frac{m^{2}}{1-x^{2}} \right]y =&amp;amp;\ 0 \\ \mathrm{or} &amp;amp;&amp;amp; \frac{ d }{ dx } \left[ (1-x^{2})y^{\prime} \right] +\left[ l(l+1)-\frac{m^{2}}{1-x^{2}} \right]y =&amp;amp;\ 0 \end{aligned} \label{1} \end{equation} $$ 関連ルジャンドル</description>
    </item>
    <item>
      <title>シュレーディンガー方程式の導出</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1598/</link>
      <pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1598/</guid>
      <description>概要 時間に依存しないシュレーディンガー方程式time independent Schrodinger equation $$ H\psi=\left(-\frac{\hbar^{2}}{2m}\frac{ d ^{2} }{ d x^{2} }+V\right)\psi=E\psi \\ H\psi=\left(-\frac{\hbar^{2}}{2m}\nabla^{2}+V\right)\psi=E\psi $$ 時間に依存するシュレーディンガー方程式time dependent Schrodinger equation $$ i\hbar\frac{ \partial \psi}{</description>
    </item>
    <item>
      <title>球面調和関数：球面座標ラプラス方程式の極角、方位角に対する一般解</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1580/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1580/</guid>
      <description>説明 ラプラス方程式を満たす関数を調和関数という。球面調和関数は球座標系でのラプラス方程式を満たす関数を言い、正確には径成分を除いた極角$\t</description>
    </item>
    <item>
      <title>物理学におけるデル演算子</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1575/</link>
      <pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1575/</guid>
      <description>説明 物理学では、演算子とは、関数を別の関数に対応させる関数を言う。その中でもデル演算子del operatorは、ある関数が与えられたとき、そ</description>
    </item>
    <item>
      <title>量子力学における交換子とは</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1574/</link>
      <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1574/</guid>
      <description>定義 二つの演算子 $A, B$に対して、$AB - BA$を$A, B$の交換子として定義し、次のように表す。 $$ [A,B]=AB-BA $$ 説明 最初に交換子の定義に接したときに、</description>
    </item>
    <item>
      <title>物理学のための微分方程式の基礎：よく遭遇する微分方程式の解法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1538/</link>
      <pubDate>Sun, 23 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1538/</guid>
      <description>微分方程式 学部レベルの物理学を勉強する人向けに、できるだけ直感的に説明した。 微分方程式とは、簡単に言うと微分を含んだ方程式のことだ。難しく考</description>
    </item>
    <item>
      <title>量子力学でベクトル、内積、波動関数, ヒルベルト空間</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1509/</link>
      <pubDate>Fri, 07 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1509/</guid>
      <description>ベクトルの一般化 線形代数学を学んでいない理科生にとって、ベクトルは大きさと方向を持つ物理量であり、3次元空間の点を意味し、一般に $\vec{x} = (x_{1}, x_{2}, x_{3})$ の</description>
    </item>
    <item>
      <title>ベッセル方程式の級数解：第一種ベッセル関数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1503/</link>
      <pubDate>Mon, 03 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1503/</guid>
      <description>定義1 $\nu \in \mathbb{R}$に対して、以下の形の微分方程式を$\nu$次のベッセル方程式という。 $$ \begin{align*} &amp;amp;&amp;amp; x^{2} y^{\prime \prime} +xy^{\prime}+(x^{2}-\nu^{2})y &amp;amp;= 0 \\ \text{or} &amp;amp;&amp;amp; y^{\prime \prime}+\frac{1}{x} y^{\prime} + \left( 1-\frac{\nu^{2}}{x^{2}} \right)y &amp;amp;=</description>
    </item>
    <item>
      <title>オイラー積分：ベータ関数とガンマ関数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1483/</link>
      <pubDate>Wed, 22 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1483/</guid>
      <description>定義 オイラー積分Euler integral 以下の二つの積分をオイラー積分と呼ぶ。 $(a)$ 第1種オイラー積分Euler integral of the first kind : ベータ関数 $$ B(p,q)=\int_{0}^1 t^{p-1}(1-t)^{q-1}dt,\quad p&amp;gt;0,\quad q&amp;gt;0 $$ $(b)$ 第2種オ</description>
    </item>
    <item>
      <title>ベータ関数とガンマ関数の関係</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1481/</link>
      <pubDate>Sat, 18 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1481/</guid>
      <description>まとめ $$ B(p,q) = {{\Gamma (p) \Gamma (q)} \over {\Gamma (p+q) }} $$ 説明 ベータ関数は $\displaystyle B(p,q) := \int_{0}^{1} t^{p-1} (1-t)^{q-1} dt $ で定義され、ガンマ関数と同様に多くの分野で応用されている重要な関数だ。ガンマ関</description>
    </item>
    <item>
      <title>階乗、二重階乗、多重階乗</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1477/</link>
      <pubDate>Tue, 14 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1477/</guid>
      <description>ファクトリアル 自然数$n$に対して、$n!$が$n$階乗$factorial, 계승, 차례곱이라 읽고 아래와 같이 정의한다. $$ n!=n\cdot(n-1)\cdot(n-2)\cdots 2\cdot 1 =\prod\limits_{k=1}^n k $$ 설명 많은</description>
    </item>
    <item>
      <title>ガンマ関数の導出</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1476/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1476/</guid>
      <description>非負整数のためのガンマ関数 $\alpha &amp;gt;0$に対して $$ \int_{0}^{\infty} e^{-\alpha x} dx=\left[-\frac{1}{\alpha}e^{-\alpha x}\right]_{0}^{\infty}=\frac{1}{\alpha} $$ 両辺を$\alpha$に関して微分すると、ライプニッツの積分法則によって左辺の</description>
    </item>
    <item>
      <title>ライプニッツの積分則</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1475/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1475/</guid>
      <description>要約 $f(x,t)$と$\dfrac{\partial f}{\partial x}(x,t)$が連続だとしよう。すると、以下の式が成り立つ。 $$ \frac{d}{dx} \int_{a}^b f(x,t)dt = \int_{a}^b\frac{\partial f}{\partial x}(x,t)dt $$ 説明</description>
    </item>
    <item>
      <title>MATLABでコード実行時間を計測する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1467/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1467/</guid>
      <description>方法 tic X1=rand(2^7); X2=rand(2^8); X3=rand(2^9); X4=rand(2^10); X5=rand(2^11); toc Y1=imrotate(X1,45,&amp;#39;bicubic&amp;#39;,&amp;#39;crop&amp;#39;); toc Y2=imrotate(X2,45,&amp;#39;bicubic&amp;#39;,&amp;#39;crop&amp;#39;); toc Y3=imrotate(X3,45,&amp;#39;bicubic&amp;#39;,&amp;#39;crop&amp;#39;); toc Y4=imrotate(X4,45,&amp;#39;bicubic&amp;#39;,&amp;#39;crop&amp;#39;); toc Y5=imrotate(X5,45,&amp;#39;bicubic&amp;#39;,&amp;#39;crop&amp;#39;); toc tic：実行時間を測定するためのストップウォッチを開始する。 toc：ストップウォッチの現在時間を返す。</description>
    </item>
    <item>
      <title>ジュリアで画像サイズを変更する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1466/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1466/</guid>
      <description>画像サイズの変更 Images パッケージの imresize を使えばいい。関数名はMatlabと同じだ。 imresize(X, ratio=a): 配列Xをa倍に調整した画像を返す。Matlabとは違って、た</description>
    </item>
    <item>
      <title>MATLABでの画像サイズの変更方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1465/</link>
      <pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1465/</guid>
      <description>方法 imresize(A, scale): Aのサイズをscale倍調整して新しい画像を返す。 Aが10x10の画像である場合、scaleに0.5を入力すると5x5の画像を返す。</description>
    </item>
    <item>
      <title>ジュリアで画像配列を回転する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1462/</link>
      <pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1462/</guid>
      <description>画像の回転 imrotate(X, theta) : 配列Xをthetaラジアンで回転させる。ここで注意すべき点は、角度の単位が度（$^{\circ})$のMATLABと異なり、</description>
    </item>
    <item>
      <title>ジュリアでの2次元配列操作の関数들</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1460/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1460/</guid>
      <description>$A = \begin{pmatrix} 1 &amp;amp; 2 &amp;amp; 1 \\ 0 &amp;amp; 3 &amp;amp; 0 \\ 2 &amp;amp; 3 &amp;amp; 4\end{pmatrix}$としよう。 転置行列 julia&amp;gt; A =[1 2 1; 0 3 0; 2 3 4] 3×3 Array{Int64,2}: 1 2 1 0 3 0 2 3 4 julia&amp;gt; transpose(A) 3</description>
    </item>
    <item>
      <title>ジュリアで配列をヒートマップ画像として出力保存する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1459/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1459/</guid>
      <description>Heatmap Plots パッケージのheatmap関数を使えば、2次元配列をヒートマップ画像として出力でき、savefig関数でその画像を保存できる。@__DI</description>
    </item>
    <item>
      <title>ジュリアでベクターを生成する様々な方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1452/</link>
      <pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1452/</guid>
      <description>코드 julia&amp;gt; x1=[1 2 3] 1×3 Array{Int64,2}: 1 2 3 julia&amp;gt; x2=[1, 2, 3] 3-element Array{Int64,1}: 1 2 3 julia&amp;gt; x3=[i for i in 1:3] 3-element Array{Int64,1}: 1 2 3 julia&amp;gt; x4=[i for i in 1:3:10] 4-element Array{Int64,1}: 1 4 7 10 julia&amp;gt; x5=[i for i in 1:3:11] 4-element Array{Int64,1}: 1 4 7 10 x1は2次元配列です。行ベ</description>
    </item>
    <item>
      <title>ジュリアで配列を平行移動する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1453/</link>
      <pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1453/</guid>
      <description>説明 circshifr(A, (n,m))を使用すると、配列Aの行を$n$カン下にシフトさせ、列を$m$カン右にシフトさせることができる。(n,m)は整数から成るタ</description>
    </item>
    <item>
      <title>部分空間トポロジー、相対トポロジー</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1439/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1439/</guid>
      <description>定義 1 位相空間 $(X,\mathscr{T})$と部分集合 $A \subset X$が与えられたとしよう。すると以下の集合 $$ \mathscr{T}_{A} =\left\{ A\cap U\ :\ U\in \mathscr{T} \right\} $$ は $A$上の位相</description>
    </item>
    <item>
      <title>MATLABで等間隔の行ベクトルを生成する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1376/</link>
      <pubDate>Tue, 08 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1376/</guid>
      <description>方法 linspace(a,b,n): 区間$[a,b]$を$n$個の等間隔に分けた行ベクトルを返す。 要素数を入力しなければ、$1\times 100$ベクトルを返す。間隔の数</description>
    </item>
    <item>
      <title>MATLABで行列の特定の行、列を選択する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1362/</link>
      <pubDate>Mon, 30 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1362/</guid>
      <description>方法 $m \times n$ データが行列で与えられているとし、これを$A$とする。行列$A$の特定の部分のみを使用したい場合は、以下の方法を使えばいい。 B=A(a:b, c:d) 上</description>
    </item>
    <item>
      <title>MATLABグラフでの色、線の種類、マーカーの種類の指定方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1330/</link>
      <pubDate>Thu, 26 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1330/</guid>
      <description>属性 グラフの属性は以下のように指定できる。 グラフ色 マーカー 線の形状 赤 r 点 . 実線 - 緑 g 星 * 点線 : 青 b x x 一点鎖線 -. 黒 k 円 o（アルファベットのo</description>
    </item>
    <item>
      <title>MATLABで画像を回転する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1328/</link>
      <pubDate>Wed, 25 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1328/</guid>
      <description>方法 imrotate(I,angle,method,bbox) I: 回転する画像だ。 angle: 回転角度で、単位は度だ。 method: 補間方法だ。&amp;rsquo;nearest&amp;rsquo;, &amp;lsquo;bilinear&amp;rsquo;, &amp;lsquo;bicubic&amp;</description>
    </item>
    <item>
      <title>MATLABで特別な行列を作成する関数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1327/</link>
      <pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1327/</guid>
      <description>ゼロ行列 zeros(): ゼロ行列を返す。 zeros(n): $n\times n$ ゼロ行列を返す。 zeros(m,n): $n\times m$ ゼロ行列を返す。 zeros(size(A)): 行列Aと同じ大きさのゼロ行列を返す。 全要素が1の行列 ones(): 全要素が1の行</description>
    </item>
    <item>
      <title>MATLABで二つの行列に対して要素ごとの演算を行う方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1326/</link>
      <pubDate>Mon, 23 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1326/</guid>
      <description>掛け算 times(), .*: 二つの行列の各成分を掛け合わせ、その結果を返します。 二つの行列の大きさが完全に同じ、または一方がスカラー、もしくは行の大きさが同じ</description>
    </item>
    <item>
      <title>MATLABにおける行列のサイズと関連する関数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1323/</link>
      <pubDate>Sat, 21 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1323/</guid>
      <description>関数 size(): 行列の行と列の長さを要素として持つ行ベクトルを返す。 扱っている行列と同じサイズの零行列を作る時に便利だ。 zeros(size(A)): Aと同じサイズの零行列を返す</description>
    </item>
    <item>
      <title>集合の境界から一定距離外/内の集合</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1317/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1317/</guid>
      <description>定義 開集合 $\Omega \subset \mathbb{R}^n$が与えられたとする。すると、$\Omega_{&amp;lt;\delta}$と$\Omega_{&amp;gt;\</description>
    </item>
    <item>
      <title>相互に特異的</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1310/</link>
      <pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1310/</guid>
      <description>定義1 二つの符号測度$\nu$、$\mu$が与えられたとする。以下の三つの条件を$\nu$、$\mu$に対して満たす$E,F\ \in \mathc</description>
    </item>
    <item>
      <title>ハーン分解定理</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1308/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1308/</guid>
      <description>定理1 (a) $\nu$を可測空間 $(X, \mathcal{E})$上で定義された符号測度とする。すると、以下を満たす $\nu$の正集合 $P$と負集合 $</description>
    </item>
    <item>
      <title>正の集合, 負の集合, 零の集合</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1303/</link>
      <pubDate>Sat, 14 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1303/</guid>
      <description>定義1 $\nu$を$(X,\mathcal{E})$上の符号測度としよう。そして$E,F \in \mathcal{E}$としよう。すると $\nu (F) \ge 0,\ \forall</description>
    </item>
    <item>
      <title>符号付き測度</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1301/</link>
      <pubDate>Fri, 13 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1301/</guid>
      <description>定義1 $(X, \mathcal{E})$を可測空間だとしよう。以下の条件を満たす拡張実数値関数$\nu : \mathcal{E} \to \overline{\mathbb{R</description>
    </item>
    <item>
      <title>測度の一般的な定義</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1302/</link>
      <pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1302/</guid>
      <description>定義 可測空間 $(X,\mathcal{E})$が与えられたとしよう。以下の三条件を満たす拡張実数値を持つ関数$\mu : \mathcal{E} \to \overline</description>
    </item>
    <item>
      <title>拡張実数体系</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1252/</link>
      <pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1252/</guid>
      <description>定義 以下のように定義される集合を拡張された実数システムと言います。 $$ \overline{ \mathbb{R} } := \mathbb{R} \cup \left\{ -\infty, +\infty\right\} $$ 説明 解析学などの分野では、便宜のために実数の集合$\</description>
    </item>
    <item>
      <title>ボレルσ-代数、ボレル可測空間</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1251/</link>
      <pubDate>Wed, 21 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1251/</guid>
      <description>まとめ $X$を任意の集合とする。そして、空集合でない$A \subset \mathcal{P}(X)$が与えられたとする。そうしたら、$A$を含む最小の$</description>
    </item>
    <item>
      <title>MATLABで1ページに複数の図を出力する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1247/</link>
      <pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1247/</guid>
      <description>方法 subplot() 関数を使えば、複数の図を一ページに出力することができる。第一、第二の変数はそれぞれ、画像を出力する盤面の行と列を示し、図をどんな形で配</description>
    </item>
    <item>
      <title>波動関数の反射と透過</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1241/</link>
      <pubDate>Tue, 13 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1241/</guid>
      <description>🚧 이 포스트는 아직 이관 작업이 완료되지 않았습니다 🚧 反射係数と透過係数Reflection coefficient 波動関数の反射係数(反射率)と透過係数(透過率)は次の</description>
    </item>
    <item>
      <title>実数、複素数、セミノルムに対するハーン・バナッハの定理</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1230/</link>
      <pubDate>Tue, 06 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1230/</guid>
      <description>実数に関するハーン・バナッハの定理1 $X$は$\mathbb{R}$-ベクトル空間であり、$Y \subset X$とする。$p : X \to \mathbb{ R}$を$X$の準線</description>
    </item>
    <item>
      <title>セミノルム</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1229/</link>
      <pubDate>Mon, 05 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1229/</guid>
      <description>定義1 $X$をベクトル空間とする。以下の三つの条件を満たす関数$\left\| \cdot \right\| : X \to \mathbb{R}$が存在する場合、$\left\</description>
    </item>
    <item>
      <title>半線形関数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1333/</link>
      <pubDate>Mon, 05 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1333/</guid>
      <description>定義1 関数 $f : X \to Y$が下記の二つの条件を満たす場合、準線形sublinearと呼ばれる。$x,x_{1},x_{2}\in X$と$a \in \m</description>
    </item>
    <item>
      <title>ノルム空間とは何か</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1225/</link>
      <pubDate>Fri, 02 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1225/</guid>
      <description>定義1 $X$をベクター空間としよう。次の三条件を満たす関数$\left\| \cdot \right\| : X \to \mathbb{R}$が存在すれば、$\left\| \cdot \</description>
    </item>
    <item>
      <title>数学における埋め込み、挿入写像</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1214/</link>
      <pubDate>Sat, 27 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1214/</guid>
      <description>imbeddingとembeddingは同じ意味だ。 埋め込みは、挿入、埋め込み、組み込み、埋めるなどと訳される。 定義1 $(X, \left\| \cdot \right\|_{X}), (Y, \left\| \cdot \rig</description>
    </item>
    <item>
      <title>ベッセル方程式の導出</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1195/</link>
      <pubDate>Sat, 20 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1195/</guid>
      <description>定義 以下の微分方程式を**$\nu$次ベッセル方程式**Bessel&amp;rsquo;s equation of order $\nu$と呼ぶ。 $$ \begin{align*} x^2 y^{\prime \prime} +xy^{\prime} +(x^2-\nu^2)y =&amp;amp;\ 0 \\ x(xy^{\prime})^{\prime} + (x^2- \nu ^2) y</description>
    </item>
    <item>
      <title>MATLABでグラフに使用できる特殊記号一覧</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1191/</link>
      <pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1191/</guid>
      <description>方法 MATLABでグラフの各軸が何を意味するか示すためにラベルを付ける場合、xlabelとylabelを使用する。特殊記号やボールド体、イタ</description>
    </item>
    <item>
      <title>ラグランジュ力学とハミルトンの変分原理</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1182/</link>
      <pubDate>Sun, 14 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1182/</guid>
      <description>概要 ハミルトンの原理、汎関数、作用、変分などについて、可能な限り簡単に説明しています。他の場所で満足のいく説明を見つけられなかった場合は、最</description>
    </item>
    <item>
      <title>ホップ・ラックス・フォーミュラ</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1174/</link>
      <pubDate>Tue, 09 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1174/</guid>
      <description>ビルドアップ1 ハミルトニアン$H$が$Du$のみに依存するハミルトン-ヤコビ方程式の初期値問題を見てみよう。 $$ \begin{equation} \left\{ \begin{aligned} u_{t} + H(Du)&amp;amp;=0 &amp;amp;&amp;amp; \text{in } \mathbb{R}^n \times (0,\infty) \\ u&amp;amp;=g &amp;amp;&amp;amp;</description>
    </item>
    <item>
      <title>MATLABでExcelのデータをインポートする方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1163/</link>
      <pubDate>Fri, 28 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1163/</guid>
      <description>方法 MatlabにはExcelのデータを読み込む機能がある。まずはホームメニューからデータの取り込みをクリックする。 読み込みたいデータが保存</description>
    </item>
    <item>
      <title>ハミルトン-ヤコビ方程式とハミルトニアン方程式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1162/</link>
      <pubDate>Fri, 28 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1162/</guid>
      <description>ハミルトン方程式を得る方法は二つある。一つはオイラー-ラグランジュ方程式から得るもので、もう一つはこの記事で紹介するハミルトン・ヤコビ方程式</description>
    </item>
    <item>
      <title>偏微分方程式におけるラグランジアンとオイラー・ラグランジュ方程式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1157/</link>
      <pubDate>Thu, 27 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1157/</guid>
      <description>定義1 ラグランジアンLagrangian スムース関数 $L : \mathbb{R}^n \times \mathbb{R}^n \to \mathbb{R}$が与えられたとしよう。これをラグランジアンと呼び、以下</description>
    </item>
    <item>
      <title>MATLABで計算したデータをExcelファイルに保存する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1150/</link>
      <pubDate>Sun, 23 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1150/</guid>
      <description>方法 MATLABで計算したデータをExcelに整理したい時、データ量が多くない場合は、直接コピー＆ペーストすることが可能だ。しかし、上の写真</description>
    </item>
    <item>
      <title>MATLABで一度に複数行のコメントとコメント解除をする方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1149/</link>
      <pubDate>Sat, 22 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1149/</guid>
      <description>方法 コメントアウトしたい部分をドラッグして選択した後、Ctrl+Rを入力すれば、ドラッグした部分全体をコメントアウトできる。元に戻したいとき</description>
    </item>
    <item>
      <title>任意の関数を二つの非負の関数として表す方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1145/</link>
      <pubDate>Wed, 19 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1145/</guid>
      <description>定義1 関数$f : X \to \mathbb{R}$に対して$f^{+}$と$f^{-}$を以下のように定義しよう。 $$ \begin{align*} f^{+} (x) &amp;amp;:= \max \left\{ f(x),\ 0 \right\} \\ f^{-} (x) &amp;amp;:= \max \left\{ -f(x),\</description>
    </item>
    <item>
      <title>予測可能関数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1135/</link>
      <pubDate>Fri, 14 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1135/</guid>
      <description>定義1 $(X, \mathcal{E})$を可測空間としよう。集合$S_{f}(\alpha)$を次のように定義する。 $$ S_{f}(\alpha):=\left\{ x\in X\ |\ f(x) &amp;gt;\alpha \right\} = f^{-1}\left( (\alpha, \infty) \right),\quad \forall \alpha</description>
    </item>
    <item>
      <title>フーリエ逆変換定理</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1112/</link>
      <pubDate>Thu, 30 May 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1112/</guid>
      <description>ビルドアップ フーリエ変換を導出する過程で、逆変換の定義も同時に導出された。しかし、これは理解を助けるために簡単に説明したもので、変換式を正確</description>
    </item>
    <item>
      <title>フーリエ変換の性質</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1101/</link>
      <pubDate>Thu, 23 May 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1101/</guid>
      <description>要約1 $\cal{F}f, \hat{f}$を$f$のフーリエ変換としよう。$f \in L^{1}$とする。すると、フーリエ変換について次の性質が成り立つ。 (a) 任意の実</description>
    </item>
    <item>
      <title>加法関数と乗法関数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1096/</link>
      <pubDate>Wed, 22 May 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1096/</guid>
      <description>関数 $f : X \to Y$が与えられたとしよう。$a, b \in X$、$a_{i} \in X\ (i=1,\cdots)$とする。 部分加法関数 関数$f$が下の式を満た</description>
    </item>
    <item>
      <title>一般化されたヘルダーの不等式、ヘルダーの不等式の系</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1091/</link>
      <pubDate>Sun, 19 May 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1091/</guid>
      <description>説明 $\Omega \subset \mathbb{R}^{n}$を開集合と呼ぼう。次の式を満たす二つの定数$1 \lt p \lt \infty, 1 \lt p^{\prime} \lt \infty$が与えられたとしよう。 $$ \dfrac{1}{p}</description>
    </item>
    <item>
      <title>フーリエ変換</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1086/</link>
      <pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1086/</guid>
      <description>定義 関数としてのフーリエ変換 関数$f \in$$L^{1}$のフーリエ変換Fourier transform of $f$を次のように定義する。 $$ \hat{f}(\xi) := \int_{-\infty}^{\infty} f(t) e^{-i \xi t}dt $$ 演算</description>
    </item>
    <item>
      <title>完全正規直交基底と完全正規直交集合</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1082/</link>
      <pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1082/</guid>
      <description>要約：正規直交集合が持つ同値条件 $\left\{ \phi_{n} \right\}_{1}^\infty$が$L^2(a,b)$の正規直交集合であり、$f \in L^2(a,b</description>
    </item>
    <item>
      <title>遅延時刻連続分布に関する遅延ポテンシャル</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1075/</link>
      <pubDate>Thu, 09 May 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1075/</guid>
      <description>概要1 動く点電荷に関するスカラーポテンシャルとベクトルポテンシャルは遅延ポテンシャルretarded potentialと呼ばれ、これらは以下</description>
    </item>
    <item>
      <title>特性方程式を利用した非線形1系偏微分方程式の解法。</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1074/</link>
      <pubDate>Wed, 08 May 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1074/</guid>
      <description>説明1 $x$と$p$について、偏微分方程式の変数であることを強調する場合、通常のフォントで $x,p \in \mathbb{R}^{n}$ と表示し、$s$に関する関数であることを強調</description>
    </item>
    <item>
      <title>非線形一階偏微分方程式の表記法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1071/</link>
      <pubDate>Mon, 06 May 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1071/</guid>
      <description>表記法1 非線形1次偏微分方程式は次のように表記される。 $$ \begin{equation} F(Du, u, x) = F(p, z, x) = 0 \label{eq1} \end{equation} $$ $\Omega \subset \mathbb{R}^{n}$は開集合 $x\in \Omega$ $F : \mathbb{R}^n \times \mathbb{R}^n \times</description>
    </item>
    <item>
      <title>マルチインデックス表記法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1062/</link>
      <pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1062/</guid>
      <description>定義[^1] 要素が非負の整数の組$\alpha=(\alpha_{1}, \alpha_{2}, \cdots, \alpha_{n})$をオーダーが$|\alpha|$のマルチ</description>
    </item>
    <item>
      <title>サイン波と複素波動関数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1066/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1066/</guid>
      <description>定義 波を三角関数で表したものをサイン波sinusoidal waveという。 説明 サイン波の一般的な形は以下の通りだ。式が$\cos$である理由</description>
    </item>
    <item>
      <title>物理学におけるテンソルとは</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1040/</link>
      <pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1040/</guid>
      <description>概要 断然この記事は、テンソルが何か分からなくてこのページにたどり着いた物理学部の学生に最も分かりやすいテンソルについての説明だから、是非読む</description>
    </item>
    <item>
      <title>マックスウェルの方程式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1038/</link>
      <pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1038/</guid>
      <description>公式 マックスウェルの方程式Maxwell&amp;rsquo;s equations $(\text{i}) \quad \nabla \cdot \mathbf{E}=\dfrac{1}{\epsilon_{0}}\rho$ (ガウスの法則) $(\text{ii}) \quad \nabla \cdot \mathbf{B}=0$ (磁場に対するガウスの法則) $(\text{iii}) \quad \nabla \times \mathbf{E} = -\dfrac{\partial \mathbf{B}}{\partial t}$</description>
    </item>
    <item>
      <title>熱方程式, 拡散方程式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1001/</link>
      <pubDate>Thu, 28 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1001/</guid>
      <description>定義1 2 以下の偏微分方程式は、熱方程式heat equationまたは拡散方程式diffusion equationと呼ばれる。 $$ \dfrac{\partial u}{\partial t} = \dfrac{\partial^{2} u}{\partial x^{2}}</description>
    </item>
    <item>
      <title>畳み込みの定義</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1000/</link>
      <pubDate>Wed, 27 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1000/</guid>
      <description>定義 $\mathbb{R}$で定義された二つの関数$f$、$g$が与えられたとする。以下の積分が存在する場合、これを二つの関数$f$、$g$</description>
    </item>
    <item>
      <title>ラプラス方程式とポアソン方程式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/997/</link>
      <pubDate>Tue, 26 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/997/</guid>
      <description>定義1 $\ U \in \mathbb{R}^n$は開集合 $\ x\in U$ $u=u(x) : \overline{U} \rightarrow \mathbb{R}^n$ ラプラス方程式 下の偏微分方程式をラプラス方程式という。 $$ \Delta u=0 $$ ここで、$\De</description>
    </item>
    <item>
      <title>グリーンの定理</title>
      <link>https://freshrimpsushi.github.io/jp/posts/974/</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/974/</guid>
      <description>まとめ $u, v \in C^2( \bar{U})$としよう。それでは、以下の式が成り立つ。 (i) $\displaystyle \int_{U} \Delta u dx=\int_{\partial U} \dfrac{\partial u}{\partial \nu}dS$ (ii) $\displaystyle \int_{U} Dv \cdot Du dx = -\int_{U} u \Delta v dx+\int_{\partial U}\dfrac{\partial v}{\partial \nu}udS$ (iii) $\displaystyle \int_{U} (u\Delta v - v\Delta u</description>
    </item>
    <item>
      <title>外向き単位法線ベクトル</title>
      <link>https://freshrimpsushi.github.io/jp/posts/988/</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/988/</guid>
      <description>定義1 $U\subset \mathbb{R}^{n}$を開集合とする。$U$の境界 $\partial U$が$\partial U \in C^1$だとする。そうすると、以下のような外</description>
    </item>
    <item>
      <title>関数の値の平均</title>
      <link>https://freshrimpsushi.github.io/jp/posts/983/</link>
      <pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/983/</guid>
      <description>定義 $[a,\ b]$から$f(x)$の平均値は区間に対して積分した後、区間の長さで割ることと同じだ。 $$ \dfrac{1}{b-a}\int_{a}^bf(x)dx $$ 導出 区間$[a,\ b]$の分割を$P$とし</description>
    </item>
    <item>
      <title>各断片ごとの連続性、各断片ごとの滑らかさ</title>
      <link>https://freshrimpsushi.github.io/jp/posts/972/</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/972/</guid>
      <description>定義 関数 $f$が区間 $I$で以下の条件を満たすとき、$f$は区間 $I$で片方向に連続piecewise continuousだと言われる。 有限</description>
    </item>
    <item>
      <title>デル演算子を含む式の部分積分</title>
      <link>https://freshrimpsushi.github.io/jp/posts/959/</link>
      <pubDate>Sun, 17 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/959/</guid>
      <description>公式 デル演算子が含まれるベクトル積分について、次の式が成り立つ。 (a) $$ \int_{\mathcal{V}}\mathbf{A} \cdot (\nabla f)d\tau = \oint_{\mathcal{S}}f\mathbf{A} \cdot d \mathbf{a}-\int_{\mathcal{V}}f(\nabla \cdot \mathbf{A})d\tau $$ (b) $$ \int_{\mathcal{S}} f \left( \nabla \times \mathbf{A} \right)\mathbf{A} \cdot d \mathbf{a} = \int_{\mathcal{S}} \left[ \mathbf{A} \times \left( \nabla f \right) \right] \cdot d\mathbf{a}</description>
    </item>
    <item>
      <title>チェビシェフ微分方程式の直列解法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/955/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/955/</guid>
      <description>定義 次の微分方程式をチェビシェフChebyshev 微分方程式という。 $$ (1-x^2)\dfrac{d^2 y}{dx^2} -x\dfrac{dy}{dx}+n^2 y=0 $$ 説明 係数に独立変数 $x$が含まれる形式であり、解がべき級数の</description>
    </item>
    <item>
      <title>量子力学における波動関数の確率的解釈と規格化</title>
      <link>https://freshrimpsushi.github.io/jp/posts/945/</link>
      <pubDate>Wed, 06 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/945/</guid>
      <description>波動関数 波動関数wave functionは、量子力学で時間、位置に依存する粒子の運動状態を表す関数だ。通常、$u$、$\psi$、$\Psi</description>
    </item>
    <item>
      <title>ストークスの定理</title>
      <link>https://freshrimpsushi.github.io/jp/posts/937/</link>
      <pubDate>Sun, 03 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/937/</guid>
      <description>まとめ1 $\mathbf{v}, \mathcal{S}$をそれぞれ3次元空間におけるあるベクトル、面積だとしよう。$\mathcal{S}$の面積ベクトルを$d\</description>
    </item>
    <item>
      <title>定常電流とビオ・サバールの法則</title>
      <link>https://freshrimpsushi.github.io/jp/posts/899/</link>
      <pubDate>Sun, 03 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/899/</guid>
      <description>定義1 定常電流steady currentとは、量や進行方向が変わらずに絶え間なく続く電荷の流れを指す。 説明 時間によって電流が変わらないため、</description>
    </item>
    <item>
      <title>磁場のベクトルポテンシャル</title>
      <link>https://freshrimpsushi.github.io/jp/posts/923/</link>
      <pubDate>Sun, 03 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/923/</guid>
      <description>説明1 静電学では、$\nabla \times \mathbf{E} = \mathbf{0}$という性質を使って、スカラーポテンシャル $V$を定義する。同様に、磁気静学では、</description>
    </item>
    <item>
      <title>磁気とローレンツ力の法則</title>
      <link>https://freshrimpsushi.github.io/jp/posts/896/</link>
      <pubDate>Sun, 03 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/896/</guid>
      <description>定義1 動いている電荷（電流）は周りに磁場magnetic field $\mathbf{B}$を作る。磁場 $\mathbf{B}$ の中で $\mathbf{v}$ の速さで動いている電荷 $Q$ が受ける力は</description>
    </item>
    <item>
      <title>電流と電流密度</title>
      <link>https://freshrimpsushi.github.io/jp/posts/898/</link>
      <pubDate>Sun, 03 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/898/</guid>
      <description>定義1 導線のどこかの点を単位時間ごとに通過する電荷の量を電流currentと定義し、$I$と表記する。それゆえ、左に動く負の電荷と右に動く正</description>
    </item>
    <item>
      <title>ポテンシャルの多重極展開と双極子モーメント</title>
      <link>https://freshrimpsushi.github.io/jp/posts/936/</link>
      <pubDate>Sat, 02 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/936/</guid>
      <description>多重展開1 離れた場所から見た時、集まった電荷分布は点電荷のように見えるだろう。つまり、電荷分布の総電荷が$Q$だとしたら、非常に遠い場所から</description>
    </item>
    <item>
      <title>ディリクレ核</title>
      <link>https://freshrimpsushi.github.io/jp/posts/932/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/932/</guid>
      <description>定義 ディリクレカーネルDirichlet kernel $D_{n}$は次のように定義される。 $$ \begin{equation} D_{n}(t) := \dfrac{1}{2}+\sum \limits_{k=1}^{n} \cos kt \end{equation} $$ 説明 ディリクレカーネルは、デルタ関数、指</description>
    </item>
    <item>
      <title>フーリエ級数の導出</title>
      <link>https://freshrimpsushi.github.io/jp/posts/929/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/929/</guid>
      <description>定義 $2L$-周期関数 $f$に対して次のような級数を $f$のフーリエ級数Fourier series of $f$と定義する。 $$ \begin{align*} \lim \limits_{N \rightarrow \infty} S^{f}_{N}(t) &amp;amp;= \lim \limits_{N \to \infty}\left[ \dfrac{a_{0}}{2}+\sum \limits_{n=1}^{N} \left( a_{n}</description>
    </item>
    <item>
      <title>直交関数と直交集合：正規直交集合と関数のノルム</title>
      <link>https://freshrimpsushi.github.io/jp/posts/926/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/926/</guid>
      <description>🚧 이 포스트는 아직 이관 작업이 완료되지 않았습니다 🚧 ** **内積inner product 区間$[a,b]$で定義された二つの複素関数$f$、$g$の内積は、以下</description>
    </item>
    <item>
      <title>ルジャンドル多項式のロドリゲスの公式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/895/</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/895/</guid>
      <description>公式 ルジャンドル多項式の明示的explicitな公式は以下の通りです。 $$ P_{l}(x)=\dfrac{1}{2^{l} l!} \dfrac{d^{l}}{dx^{l}}(x^{2}-1)^{l} \tag{1} $$ 説明 $l$番目のルジャンドル多項式を得る公式であり、これを</description>
    </item>
    <item>
      <title>ルジャンドル微分方程式の直列解法：ルジャンドル多項式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/889/</link>
      <pubDate>Mon, 11 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/889/</guid>
      <description>定義1 以下の微分方程式をルジャンドルLegendre微分方程式と言う。 $$ (1-x^2)\dfrac{d^2 y}{dx^2} -2x\dfrac{dy}{dx}+l(l+1) y=0 $$ ルジャンドル微分方程式の解をルジャンドル多項式と言い、通常</description>
    </item>
    <item>
      <title>ライプニッツの定理の証明</title>
      <link>https://freshrimpsushi.github.io/jp/posts/884/</link>
      <pubDate>Sun, 10 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/884/</guid>
      <description>要約 $$ \dfrac{d}{dx} (fg)=\dfrac{df}{dx}g+f\dfrac{dg}{dx} $$ $$ \begin{align*} \dfrac{d^n}{dx^n}(fg)&amp;amp;=\sum \limits_{k=0}^{n}\frac{n!}{(n-k)!k!}\dfrac{d^{n-k}f}{dx^{n-k}}\dfrac{d^k g}{dx^k} \\ &amp;amp;=\sum \limits_{k=0}^{n}{}_{n}\mathrm{C}_{k} \dfrac{d^{n-k}f}{dx^{n-k}}\dfrac{d^k g}{dx^k} \\ &amp;amp;=\sum \limits_{k=0}^{n} \binom{n}{k} \dfrac{d^{n-k}f}{dx^{n-k}}\dfrac{d^k g}{dx^k} \end{align*} $$ 説明 ライプニッツの法則Leibniz&amp;rsquo;s ruleとしても知られている。 最初の式は</description>
    </item>
    <item>
      <title>級数、無限級数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/886/</link>
      <pubDate>Sun, 10 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/886/</guid>
      <description>定義1 数列 $\left\{ a_{n} \right\}$が与えられたとしよう。そして、以下の記法を定義しよう。 $$ \sum \limits_{n=p}^{q} a_{n} = a_{p} + a_{p+1} + \cdots + a_{q}\quad (p \le q) $$ $\left\{ a_{n} \right\}$</description>
    </item>
    <item>
      <title>連続関数はリーマン-スティルチェス可積分である</title>
      <link>https://freshrimpsushi.github.io/jp/posts/847/</link>
      <pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/847/</guid>
      <description>= この記事はリーマン・スティルチェス積分を基準に書かれている。$\alpha=\alpha (x)=x$と設定した場合、リーマン積分と同じであ</description>
    </item>
    <item>
      <title>ポテンシャル</title>
      <link>https://freshrimpsushi.github.io/jp/posts/845/</link>
      <pubDate>Thu, 17 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/845/</guid>
      <description>説明1 電界は常にカール(回転)が$\mathbf{0}$になる特別なベクトル関数だ。この特性から、電場$\mathbf{E}$に関連する電位</description>
    </item>
    <item>
      <title>電場の回転</title>
      <link>https://freshrimpsushi.github.io/jp/posts/844/</link>
      <pubDate>Wed, 16 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/844/</guid>
      <description>定理 電場のカール（回転）は常に$\mathbf{0}$である。 $$ \nabla \times \mathbf{E} = \mathbf{0} $$ 証明1 点電荷が原点にある特別な場合の結果から一般的な結果を導くこ</description>
    </item>
    <item>
      <title>電気フラックスとガウスの法則</title>
      <link>https://freshrimpsushi.github.io/jp/posts/635/</link>
      <pubDate>Tue, 15 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/635/</guid>
      <description>定義1 面 $\mathcal S$を通過する電場 $\mathbf{E}$のフラックスを以下のように定義する。 $$ \Phi_{E} \equiv \int_{\mathcal S} \mathbf{E} \cdot d\mathbf{a} $$ これから、$\mathcal{S}</description>
    </item>
    <item>
      <title>クーロンの法則と電場</title>
      <link>https://freshrimpsushi.github.io/jp/posts/836/</link>
      <pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/836/</guid>
      <description>クーロンの法則1 固定された点電荷 $q$から距離$\cR$だけ離れたところにある試験電荷$Q$が受ける力をクーロン力といい、その式は次の通りで</description>
    </item>
    <item>
      <title>リーマン（-スティルチェス）積分可能の必要十分条件</title>
      <link>https://freshrimpsushi.github.io/jp/posts/833/</link>
      <pubDate>Thu, 10 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/833/</guid>
      <description>この記事は、リーマン-シュティルチェス積分を基に書かれている。$\alpha=\alpha (x)=x$とすれば、リーマン積分と同じだ。 定理1</description>
    </item>
    <item>
      <title>細分화</title>
      <link>https://freshrimpsushi.github.io/jp/posts/830/</link>
      <pubDate>Wed, 09 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/830/</guid>
      <description>この投稿はリーマン-スティルチェス積分を基準に書かれている。$\alpha=\alpha (x)=x$と設定すれば、リーマン積分と同じだ。 定義</description>
    </item>
    <item>
      <title>リーマン・スティルチェス積分</title>
      <link>https://freshrimpsushi.github.io/jp/posts/829/</link>
      <pubDate>Mon, 07 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/829/</guid>
      <description>概要 リーマン・スティルチェス積分は、リーマン積分を一般化したもので、簡単にスティルチェス積分とも呼ばれる。リーマン積分はリーマン・スティルチ</description>
    </item>
    <item>
      <title>分割、リーマン和、リーマン積分</title>
      <link>https://freshrimpsushi.github.io/jp/posts/828/</link>
      <pubDate>Sat, 05 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/828/</guid>
      <description>分割1 区間$[a,b]$が与えられたとしよう。$[a,b]$の分割partition$P$を下のように定義する。 $$ P := \left\{ x_{0},\ x_{1},\ \cdots, x_{n}\right\},\quad a=x_{0} &amp;lt;x_{1}&amp;lt;\cdots &amp;lt; x_{n} =b $$</description>
    </item>
    <item>
      <title>ラプラス変換の平行移動</title>
      <link>https://freshrimpsushi.github.io/jp/posts/764/</link>
      <pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/764/</guid>
      <description>公式1 関数 $f(t)$ のラプラス変換 $F(s)=\mathcal{L} \left\{ f(t) \right\}$ が $s&amp;gt;a$ として存在するとする。すると、定数 $c$ に対して次が成立する。 $$ \begin{align*} \mathcal{L} \left\{ e^{ct}f(t) \right\}&amp;amp;=F(s-c), &amp;amp;s&amp;gt;a+c \\ \mathcal{L^{-1}} \left\{ F(s-c) \right\}&amp;amp;=e^{ct}f(t) &amp;amp; \end{align*} $$ 説明 $f$ に指数関</description>
    </item>
    <item>
      <title>ラプラス変換の定義と存在証明</title>
      <link>https://freshrimpsushi.github.io/jp/posts/761/</link>
      <pubDate>Fri, 09 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/761/</guid>
      <description>証明 仮定2. により、$t \ge M$について$|f(t)| \le Ke^{at}$が成り立つ。両辺に$e^{-st}$を掛けると $$ |e^{-st}f(t)| \le Ke^{-(s-a)t} $$ 補助定理1 以下</description>
    </item>
    <item>
      <title>階段関数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/757/</link>
      <pubDate>Fri, 09 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/757/</guid>
      <description>定義 部分ごとに定数関数である関数をステップ関数と呼ぶ。 説明 上の図のように階段のような形をしているのでステップ関数と呼ばれる。最初に提案した人</description>
    </item>
    <item>
      <title>ラプラス変換の表</title>
      <link>https://freshrimpsushi.github.io/jp/posts/743/</link>
      <pubDate>Sun, 04 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/743/</guid>
      <description>公式1 これはラプラス変換の表です。 $f(t)=\mathcal{L^{-1}}$ $F(s)=\mathcal{L} \left\{ f(t) \right\}$ 導く정 $1$ $\dfrac{1}{s}$ link $e^{at}$ $\dfrac{1}{s-a}$ link $t^n$ $\dfrac{n!}{s^{n+1}}$ link $t^{p}$ $\dfrac{ \Gamma (p+1) }{ s^{p+1}}$ link $t^{p}e^{at}$ $\dfrac{ \Gamma (p+1) }{ (s-a)^{p+1}}$ link $\sin (at)$ $\dfrac{a}{s^2+a^2}$ link $\cos (at)$ $\dfrac{s}{s^2+a^2}$ link $e^{at}\sin(bt)$ $\dfrac{b}{(s-a)^2 +b^2}$ link $e^{at}\cos(bt)$ $\dfrac{s-a}{(s-a)^2+b^2}$ link $\sinh (at)$ $\dfrac{a}{s^2-a^2}$ link $\cosh (at)$ $\dfrac{s}{s^2-a^2}$</description>
    </item>
    <item>
      <title>抽象代数学における環</title>
      <link>https://freshrimpsushi.github.io/jp/posts/587/</link>
      <pubDate>Wed, 03 Oct 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/587/</guid>
      <description>定義 1 二つの二項演算、足し算$+$と掛け算$\cdot$に関して以下のルールを満たす集合$R$を環と定義する。 $a$、$b$、$c$が$R$</description>
    </item>
    <item>
      <title>部分群の定義と部分群の判定法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/589/</link>
      <pubDate>Sat, 23 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/589/</guid>
      <description>定義 1 群 $G$ の部分集合 $H$ が群 $G$ の演算で群である時、$H$は群 $G$の部分群subgroupと呼ばれる。 定理 部分群の判定法: 群 $G$ の空でない部分集</description>
    </item>
    <item>
      <title>ガウスの定理, 発散定理</title>
      <link>https://freshrimpsushi.github.io/jp/posts/565/</link>
      <pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/565/</guid>
      <description>まとめ1 3次元ベクトル関数$\mathbf{F}$について、以下が成り立つ。 $$ \begin{equation} \int_{\mathcal{V}} \nabla \cdot \mathbf{F} dV = \oint_{\mathcal{S}} \mathbf{F} \cdot d \mathbf{S} \label{1} \end{equation} $$ ここで、$\nabla \cdot \mat</description>
    </item>
    <item>
      <title>二次同次微分方程式の解</title>
      <link>https://freshrimpsushi.github.io/jp/posts/544/</link>
      <pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/544/</guid>
      <description>まとめ1 $$ ay^{\prime \prime} + by^\prime + cy=0 $$ 上で与えられた微分方程式の特性方程式 $ar^2+br+c=0$の解を$r_{1}$、$r_2$としよう。すると、 $\text{1.}$ $</description>
    </item>
    <item>
      <title>復元力と一次元単純調和振動子</title>
      <link>https://freshrimpsushi.github.io/jp/posts/543/</link>
      <pubDate>Mon, 30 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/543/</guid>
      <description>単純調和運動1 バネに吊り下げられた物体の運動を考えてみよう。バネの復元力によって前後に振動する。このような運動を調和振動と呼ぶ。調和振動を表</description>
    </item>
    <item>
      <title>定数係数の2階線形同次微分方程式と特性方程式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/540/</link>
      <pubDate>Fri, 27 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/540/</guid>
      <description>要約1 定数係数の2次線形同次微分方程式$a y^{\prime \prime} + by^\prime +cy=0$の一般解は、以下の通りである。 $$ y(x)=A e^{r_{1} x}+Be^{r_2 x} $$ この時、$r_{1,2}=\dfra</description>
    </item>
    <item>
      <title>完全微分方程式の定義と判別法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/516/</link>
      <pubDate>Sun, 08 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/516/</guid>
      <description>定義 次のように与えられた微分方程式 $\psi=\psi (x,y)$ で $\psi (x,y)$ を満たす$\psi=\psi (x,y)$が存在する場合、完全exact 微分方程式と言います。 説明</description>
    </item>
    <item>
      <title>デカルト座標系におけるベクトル、内積、外積の微分</title>
      <link>https://freshrimpsushi.github.io/jp/posts/506/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/506/</guid>
      <description>公式 $\mathbf{A} = A_{x}\hat{\mathbf{x}} + A_{y}\hat{\mathbf{y}} + A_{z}\hat{\mathbf{z}}, \mathbf{B} = B_{x}\hat{\mathbf{x}} + B_{y}\hat{\mathbf{y}} + B_{z}\hat{\mathbf{z}}$を3次元直交座標系でのベクトルとしよう。$n$を任意のスカラーとす</description>
    </item>
    <item>
      <title>物理学における運動エネルギーとポテンシャルエネルギーの定義</title>
      <link>https://freshrimpsushi.github.io/jp/posts/507/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/507/</guid>
      <description>運動エネルギー1 力が位置にのみ依存する時、つまり速度や時間に対して独立している時、粒子の直線運動の運動方程式（微分方程式）は以下のようになる</description>
    </item>
    <item>
      <title>ヴロンスキアンの定義と線形独立の判断</title>
      <link>https://freshrimpsushi.github.io/jp/posts/501/</link>
      <pubDate>Sat, 31 Mar 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/501/</guid>
      <description>定義1 $S=\left\{ f_{1}, f_{2}, \dots, f_{n} \right\}$が$n-1$回まで微分可能な関数の集合であるとする。このロンスキアンWronskian $W$を以下のような</description>
    </item>
    <item>
      <title>分離可能な一階微分方程式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/503/</link>
      <pubDate>Sat, 31 Mar 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/503/</guid>
      <description>定義1 1次微分方程式が下記の条件を満たす時、分離可能と言う。 $$ f(x)+g(y)\dfrac{dy}{dx}=0 \quad \text{or} \quad f(x)dx = -g(y)dy $$ 説明 色々な形で表現できるが、大事な点は両辺に各変数が分離されな</description>
    </item>
    <item>
      <title>微分方程式の分類</title>
      <link>https://freshrimpsushi.github.io/jp/posts/483/</link>
      <pubDate>Tue, 20 Mar 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/483/</guid>
      <description>説明 微分方程式を分類する基準はいくつかある。大きく常微分方程式か偏微分方程式かで分けられる。その次に係数と次数、線形/非線形でさらに細かく分</description>
    </item>
    <item>
      <title>微分方程式の定義と例</title>
      <link>https://freshrimpsushi.github.io/jp/posts/479/</link>
      <pubDate>Sat, 17 Mar 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/479/</guid>
      <description>定義 一つまたはそれ以上の従属変数を一つまたはそれ以上の独立変数に関して微分した導関数を含む等式を微分方程式differential equat</description>
    </item>
    <item>
      <title>角運動量のためのはしご演算子：上昇演算子と下降演算子</title>
      <link>https://freshrimpsushi.github.io/jp/posts/344/</link>
      <pubDate>Sun, 26 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/344/</guid>
      <description>定義 昇降作用素raising operator: $L_+ \equiv L_{x} + iL_{y}$ 降下作用素lowering operator: $L_- \equiv L_{x} - iL_{y}$、すなわち、$(L_-)^{\ast}=L_+$ 説</description>
    </item>
    <item>
      <title>エルミート演算子</title>
      <link>https://freshrimpsushi.github.io/jp/posts/304/</link>
      <pubDate>Thu, 09 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/304/</guid>
      <description>説明 $A^{\dagger}$は[アイ ダガー]と読む。ここでのdaggerは短剣のことだ。 フランスの数学者Hermiteの名前にちなんで名付</description>
    </item>
    <item>
      <title>ディラックの記法とは?</title>
      <link>https://freshrimpsushi.github.io/jp/posts/303/</link>
      <pubDate>Wed, 08 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/303/</guid>
      <description>定義 量子力学では、波動関数はベクトルであり、基本的に列ベクトルとして扱われます。列ベクトルは右の矢印かっこで示され、これをケットベクトルke</description>
    </item>
    <item>
      <title>ベクトル空間の次元</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3018/</link>
      <pubDate>Wed, 08 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3018/</guid>
      <description>定義1 ベクトル空間 $V$ の 基底 の要素（ベクトルの数）を $V$ の 次元dimension と定義し、以下のように表記する。 $$ \dim (V) $$ 説明 このような次元の一般</description>
    </item>
    <item>
      <title>物理学（量子力学）における演算子란</title>
      <link>https://freshrimpsushi.github.io/jp/posts/301/</link>
      <pubDate>Tue, 07 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/301/</guid>
      <description>ビルドアップ 数学では、関数functionとは、ある集合$X$の各要素に別の集合$Y$の要素を一対一で対応させる関係のことを言い、funct</description>
    </item>
    <item>
      <title>曲線座標系における勾配、発散、回転、ラプラシアン</title>
      <link>https://freshrimpsushi.github.io/jp/posts/299/</link>
      <pubDate>Sun, 05 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/299/</guid>
      <description>解説 物理学で、デル演算子$\nabla$を含む4つの演算、勾配、発散、回転、ラプラシアンは非常に重要である。そのため、3つの座標系における上</description>
    </item>
    <item>
      <title>線形結合、生成</title>
      <link>https://freshrimpsushi.github.io/jp/posts/512/</link>
      <pubDate>Mon, 30 Oct 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/512/</guid>
      <description>定義: 線形組み合わせ1 $\mathbf{w}$をベクトル空間$V$のベクトルとする。もし$\mathbf{w}$が$V$のベクトル$\mat</description>
    </item>
    <item>
      <title>ベクトル空間の部分空間</title>
      <link>https://freshrimpsushi.github.io/jp/posts/285/</link>
      <pubDate>Fri, 27 Oct 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/285/</guid>
      <description>定義1 $W$がベクトル空間$V$の空集合でない部分集合とする。$W$が$V$で定義された加算とスカラー乗算に対してベクトル空間の定義を満たす</description>
    </item>
    <item>
      <title>ベクトル空間の定義</title>
      <link>https://freshrimpsushi.github.io/jp/posts/282/</link>
      <pubDate>Tue, 24 Oct 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/282/</guid>
      <description>定義1 空集合ではない集合 $V$ の要素が二つの演算 加算additionと スカラー乗算scalar multiplicationに対して下記の10個の</description>
    </item>
    <item>
      <title>行列のランク、零化次元</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3021/</link>
      <pubDate>Wed, 04 Oct 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3021/</guid>
      <description>要旨1 行列$A$の行空間と列空間の次元は同じである。 証明 $R$を$A$の行階段形行列とする。基本的な行操作は$A$の行空間と列空間の次元を変</description>
    </item>
    <item>
      <title>世界線とガリレイ変換</title>
      <link>https://freshrimpsushi.github.io/jp/posts/250/</link>
      <pubDate>Tue, 26 Sep 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/250/</guid>
      <description>定義 粒子の軌跡を時空間で表した線を世界線world lineと呼ぶ。 説明 まず一方向に等速運動する座標系だけを考えよう。$A$座標系では、原点に</description>
    </item>
    <item>
      <title>慣性モーメントと旋回半径</title>
      <link>https://freshrimpsushi.github.io/jp/posts/234/</link>
      <pubDate>Tue, 05 Sep 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/234/</guid>
      <description>慣性モーメント $$ \begin{align*} I &amp;amp;= \sum_{i} m_{i} {r_{i}}^2 \\ I &amp;amp;= \int r^2 dm \end{align*} $$ 慣性モーメントmoment of inertiaは（粒子の質量）$\times$（回転軸から粒子までの</description>
    </item>
    <item>
      <title>ユークリッド空間</title>
      <link>https://freshrimpsushi.github.io/jp/posts/205/</link>
      <pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/205/</guid>
      <description>定義 自然数$n \in \mathbb{N}$に対し、実数の集合$\mathbb{R}$のデカルト積$\mathbb{R}^{n}$をユークリッド空</description>
    </item>
    <item>
      <title>量子力学における運動量演算子</title>
      <link>https://freshrimpsushi.github.io/jp/posts/100/</link>
      <pubDate>Sun, 23 Jul 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/100/</guid>
      <description>導出 一次元で考えよう。私たちが探している関数は、運動量が$p$の波動関数$\psi (x,t) = e^{i(kx - \omega t)}$に対して次の式を満たすオペレータだ。 $$ p_{\text{op}}</description>
    </item>
    <item>
      <title>極座標系における速度と加速度</title>
      <link>https://freshrimpsushi.github.io/jp/posts/158/</link>
      <pubDate>Mon, 17 Jul 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/158/</guid>
      <description>極座標系での速度と加速度 $$ \begin{align*} \mathbf{v}&amp;amp;=\dot{r} \hat{\mathbf{r}} + r \dot{\theta} \hat{\boldsymbol{\theta}} \\ \mathbf{a}&amp;amp;= (\ddot r -r\dot{\theta} ^2)\hat{\mathbf{r}} + (2\dot{r} \dot{\theta} + r\ddot{\theta})\hat{\boldsymbol{\theta}} \end{align*} $$ 導出 極座標系では、単位ベクトルは以下のようである。 $$ \begin{align*} &amp;amp;&amp;amp; \mathbf{r}&amp;amp;=r\hat{\mathbf{r}}=x\hat{\mathbf{x}} + y \hat{\mathbf{y}} \\ \implies &amp;amp;&amp;amp; \hat{\mathbf{r}} &amp;amp;=</description>
    </item>
    <item>
      <title>直交座標系の単位ベクトルで表された球面座標系の単位ベクトル</title>
      <link>https://freshrimpsushi.github.io/jp/posts/152/</link>
      <pubDate>Sun, 16 Jul 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/152/</guid>
      <description>球面座標系の単位ベクトル $$ \begin{align*} \hat{\mathbf{r}} &amp;amp;= \cos\phi \sin\theta\hat{\mathbf{x}} + \sin\phi \sin\theta\hat{\mathbf{y}} + \cos\theta\hat{\mathbf{z}} \\ \hat{\boldsymbol{\theta}} &amp;amp;= \cos\phi \cos\theta \hat{\mathbf{x}} + \sin\phi \cos\theta \hat{\mathbf{y}} - \sin\theta\hat{\mathbf{z}} \\ \hat{\boldsymbol{\phi}} &amp;amp;= -\sin\phi \hat{\mathbf{x}} + \cos\phi \hat{\mathbf{y}} \end{align*} $$ 導出 まず、$\hat{\mathbf{r}}$を計</description>
    </item>
    <item>
      <title>スカラー三重積</title>
      <link>https://freshrimpsushi.github.io/jp/posts/144/</link>
      <pubDate>Fri, 14 Jul 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/144/</guid>
      <description>定義 次の式をスカラー三重積scalar triple productと言う。 $$ \mathbf{A}\cdot (\mathbf{B} \times \mathbf{C} ) $$ 説明 スカラー三重積は、3つのベクトルを掛け合わせる操作で、結果が</description>
    </item>
    <item>
      <title>分離ベクトル</title>
      <link>https://freshrimpsushi.github.io/jp/posts/141/</link>
      <pubDate>Wed, 12 Jul 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/141/</guid>
      <description>定義1 原点から観察点までのベクトルを分離ベクトルseparation vectorという。 $$ \bcR = \mathbf{r} - \mathbf{r}^{\prime} $$ 説明 原点ベクトルsource vector $\mathbf{r}^{\prime}$: 電荷や</description>
    </item>
    <item>
      <title>分離ベクトルの大きさの勾配</title>
      <link>https://freshrimpsushi.github.io/jp/posts/142/</link>
      <pubDate>Wed, 12 Jul 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/142/</guid>
      <description>数式 分離ベクトル $\bcR$の大きさの$n$乗、$\cR ^{n}$の勾配は以下の通りだ。 $$ \nabla (\cR^n)=n\cR^{n-1}\crH $$ 説明 多項関数の微分と同じやり方で計算した後に</description>
    </item>
    <item>
      <title>ディラックのデルタ関数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/103/</link>
      <pubDate>Sat, 06 May 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/103/</guid>
      <description>定義 以下の二つの条件を満たす関数をディラックデルタ関数という。 $$ \delta (x) = \begin{cases} 0, &amp;amp; x\neq 0 \\ \infty , &amp;amp; x=0 \end{cases} $$ $$ \int_{-\infty}^{\infty}{\delta (x) dx}=1 $$ 説明 ※クロネッカーデルタと間違えない</description>
    </item>
    <item>
      <title>アインシュタインの記法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/90/</link>
      <pubDate>Sat, 29 Apr 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/90/</guid>
      <description>ノーテーション ２回以上繰り返される添字については、合計記号$\sum$を省略する。 説明 アインシュタインの合計規約Einstein summation conve</description>
    </item>
    <item>
      <title>二つのレビ-チビタ記号の積</title>
      <link>https://freshrimpsushi.github.io/jp/posts/88/</link>
      <pubDate>Sat, 29 Apr 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/88/</guid>
      <description>まとめ 次のように定義される $\epsilon_{ijk}$ を レビ-チビタ記号 と呼ぶ。 $$ \epsilon_{ijk} = \begin{cases} +1 &amp;amp; \text{if} \ \epsilon_{123}, \epsilon_{231}, \epsilon_{312} \\ -1 &amp;amp; \text{if} \ \epsilon_{132}, \epsilon_{213}, \epsilon_{321} \\ 0 &amp;amp; \text{if} \ i=j \ \text{or} \ j=k \ \text{or} \ k=i \end{cases} $$ 次のように定義さ</description>
    </item>
    <item>
      <title>クロネッカーのデルタ</title>
      <link>https://freshrimpsushi.github.io/jp/posts/84/</link>
      <pubDate>Wed, 26 Apr 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/84/</guid>
      <description>定義 以下のように定義される$\delta_{ij}$をクロネッカーのデルタKronecker deltaと呼ぶ。 $$ \delta_{ij} := \begin{cases} 1,&amp;amp;i=j \\ 0, &amp;amp; i\ne j \end{cases} $$ 説明 ク</description>
    </item>
    <item>
      <title>レヴィ-チヴィタ記号</title>
      <link>https://freshrimpsushi.github.io/jp/posts/83/</link>
      <pubDate>Tue, 25 Apr 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/83/</guid>
      <description>定義 以下のように定義される$\epsilon_{ijk}$を レビ-チビタ記号Levi-Civita-symbol という。 $$ \epsilon_{ijk} = \begin{cases} +1 &amp;amp; \text{if} \ \epsilon_{123}, \epsilon_{231},</description>
    </item>
    <item>
      <title>ベクトル三重積、BAC-CAB公式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/71/</link>
      <pubDate>Sun, 23 Apr 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/71/</guid>
      <description>説明 上の式の左辺をベクトル三重積と呼ぶ。右辺の結果を簡単に**BAC-CAB（バックキャップ）**という。ベクトル三重積は、結果がベクトルに</description>
    </item>
    <item>
      <title>パイトーチでtorch.nnとtorch.nn.functionalの違い</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3626/</link>
      <pubDate>Thu, 10 Jul 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3626/</guid>
      <description>説明 PyTorchには、多くのニューラルネットワーク関連の関数がtorch.nnとtorch.nn.functionalに同じ名前で含まれて</description>
    </item>
    <item>
      <title>初期条件が0の波動方程式の解。</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3623/</link>
      <pubDate>Fri, 04 Jul 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3623/</guid>
      <description>整理 次のような波動方程式が与えられたとする。 この時、$\Delta_{\mathbf{x}}$は変数$\mathbf{x}$に対するラプラシ</description>
    </item>
    <item>
      <title>파이토치에서 AdaBelief 옵티마이저 사용하는 방법</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3620/</link>
      <pubDate>Sat, 28 Jun 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3620/</guid>
      <description>説明 AdaBeliefは2020年にJ. Zhuangらによって紹介されたオプティマイザで、Adamの変形の一つです1。PyTorchではこの</description>
    </item>
    <item>
      <title>ジュリアプロットでカラーグラデーションを使用する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3608/</link>
      <pubDate>Wed, 04 Jun 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3608/</guid>
      <description>説明 カラーグラディエントは、Juliaの視覚化パッケージ Plots.jlがサポートする2つのカラースキームのうちの1つ（もう1つはパレット）</description>
    </item>
    <item>
      <title>ジュリアプロットでパレットを使用する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3607/</link>
      <pubDate>Mon, 02 Jun 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3607/</guid>
      <description>説明 パレットとは、予め絞り出された絵の具がおかれている板のことを指します。数学的に説明すると、「色の集合」や「色の数列」と言えるでしょう。1</description>
    </item>
    <item>
      <title>ジュリアプロットで異なるスケールの2つのデータ軸を共有して描く方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3606/</link>
      <pubDate>Sat, 31 May 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3606/</guid>
      <description>コード 大きくスケールの異なる2つのデータを同じプロットに描いた場合、下の図のようにスケールが小さい方が完全に無視されてしまう。 using Plots x = 0:0</description>
    </item>
    <item>
      <title>ジュリアプロッツでのプロットのプロパティリスト</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3605/</link>
      <pubDate>Thu, 29 May 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3605/</guid>
      <description>説明 JuliaのPlots.jlでは、プロットも一つのオブジェクトだ。空のプロットを描いてタイプを確認すると、以下のようになる。 julia&amp;gt; using Plots julia&amp;gt; p =</description>
    </item>
    <item>
      <title>ジュリアプロットで背景のグリッドを飾る方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3604/</link>
      <pubDate>Tue, 27 May 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3604/</guid>
      <description>概要 Plots.jlでの図の背景の格子に関連するキーワードは次の通りだ。 キーワード名 機能 grid 格子表示 gridalpha, ga, gα 格子の透明度指定 foreground_color_grid, fgcolor_grid 格子の色指定 gridlinewidth,</description>
    </item>
    <item>
      <title>ジュリア・プロットで背景色を指定する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3603/</link>
      <pubDate>Sun, 25 May 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3603/</guid>
      <description>概要 Plots.jlで図の背景色に関連するキーワードは次の通りです。 キーワード名 機能 background_color, bg_color 全体の背景の色を指定 background_color_outside, bg_color_outside グラフが描かれた外側の領域の</description>
    </item>
    <item>
      <title>Julia Plotsで各サブプロットごとにグラフの色を指定する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3602/</link>
      <pubDate>Fri, 23 May 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3602/</guid>
      <description>概要 サブプロットごとにグラフの色を指定する3つの方法を紹介する。グラフ要素に色を指定する方法はここを参照してください。 方法 1 サブプロットのグ</description>
    </item>
    <item>
      <title>ジュリアプロットでグラフ要素の色を指定する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3601/</link>
      <pubDate>Wed, 21 May 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3601/</guid>
      <description>要約 Plots.jlでは、グラフの各構成要素の色を指定するキーワードは以下の通りだ。 キーワード 機能 markercolor, mc マーカー内部の色を指定 markerstrokecolor, msc マーカーの縁</description>
    </item>
    <item>
      <title>ジュリアでRGBカラーコードを使用する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3600/</link>
      <pubDate>Mon, 19 May 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3600/</guid>
      <description>コード Juliaで色を扱うために提供されるパッケージはColors.jlだ。視覚化パッケージのPlots.jlを読み込むと、Colors.j</description>
    </item>
    <item>
      <title>ジュリアのカラー処理のためのパッケージ</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3599/</link>
      <pubDate>Sat, 17 May 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3599/</guid>
      <description>概要1 Juliaで色処理のためのパッケージであるColors.jlの機能について紹介する。視覚化パッケージであるPlots.jlを使う場合は</description>
    </item>
    <item>
      <title>ジュリアプロットでの色の使用方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3598/</link>
      <pubDate>Thu, 15 May 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3598/</guid>
      <description>概要 Juliaで色を便利に使うためのパッケージにはColors.jlがある。「Plots.jl」という視覚化パッケージを読み込めば一緒に使う</description>
    </item>
    <item>
      <title>ジュリアでテキスト出力を装飾する組み込み関数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3597/</link>
      <pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3597/</guid>
      <description>コード 関数 printstyled(文字列; color = 色)を使用すると、出力される関数を装飾できる。キーワード引数 colorの入力としては、シンボル</description>
    </item>
    <item>
      <title>データサイエンスにおける次元削減</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3563/</link>
      <pubDate>Thu, 06 Mar 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3563/</guid>
      <description>定義 データセット$X \subset \mathbb{R}^{n}$が与えられたとする。$m \lt n$に対して、次のようなマッピングを次元削減dimension</description>
    </item>
    <item>
      <title>TensorFlow-Kerasでシーケンスモデル、関数型APIでMLPを定義してトレーニングする方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3562/</link>
      <pubDate>Tue, 04 Mar 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3562/</guid>
      <description>概要 TensorFlowでは、Kerasを使用して簡単にニューラルネットワークを定義することができます。以下では、Sequential()と</description>
    </item>
    <item>
      <title>ジュリアで画像のサイズと解像度を調整する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3559/</link>
      <pubDate>Thu, 27 Feb 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3559/</guid>
      <description>コード サイズ plot(x, y, size=(600,400)) Juliaでは、図のサイズは size オプションで設定する。Tuple{Integer, Integer} 型で入力する必要があり、各整数はそれぞれ</description>
    </item>
    <item>
      <title>ジュリアでグラフィックスに矢印を描く方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3558/</link>
      <pubDate>Tue, 25 Feb 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3558/</guid>
      <description>コード plot!([x1, x2], [y1, y2], arrow=:true) このコードは、プロット上に点$(x1, y1)$から点$(x2, y2)$までの矢印を描く。当然ながら、矢印の先端は終点$(x2</description>
    </item>
    <item>
      <title>ジュリアでランダムシードを固定する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3555/</link>
      <pubDate>Wed, 19 Feb 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3555/</guid>
      <description>説明1 Juliaでは、ランダムシードは以下のように固定する。 seed!([rng=default_rng()], seed) -&amp;gt; rng seed!([rng=default_rng()]) -&amp;gt; rng 入力変数rngはランダムナンバージェネレータの略で、乱数を抽出する</description>
    </item>
    <item>
      <title>ジュリアでボックスプロットを描く方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3553/</link>
      <pubDate>Sat, 15 Feb 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3553/</guid>
      <description>日本語訳 説明 ボックスプロットを描くには、統計的可視化パッケージであるStatsPlots.jlを使用する必要がある。 boxplot([data], labels=[label]) コード using StatsPlots x = rand(0:100, 100) y</description>
    </item>
  </channel>
</rss>
