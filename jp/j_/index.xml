<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>J_s on 生エビ寿司屋</title>
    <link>https://freshrimpsushi.github.io/jp/j_/</link>
    <description>Recent content in J_s on 生エビ寿司屋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Wed, 24 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://freshrimpsushi.github.io/jp/j_/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>絶対連続実関数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3542/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3542/</guid>
      <description>定義1 関数 $f : \mathbb{R} \to \mathbb{R} (\text{または } \mathbb{C})$ が与えられたとする。$f$が任意の有限個の互いに素な区間 $(a_{i}, b_{i}) \subset [a,b]$に対しても以下の条件を</description>
    </item>
    <item>
      <title>適応的な学習率: AdaGrad, RMSProp, Adam</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3529/</link>
      <pubDate>Fri, 29 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3529/</guid>
      <description>概要1 2 勾配降下法で使用されるアダプティブラーニングレートと、これを適用したモデルであるAdaGrad、RMSProp、Adamについて説明</description>
    </item>
    <item>
      <title>勾配降下における運動量法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3528/</link>
      <pubDate>Wed, 27 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3528/</guid>
      <description>概要1 2 勾配降下法におけるモーメンタム技術は、パラメーターを更新する際に以前の勾配もすべて使用することである。これが本質であり、これに尽きる</description>
    </item>
    <item>
      <title>磁場の記号にBを使う理由</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3523/</link>
      <pubDate>Sun, 17 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3523/</guid>
      <description>질문 電磁気学は文字通り電場 $\mathbf{E}$と磁場 $\mathbf{B}$について学ぶ学問です。電磁気学を学ぶ中で一度は次のような疑問</description>
    </item>
    <item>
      <title>モンテカルロ積分</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3515/</link>
      <pubDate>Fri, 01 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3515/</guid>
      <description>概要 モンテカルロ積分は、与えられた関数の積分を計算するのが困難な場合に使用される数値的近似方法の一つである。次のような状況を想定しよう。与え</description>
    </item>
    <item>
      <title>ジュリアで軸、目盛りなどをすべて無くしてきれいに出力する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3501/</link>
      <pubDate>Fri, 03 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3501/</guid>
      <description>コード Plots.jlは基本的にグリッド、目盛り、軸、カラーバーなどを全て出力するけど、これらをなくしてすっきりと描きたい場合は、次のオプシ</description>
    </item>
    <item>
      <title>ジュリアでメッシュグリッドを作成する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3500/</link>
      <pubDate>Wed, 01 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3500/</guid>
      <description>概要 PythonやMATLABで使うmeshgrid()のような直接的な関数はない。グリッド上での関数値だけを求めたいなら、格子を作らないも</description>
    </item>
    <item>
      <title>ジュリアにおける多変数関数のブロードキャス팅</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3499/</link>
      <pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3499/</guid>
      <description>概要 Juliaで多変数関数をブロードキャストする方法を紹介する。Pythonなどで行うように、meshgridを作成する方法もあるし、各次元</description>
    </item>
    <item>
      <title>高速フーリエ変換アルゴリズム</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3492/</link>
      <pubDate>Mon, 16 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3492/</guid>
      <description>概要1 離散フーリエ変換DFTは、数式的な定義に従って計算すると、$\mathcal{O}(N^{2})$の時間計算量を持ちますが、以下で説明</description>
    </item>
    <item>
      <title>Julia Plotsで軸、軸名、目盛り、目盛り値の色を指定する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3490/</link>
      <pubDate>Thu, 12 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3490/</guid>
      <description>要約 Plots.jlで軸と目盛りの色を指定する関連キーワードは以下の通りである。 キーワード名 機能 guidefontcolor 軸名の色を指定 foreground_color_border, fgcolor_border 軸の色を指定 foreground_color_axis, fgcolor_axis 目盛りの</description>
    </item>
    <item>
      <title>Flux-PyTorch-TensorFlowチートシート</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3489/</link>
      <pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3489/</guid>
      <description>概要 Flux、PyTorch、TensorFlowで同じ機能をするコードを整理します。 Julia-MATLAB-Python-R チートシート Fluxについて次のような環境とします。</description>
    </item>
    <item>
      <title>측도론과 확률론 요약 정리</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3473/</link>
      <pubDate>Fri, 08 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3473/</guid>
      <description>概要 測度論と確率論を学んだ人向けの定義と概念の要約資料です。迅速な復習と定義の参照のために作成されました。 測度論 代数 $X \ne \varnothin</description>
    </item>
    <item>
      <title>ジュリアで与えられた分布からランダムにサンプリングする方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3463/</link>
      <pubDate>Sat, 19 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3463/</guid>
      <description>正規分布 julia&amp;gt; using Distributions julia&amp;gt; d = Normal() Normal{Float64}(μ=0.0, σ=1.0) julia&amp;gt; rand(d, 2,2) 2×2 Matrix{Float64}: -0.618228 -0.729552 -1.46898 -0.636276 一様分布 julia&amp;gt; rand(Uniform(), 2,2) 2×2 Matrix{Float64}: 0.0952175 0.348995 0.845515 0.768308 julia&amp;gt; rand(Uniform(1,10), 2,2) 2×</description>
    </item>
    <item>
      <title>ジュリアでランダムに抽出する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3462/</link>
      <pubDate>Thu, 17 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3462/</guid>
      <description>説明1 Juliaでランダム抽出する関数は以下の通りです。 rand([rng=default_rng()], [S], [dims...]) rngはRandom Number Generatorの略で、乱数抽出アルゴリズムを指定しま</description>
    </item>
    <item>
      <title>CSSカラー名札</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3459/</link>
      <pubDate>Wed, 09 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3459/</guid>
      <description>개요1 名前のある140以上のCSSカラーパレットです。 코드</description>
    </item>
    <item>
      <title>一般リニア群</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3450/</link>
      <pubDate>Sat, 22 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3450/</guid>
      <description>定義 実数の可逆な $n \times n$ 行列の集合を $\mathrm{GL}(n, \mathbb{R})$ または $\mathrm{GL}_{n}(\mathbb{R})$ と表記し、$n$次の一般線型群general linear group of degree $n$と呼ぶ。 $$ \mathrm{GL}(n, \mathbb{R}) := \left\{ n \times n \text{ invertible matrix} \right\} = M_{n</description>
    </item>
    <item>
      <title>MNIST Database</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3444/</link>
      <pubDate>Mon, 10 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3444/</guid>
      <description>概要1 $$ \includegraphics[height=20em]{https://upload.wikimedia.org/wikipedia/commons/2/27/MnistExamples.png} $$ MNISTmodified national institute of standards and technology データベースとは、アメリカの高校生と人口調査局の職員の数字の手書き文字に関するデータセットを指す。一般に[エムニス</description>
    </item>
    <item>
      <title>ジュリアで高速フーリエ変換（FFT）を使用する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3440/</link>
      <pubDate>Sun, 02 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3440/</guid>
      <description>概要 1 2 The Fastest Fourier Transform in the West(FFTW)は、マサチューセッツ工科大学(MIT)のMatteo FrigoとSteven G. Johnsonによって</description>
    </item>
    <item>
      <title>ジュリアで基本データ型を変更する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3439/</link>
      <pubDate>Fri, 30 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3439/</guid>
      <description>概要 機械学習のような分野では、計算速度の向上やメモリの節約などのために、64ビットの実数ではなく32ビットの実数が配列のデータ型として使われ</description>
    </item>
    <item>
      <title>交換ゲート</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3429/</link>
      <pubDate>Sat, 10 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3429/</guid>
      <description>양자정보이론 [ 펼치기 · 접기 ] 양자계산 논리게이트 비트 · 부울함수(AND · OR · NOT · XOR · NAND · NOR · CNOT · CCNOT · CSWAP) · 범용 게이트 · 복제 함수 · 사영 · 주입 양자게</description>
    </item>
    <item>
      <title>ビット: 古典的なコンピュータにおける情報の基本単位</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3422/</link>
      <pubDate>Sat, 27 May 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3422/</guid>
      <description>양자정보이론 [ 펼치기 · 접기 ] 양자계산 논리게이트 비트 · 부울함수(AND · OR · NOT · XOR · NAND · NOR · CNOT · CCNOT · CSWAP) · 범용 게이트 · 복제 함수 · 사영 · 주입 양자게</description>
    </item>
    <item>
      <title>フレドキン・CSWAPゲート</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3412/</link>
      <pubDate>Sun, 07 May 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3412/</guid>
      <description>定義1 以下のようなベクトル値ブール関数をフレドキンゲートFredkin gateと呼ぶ。 $$ F : \left\{ 0, 1 \right\}^{3} \to \left\{ 0, 1 \right\}^{3} $$ $$ F (a, b, c) = \Big(a, (\lnot a \land b) \lor (a \land</description>
    </item>
    <item>
      <title>トッフォリ/CCNOTゲート</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3411/</link>
      <pubDate>Fri, 05 May 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3411/</guid>
      <description>定義1 以下のようなベクトル値ブール関数をトフォリゲートToffoli gateと呼ぶ。 $$ T : \left\{ 0, 1 \right\}^{3} \to \left\{ 0, 1 \right\}^{3} $$ $$ T (a, b, c) = (a, b, (a \land b) \oplus c) $$ $\text{CCNOT}$</description>
    </item>
    <item>
      <title>制御NOT(CNOT)ゲート</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3410/</link>
      <pubDate>Wed, 03 May 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3410/</guid>
      <description>양자정보이론 [ 펼치기 · 접기 ] 양자계산 논리게이트 비트 · 부울함수(AND · OR · NOT · XOR · NAND · NOR · CNOT · CCNOT · CSWAP) · 범용 게이트 · 복제 함수 · 사영 · 주입 양자게</description>
    </item>
    <item>
      <title>否定論理和、NORゲート</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3407/</link>
      <pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3407/</guid>
      <description>양자정보이론 [ 펼치기 · 접기 ] 양자계산 논리게이트 비트 · 부울함수(AND · OR · NOT · XOR · NAND · NOR · CNOT · CCNOT · CSWAP) · 범용 게이트 · 복제 함수 · 사영 · 주입 양자게</description>
    </item>
    <item>
      <title>負論理積、NANDゲート</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3406/</link>
      <pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3406/</guid>
      <description>양자정보이론 [ 펼치기 · 접기 ] 양자계산 논리게이트 비트 · 부울함수(AND · OR · NOT · XOR · NAND · NOR · CNOT · CCNOT · CSWAP) · 범용 게이트 · 복제 함수 · 사영 · 주입 양자게</description>
    </item>
    <item>
      <title>排他的論理和、XORゲート</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3405/</link>
      <pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3405/</guid>
      <description>양자정보이론 [ 펼치기 · 접기 ] 양자계산 논리게이트 비트 · 부울함수(AND · OR · NOT · XOR · NAND · NOR · CNOT · CCNOT · CSWAP) · 범용 게이트 · 복제 함수 · 사영 · 주입 양자게</description>
    </item>
    <item>
      <title>論理否定、NOTゲート</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3404/</link>
      <pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3404/</guid>
      <description>양자정보이론 [ 펼치기 · 접기 ] 양자계산 논리게이트 비트 · 부울함수(AND · OR · NOT · XOR · NAND · NOR · CNOT · CCNOT · CSWAP) · 범용 게이트 · 복제 함수 · 사영 · 주입 양자게</description>
    </item>
    <item>
      <title>論理和、ORゲート</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3403/</link>
      <pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3403/</guid>
      <description>양자정보이론 [ 펼치기 · 접기 ] 양자계산 논리게이트 비트 · 부울함수(AND · OR · NOT · XOR · NAND · NOR · CNOT · CCNOT · CSWAP) · 범용 게이트 · 복제 함수 · 사영 · 주입 양자게</description>
    </item>
    <item>
      <title>論理積、ANDゲート</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3402/</link>
      <pubDate>Mon, 17 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3402/</guid>
      <description>양자정보이론 [ 펼치기 · 접기 ] 양자계산 논리게이트 비트 · 부울함수(AND · OR · NOT · XOR · NAND · NOR · CNOT · CCNOT · CSWAP) · 범용 게이트 · 복제 함수 · 사영 · 주입 양자게</description>
    </item>
    <item>
      <title>古典情報理論におけるシャノン・エントロピー</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3400/</link>
      <pubDate>Thu, 13 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3400/</guid>
      <description>양자정보이론 [ 펼치기 · 접기 ] 양자계산 논리게이트 비트 · 부울함수(AND · OR · NOT · XOR · NAND · NOR · CNOT · CCNOT · CSWAP) · 범용 게이트 · 복제 함수 · 사영 · 주입 양자게</description>
    </item>
    <item>
      <title>고전정보이론에서 정보량이란?</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3398/</link>
      <pubDate>Sun, 09 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3398/</guid>
      <description>양자정보이론 [ 펼치기 · 접기 ] 양자계산 논리게이트 비트 · 부울함수(AND · OR · NOT · XOR · NAND · NOR · CNOT · CCNOT · CSWAP) · 범용 게이트 · 복제 함수 · 사영 · 주입 양자게</description>
    </item>
    <item>
      <title>ジュリアプロットにおける軸のスタイルの変更方法 `framestyle`e`</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3376/</link>
      <pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3376/</guid>
      <description>##概要1 framestyle 属性を使って図の軸や枠線のスタイルを変更できる。可能なオプションは次の通りだ。 :box :semi :axes :origin :zerolines :grid :none コード デフォルト設定は :axes だ。 using Plots x =</description>
    </item>
    <item>
      <title>ジュリア、Python（NumPy、PyTorch）の配列の次元の違い</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3315/</link>
      <pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3315/</guid>
      <description>概要 JuliaとNumPy、PyTorch（以降、便宜上Pythonと呼ぶ）の高次元配列を扱う際、各次元が意味するものが異なるため注意が必要</description>
    </item>
    <item>
      <title>論文レビュー: 物理情報基盤ニューラルネットワーク(PINN)</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3313/</link>
      <pubDate>Wed, 19 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3313/</guid>
      <description>概要 レファレンスと数式の番号や表記法は、論文をそのまま踏襲する。 Physics-informed neural networks (PINN[ピン]と読む)は、数値的に解くために設計された微分方程式の</description>
    </item>
    <item>
      <title>ジュリアでのシンボリック演算の方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3311/</link>
      <pubDate>Sat, 15 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3311/</guid>
      <description>## 概要 Juliaでの記号演算は、`SymEngine.jl`[^1]パッケージを通じて使うことができる。 [^1]: https://symengine.org/SymEngine.jl/ ## コード ### シンボルの定義 シンボル</description>
    </item>
    <item>
      <title>ジュリアでデータフレームに新しい列を追加する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3273/</link>
      <pubDate>Sun, 31 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3273/</guid>
      <description>コード 宇宙少女のデータフレームが以下のように与えられたとしよう。 WJSN = DataFrame( member = [&amp;#34;다영&amp;#34;,&amp;#34;다원&amp;#34;,&amp;#34;루</description>
    </item>
    <item>
      <title>微分可能多様体上のベクトル場</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3270/</link>
      <pubDate>Mon, 25 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3270/</guid>
      <description>ビルドアップ1 ベクトル場の簡単な定義を考えてみよう。3次元空間でのベクトル場ベクトル関数、ベクトル場とは、3次元ベクトルを3次元ベクトルにマ</description>
    </item>
    <item>
      <title>微分幾何学におけるプルバック</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3262/</link>
      <pubDate>Sat, 09 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3262/</guid>
      <description>概要 微分多様体上のプルバックを定義する。微分多様体が難しい場合は、$M = \mathbb{R}^{m}$、$N = \mathbb{R}^{n}$</description>
    </item>
    <item>
      <title>ジュリアで階層的クラスタリングを行う方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3259/</link>
      <pubDate>Sun, 03 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3259/</guid>
      <description>説明 Clustering.jl パッケージの hclust() 関数を使えばいい。 hclust(d::AbstractMatrix; [linkage], [uplo], [branchorder]) 距離行列 を入力として受け取り、階層的クラスタリング の結果を返す。クラスタ間の距離のデフォルトは</description>
    </item>
    <item>
      <title>ジュリアでデンドログラムを描く方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3257/</link>
      <pubDate>Wed, 29 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3257/</guid>
      <description>説明 与えられたデータをhclust()で階層的クラスタリングした後、plot()関数を使ってデンドログラムを描こうとすると、以下のようなエラ</description>
    </item>
    <item>
      <title>ガウス・ボーネの定理</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3238/</link>
      <pubDate>Sun, 22 May 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3238/</guid>
      <description>ガウス・ボンネの定理 $\mathbf{x} : U \to \mathbb{R}^{3}$を単連結な測地線座標切片写像、$\boldsymbol{\gamma}(I) \subset \m</description>
    </item>
    <item>
      <title>ジュリアにおいて多次元配列を直接定義する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3223/</link>
      <pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3223/</guid>
      <description>説明 1次元配列（ベクトル）は次のように定義される。 julia&amp;gt; A = [1; 2; 3] 3-element Vector{Int64}: 1 2 3 ここで、;は第一次元を基準に次の要素に移る意味を持つ。これを一般化す</description>
    </item>
    <item>
      <title>ジュリアパッケージ管理モードで使用可能なコマンドのリスト</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3217/</link>
      <pubDate>Sun, 10 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3217/</guid>
      <description>説明 Julia REPLで右の角括弧 ] を入力すると、パッケージ管理モードに切り替えることができる。パッケージ管理モードで利用可能なコマンドは以下の通り</description>
    </item>
    <item>
      <title>ジュリアでnpyファイルを読み込む方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3215/</link>
      <pubDate>Wed, 06 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3215/</guid>
      <description>説明 この写真は、Pythonでファントム$f$のラドン変換$\mathcal{R}f$を計算し、それを*.npyファイルとして保存する過程を</description>
    </item>
    <item>
      <title>ジュリアでヒートマップにプロットを重ねて描く方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3213/</link>
      <pubDate>Sat, 02 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3213/</guid>
      <description>コード 例えば、$(5,5)$の配列のヒートマップの上に、$0$から$2\pi$までのサイン曲線を描きたいとしよう。こんなコードを書きたくなる</description>
    </item>
    <item>
      <title>ジュリアで異なるサイズのベクトル成分ごとに操作する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3207/</link>
      <pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3207/</guid>
      <description>説明 julia&amp;gt; x = [1 2 3] 1×3 Matrix{Int64}: 1 2 3 julia&amp;gt; y = [1 2 3 4] 1×4 Matrix{Int64}: 1 2 3 4 julia&amp;gt; x .+ y ERROR: DimensionMismatch サイズが異なる二つのベクトルは、基本的に要素ごとの演算を行うことがで</description>
    </item>
    <item>
      <title>ジュリアでの曲線から特定の値まで/二つの曲線の間/閉曲線の内部の塗り方</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3203/</link>
      <pubDate>Sun, 13 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3203/</guid>
      <description>特定の値まで塗る1 plot()の属性でfillrange=a、fillalpha=b、fillcolor=:colorを使うと、プロットされ</description>
    </item>
    <item>
      <title>Python Pandasデータフレームの列と行の名前を取得する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3189/</link>
      <pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3189/</guid>
      <description>コード import pandas as pd data = { &amp;#39;나이&amp;#39; : [26,23,22,22,21,21,20,20,20,20,18,17], &amp;#39;키&amp;#39; : [160, 163, 163, 162, 164, 163, 164, 150, 158, 162, 172, 173], &amp;#39;별명&amp;#39; : [&amp;#39;땡모&amp;</description>
    </item>
    <item>
      <title>曲面に沿った平行ベクトル場の定義</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3174/</link>
      <pubDate>Fri, 14 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3174/</guid>
      <description>曲線に沿ったベクトル場[^1] 定義 曲面 $M$と曲線 $\alpha : \left[ a, b \right] \to M$が与えられたとする。それぞれの$t \in \left[ a,b \right]$を点$\alph</description>
    </item>
    <item>
      <title>ギリシャ文字の読み方・書き方と数学・科学における意味</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3145/</link>
      <pubDate>Wed, 17 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3145/</guid>
      <description>アルファ $\Alpha, \alpha$ アルファalphaと読む。TeXコードはそれぞれ\Alpha、\alpha ギリシャ文字の最初の文字で、「アルファでありオメガ」は</description>
    </item>
    <item>
      <title>ジュリアでの微分の求め方</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3135/</link>
      <pubDate>Thu, 28 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3135/</guid>
      <description>概要1 名前はCalculus.jlだけど、積分はサポートしない。 機械学習などで話される自動微分が必要ならZygote.jlパッケージを参照し</description>
    </item>
    <item>
      <title>微分可能多様体上の接線ベクトル</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3132/</link>
      <pubDate>Fri, 22 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3132/</guid>
      <description>ビルドアップ1 微分多様体 $M$ の各点で接ベクトルを定義しようとしている。微分可能な曲線 $\alpha : (-\epsilon , \epsilon) \to M$が与えられたとする。これから、微分幾何学で</description>
    </item>
    <item>
      <title>逆伝播アルゴリズム</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3077/</link>
      <pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3077/</guid>
      <description>この文は逆転派アルゴリズムの原理を数学専攻者が理解しやすいように作成された。 表記法 上図のような 人工ニューラルネットワーク が与えられたとする。</description>
    </item>
    <item>
      <title>機械学習における強化学習とは？</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3029/</link>
      <pubDate>Thu, 04 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3029/</guid>
      <description>定義 強化学習とは、エージェントが環境と相互作用して累積報酬を最大化するポリシーを見つけることができるようにすることである。 説明1 強化学習を構</description>
    </item>
    <item>
      <title>直交座標系におけるベクトル関数の発散</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1796/</link>
      <pubDate>Wed, 23 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1796/</guid>
      <description>定義 ベクトル関数 $\mathbf{F}(x,y,z)=F_{x}\hat{\mathbf{x}}+F_{y}\hat{\mathbf{y}} + F_{z}\hat{\mathbf{z}}$について、以下のようなスカラー関数を$\mathbf{F}$のダイバージェン</description>
    </item>
    <item>
      <title>ファンクショナルがファンクショナルと名付けられた理由</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1780/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1780/</guid>
      <description>関数解析学は英語でfunctional analysisです。function analysisではなくfunctionalは一体何を意味してい</description>
    </item>
    <item>
      <title>3次元デカルト座標系におけるスカラー関数の勾配</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1778/</link>
      <pubDate>Sat, 12 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1778/</guid>
      <description>定義 スカラー関数 $f=f(x,y,z)$に対して、以下のようなベクトル関数を $f$のグラディエントgradient, 勾配と定義し、$\nab</description>
    </item>
    <item>
      <title>3次元デカルト座標系におけるベクトル関数のカール(回転)</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1752/</link>
      <pubDate>Thu, 03 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1752/</guid>
      <description>定義 ベクトル関数 $\mathbf{F}(x,y,z)=(F_{x},F_{y},F_{z})=F_{x}\hat{\mathbf{x}} + F_{y}\hat{\mathbf{y}} + F_{z}\hat{\mathbf{z}}$に対して、以下のようなベクトルを$\mathbf{F}$のカールcurl</description>
    </item>
    <item>
      <title>すべてのk-cellはコンパクトである：ユークリッド空間でコンパクトである同値条件。</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1711/</link>
      <pubDate>Tue, 18 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1711/</guid>
      <description>定義 $a_i, b_i \in \mathbb{R} (1 \le i \le k)$に対して、集合$I=[a_{1}, b_{1}] \times [a_{2}, b_{2}] \times \cdots \times [a_{k}, b_{k}]$を**$k$-セル**と言う。ここで$\times</description>
    </item>
    <item>
      <title>メートル空間における近傍、限界点、オープン、クローズド</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1700/</link>
      <pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1700/</guid>
      <description>定義 $(X,d)$が距離空間だとしよう。$p \in X$であり、$E \subset X$とする。 $d(q,p)&amp;lt;r$を満たすすべての$q$を含む集合を点$</description>
    </item>
    <item>
      <title>計量空間における閉包と派生集合</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1701/</link>
      <pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1701/</guid>
      <description>定義 $(X,d)$が距離空間であるとする。$p \in X$であり、$E \subset X$であるとする。 $d(q,p)&amp;lt;r$を満たす全ての$q$を含む集合</description>
    </item>
    <item>
      <title>リーマン(-シュティールス)積分の線形性</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1666/</link>
      <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1666/</guid>
      <description>정리1 この記事はリーマン・スティルチェス積分を基準に書かれています。$\alpha=\alpha (x)=x$とすると、リーマン積分と同じです</description>
    </item>
    <item>
      <title>量子力学でベクトル、内積、波動関数, ヒルベルト空間</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1509/</link>
      <pubDate>Fri, 07 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1509/</guid>
      <description>ベクトルの一般化 線形代数学を学んでいない理科生にとって、ベクトルは大きさと方向を持つ物理量であり、3次元空間の点を意味し、一般に $\vec{x} = (x_{1}, x_{2}, x_{3})$ の</description>
    </item>
    <item>
      <title>ジュリアで画像サイズを変更する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1466/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1466/</guid>
      <description>画像サイズの変更 Images パッケージの imresize を使えばいい。関数名はMatlabと同じだ。 imresize(X, ratio=a): 配列Xをa倍に調整した画像を返す。Matlabとは違って、た</description>
    </item>
    <item>
      <title>ジュリアで画像配列を回転する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1462/</link>
      <pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1462/</guid>
      <description>画像の回転 imrotate(X, theta) : 配列Xをthetaラジアンで回転させる。ここで注意すべき点は、角度の単位が度（$^{\circ})$のMATLABと異なり、</description>
    </item>
    <item>
      <title>ジュリアでの2次元配列操作の関数들</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1460/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1460/</guid>
      <description>$A = \begin{pmatrix} 1 &amp;amp; 2 &amp;amp; 1 \\ 0 &amp;amp; 3 &amp;amp; 0 \\ 2 &amp;amp; 3 &amp;amp; 4\end{pmatrix}$としよう。 転置行列 julia&amp;gt; A =[1 2 1; 0 3 0; 2 3 4] 3×3 Array{Int64,2}: 1 2 1 0 3 0 2 3 4 julia&amp;gt; transpose(A) 3</description>
    </item>
    <item>
      <title>ジュリアで配列をヒートマップ画像として出力保存する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1459/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1459/</guid>
      <description>Heatmap Plots パッケージのheatmap関数を使えば、2次元配列をヒートマップ画像として出力でき、savefig関数でその画像を保存できる。@__DI</description>
    </item>
    <item>
      <title>ジュリアでベクターを生成する様々な方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1452/</link>
      <pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1452/</guid>
      <description>코드 `x1`は2次元配列です。行ベクトルと同じように見えるため、成分座標を1つだけ入力すると、行ベクトルのように認識されます。`x2`, `x3`, `x4`,</description>
    </item>
    <item>
      <title>ジュリアで配列を平行移動する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1453/</link>
      <pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1453/</guid>
      <description>説明 circshifr(A, (n,m))を使用すると、配列Aの行を$n$カン下にシフトさせ、列を$m$カン右にシフトさせることができる。(n,m)は整数から成るタ</description>
    </item>
    <item>
      <title>部分空間トポロジー、相対トポロジー</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1439/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1439/</guid>
      <description>定義 1 位相空間 $(X,\mathscr{T})$と部分集合 $A \subset X$が与えられたとしよう。すると以下の集合 $$ \mathscr{T}_{A} =\left\{ A\cap U\ :\ U\in \mathscr{T} \right\} $$ は $A$上の位相</description>
    </item>
    <item>
      <title>ハーン分解定理</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1308/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1308/</guid>
      <description>定理1 (a) $\nu$を可測空間 $(X, \mathcal{E})$上で定義された符号測度とする。すると、以下を満たす $\nu$の正集合 $P$と負集合 $</description>
    </item>
    <item>
      <title>実数、複素数、セミノルムに対するハーン・バナッハの定理</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1230/</link>
      <pubDate>Tue, 06 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1230/</guid>
      <description>実数に関するハーン・バナッハの定理1 $X$は$\mathbb{R}$-ベクトル空間であり、$Y \subset X$とする。$p : X \to \mathbb{ R}$を$X$の準線</description>
    </item>
    <item>
      <title>ラグランジュ力学とハミルトンの変分原理</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1182/</link>
      <pubDate>Sun, 14 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1182/</guid>
      <description>概要 ハミルトンの原理、汎関数、作用、変分などについて、可能な限り簡単に説明しています。他の場所で満足のいく説明を見つけられなかった場合は、最</description>
    </item>
    <item>
      <title>ホップ・ラックス・フォーミュラ</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1174/</link>
      <pubDate>Tue, 09 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1174/</guid>
      <description>ビルドアップ1 ハミルトニアン$H$が$Du$のみに依存するハミルトン-ヤコビ方程式の初期値問題を見てみよう。 $$ \begin{equation} \left\{ \begin{aligned} u_{t} + H(Du)&amp;amp;=0 &amp;amp;&amp;amp; \text{in } \mathbb{R}^n \times (0,\infty) \\ u&amp;amp;=g &amp;amp;&amp;amp;</description>
    </item>
    <item>
      <title>特性方程式を利用した非線形1系偏微分方程式の解法。</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1074/</link>
      <pubDate>Wed, 08 May 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1074/</guid>
      <description>説明1 $x$と$p$について、偏微分方程式の変数であることを強調する場合、通常のフォントで $x,p \in \mathbb{R}^{n}$ と表示し、$s$に関する関数であることを強調</description>
    </item>
    <item>
      <title>チェビシェフ微分方程式の直列解法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/955/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/955/</guid>
      <description>定義 次の微分方程式をチェビシェフChebyshev 微分方程式という。 $$ (1-x^2)\dfrac{d^2 y}{dx^2} -x\dfrac{dy}{dx}+n^2 y=0 $$ 説明 係数に独立変数 $x$が含まれる形式であり、解がべき級数の</description>
    </item>
    <item>
      <title>フーリエ級数の導出</title>
      <link>https://freshrimpsushi.github.io/jp/posts/929/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/929/</guid>
      <description>定義 $2L$-周期関数 $f$に対して次のような級数を $f$のフーリエ級数Fourier series of $f$と定義する。 $$ \begin{align*} \lim \limits_{N \rightarrow \infty} S^{f}_{N}(t) &amp;amp;= \lim \limits_{N \to \infty}\left[ \dfrac{a_{0}}{2}+\sum \limits_{n=1}^{N} \left( a_{n}</description>
    </item>
    <item>
      <title>ルジャンドル多項式のロドリゲスの公式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/895/</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/895/</guid>
      <description>公式 ルジャンドル多項式の明示的explicitな公式は以下の通りです。 $$ P_{l}(x)=\dfrac{1}{2^{l} l!} \dfrac{d^{l}}{dx^{l}}(x^{2}-1)^{l} \tag{1} $$ 説明 $l$番目のルジャンドル多項式を得る公式であり、これを</description>
    </item>
    <item>
      <title>ルジャンドル微分方程式の直列解法：ルジャンドル多項式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/889/</link>
      <pubDate>Mon, 11 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/889/</guid>
      <description>定義1 以下の微分方程式をルジャンドルLegendre微分方程式と言う。 $$ (1-x^2)\dfrac{d^2 y}{dx^2} -2x\dfrac{dy}{dx}+l(l+1) y=0 $$ ルジャンドル微分方程式の解をルジャンドル多項式と言い、通常</description>
    </item>
    <item>
      <title>ラプラス変換の表</title>
      <link>https://freshrimpsushi.github.io/jp/posts/743/</link>
      <pubDate>Sun, 04 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/743/</guid>
      <description>公式1 これはラプラス変換の表です。 $f(t)=\mathcal{L^{-1}}$ $F(s)=\mathcal{L} \left\{ f(t) \right\}$ 導く정 $1$ $\dfrac{1}{s}$ link $e^{at}$ $\dfrac{1}{s-a}$ link $t^n$ $\dfrac{n!}{s^{n+1}}$ link $t^{p}$ $\dfrac{ \Gamma (p+1) }{ s^{p+1}}$ link $t^{p}e^{at}$ $\dfrac{ \Gamma (p+1) }{ (s-a)^{p+1}}$ link $\sin (at)$ $\dfrac{a}{s^2+a^2}$ link $\cos (at)$ $\dfrac{s}{s^2+a^2}$ link $e^{at}\sin(bt)$ $\dfrac{b}{(s-a)^2 +b^2}$ link $e^{at}\cos(bt)$ $\dfrac{s-a}{(s-a)^2+b^2}$ link $\sinh (at)$ $\dfrac{a}{s^2-a^2}$ link $\cosh (at)$ $\dfrac{s}{s^2-a^2}$</description>
    </item>
    <item>
      <title>ベクトル空間の部分空間</title>
      <link>https://freshrimpsushi.github.io/jp/posts/285/</link>
      <pubDate>Fri, 27 Oct 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/285/</guid>
      <description>定義1 $W$がベクトル空間$V$の空集合でない部分集合とする。$W$が$V$で定義された加算とスカラー乗算に対してベクトル空間の定義を満たす</description>
    </item>
    <item>
      <title>ベクトル空間の定義</title>
      <link>https://freshrimpsushi.github.io/jp/posts/282/</link>
      <pubDate>Tue, 24 Oct 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/282/</guid>
      <description>定義1 空集合ではない集合 $V$ の要素が二つの演算 加算additionと スカラー乗算scalar multiplicationに対して下記の10個の</description>
    </item>
    <item>
      <title>二つのレビ-チビタ記号の積</title>
      <link>https://freshrimpsushi.github.io/jp/posts/88/</link>
      <pubDate>Sat, 29 Apr 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/88/</guid>
      <description>まとめ 次のように定義される $\epsilon_{ijk}$ を レビ-チビタ記号 と呼ぶ。 $$ \epsilon_{ijk} = \begin{cases} +1 &amp;amp; \text{if} \ \epsilon_{123}, \epsilon_{231}, \epsilon_{312} \\ -1 &amp;amp; \text{if} \ \epsilon_{132}, \epsilon_{213}, \epsilon_{321} \\ 0 &amp;amp; \text{if} \ i=j \ \text{or} \ j=k \ \text{or} \ k=i \end{cases} $$ 次のように定義さ</description>
    </item>
    <item>
      <title>初期条件が0の波動方程式の解。</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3623/</link>
      <pubDate>Fri, 04 Jul 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3623/</guid>
      <description>整理 次のような波動方程式が与えられたとする。 この時、$\Delta_{\mathbf{x}}$は変数$\mathbf{x}$に対するラプラシ</description>
    </item>
    <item>
      <title>ジュリアプロットでカラーグラデーションを使用する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3608/</link>
      <pubDate>Wed, 04 Jun 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3608/</guid>
      <description>説明 カラーグラディエントは、Juliaの視覚化パッケージ Plots.jlがサポートする2つのカラースキームのうちの1つ（もう1つはパレット）</description>
    </item>
    <item>
      <title>ジュリアプロットでパレットを使用する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3607/</link>
      <pubDate>Mon, 02 Jun 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3607/</guid>
      <description>説明 パレットとは、予め絞り出された絵の具がおかれている板のことを指します。数学的に説明すると、「色の集合」や「色の数列」と言えるでしょう。1</description>
    </item>
    <item>
      <title>ジュリアプロットで異なるスケールの2つのデータ軸を共有して描く方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3606/</link>
      <pubDate>Sat, 31 May 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3606/</guid>
      <description>コード 大きくスケールの異なる2つのデータを同じプロットに描いた場合、下の図のようにスケールが小さい方が完全に無視されてしまう。 using Plots x = 0:0</description>
    </item>
    <item>
      <title>ジュリアプロッツでのプロットのプロパティリスト</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3605/</link>
      <pubDate>Thu, 29 May 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3605/</guid>
      <description>説明 JuliaのPlots.jlでは、プロットも一つのオブジェクトだ。空のプロットを描いてタイプを確認すると、以下のようになる。 julia&amp;gt; using Plots julia&amp;gt; p =</description>
    </item>
    <item>
      <title>ジュリアプロットで背景のグリッドを飾る方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3604/</link>
      <pubDate>Tue, 27 May 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3604/</guid>
      <description>概要 Plots.jlでの図の背景の格子に関連するキーワードは次の通りだ。 キーワード名 機能 grid 格子表示 gridalpha, ga, gα 格子の透明度指定 foreground_color_grid, fgcolor_grid 格子の色指定 gridlinewidth,</description>
    </item>
    <item>
      <title>ジュリア・プロットで背景色を指定する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3603/</link>
      <pubDate>Sun, 25 May 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3603/</guid>
      <description>概要 Plots.jlで図の背景色に関連するキーワードは次の通りです。 キーワード名 機能 background_color, bg_color 全体の背景の色を指定 background_color_outside, bg_color_outside グラフが描かれた外側の領域の</description>
    </item>
    <item>
      <title>Julia Plotsで各サブプロットごとにグラフの色を指定する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3602/</link>
      <pubDate>Fri, 23 May 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3602/</guid>
      <description>概要 サブプロットごとにグラフの色を指定する3つの方法を紹介する。グラフ要素に色を指定する方法はここを参照してください。 方法 1 サブプロットのグ</description>
    </item>
    <item>
      <title>ジュリアプロットでグラフ要素の色を指定する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3601/</link>
      <pubDate>Wed, 21 May 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3601/</guid>
      <description>要約 Plots.jlでは、グラフの各構成要素の色を指定するキーワードは以下の通りだ。 キーワード 機能 markercolor, mc マーカー内部の色を指定 markerstrokecolor, msc マーカーの縁</description>
    </item>
    <item>
      <title>ジュリアでRGBカラーコードを使用する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3600/</link>
      <pubDate>Mon, 19 May 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3600/</guid>
      <description>コード Juliaで色を扱うために提供されるパッケージはColors.jlだ。視覚化パッケージのPlots.jlを読み込むと、Colors.j</description>
    </item>
    <item>
      <title>ジュリアのカラー処理のためのパッケージ</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3599/</link>
      <pubDate>Sat, 17 May 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3599/</guid>
      <description>概要1 Juliaで色処理のためのパッケージであるColors.jlの機能について紹介する。視覚化パッケージであるPlots.jlを使う場合は</description>
    </item>
    <item>
      <title>ジュリアプロットでの色の使用方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3598/</link>
      <pubDate>Thu, 15 May 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3598/</guid>
      <description>概要 Juliaで色を便利に使うためのパッケージにはColors.jlがある。「Plots.jl」という視覚化パッケージを読み込めば一緒に使う</description>
    </item>
    <item>
      <title>ジュリアでテキスト出力を装飾する組み込み関数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3597/</link>
      <pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3597/</guid>
      <description>コード 関数 printstyled(文字列; color = 色)を使用すると、出力される関数を装飾できる。キーワード引数 colorの入力としては、シンボル</description>
    </item>
    <item>
      <title>データサイエンスにおける次元削減</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3563/</link>
      <pubDate>Thu, 06 Mar 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3563/</guid>
      <description>定義 データセット$X \subset \mathbb{R}^{n}$が与えられたとする。$m \lt n$に対して、次のようなマッピングを次元削減dimension</description>
    </item>
    <item>
      <title>TensorFlow-Kerasでシーケンスモデル、関数型APIでMLPを定義してトレーニングする方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3562/</link>
      <pubDate>Tue, 04 Mar 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3562/</guid>
      <description>概要 TensorFlowでは、Kerasを使用して簡単にニューラルネットワークを定義することができます。以下では、Sequential()と</description>
    </item>
    <item>
      <title>ジュリアで画像のサイズと解像度を調整する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3559/</link>
      <pubDate>Thu, 27 Feb 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3559/</guid>
      <description>コード サイズ plot(x, y, size=(600,400)) Juliaでは、図のサイズは size オプションで設定する。Tuple{Integer, Integer} 型で入力する必要があり、各整数はそれぞれ</description>
    </item>
    <item>
      <title>ジュリアでグラフィックスに矢印を描く方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3558/</link>
      <pubDate>Tue, 25 Feb 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3558/</guid>
      <description>コード plot!([x1, x2], [y1, y2], arrow=:true) このコードは、プロット上に点$(x1, y1)$から点$(x2, y2)$までの矢印を描く。当然ながら、矢印の先端は終点$(x2</description>
    </item>
    <item>
      <title>ジュリアでランダムシードを固定する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3555/</link>
      <pubDate>Wed, 19 Feb 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3555/</guid>
      <description>説明1 Juliaでは、ランダムシードは以下のように固定する。 seed!([rng=default_rng()], seed) -&amp;gt; rng seed!([rng=default_rng()]) -&amp;gt; rng 入力変数rngはランダムナンバージェネレータの略で、乱数を抽出する</description>
    </item>
    <item>
      <title>ジュリアでボックスプロットを描く方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3553/</link>
      <pubDate>Sat, 15 Feb 2014 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3553/</guid>
      <description>日本語訳 説明 ボックスプロットを描くには、統計的可視化パッケージであるStatsPlots.jlを使用する必要がある。 boxplot([data], labels=[label]) コード using StatsPlots x = rand(0:100, 100) y</description>
    </item>
  </channel>
</rss>
