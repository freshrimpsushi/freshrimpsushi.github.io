<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Julia on 生エビ寿司屋</title><link>https://freshrimpsushi.github.io/jp/categories/%EC%A4%84%EB%A6%AC%EC%95%84/</link><description>Recent content in Julia on 生エビ寿司屋</description><generator>Hugo -- gohugo.io</generator><language>jp</language><lastBuildDate>Tue, 23 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://freshrimpsushi.github.io/jp/categories/%EC%A4%84%EB%A6%AC%EC%95%84/index.xml" rel="self" type="application/rss+xml"/><item><title>JuliaでJSONファイルを読み書きする方法 (JSON.jl)</title><link>https://freshrimpsushi.github.io/jp/posts/3708/</link><pubDate>Tue, 23 Sep 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3708/</guid><description>概要 Juliaでjsonファイルを扱うパッケージには、JSON.jl、JSON3.jl、Serde.jlなどがある。本ドキュメントではJSO</description></item><item><title>Juliaでフォルダのツリー構造を表示する方法</title><link>https://freshrimpsushi.github.io/jp/posts/3704/</link><pubDate>Mon, 15 Sep 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3704/</guid><description>コード フォルダーツリーの構造を出力する関数は基本的に提供されていない。FileTrees.jlパッケージで提供されるFileTree(pat</description></item><item><title>Juliaでファイルやパスを調べる方法</title><link>https://freshrimpsushi.github.io/jp/posts/3703/</link><pubDate>Sat, 13 Sep 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3703/</guid><description>コード フォルダを巡回し、サブフォルダとファイルのリストを取得するための関数は walkdir(path) だ。フォルダ構造が以下のようだとする。 A/ ├─ B/ │ ├─ BB/ │ │ └─</description></item><item><title>juliaの文字列に関する文法と関数のまとめ</title><link>https://freshrimpsushi.github.io/jp/posts/3691/</link><pubDate>Wed, 20 Aug 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3691/</guid><description>概要 ジュリアで用いる文字/文字列に関する構文および関数を簡潔に整理する。基準はジュリアバージョンv1.11.5である。 公式ドキュメント Manual&amp;gt;Strings: https://docs.julialang.org/en/v1/manual/strings/ Base&amp;gt;Strings:</description></item><item><title>Juliaのデータフレームに新しい列を最初の列に追加する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2654/</link><pubDate>Sun, 25 May 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2654/</guid><description>コード 新しい列を追加すること自体はそれほど難しくないが、特定の位置に追加するのが難しいときがある。 insertcols! julia&amp;gt; df = DataFrame(a = 1:3, b = 4:6) 3×2 DataFrame Row │ a b │ Int64 Int64</description></item><item><title>Juliaで特定のパス下のファイル一覧を再帰的に取得する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2652/</link><pubDate>Wed, 21 May 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2652/</guid><description>コード walkdir julia&amp;gt; walkdir(&amp;#34;D:\\U\\B&amp;#34;) Channel{Tuple{String, Vector{String}, Vector{String}}}(0) (1 item available) julia&amp;gt; collect(walkdir(&amp;#34;D:\\U\\B&amp;#34;)) 2-element Vector{Tuple{String, Vector{String}, Vector{String}}}: (&amp;#34;D:\\U\\B&amp;#34;, [&amp;#34;b&amp;#34;], [&amp;#34;alpha.txt&amp;#34;, &amp;#34;beta.txt&amp;#34;]) (&amp;#34;D:\\U\\B\\b&amp;#34;, [], [&amp;#34;m.txt&amp;#34;]) walkdirは、与えられたパスの下のすべてのファイルを探索する組み込み関数だ。それ自体は</description></item><item><title>Juliaで配列の配列を連結するトリック</title><link>https://freshrimpsushi.github.io/jp/posts/2650/</link><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2650/</guid><description>概要 Juliaでは、append!のような関数を通して配列の配列を連結することができるが、バングコンベンション !が付いているだけに、元の配列</description></item><item><title>Juliaを実行する統合開発環境の確認方法</title><link>https://freshrimpsushi.github.io/jp/posts/2646/</link><pubDate>Fri, 09 May 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2646/</guid><description>ガイド vscodeなどのIDE（統合開発環境）でコードを実行する場合、開発段階に基づいて設定を異なるようにする場合が多い。これを確認するには</description></item><item><title>Juliaでデータフレームの最初と最後の部分を表示する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2644/</link><pubDate>Mon, 05 May 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2644/</guid><description>概要 Juliaのデータフレームには head や tail 関数がない。他の言語に比べてもう一度手を動かす必要があり面倒だが、first と last 関数を使えばいい。な</description></item><item><title>Juliaで非公式パッケージをインストールする方法</title><link>https://freshrimpsushi.github.io/jp/posts/2642/</link><pubDate>Thu, 01 May 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2642/</guid><description>ガイド 非公式パッケージの場合、レジスターを登録するなど複雑にインストールしなければならないと説明されることもあるが、実際にはGitHubアド</description></item><item><title>Juliaのデータフレームに同じ値で埋められた列を追加する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2640/</link><pubDate>Sun, 27 Apr 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2640/</guid><description>コード 本質的には新しい列を追加する方法と同じだが、代入演算子 = にブロードキャストを適用した .= を用いることで、別個にカラムを作成することなく簡</description></item><item><title>Juliaでl1トレンドフィルタリングを使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2632/</link><pubDate>Fri, 11 Apr 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2632/</guid><description>概要 L1TrendFiltering.jlは元々マトラボで実装された$\ell_{1}$トレンドフィルタリングコードをジュリアに翻訳したパッ</description></item><item><title>Juliaの置換次元関数とその応用 permutedims</title><link>https://freshrimpsushi.github.io/jp/posts/834/</link><pubDate>Mon, 24 Mar 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/834/</guid><description>概要 Juliaの組み込み関数 permutedimsは、ある意味転置行列の一般化として、多次元配列の次元を扱うのに有用だ。 コード テンソルの次元</description></item><item><title>外力を持つ常微分方程式の数値解法 (ジュリア・微分方程式パッケージ - DifferentialEquations)</title><link>https://freshrimpsushi.github.io/jp/posts/1083/</link><pubDate>Sun, 23 Mar 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1083/</guid><description>説明 DifferentialEquations.jlは微分方程式の数値的解法のためのジュリアパッケージだ。この文章では、Differenti</description></item><item><title>JuliaでExcel XLSXファイルを読み込む方法</title><link>https://freshrimpsushi.github.io/jp/posts/242/</link><pubDate>Tue, 10 Dec 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/242/</guid><description>概要 ジュリアでエクセル統合ドキュメント拡張子である *.XLSX ファイルを読む方法について紹介する。CSVファイルを読むことよりはやや難しいが、データそ</description></item><item><title>Juliaでオペレーティングシステムを確認する方法</title><link>https://freshrimpsushi.github.io/jp/posts/233/</link><pubDate>Fri, 06 Dec 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/233/</guid><description>概要 Juliaは科学計算に特化した言語であるため、複数のサーバーにプログラムをデプロイして実行することが多く、様々なオペレーティングシステム</description></item><item><title>Juliaでの横軸と縦軸の入れ替え方</title><link>https://freshrimpsushi.github.io/jp/posts/179/</link><pubDate>Mon, 02 Dec 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/179/</guid><description>概要 ジュリアにおいて図の横軸と縦軸の入れ替え方法について紹介する。 コード plot関数の引数としてpermute = (:y, :x)を使い軸の順序を変え</description></item><item><title>Juliaで軸に円周率の記号を使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/127/</link><pubDate>Wed, 20 Nov 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/127/</guid><description>概要 Juliaでティックに直接円周率記号を使う方法について説明する。実際には必ずしも円周率である必要はなく、タプルでティックの位置と表記を伝</description></item><item><title>Juliaでテキスト(txt)ファイルを編集して保存する方法</title><link>https://freshrimpsushi.github.io/jp/posts/3728/</link><pubDate>Sat, 02 Nov 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3728/</guid><description>write() write(path, string) 기본 함수인write()는 입력된 문자열을 내용으로 갖는txt 파일을 저장한다. julia&amp;gt; fm = &amp;#34;프로미스나인\n송하영\n박지원\n이채영\</description></item><item><title>Juliaでテキスト（txt）ファイルを文字列として読み込む方法</title><link>https://freshrimpsushi.github.io/jp/posts/3727/</link><pubDate>Thu, 31 Oct 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3727/</guid><description>説明 テキストファイルを読み込む方法はいくつかある。簡単な方法としては関数 read(), readline(), readlines() を使う。これらのうち read() はファイル全体を読み取り文字列として返し</description></item><item><title>Juliaカラースキームで0から1の間の値で色を得る方法</title><link>https://freshrimpsushi.github.io/jp/posts/46/</link><pubDate>Thu, 03 Oct 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/46/</guid><description>概要 Juliaのカラースキームで0から1の間の値で色を得るには、get関数を使います1。この関数は元々Baseにもありますが、using Co</description></item><item><title>Julia自然言語処理パッケージTextAnalysis.jlの紹介</title><link>https://freshrimpsushi.github.io/jp/posts/24/</link><pubDate>Sun, 29 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/24/</guid><description>概要 Juliaの自然言語処理パッケージであるTextAnaylsis.jlについて軽く紹介する1。実践的な自然言語処理のためには、語幹抽出s</description></item><item><title>Juliaでディクショナリを使って複数のキーワード引数を一度に渡す方法</title><link>https://freshrimpsushi.github.io/jp/posts/1962/</link><pubDate>Thu, 26 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1962/</guid><description>説明 ディクショナリとスプラットオペレーターを使うと、複数のキーワード引数を一度に関数に渡すことができる。 このテクニックは、複数のグラフに同じ</description></item><item><title>Juliaのシンボリック演算パッケージSymbolics.jlの紹介</title><link>https://freshrimpsushi.github.io/jp/posts/18/</link><pubDate>Wed, 25 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/18/</guid><description>概要 Juliaのシンボリック代数システムであるSymbolics.jlについて紹介します1。このパッケージは、特にJuliaの基本文法と一緒</description></item><item><title>Juliaで画像を垂直および水平に反転させる方法</title><link>https://freshrimpsushi.github.io/jp/posts/7/</link><pubDate>Sat, 21 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/7/</guid><description>概要 Juliaで画像を上下反転させたり、左右反転させる方法を紹介します。一般的にImages.jlにflipのような関数があると思われがちで</description></item><item><title>Juliaのファイル入出力 (I/O) 総まとめ</title><link>https://freshrimpsushi.github.io/jp/posts/3707/</link><pubDate>Sat, 21 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3707/</guid><description>概要 Juliaのファイル入出力に関するパッケージと関数を整理する。 要約 CSV: CSV.jl 読み取り CSV.read(&amp;quot;file_name.csv&amp;quot;, DataFrame) CSV.File(&amp;quot;file_name.csv&amp;quot;) 書き込み: CSV.write(&amp;quot;file_name.csv&amp;quot;, df_data) JSON: JSON3.jl, JSON.jl 読み取り 文字列: read(&amp;quot;file_name.json&amp;quot;, String) JSON3.Object: JSON3.read(cd*&amp;quot;/wonnyo.json&amp;quot;) 辞書: JSON3.read(cd*&amp;quot;/wonnyo.json&amp;quot;)</description></item><item><title>Juliaでデバイス名とアカウント名を参照する方法</title><link>https://freshrimpsushi.github.io/jp/posts/902/</link><pubDate>Tue, 17 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/902/</guid><description>概要 Juliaは高性能コンピューティングを志向しているため、一般的なレベルの計算量を遥かに超えて複数のサーバーを使用する可能性が高い。この際</description></item><item><title>Juliaでクリップボードを使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2628/</link><pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2628/</guid><description>概要 Juliaでクリップボードを使用する方法を紹介します。 コード clipboardは2つのメソッドで実装されています。 clipboard(x) クリップボードにxを</description></item><item><title>JuliaのNamedArrays.jlパッケージ</title><link>https://freshrimpsushi.github.io/jp/posts/1968/</link><pubDate>Sat, 14 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1968/</guid><description>説明 JuliaのNamedArrays.jlは、2次元配列を使用する際に行と列に名前を付けて使用できるパッケージです。もちろん、3次元以上で</description></item><item><title>Juliaで配列の型を指定して定義する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1969/</link><pubDate>Thu, 12 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1969/</guid><description>コード 角括弧の前に型名を記入するだけです。 julia&amp;gt; [1, 2, 3] 3-element Vector{Int64}: 1 2 3 julia&amp;gt; Float64[1, 2, 3] 3-element Vector{Float64}: 1.0 2.0 3.0 julia&amp;gt; Complex{Float64}[1, 2, 3] 3-element Vector{ComplexF64}: 1.0 + 0.0im 2.0 + 0.0im 3.0 + 0.0im julia&amp;gt; Char[1, 2, 3] 3-element Vector{Char}: &amp;#39;\x01&amp;#39;: ASCII/Unicode U+0001 (category Cc: Other, control) &amp;#39;\x02&amp;#39;: ASCII/Unicode U+0002</description></item><item><title>Juliaでコードの性能を評価、ベンチマークする方法</title><link>https://freshrimpsushi.github.io/jp/posts/2626/</link><pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2626/</guid><description>概要 Juliaを使用する最大の理由が速度とパフォーマンスであるため、工学的に最適化されたコードを書くことは非常に重要である。Benchmar</description></item><item><title>Juliaでコンプリヘンションを理解する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1970/</link><pubDate>Tue, 10 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1970/</guid><description>コード JuliaでもPythonのようにコンプリヘンションcomprehensionが可能です。コンプリヘンションは、配列を生成する方法の一</description></item><item><title>Juliaで配列を列ごとに計算する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1971/</link><pubDate>Sun, 08 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1971/</guid><description>コード 配列を列ごと、または行ごとに計算する方法には、map、ブロードキャスト、コンプリヘンションがあります。 julia&amp;gt; using Statistics julia&amp;gt; X = stack([i*ones(8) for i ∈ 1:9], dims=2) 8×9 Matrix{Float64}:</description></item><item><title>Juliaの整列順列関数とその応用 sortperm</title><link>https://freshrimpsushi.github.io/jp/posts/2624/</link><pubDate>Sat, 07 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2624/</guid><description>コード sortpermは与えられた配列をソートされた状態にするためのインデックスの配列を返す1。言葉だけ見ると難しそうだけど、例を見るとすぐ</description></item><item><title>Juliaにおけるベクトルとタプルの違い</title><link>https://freshrimpsushi.github.io/jp/posts/1972/</link><pubDate>Fri, 06 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1972/</guid><description>説明 ベクトルとタプルは一見似ているように見えますが、実際にはいくつかの重要な違いがあります。 この記事では、実際にコードを書いて使用する視点か</description></item><item><title>JuliaでのNaNの比較</title><link>https://freshrimpsushi.github.io/jp/posts/1973/</link><pubDate>Wed, 04 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1973/</guid><description>説明 Juliaでは、浮動小数点数に関連してIEEE 754標準に従っています。このルールではNaNNot a Numberは他のすべての値との比較</description></item><item><title>Juliaで単一要素セットの唯一の要素にアクセスする関数 only</title><link>https://freshrimpsushi.github.io/jp/posts/2622/</link><pubDate>Tue, 03 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2622/</guid><description>概要 集合論で言及される単一要素集合$\left\{ a \right\}$とその要素$a$が明確に異なるように、プログラミングにおいて要素を一つ</description></item><item><title>Julia vscodeでデータフレームを綺麗に見る方法</title><link>https://freshrimpsushi.github.io/jp/posts/2620/</link><pubDate>Fri, 30 Aug 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2620/</guid><description>ガイド 1 julia&amp;gt; using DataFrames julia&amp;gt; df = DataFrame(a = 10:-1:1, b = &amp;#39;a&amp;#39;:&amp;#39;j&amp;#39;) 10×2 DataFrame Row │ a b │ Int64 Char ─────┼───────────── 1 │ 10 a 2 │ 9 b 3 │ 8 c 4 │ 7 d 5 │ 6 e 6 │ 5</description></item><item><title>Juliaで決定木を使う方法</title><link>https://freshrimpsushi.github.io/jp/posts/2618/</link><pubDate>Mon, 26 Aug 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2618/</guid><description>概要 Juliaで決定木decision Treeを実装したDecisionTree.jlパッケージを紹介する1。 コード 例としては、Rの組み込み</description></item><item><title>Juliaでコレクションの重複を削除する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2616/</link><pubDate>Thu, 22 Aug 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2616/</guid><description>概要 Juliaでコレクションの重複をなくし、チェックする方法を紹介する。重複をなくすunique()関数は、アルゴリズム的に見て難しくないが</description></item><item><title>줄리아 미분방정식 패키지 DiffetentialEquations 튜토리얼</title><link>https://freshrimpsushi.github.io/jp/posts/1098/</link><pubDate>Sun, 18 Aug 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1098/</guid><description>説明 DifferentialEquations.jlは、SciMLグループに属するパッケージの一つで、微分方程式の数値的解法のために開発され</description></item><item><title>Juliaでクラスタリングパッケージを使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2613/</link><pubDate>Fri, 16 Aug 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2613/</guid><description>概要 Juliaでは、クラスタリング用のパッケージとしてClustering.jlが提供されている1。実装されているアルゴリズムは次の通りです</description></item><item><title>Juliaの自動微分パッケージZygote.jl</title><link>https://freshrimpsushi.github.io/jp/posts/2609/</link><pubDate>Thu, 08 Aug 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2609/</guid><description>概要 Juliaでは、マシンラーニング、特にディープラーニングに関連した自動微分automatic DifferentiationのためにZyg</description></item><item><title>Juliaで関数として構造体のプロパティを参照する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2607/</link><pubDate>Sun, 04 Aug 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2607/</guid><description>概要 Juliaで構造体のプロパティを参照する方法は主に二つある。文法的な便宜または実際の用途に応じて適切に使用するべきだ。 コード 例として、J</description></item><item><title>Juliaでベクトル場を描く方法</title><link>https://freshrimpsushi.github.io/jp/posts/2605/</link><pubDate>Wed, 31 Jul 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2605/</guid><description>コード quiver(, quiver=) Juliaでは、quiver()関数を使ってベクトルフィールドを視覚化することができる。 θ = 0:0.2:2π quiver(cos.</description></item><item><title>Juliaで配列の特定の位置を関数で参照する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2603/</link><pubDate>Sat, 27 Jul 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2603/</guid><description>概要 複数の配列が与えられた時、例えば、それぞれの配列の3番目の要素にアクセスしたいという状況は意外と多い。Juliaでは、getindex(</description></item><item><title>JuliaからRへのパッケージのインポート方法</title><link>https://freshrimpsushi.github.io/jp/posts/2601/</link><pubDate>Tue, 23 Jul 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2601/</guid><description>概要 Juliaでパッケージを読み込む方法はusingを使うことだけど、プログラムが大きくなるとそれを一つ一つ書くのも大変だ。ループを通してパ</description></item><item><title>Juliaで列ごとに行列を正規化する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2599/</link><pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2599/</guid><description>概要 Juliaで行列の正規化を簡単にするヒントを紹介する1。基本的には行列を行ごと、列ごとにスカラー倍する方法とeachcol()関数、Li</description></item><item><title>Juliaで行ごと、列ごとにスカラー倍する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2597/</link><pubDate>Mon, 15 Jul 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2597/</guid><description>概要 Juliaの行列において、行ごと、列ごとにスカラー乗算する方法を紹介する。 コード julia&amp;gt; d = 1:10 1:10 julia&amp;gt; X = ones(Int64, 10, 10) 10×10 Matrix{Int64}: 1 1 1 1 1 1 1 1 1 1 1</description></item><item><title>Juliaプロットでカラーグラデーションを使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/3608/</link><pubDate>Tue, 04 Jun 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3608/</guid><description>説明 カラーグラディエントは、Juliaの視覚化パッケージ Plots.jlがサポートする2つのカラースキームのうちの1つ（もう1つはパレット）</description></item><item><title>Juliaプロットでパレットを使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/3607/</link><pubDate>Sun, 02 Jun 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3607/</guid><description>説明 パレットとは、予め絞り出された絵の具がおかれている板のことを指します。数学的に説明すると、「色の集合」や「色の数列」と言えるでしょう。1</description></item><item><title>Juliaプロットで異なるスケールの2つのデータ軸を共有して描く方法</title><link>https://freshrimpsushi.github.io/jp/posts/3606/</link><pubDate>Fri, 31 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3606/</guid><description>コード 大きくスケールの異なる2つのデータを同じプロットに描いた場合、下の図のようにスケールが小さい方が完全に無視されてしまう。 using Plots x = 0:0</description></item><item><title>Juliaプロッツでのプロットのプロパティリスト</title><link>https://freshrimpsushi.github.io/jp/posts/3605/</link><pubDate>Wed, 29 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3605/</guid><description>説明 JuliaのPlots.jlでは、プロットも一つのオブジェクトだ。空のプロットを描いてタイプを確認すると、以下のようになる。 julia&amp;gt; using Plots julia&amp;gt; p =</description></item><item><title>Juliaプロットで背景のグリッドを飾る方法</title><link>https://freshrimpsushi.github.io/jp/posts/3604/</link><pubDate>Mon, 27 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3604/</guid><description>概要 Plots.jlでの図の背景の格子に関連するキーワードは次の通りだ。 キーワード名 機能 grid 格子表示 gridalpha, ga, gα 格子の透明度指定 foreground_color_grid, fgcolor_grid 格子の色指定 gridlinewidth,</description></item><item><title>JuliaでString7, String15なしでデータフレームを呼び出す方法</title><link>https://freshrimpsushi.github.io/jp/posts/2574/</link><pubDate>Sun, 26 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2574/</guid><description>エラー Juliaでデータフレームを使っていると、文字列データがString7やString15、String31などと読み込まれて様々なエラ</description></item><item><title>Julia・プロットで背景色を指定する方法</title><link>https://freshrimpsushi.github.io/jp/posts/3603/</link><pubDate>Sat, 25 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3603/</guid><description>概要 Plots.jlで図の背景色に関連するキーワードは次の通りです。 キーワード名 機能 background_color, bg_color 全体の背景の色を指定 background_color_outside, bg_color_outside グラフが描かれた外側の領域の</description></item><item><title>Julia Plotsで各サブプロットごとにグラフの色を指定する方法</title><link>https://freshrimpsushi.github.io/jp/posts/3602/</link><pubDate>Thu, 23 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3602/</guid><description>概要 サブプロットごとにグラフの色を指定する3つの方法を紹介する。グラフ要素に色を指定する方法はここを参照してください。 方法 1 サブプロットのグ</description></item><item><title>Juliaのサブプロットにメインタイトルを追加する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2572/</link><pubDate>Wed, 22 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2572/</guid><description>概要 Juliaで図を描く時、titleでタイトルを入れるとサブプロット全てに適用されるので、plot_titleを使うべきだ1。これはプロッ</description></item><item><title>Juliaプロットでグラフ要素の色を指定する方法</title><link>https://freshrimpsushi.github.io/jp/posts/3601/</link><pubDate>Tue, 21 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3601/</guid><description>定理 Plots.jlでは、グラフの各構成要素の色を指定するキーワードは以下の通りだ。 キーワード 機能 markercolor, mc マーカー内部の色を指定 markerstrokecolor, msc マーカーの縁</description></item><item><title>JuliaでRGBカラーコードを使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/3600/</link><pubDate>Sun, 19 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3600/</guid><description>コード Juliaで色を扱うために提供されるパッケージはColors.jlだ。視覚化パッケージのPlots.jlを読み込むと、Colors.j</description></item><item><title>Juliaプロットで軸の値を削除する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2570/</link><pubDate>Sat, 18 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2570/</guid><description>概要 Juliaで、カラーバー、軸、目盛り、グリッドなどの図のグラフィック要素を消す方法があるけれども、グラフィカルな要素をいじるから数字だけ</description></item><item><title>Juliaのカラー処理のためのパッケージ</title><link>https://freshrimpsushi.github.io/jp/posts/3599/</link><pubDate>Fri, 17 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3599/</guid><description>概要1 Juliaで色処理のためのパッケージであるColors.jlの機能について紹介する。視覚化パッケージであるPlots.jlを使う場合は</description></item><item><title>Juliaプロットでの色の使用方法</title><link>https://freshrimpsushi.github.io/jp/posts/3598/</link><pubDate>Wed, 15 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3598/</guid><description>概要 Juliaで色を便利に使うためのパッケージにはColors.jlがある。「Plots.jl」という視覚化パッケージを読み込めば一緒に使う</description></item><item><title>Juliaで有限差分を使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2568/</link><pubDate>Tue, 14 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2568/</guid><description>概要 Juliaで有限差分法を使うには、特に有限差分の係数を求めるためには、FiniteDifferences.jlを使うのがいいだろう1。ノ</description></item><item><title>Juliaでテキスト出力を装飾する組み込み関数</title><link>https://freshrimpsushi.github.io/jp/posts/3597/</link><pubDate>Mon, 13 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3597/</guid><description>コード 関数 printstyled(文字列; color = 色)を使用すると、出力される関数を装飾できる。キーワード引数 colorの入力としては、シンボル</description></item><item><title>Juliaでの数値解析的補間</title><link>https://freshrimpsushi.github.io/jp/posts/2566/</link><pubDate>Fri, 10 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2566/</guid><description>概要 Juliaでは、数値解析的な補間のためにInterpolations.jlパッケージを使用する1。ジュリアで変数の値を出力する際に使用す</description></item><item><title>Juliaで配列の差分を計算する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2564/</link><pubDate>Mon, 06 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2564/</guid><description>概要 Juliaでは、差分を計算するためにdiff()関数が提供されている1。circshift()関数も使って簡単に書けるけど、端点の処理な</description></item><item><title>Juliaで円形配列を使う方法</title><link>https://freshrimpsushi.github.io/jp/posts/2562/</link><pubDate>Thu, 02 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2562/</guid><description>概要 実は、Juliaではネイティブに円形配列circular Arrayをサポートしていないが、要素を円形にcircularlyシフトしてくれ</description></item><item><title>Juliaでのマーカーとラインスタイルのリスト</title><link>https://freshrimpsushi.github.io/jp/posts/2560/</link><pubDate>Sun, 28 Apr 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2560/</guid><description>コード 1 長々と説明する必要はなく、文字通りマーカースタイルとラインスタイルが実際にどう見えるかを示す。 linesytle [:auto, :solid, :dash, :dot, :dashdot, :dashdotdot] の中から一つ選ぶ。 shape [:none, :auto,</description></item><item><title>Juliaプロットで回帰直線を描く方法</title><link>https://freshrimpsushi.github.io/jp/posts/2558/</link><pubDate>Wed, 24 Apr 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2558/</guid><description>コード Juliaの散布図に回帰直線を入れる方法は、オプションでsmooth = trueを使うことだ。 using Plots x = rand(100) scatter(x, 2x .+ 0.1randn(100), smooth = true) savefig(&amp;#34;plot.svg&amp;#34;) 環境 OS: Windows julia: v1.8.3 Plots v1.38.5</description></item><item><title>Juliaでゼロ除算したときのInfとNaNの違い</title><link>https://freshrimpsushi.github.io/jp/posts/2556/</link><pubDate>Sat, 20 Apr 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2556/</guid><description>概要 Juliaで 0/0 と 1/0 がどのように違うかを説明する。 コード julia&amp;gt; 0/0 NaN julia&amp;gt; 1/0 Inf 少なくともプログラミングでは、無限 Inf は初期値や大小関係の比較という点で</description></item><item><title>Juliaスプラットオペレーターを通じたオプション引数の渡し方のヒント</title><link>https://freshrimpsushi.github.io/jp/posts/2554/</link><pubDate>Tue, 16 Apr 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2554/</guid><description>概要 Juliaで頻繁に使われるsplatの...の用途について、オプショナル引数を伝える方法を説明する。基本的に、どんなオプションにどんな引</description></item><item><title>Juliaのスプラットオペレータ</title><link>https://freshrimpsushi.github.io/jp/posts/2552/</link><pubDate>Fri, 12 Apr 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2552/</guid><description>概要 Juliaで...はスプラット・オペレーターと呼ばれ、関数を使用したり、配列を定義する際に便利に使われる1。このオペレーターはJulia</description></item><item><title>Juliaでユニコード文字列の一部だけをスライスする方法</title><link>https://freshrimpsushi.github.io/jp/posts/2550/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2550/</guid><description>概要 他のプログラム言語がそうであるように、Juliaでは英語をASCIIコードaSCII Codeで書き、漢字、韓国語などをユニコードunic</description></item><item><title>Julia StatsPlotsでデータフレーム名を省略するマクロ@df</title><link>https://freshrimpsushi.github.io/jp/posts/2548/</link><pubDate>Thu, 04 Apr 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2548/</guid><description>概要 JuliaのStatsPlotsパッケージでは、図を描く時に@dfマクロを通して、繰り返されるデータフレーム名を省略することができる1。</description></item><item><title>Juliaで他のファイルに定義された関数の使用方法</title><link>https://freshrimpsushi.github.io/jp/posts/2544/</link><pubDate>Wed, 27 Mar 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2544/</guid><description>概要 他のファイルにある関数を使えるようにするために、ジュリアコード自体を実行するinclude()関数を紹介する。MATLABでは、同じディ</description></item><item><title>Juliaでk-平均群集化する方法</title><link>https://freshrimpsushi.github.io/jp/posts/3572/</link><pubDate>Sun, 24 Mar 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3572/</guid><description>説明 k-平均クラスタリングは、与えられた$n$個のデータを$k$個のグループに分けるクラスタリングアルゴリズムです。Juliaでは、Clus</description></item><item><title>Julia集合でマーカーに色をつける方法</title><link>https://freshrimpsushi.github.io/jp/posts/2537/</link><pubDate>Wed, 13 Mar 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2537/</guid><description>コード using Plots x, y = rand(100), rand(100) 上記のようなデータが与えられたとしよう。データが連続かカテゴリカルかによって、図の形や描く方法が異なる。 連続型 scatter(marker_z=) z = x +</description></item><item><title>Juliaで画像のサイズと解像度を調整する方法</title><link>https://freshrimpsushi.github.io/jp/posts/3559/</link><pubDate>Tue, 27 Feb 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3559/</guid><description>コード サイズ plot(x, y, size=(600,400)) Juliaでは、図のサイズは size オプションで設定する。Tuple{Integer, Integer} 型で入力する必要があり、各整数はそれぞれ</description></item><item><title>Juliaでグラフィックスに矢印を描く方法</title><link>https://freshrimpsushi.github.io/jp/posts/3558/</link><pubDate>Sun, 25 Feb 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3558/</guid><description>コード plot!([x1, x2], [y1, y2], arrow=:true) このコードは、プロット上に点$(x1, y1)$から点$(x2, y2)$までの矢印を描く。当然ながら、矢印の先端は終点$(x2</description></item><item><title>Juliaで3Dプロットのカメラ位置を調整する方法</title><link>https://freshrimpsushi.github.io/jp/posts/3556/</link><pubDate>Wed, 21 Feb 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3556/</guid><description>説明 線グラフやヒートマップのような2次元の図とは異なり、3次元の空間に描いた図はどの方向から見るかによって姿が異なるよ。3D図の視点はcam</description></item><item><title>Juliaでランダムシードを固定する方法</title><link>https://freshrimpsushi.github.io/jp/posts/3555/</link><pubDate>Mon, 19 Feb 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3555/</guid><description>説明1 Juliaでは、ランダムシードは以下のように固定する。 seed!([rng=default_rng()], seed) -&amp;gt; rng seed!([rng=default_rng()]) -&amp;gt; rng 入力変数rngはランダムナンバージェネレータの略で、乱数を抽出する</description></item><item><title>Juliaでボックスプロットを描く方法</title><link>https://freshrimpsushi.github.io/jp/posts/3553/</link><pubDate>Thu, 15 Feb 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3553/</guid><description>日本語訳 説明 ボックスプロットを描くには、統計的可視化パッケージであるStatsPlots.jlを使用する必要がある。 boxplot([data], labels=[label]) コード using StatsPlots x = rand(0:100, 100) y</description></item><item><title>Juliaで無限配列を使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2511/</link><pubDate>Sun, 21 Jan 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2511/</guid><description>概要 InfiniteArrays.jlは無限のサイズを持つ配列を使えるようにするパッケージ1で、実際にはレイジー配列と多くの関連がある。レイ</description></item><item><title>Juliaでmatファイルを読み書きする方法</title><link>https://freshrimpsushi.github.io/jp/posts/2509/</link><pubDate>Wed, 17 Jan 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2509/</guid><description>概要 MAT.jlは MATLABで使用されるデータ保存形式である*.matファイルを読み書きするライブラリだ1。 Juliaがそうであるように、</description></item><item><title>Juliaコンソールでシンプルなグラフィックを出力する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2507/</link><pubDate>Sat, 13 Jan 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2507/</guid><description>概要 UnicodePlots.jlはJulia REPLでユニコード文字を使って図を出力するライブラリ1で、プログラムが進行する中で軽量であり</description></item><item><title>Juliaでコンソールを初期化する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2505/</link><pubDate>Tue, 09 Jan 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2505/</guid><description>方法 コンソールでCtrl + Lを押すと、コンソールが一見してクリアされるが、一部の環境では本当にリセットされるわけではなく、ウィンドウが上にス</description></item><item><title>Juliaでデータフレームの欠損値を削除する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2503/</link><pubDate>Fri, 05 Jan 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2503/</guid><description>概要 1 Juliaでは、dropmissing()関数を使って簡単に欠損値を削除できる。 コード julia&amp;gt; df = DataFrame(x = [&amp;#34;i&amp;#34;, missing, &amp;#34;k&amp;#34;, &amp;#34;j&amp;#34;], y = [1, 2, 3, missing]) 4×2 DataFrame Row │ x y │</description></item><item><title>Juliaで環境変数を参照する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2499/</link><pubDate>Thu, 28 Dec 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2499/</guid><description>概要 Juliaで環境変数を参照する方法を説明する1。 コード Base.ENV Base.ENV[&amp;#34;JULIA_NUM_THREADS&amp;#34;] 見るように、別のパッケージをロードする必要はなく、Base.ENVを通じて直接</description></item><item><title>Juliaでプログレスバーの使い方</title><link>https://freshrimpsushi.github.io/jp/posts/2497/</link><pubDate>Sun, 24 Dec 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2497/</guid><description>概要 Juliaでもプログラムの進行状況を知らせてくれるグラスバーを手軽に使うことができる。 コード ProgressMeter.jl 「ProgressMeter.jl」パッケ</description></item><item><title>Juliaで0または欠損値を除外した平均値の計算方法</title><link>https://freshrimpsushi.github.io/jp/posts/2495/</link><pubDate>Wed, 20 Dec 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2495/</guid><description>概要 R言語の合計sum()や平均mean()には、関数自体がその欠損値を無視するオプションを持っているが、Juliaではそのようなオプション</description></item><item><title>Juliaで回帰分析を行う方法</title><link>https://freshrimpsushi.github.io/jp/posts/2493/</link><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2493/</guid><description>概要 Juliaの回帰分析を行うためのGLM.jlパッケージを簡単に紹介する1。この説明では、Rのインターフェースとどれくらい似ているかを強調</description></item><item><title>Juliaで軸、目盛りなどをすべて無くしてきれいに出力する方法</title><link>https://freshrimpsushi.github.io/jp/posts/3501/</link><pubDate>Fri, 03 Nov 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3501/</guid><description>コード Plots.jlは基本的にグリッド、目盛り、軸、カラーバーなどを全て出力するけど、これらをなくしてすっきりと描きたい場合は、次のオプシ</description></item><item><title>Juliaでメッシュグリッドを作成する方法</title><link>https://freshrimpsushi.github.io/jp/posts/3500/</link><pubDate>Wed, 01 Nov 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3500/</guid><description>概要 PythonやMATLABで使うmeshgrid()のような直接的な関数はない。グリッド上での関数値だけを求めたいなら、格子を作らないも</description></item><item><title>Juliaにおける多変数関数のブロードキャス팅</title><link>https://freshrimpsushi.github.io/jp/posts/3499/</link><pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3499/</guid><description>概要 Juliaで多変数関数をブロードキャストする方法を紹介する。Pythonなどで行うように、meshgridを作成する方法もあるし、各次元</description></item><item><title>Juliaで2つの時刻の差を秒単位で計算する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2461/</link><pubDate>Fri, 13 Oct 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2461/</guid><description>概要 これを実現するには、Dates モジュールの canonicalize() 関数を使用する1。 コード using Dates tic = DateTime(2022,3,7,7,1,11) toc = now() Dates.canonicalize(toc-tic) 上のコードを実行した結果は次のとおりである。 julia&amp;gt; using Dates</description></item><item><title>Julia Plotsで軸、軸名、目盛り、目盛り値の色を指定する方法</title><link>https://freshrimpsushi.github.io/jp/posts/3490/</link><pubDate>Thu, 12 Oct 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3490/</guid><description>定理 Plots.jlで軸と目盛りの色を指定する関連キーワードは以下の通りである。 キーワード名 機能 guidefontcolor 軸名の色を指定 foreground_color_border, fgcolor_border 軸の色を指定 foreground_color_axis, fgcolor_axis 目盛りの</description></item><item><title>Juliaで2次元配列と行列の間の変換方法</title><link>https://freshrimpsushi.github.io/jp/posts/2459/</link><pubDate>Mon, 09 Oct 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2459/</guid><description>概要 Juliaで2次元配列と行列の間を切り替えるヒントを紹介する1。おそらくJulia 1.7以下の環境では、最もJuliaらしく、シンプルで</description></item><item><title>Juliaでネイバーからメールを送る方法</title><link>https://freshrimpsushi.github.io/jp/posts/2457/</link><pubDate>Thu, 05 Oct 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2457/</guid><description>概要 SMTPClient.jlパッケージを使って、SMTPsimple Mail Transfer Protocolでナヴァーからメールを送る方法を紹介する1。長時間</description></item><item><title>Juliaで与えられた分布からランダムにサンプリングする方法</title><link>https://freshrimpsushi.github.io/jp/posts/3463/</link><pubDate>Sat, 19 Aug 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3463/</guid><description>正規分布 julia&amp;gt; using Distributions julia&amp;gt; d = Normal() Normal{Float64}(μ=0.0, σ=1.0) julia&amp;gt; rand(d, 2,2) 2×2 Matrix{Float64}: -0.618228 -0.729552 -1.46898 -0.636276 一様分布 julia&amp;gt; rand(Uniform(), 2,2) 2×2 Matrix{Float64}: 0.0952175 0.348995 0.845515 0.768308 julia&amp;gt; rand(Uniform(1,10), 2,2) 2×</description></item><item><title>Juliaでランダムに抽出する方法</title><link>https://freshrimpsushi.github.io/jp/posts/3462/</link><pubDate>Thu, 17 Aug 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3462/</guid><description>説明1 Juliaでランダム抽出する関数は以下の通りです。 rand([rng=default_rng()], [S], [dims...]) rngはRandom Number Generatorの略で、乱数抽出アルゴリズムを指定しま</description></item><item><title>Juliaでデータを省略せずに出力する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2416/</link><pubDate>Sat, 15 Jul 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2416/</guid><description>概要 元々ジュリアでは、データを出力する時にREPLのサイズに合わせてきれいに出力されるが、時には全体のデータを楽に見たい時がある。データがf</description></item><item><title>Juliaで線形代数パッケージを使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2412/</link><pubDate>Fri, 07 Jul 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2412/</guid><description>概要 Juliaは、MATLABレベルの線形代数をサポートしている。むしろMATLABよりも進化した、直感的で美しい構文を見ると、Juliaが</description></item><item><title>Juliaでの日付と時刻関連関数の使用方法</title><link>https://freshrimpsushi.github.io/jp/posts/2410/</link><pubDate>Mon, 03 Jul 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2410/</guid><description>概要 1 Datesは、日付や時間に関連する関数をまとめたモジュールだ。一般的なプログラミングはもちろん、時系列に関する、いやそれに関係なく多く</description></item><item><title>Juliaで高速フーリエ変換（FFT）を使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/3440/</link><pubDate>Sun, 02 Jul 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3440/</guid><description>概要 1 2 The Fastest Fourier Transform in the West(FFTW)は、マサチューセッツ工科大学(MIT)のMatteo FrigoとSteven G. Johnsonによって</description></item><item><title>Juliaで基本データ型を変更する方法</title><link>https://freshrimpsushi.github.io/jp/posts/3439/</link><pubDate>Fri, 30 Jun 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3439/</guid><description>概要 機械学習のような分野では、計算速度の向上やメモリの節約などのために、64ビットの実数ではなく32ビットの実数が配列のデータ型として使われ</description></item><item><title>Juliaでの分散コンピューティングの方法</title><link>https://freshrimpsushi.github.io/jp/posts/2398/</link><pubDate>Fri, 09 Jun 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2398/</guid><description>概要 Juliaでは、複数のデバイスに計算タスクをスケジューリングする方法を紹介する1。正直、自分もよくわからない。 コード using Distributed ip_ = [] for last in [160,161,162,163,164,32,33,34,35,36,43,44,45,46,47] push!(ip_,</description></item><item><title>Juliaの多次元インデックス</title><link>https://freshrimpsushi.github.io/jp/posts/2394/</link><pubDate>Thu, 01 Jun 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2394/</guid><description>概要 Juliaでは、多次元配列を参照するためのインデックスタイプであるCatesianIndexを提供している1。もちろんCatesianと</description></item><item><title>Juliaのショートサーキット</title><link>https://freshrimpsushi.github.io/jp/posts/2392/</link><pubDate>Sun, 28 May 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2392/</guid><description>概要 Juliaでは、&amp;amp;&amp;amp;と||は論理積、論理和だけでなく、ショートサーキット評価short-circuit Evaluatio</description></item><item><title>Juliaのfind関数들</title><link>https://freshrimpsushi.github.io/jp/posts/2390/</link><pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2390/</guid><description>概要 Juliaの基本組み込み関数は知れば知るほど便利だ。早速、例を見て学ぼう。 コード x = [3, 7, 4, 5, 10, 3, 12, 3, 2, 4] argmin(x) argmax(x) findmin(x) findmax(x) extrema(x) findfirst(x .== 3) findlast(x .== 3) findall(x .== 3) findnext(x .==</description></item><item><title>Juliaの感嘆符の規約</title><link>https://freshrimpsushi.github.io/jp/posts/2388/</link><pubDate>Sat, 20 May 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2388/</guid><description>概要 1 Juliaでは、関数名の最後に感嘆符bang!を追加することをバンク規約と呼ぶ。これらの関数は、与えられた引数を変更する特徴がある。 コ</description></item><item><title>Juliaで部分配列を迅速に参照する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2384/</link><pubDate>Fri, 12 May 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2384/</guid><description>概要 Juliaで、viewは配列のサブアレイを素早く参照させるデータ構造だ。実際に使う立場から見れば面倒で差がないように見えるけど、怠惰に参</description></item><item><title>Juliaのブロードキャスティング文法</title><link>https://freshrimpsushi.github.io/jp/posts/2382/</link><pubDate>Mon, 08 May 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2382/</guid><description>概要 ブロードキャスティングは Juliaで最も重要な概念の一つであり、ベクトル化されたコードを書く際に非常に便利な文法だ1。二項演算の前に.を</description></item><item><title>Juliaで配列から辞書を作成する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2375/</link><pubDate>Mon, 24 Apr 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2375/</guid><description>コード 1 julia&amp;gt; Dict([&amp;#34;a&amp;#34;, &amp;#34;bc&amp;#34;] .=&amp;gt; [2,8]) Dict{String, Int64} with 2 entries: &amp;#34;a&amp;#34; =&amp;gt; 2 &amp;#34;bc&amp;#34; =&amp;gt; 8 キーKeyとバリューValueとして使いたい二つの配列が与えられた時、Dict(Key .=&amp;gt; Value)</description></item><item><title>Juliaで複素数を使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2373/</link><pubDate>Thu, 20 Apr 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2373/</guid><description>概要 Juliaは、基本的にRと同じように複素数をサポートしている。 コード 虚数単位 im julia&amp;gt; z = 3 + 4im 3 + 4im imは純虚数 $i = \sqrt{-1}$ を表す。常識的に使われ</description></item><item><title>Juliaプロットにおける軸のスタイルの変更方法 `framestyle`e`</title><link>https://freshrimpsushi.github.io/jp/posts/3376/</link><pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3376/</guid><description>##概要1 framestyle 属性を使って図の軸や枠線のスタイルを変更できる。可能なオプションは次の通りだ。 :box :semi :axes :origin :zerolines :grid :none コード デフォルト設定は :axes だ。 using Plots x =</description></item><item><title>Juliaで条件文を簡潔に書く方法</title><link>https://freshrimpsushi.github.io/jp/posts/2341/</link><pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2341/</guid><description>概要 Juliaで、&amp;lt;condition&amp;gt; &amp;amp;&amp;amp; &amp;lt;statement&amp;gt;は&amp;lt;condition&amp;gt;が真のとき&amp;lt</description></item><item><title>JuliaのデータフレームでNaNを0に置き換える方法</title><link>https://freshrimpsushi.github.io/jp/posts/2330/</link><pubDate>Tue, 24 Jan 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2330/</guid><description>概要 特定の値に変更する方法は、列ごとに変更するので不便で、データフレーム全体でNaNを扱うときはもっといいトリックを使ってみる価値がある。 コ</description></item><item><title>Juliaの三項演算子 ? :</title><link>https://freshrimpsushi.github.io/jp/posts/2328/</link><pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2328/</guid><description>概要 JuliaでのA ? B : Cは、いわゆる三項演算子ternary Operatorで、Aが真ならB、偽ならCを返す関数だ。数学的に二項演算が関</description></item><item><title>Juliaでのデータフレーム特定値の変更方法</title><link>https://freshrimpsushi.github.io/jp/posts/2326/</link><pubDate>Mon, 16 Jan 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2326/</guid><description>概要 replace!() メソッドを使えばいい1。最初の引数には変更するデータフレームのカラムが入り、二番目の引数にはペア [ペア](../2201) A =&amp;gt; B` が入る</description></item><item><title>Juliaで周波数を計算する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2324/</link><pubDate>Thu, 12 Jan 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2324/</guid><description>概要 1 FreqTables.jlパッケージのfreqtable()関数を使えばいい。Rのfreq()関数と似た機能を持っている。 コード 配列 julia&amp;gt;</description></item><item><title>JuliaでCSVファイルから列だけを読み込む方法</title><link>https://freshrimpsushi.github.io/jp/posts/2322/</link><pubDate>Sun, 08 Jan 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2322/</guid><description>ガイド 上のようなexample.csvファイルがあるとしよう。このデータフレームに読み込むとき、データ全体ではなく、列名だけを保持し、中身が</description></item><item><title>Juliaでデータフレームの要約を見る方法</title><link>https://freshrimpsushi.github.io/jp/posts/2320/</link><pubDate>Wed, 04 Jan 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2320/</guid><description>ガイド 1 using RDatasets iris = dataset(&amp;#34;datasets&amp;#34;, &amp;#34;iris&amp;#34;) describe(iris) describe() 関数を使えばいい。iris データを要約してみよう。 julia&amp;gt; describe(iris) 5×7 DataFrame Row │ variable mean min median max nmissing eltype │ Symbol Union… Any Union… Any Int64 DataType</description></item><item><title>Juliaのカテゴリカル配列</title><link>https://freshrimpsushi.github.io/jp/posts/2318/</link><pubDate>Sat, 31 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2318/</guid><description>概要 JuliaのCategoricalArrays.jlパッケージは、Rのfactorと似た機能を果たす。 コード julia&amp;gt; A = [&amp;#34;red&amp;#34;, &amp;#34;blue&amp;#34;, &amp;#34;red&amp;#34;, &amp;#34;green&amp;#34;] 4-element Vector{String}: &amp;#34;red&amp;#34; &amp;#34;blue&amp;#34; &amp;#34;red&amp;#34; &amp;#34;green&amp;#34; julia&amp;gt;</description></item><item><title>JuliaでRで使用されていた組み込みデータセットを読み込む方法</title><link>https://freshrimpsushi.github.io/jp/posts/2316/</link><pubDate>Tue, 27 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2316/</guid><description>ガイド RDatasets.jl パッケージを使えば大丈夫。以下は最も簡単な iris データセットを読み込む例です。基本組み込みデータセットの他にも様々なデータセットが含まれ</description></item><item><title>Juliaでパッケージバージョンを確認する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2313/</link><pubDate>Wed, 21 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2313/</guid><description>ガイド 例としてPlots.jlパッケージのバージョンを確認してみよう。REPLで]キーを押すとパッケージモードに入る。ここでstatus fo</description></item><item><title>Juliaで配列が空かどうかを確認する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2311/</link><pubDate>Sat, 17 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2311/</guid><description>概要 isempty() 関数を使用すればいい。 コード julia&amp;gt; isempty([]) true julia&amp;gt; isempty(Set()) true julia&amp;gt; isempty(&amp;#34;&amp;#34;) true タイトルでは配列とされているが、実際には集合や文字列でも良い。 最適化 もちろん配列が空かど</description></item><item><title>Juliaで例外処理する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2309/</link><pubDate>Tue, 13 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2309/</guid><description>概要 地の果てまで一人で居る辛さを知ってる人は、ああ、分かるんだ コーディング中にわからないエラーに苦労した人は、プログラミングにおいてエラーが</description></item><item><title>Juliaでデータフレームのサイズを確認する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2307/</link><pubDate>Fri, 09 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2307/</guid><description>概要 nrow(), ncol(), size() を使用できる。Rと違って、length()はエラーになる。 コード julia&amp;gt; df = DataFrame(rand(100000,5), :auto) 100000×5 DataFrame Row │ x1 x2 x3 x4 x5 │ Float64 Float64 Float64 Float64 Float64 ──────</description></item><item><title>Juliaで変数名をカラム名として持つデータフレームを作成する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2305/</link><pubDate>Mon, 05 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2305/</guid><description>概要 ネームド・タプルが使える。ネームド・タプルを作る方法は、左の括弧のすぐ後ろにセミコロン;をつけることだ。例えば、DataFrame(; x,</description></item><item><title>Juliaのネームドタプル</title><link>https://freshrimpsushi.github.io/jp/posts/2303/</link><pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2303/</guid><description>概要 名前付きタプルは、一般的なタプルとは異なり、辞書や構造体のように使用できるタプルだ。シンボルの配列をキーとして持ち、キーを使ってバリュー</description></item><item><title>Julia、Python（NumPy、PyTorch）の配列の次元の違い</title><link>https://freshrimpsushi.github.io/jp/posts/3315/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3315/</guid><description>概要 JuliaとNumPy、PyTorch（以降、便宜上Pythonと呼ぶ）の高次元配列を扱う際、各次元が意味するものが異なるため注意が必要</description></item><item><title>Juliaでコマンドライン引数を挿入する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2280/</link><pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2280/</guid><description>日本語訳 コード println(ARGS[1] * &amp;#34; + &amp;#34; * ARGS[2] * &amp;#34; = &amp;#34; * string(parse(Float64, ARGS[1]) + parse(Float64, ARGS[2]))) 上記の通り、example.jlというファイルが1行で構成されているとしよう。Juliaでは</description></item><item><title>Juliaでのシンボリック演算の方法</title><link>https://freshrimpsushi.github.io/jp/posts/3311/</link><pubDate>Sat, 15 Oct 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3311/</guid><description>概要 Juliaでの記号演算は、SymEngine.jl1パッケージを通じて使うことができる。 コード シンボルの定義 シンボルは、以下の方法で定義</description></item><item><title>Juliaで外部プログラムを実行する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2278/</link><pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2278/</guid><description>コード ジュリアでは、run() 関数を通じてバックティックbacktick `で囲まれた文字列を実行する。Pythonでは os モジュールの os.system() を使っ</description></item><item><title>Juliaで文字列を数値に変換する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2276/</link><pubDate>Sat, 08 Oct 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2276/</guid><description>コード parse(type, str)を使えばいいんだ。文字列strをtypeタイプの数字に変更してくれる。 julia&amp;gt; parse(Int, &amp;#34;21&amp;#34;) 21 julia&amp;gt; parse(Float64, &amp;#34;3.14&amp;#34;) 3.14 なんでPythonみたいにInt64(</description></item><item><title>Juliaで可変引数関数を定義する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2266/</link><pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2266/</guid><description>概要 1 可変引数関数とは、プログラミングで一般にVarargs Functionと呼ばれるもので、複数の引数を制限なく受け入れることができる関数</description></item><item><title>Juliaのコンテナ内部の要素タイプをチェックする方法</title><link>https://freshrimpsushi.github.io/jp/posts/2264/</link><pubDate>Wed, 14 Sep 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2264/</guid><description>概要 eltype() 関数を使うだけだ。多分 element typeからきた名前だろう。 コード julia&amp;gt; set_primes = Set([2,3,5,7,11,13]) Set{Int64} with 6 elements: 5 13 7 2 11 3 julia&amp;gt; arr_primes = Array([2,3,5,7,11,13]) 6-element Vector{Int64}: 2 3 5 7 11 13 次のように$13$までの</description></item><item><title>Juliaプロットの基本設定を変更する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2262/</link><pubDate>Sat, 10 Sep 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2262/</guid><description>コード default() 関数を使用すればいい。 using Plots default(size = (400,400), color = :red) default(:size, (400,400)) for key in [:size, :color], value in [(400,400), :red] default(key, value) end 普通の plot() 関数のように設定する方法と、キーとバリューを与えて一つずつ</description></item><item><title>Juliaでデータフレームの特定の行を削除する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2260/</link><pubDate>Tue, 06 Sep 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2260/</guid><description>概要 インデックスを取るときは、Not() 関数を使用すればいいんだ1。カラム名そのままのシンボル、またはシンボルの配列を入れると、それらのカラ</description></item><item><title>Juliaで図に垂直線と水平線を挿入する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2258/</link><pubDate>Fri, 02 Sep 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2258/</guid><description>概要 縦線と横線を引くには、vline!() と hline!() 関数を使用すればいい。 コード @time using Plots plot(rand(100)) hline!([0.5], linewidth = 2) vline!([25, 75], linewidth = 2) png(&amp;#34;result&amp;#34;) 線が引かれる位置は配列で渡す。配列の要</description></item><item><title>Juliaでアートスタイルを作る方法</title><link>https://freshrimpsushi.github.io/jp/posts/2256/</link><pubDate>Mon, 29 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2256/</guid><description>概要 RecipesBase.jlは、ユーザーが新しい図のスタイルを自分で作れるパッケージだ。Rプログラミング言語でのggplotがそうである</description></item><item><title>Juliaでデータフレームをグループ分けして計算する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2254/</link><pubDate>Thu, 25 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2254/</guid><description>概要 groupby()を使ってグループ別に分け、combine()を使って計算すればいいんだ1。 groupby(df, :colname) :colnameを基準にしてgroupe</description></item><item><title>JuliaでDataFrameの重複した行を削除する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2252/</link><pubDate>Sun, 21 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2252/</guid><description>概要 これを実現するためには、unique()を使えばいい。正確には、重複した行を削除するというよりも、一つだけ残すことだ。 コード using DataFrames WJSN = DataFrame( member</description></item><item><title>Juliaでレイアウトを使ってサブプロットを描く方法</title><link>https://freshrimpsushi.github.io/jp/posts/2250/</link><pubDate>Wed, 17 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2250/</guid><description>概要 Juliaでは、サブプロットに関連するオプションはlayoutオプションを通して制御できる。 整数を入力すると、その数だけのグリッドをうま</description></item><item><title>Juliaで図の凡例の位置を調整する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2248/</link><pubDate>Sat, 13 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2248/</guid><description>概要 1 plot() 関数の legend オプションで、凡例の位置を自由に調整できる。$0$ から $1$ までの値で構成された2-タプルを与えると、正確にその位置に表示される</description></item><item><title>Julia集合の絵のアスペクト比を調整する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2246/</link><pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2246/</guid><description>概要 1 グラフの幅と高さを調整するには、オプションにratioを入れるといい。他の推奨される別名には、aspect_ratios, axis_r</description></item><item><title>JuliaでCSV出力時の文字化け解決方法</title><link>https://freshrimpsushi.github.io/jp/posts/2244/</link><pubDate>Fri, 05 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2244/</guid><description>エラー using DataFrames, CSV example = DataFrame(x = 1:10, 가 = &amp;#34;나다&amp;#34;) CSV.write(&amp;#34;example.csv&amp;#34;, example) JuliaでCSVファイルに出力するとき、上のように韓国語が文字化けする現象が見られ</description></item><item><title>- ジュリアでのテキスト出力装飾パッケージ</title><link>https://freshrimpsushi.github.io/jp/posts/2242/</link><pubDate>Mon, 01 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2242/</guid><description>概要 Juliaでテキスト出力を飾るパッケージとしてCrayons.jlが知られている1。 組み込み関数だけで飾りたい場合は、printstyl</description></item><item><title>Juliaでデータフレームに新しい列を追加する方法</title><link>https://freshrimpsushi.github.io/jp/posts/3273/</link><pubDate>Sun, 31 Jul 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3273/</guid><description>コード 宇宙少女のデータフレームが以下のように与えられたとしよう。 WJSN = DataFrame( member = [&amp;#34;다영&amp;#34;,&amp;#34;다원&amp;#34;,&amp;#34;루</description></item><item><title>Julia集合の画像に線を挿入する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2240/</link><pubDate>Thu, 28 Jul 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2240/</guid><description>コード using Plots scatter(rand(100), randn(100)) plot!([0,1],[0,1]) png(&amp;#34;example1&amp;#34;) plot!([.00,.25,.50],[-2,0,-2]) png(&amp;#34;example2&amp;#34;) θ = 0:0.01:2π plot!(.5 .+ cos.(θ)/3, 1.5sin.(θ)) png(&amp;#34;example3&amp;#34;) このコードを実行して、図に線分を入れる方法を見て</description></item><item><title>Juliaでデータフレームを並べ替える方法</title><link>https://freshrimpsushi.github.io/jp/posts/2238/</link><pubDate>Sun, 24 Jul 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2238/</guid><description>コード using DataFrames Unit1 = DataFrame( member = [&amp;#34;다영&amp;#34;,&amp;#34;루다&amp;#34;,&amp;#34;수빈&amp;#34;,&amp;#34;진숙&amp;#34;], birth = [99,97,96,99], height = [161,157,159,162]</description></item><item><title>Juliaでデータフレームに新しい行を挿入する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2236/</link><pubDate>Wed, 20 Jul 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2236/</guid><description>コード using DataFrames Unit1 = DataFrame( member = [&amp;#34;다영&amp;#34;,&amp;#34;루다&amp;#34;,&amp;#34;수빈&amp;#34;,&amp;#34;진숙&amp;#34;], birth = [99,97,96,99], height = [161,157,159,162]</description></item><item><title>Juliaで無限大を使う方法</title><link>https://freshrimpsushi.github.io/jp/posts/2234/</link><pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2234/</guid><description>概要 Infinities.jlは、Juliaで無限大記号を使用できるように支援するパッケージだ1。科学計算のコーディングにおいて、無限大は意</description></item><item><title>Juliaで特定バージョンのパッケージをインストールする方法</title><link>https://freshrimpsushi.github.io/jp/posts/2232/</link><pubDate>Tue, 12 Jul 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2232/</guid><description>ガイド 1 (@v1.6) pkg&amp;gt; status JuMP Status `C:\Users\rmsms\.julia\environments\v1.6\Project.toml` [4076af6c] JuMP v0.20.0 REPLで]キーを押すとパッケージモードに入る。例えば、v0.20.0のバージョンのパッケージをv0.21にバージ</description></item><item><title>Juliaで空のデータフレームを作成する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2230/</link><pubDate>Fri, 08 Jul 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2230/</guid><description>概要 多くの言語でデータフレームがサポートされているにも関わらず、毎回新しくてイライラすることが空の配列の作成です。 コード タイプ指定 julia&amp;gt; using DataFrames julia&amp;gt; df1</description></item><item><title>Juliaで階層的クラスタリングを行う方法</title><link>https://freshrimpsushi.github.io/jp/posts/3259/</link><pubDate>Sun, 03 Jul 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3259/</guid><description>説明 Clustering.jl パッケージの hclust() 関数を使えばいい。 hclust(d::AbstractMatrix; [linkage], [uplo], [branchorder]) 距離行列 を入力として受け取り、階層的クラスタリング の結果を返す。クラスタ間の距離のデフォルトは</description></item><item><title>Julia文字列で特定のパターン位置を見つける方法</title><link>https://freshrimpsushi.github.io/jp/posts/2226/</link><pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2226/</guid><description>コード julia&amp;gt; findfirst(&amp;#34;li&amp;#34;, &amp;#34;multicolinearlity&amp;#34;) 8:9 julia&amp;gt; findlast(&amp;#34;li&amp;#34;, &amp;#34;multicolinearlity&amp;#34;) 14:15 julia&amp;gt; findnext(&amp;#34;l&amp;#34;, &amp;#34;multicolinearlity&amp;#34;, 1) 3:3 julia&amp;gt; findnext(&amp;#34;l&amp;#34;, &amp;#34;multicolinearlity&amp;#34;, 4) 8:8 julia&amp;gt; findnext(&amp;#34;l&amp;#34;, &amp;#34;multicolinearlity&amp;#34;, 9) 14:14 julia&amp;gt; findfirst(r&amp;#34;t.+t&amp;#34;, &amp;#34;multicolinearlity&amp;#34;) 4:16 findfirst(pattern, A) 文字列Aでpatternに合致する区間をRangeでリターンする。 パターンに</description></item><item><title>Juliaでデンドログラムを描く方法</title><link>https://freshrimpsushi.github.io/jp/posts/3257/</link><pubDate>Wed, 29 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3257/</guid><description>説明 与えられたデータをhclust()で階層的クラスタリングした後、plot()関数を使ってデンドログラムを描こうとすると、以下のようなエラ</description></item><item><title>Juliaで特定の文字列を含むかどうかを確認する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2224/</link><pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2224/</guid><description>コード julia&amp;gt; contains(&amp;#34;qwerty&amp;#34;, &amp;#34;er&amp;#34;) true julia&amp;gt; contains(&amp;#34;qwerty&amp;#34;, &amp;#34;et&amp;#34;) false julia&amp;gt; contains(&amp;#34;qwerty&amp;#34;, r&amp;#34;q?&amp;#34;) true contains(haystack::AbstractString, needle) haystackにneedleが含まれているかをブーリアンで返す。needleにはr&amp;quot;...&amp;q</description></item><item><title>Juliaでの因数分解および素数関数の使用方法</title><link>https://freshrimpsushi.github.io/jp/posts/2222/</link><pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2222/</guid><description>概要 Primes.jlは、素数関連の関数や素因数分解を取り扱うパッケージだ。解析的整数論に関する関数の実装はまだ不足している。 パッケージの全</description></item><item><title>Juliaで多項式を使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2220/</link><pubDate>Sat, 18 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2220/</guid><description>概要 Polynomials.jlは多項式関数の表現や計算を含むパッケージだ。数学的に単純な多項式だからコーディングも簡単に考えがちだが、実際</description></item><item><title>Juliaで文字列を結合する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2218/</link><pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2218/</guid><description>コード 文字列の連結 * julia&amp;gt; &amp;#34;oh&amp;#34; * &amp;#34;my&amp;#34; * &amp;#34;girl&amp;#34; &amp;#34;ohmygirl&amp;#34; Pythonの+に相当する。 複数の文字列を連結する string() julia&amp;gt; string(&amp;#34;oh&amp;#34;,&amp;#34;my&amp;#34;, &amp;#34;girl&amp;#34;) &amp;#34;ohmygirl&amp;#34; Rのpaste0()に相当する。 文字列のリスト</description></item><item><title>Juliaプロットで特定のデータラベルを隠す方法</title><link>https://freshrimpsushi.github.io/jp/posts/2216/</link><pubDate>Fri, 10 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2216/</guid><description>コード 1 using Plots x = rand(30) y = rand(30) z = rand(30) plot(x) plot!(y) plot!(z) png(&amp;#34;result1&amp;#34;) 上のように、特定のデータだけ凡例に表示させたくない場合がある。 label = &amp;quot;&amp;quot; plot(x, label = &amp;#34;&amp;#34;) plot!(y) png(&amp;#34;result2&amp;#34;) そんな時は、label</description></item><item><title>Juliaプロットにテキストを挿入する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2214/</link><pubDate>Mon, 06 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2214/</guid><description>コード 1 annotate!()を使えばいいんだ。以下のコードはブラウン運動で最大点と最小点をマークした絵を描くコードだよ。 using Plots cd(@__DIR__) data = cumsum(randn(100)) plot(data, color =</description></item><item><title>Juliaプロットに韓国語テキストを挿入する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2212/</link><pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2212/</guid><description>環境 OS: Windows julia: v1.6.2 エラー julia&amp;gt; plot(data, color = :black, label = &amp;#34;값&amp;#34;, title = &amp;#34;브라운모션&amp;#34;) GKS: glyph missing from current font: 48652 GKS: glyph missing from current font: 46972 GKS: glyph missing from current font: 50868 GKS: glyph missing</description></item><item><title>PythonのようにJuliaで文字列を扱う方法</title><link>https://freshrimpsushi.github.io/jp/posts/2205/</link><pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2205/</guid><description>コード 1 2 3 julia&amp;gt; replace(&amp;#34;qwerty&amp;#34;, &amp;#34;q&amp;#34;=&amp;gt;&amp;#34;Q&amp;#34;) &amp;#34;Qwerty&amp;#34; julia&amp;gt; join(&amp;#34;qwerty&amp;#34;, &amp;#34;,&amp;#34;) &amp;#34;q,w,e,r,t,y&amp;#34; julia&amp;gt; split(&amp;#34;qwerty&amp;#34;, &amp;#34;&amp;#34;) 6-element Vector{SubString{String}}: &amp;#34;q&amp;#34; &amp;#34;w&amp;#34; &amp;#34;e&amp;#34; &amp;#34;r&amp;#34; &amp;#34;t&amp;#34; &amp;#34;y&amp;#34; Juliaは文字列処理に特出している言語ではないけど、そのせいか、Pythonをたくさん真</description></item><item><title>Juliaで近似値をチェックする方法</title><link>https://freshrimpsushi.github.io/jp/posts/2203/</link><pubDate>Sun, 15 May 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2203/</guid><description>コード 比較演算子として$\approx$を使えば、二つの値が十分に似ている時だけ真を返す。≈は$\TeX$でと同じように、\approxと入</description></item><item><title>Juliaから：辞書とペア</title><link>https://freshrimpsushi.github.io/jp/posts/2201/</link><pubDate>Wed, 11 May 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2201/</guid><description>コード 1 julia&amp;gt; d = Dict(&amp;#34;A&amp;#34;=&amp;gt;1, &amp;#34;B&amp;#34;=&amp;gt;2) Dict{String, Int64} with 2 entries: &amp;#34;B&amp;#34; =&amp;gt; 2 &amp;#34;A&amp;#34; =&amp;gt; 1 julia&amp;gt; push!(d,(&amp;#34;C&amp;#34;,3)) ERROR: MethodError: no method matching push!(::Dict{String, Int64}, ::Tuple{String, Int64}) julia&amp;gt; push!(d,&amp;#34;C&amp;#34; =&amp;gt; 3) Dict{String, Int64} with 3 entries: &amp;#34;B&amp;#34; =&amp;gt; 2 &amp;#34;A&amp;#34; =&amp;gt; 1 &amp;#34;C&amp;#34; =&amp;gt; 3 julia&amp;gt; typeof(&amp;#34;C&amp;#34; =&amp;gt; 3) Pair{String, Int64} Juliaの辞書diction</description></item><item><title>Juliaで.matのようにデータを保存する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2199/</link><pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2199/</guid><description>概要 JLD.jlは、Juliaを使用している間に発生する一時データを保存することができるパッケージだ1。純粋なJuliaプロジェクトを進行し</description></item><item><title>Juliaのループでインデックスと値の両方を参照する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2197/</link><pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2197/</guid><description>コード 1 Base.Iterators.enumerate() は、Pythonのように配列のインデックスと値の両方を参照できるイテレーターiteratorを返す。 julia&amp;gt; x = [3,5,4,1,2] 5-element Vector{Int64}: 3 5 4 1 2 julia&amp;gt; for (idx, value)</description></item><item><title>Juliaでのシンボル</title><link>https://freshrimpsushi.github.io/jp/posts/2195/</link><pubDate>Fri, 29 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2195/</guid><description>概要 Juliaに初めて接すると、戸惑うことも少なくないのがシンボルsymbolデータタイプである。シンボルは冒頭に:を付けて使用され、内部デ</description></item><item><title>Juliaで配列の要素がリストに属しているかを確認する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2193/</link><pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2193/</guid><description>ガイド 1 julia&amp;gt; x = rand(&amp;#39;a&amp;#39;:&amp;#39;c&amp;#39;, 10) 10-element Vector{Char}: &amp;#39;a&amp;#39;: ASCII/Unicode U+0061 (category Ll: Letter, lowercase) &amp;#39;a&amp;#39;: ASCII/Unicode U+0061 (category Ll: Letter, lowercase) &amp;#39;b&amp;#39;: ASCII/Unicode U+0062 (category Ll: Letter, lowercase) &amp;#39;c&amp;#39;: ASCII/Unicode U+0063 (category Ll: Letter, lowercase) &amp;#39;b&amp;#39;: ASCII/Unicode U+0062 (category Ll: Letter, lowercase) &amp;#39;c&amp;#39;: ASCII/Unicode U+0063 (category Ll: Letter, lowercase) &amp;#39;c&amp;#39;: ASCII/Unicode U+0063 (category Ll: Letter, lowercase) &amp;#39;c&amp;#39;: ASCII/Unicode U+0063 (category Ll: Letter, lowercase) &amp;#39;b&amp;#39;: ASCII/Unicode U+0062</description></item><item><title>Juliaにおいて多次元配列を直接定義する方法</title><link>https://freshrimpsushi.github.io/jp/posts/3223/</link><pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3223/</guid><description>説明 1次元配列（ベクトル）は次のように定義される。 julia&amp;gt; A = [1; 2; 3] 3-element Vector{Int64}: 1 2 3 ここで、;は第一次元を基準に次の要素に移る意味を持つ。これを一般化す</description></item><item><title>Juliaでエレガントなループを使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2191/</link><pubDate>Thu, 21 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2191/</guid><description>ガイド while while文は他の言語と変わらない。 julia&amp;gt; while x &amp;lt; 10 x += 1 print(&amp;#34;▷eq1◁i - &amp;#34;) end 1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9 - 10 -</description></item><item><title>Juliaパッケージ管理モードで使用可能なコマンドのリスト</title><link>https://freshrimpsushi.github.io/jp/posts/3217/</link><pubDate>Sun, 10 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3217/</guid><description>説明 Julia REPLで右の角括弧 ] を入力すると、パッケージ管理モードに切り替えることができる。パッケージ管理モードで利用可能なコマンドは以下の通り</description></item><item><title>Juliaでnpyファイルを読み込む方法</title><link>https://freshrimpsushi.github.io/jp/posts/3215/</link><pubDate>Wed, 06 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3215/</guid><description>説明 この写真は、Pythonでファントム$f$のラドン変換$\mathcal{R}f$を計算し、それを*.npyファイルとして保存する過程を</description></item><item><title>Juliaでヒートマップにプロットを重ねて描く方法</title><link>https://freshrimpsushi.github.io/jp/posts/3213/</link><pubDate>Sat, 02 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3213/</guid><description>コード 例えば、$(5,5)$の配列のヒートマップの上に、$0$から$2\pi$までのサイン曲線を描きたいとしよう。こんなコードを書きたくなる</description></item><item><title>JuliaでプロットにTeXを使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2180/</link><pubDate>Wed, 30 Mar 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2180/</guid><description>コード 1 LaTeXStrings ライブラリを使うには、文字列の前に L を付けて、L&amp;quot;...&amp;quot; のように書く。 @time using Plots @time using LaTeXStrings plot(0:0.1:2π</description></item><item><title>Juliaで異なるサイズのベクトル成分ごとに操作する方法</title><link>https://freshrimpsushi.github.io/jp/posts/3207/</link><pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3207/</guid><description>説明 julia&amp;gt; x = [1 2 3] 1×3 Matrix{Int64}: 1 2 3 julia&amp;gt; y = [1 2 3 4] 1×4 Matrix{Int64}: 1 2 3 4 julia&amp;gt; x .+ y ERROR: DimensionMismatch サイズが異なる二つのベクトルは、基本的に要素ごとの演算を行うことがで</description></item><item><title>Juliaでグラフィックスの背景を透明にする方法</title><link>https://freshrimpsushi.github.io/jp/posts/2173/</link><pubDate>Wed, 16 Mar 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2173/</guid><description>コード 1 ブラウザがダークモードになっていれば、背景が透明になっているのをはっきりと確認できる。 background_color オプションに :transparent シンボルを入れればいいんだ。*</description></item><item><title>Juliaでの曲線から特定の値まで/二つの曲線の間/閉曲線の内部の塗り方</title><link>https://freshrimpsushi.github.io/jp/posts/3203/</link><pubDate>Sun, 13 Mar 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3203/</guid><description>特定の値まで塗る1 plot()の属性でfillrange=a、fillalpha=b、fillcolor=:colorを使うと、プロットされ</description></item><item><title>Juliaにおける==と===の違い</title><link>https://freshrimpsushi.github.io/jp/posts/2157/</link><pubDate>Sat, 12 Feb 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2157/</guid><description>コード 1 ==は値が同じかどうかを比較し、===は比較する値が可変mutableかどうかによって異なる動作をする。 Mutable: 二項が同じオブジェクトを参</description></item><item><title>Juliaでビット配列を反転させる方法</title><link>https://freshrimpsushi.github.io/jp/posts/2149/</link><pubDate>Thu, 27 Jan 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2149/</guid><description>コード 1 すごく簡単なんだけど、否定演算子の ! と ~ を単項演算子じゃなくて関数として見てしまって、!. や ~. を使う間違いをよくするよ。.! や .~ と書</description></item><item><title>Juliaでfile.choose()のようにダイアログボックスを開いてファイルを選択する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2143/</link><pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2143/</guid><description>コード 1 using Gtk file_name = open_dialog(&amp;#34;파일 열기&amp;#34;) 最初の引数として与えられる文字列は、ダイアログのタイトルだ。実行すると</description></item><item><title>Juliaで小数点以下特定の桁で丸める方法</title><link>https://freshrimpsushi.github.io/jp/posts/2133/</link><pubDate>Sun, 26 Dec 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2133/</guid><description>コード 実のところ、Juliaは文字列のフォーマットなどが特に便利な言語ではない。コンソールに出力する際に文字列自体の機能を使う方法もあるが、</description></item><item><title>Juliaでヒートマップの色範囲を指定する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2126/</link><pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2126/</guid><description>コード 1 ヒートマップを描く時、数値に応じて値のスケールが固定されないと困ることがある。基本のヒートマップ関数でclimオプションを通じて色の</description></item><item><title>Juliaでzfill()を使う方法</title><link>https://freshrimpsushi.github.io/jp/posts/2124/</link><pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2124/</guid><description>概要 1 Pythonでは、zfill()は文字列クラスのメソッドとして、左側を0で埋める機能を持っている。しかし、Juliaではもっと汎用的で</description></item><item><title>Juliaで構造体の属性を確認する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2120/</link><pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2120/</guid><description>コード propertynames() propertynames()関数で確認するといい1。Juliaにはクラスがなく、構造体だけが存在するから2、この関数で返されるすべ</description></item><item><title>Juliaでの微分の求め方</title><link>https://freshrimpsushi.github.io/jp/posts/3135/</link><pubDate>Thu, 28 Oct 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3135/</guid><description>概要1 名前はCalculus.jlだけど、積分はサポートしない。 機械学習などで話される自動微分が必要ならZygote.jlパッケージを参照し</description></item><item><title>Juliaで特定の値で埋めた配列を作る方法</title><link>https://freshrimpsushi.github.io/jp/posts/2101/</link><pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2101/</guid><description>コード fill() 関数を使えばいい。Rの rep() 関数と似た機能をする。</description></item><item><title>JuliaでSHPファイルを読む方法</title><link>https://freshrimpsushi.github.io/jp/posts/2097/</link><pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2097/</guid><description>コード XsDB_주거인구_100M_TM.shpというshpファイルを読み込むコードは以下の通りだ。 using Shapefile cd(@__DIR__) path = &amp;#34;XsDB_주거인구_</description></item><item><title>Juliaで小数点以下を切り捨てて整数に変換する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2095/</link><pubDate>Mon, 11 Oct 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2095/</guid><description>概要 trunc関数を使うには、第一引数にIntを入れるだけだ。 コード julia&amp;gt; @time for t in 1:10^8 Int64(ceil(t/1000)) end 0.189653 seconds julia&amp;gt; @time for t in 1:10^8 trunc(Int64, ceil(t/1000)) end 0.128472 seconds 二つのループは全く同じ機能をす</description></item><item><title>Juliaでデータフレームの列名を変更する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2093/</link><pubDate>Thu, 07 Oct 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2093/</guid><description>概要 rename!() 関数を使って変更するといい1。 文字列のリストを与えて一度に変更する方法もあるし、個別に変更する方法もある。 コード using DataFrames df = DataFrame(rand(1:9, 10, 3), :auto) rename!(df, [&amp;#34;X&amp;#34;, &amp;#34;Y&amp;#34;,</description></item><item><title>JuliaでNearstNeighbors.jlを使用して距離を素早く計算する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2088/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2088/</guid><description>概要 $n$個の座標同士の距離を計算するにあたり、行列を作る必要はなく、単に距離を計算する場合、多次元検索に有利なデータ構造であるk-dツリー</description></item><item><title>Juliaで2次元配列をCSVファイルに出力する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2073/</link><pubDate>Sat, 28 Aug 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2073/</guid><description>コード using CSV, DataFrames A = rand(1:10, 10) B = zeros(10) AB = DataFrame(hcat(A,B), [&amp;#34;A&amp;#34;, &amp;#34;B&amp;#34;]) CSV.write(&amp;#34;AB.csv&amp;#34;, AB) CSVパッケージのwrite関数を通じて簡単に2次元配列を出力できる。A, Bは1次元配列で、hcat</description></item><item><title>Julia変数名にグリーク文字と添え字を書く方法</title><link>https://freshrimpsushi.github.io/jp/posts/2065/</link><pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2065/</guid><description>概要 Juliaでは、変数名にユニコード(UTF-8)を許可している。だから、ギリシャ文字はもちろん、上付き文字、下付き文字、さらには韓国語や</description></item><item><title>Juliaで変数の値を便利に出力する方法、補間</title><link>https://freshrimpsushi.github.io/jp/posts/2041/</link><pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2041/</guid><description>概要 Juliaの便利な機能である補間法interpolationについて説明する。インターポレーションをうまく利用すると、出力文を簡単かつき</description></item><item><title>WindowsのCMDとPowerShellでJuliaを使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2036/</link><pubDate>Tue, 15 Jun 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2036/</guid><description>ガイド ステップ0. julia 1.6 以上をインストール バージョン1.6からは、インストール過程で環境変数に追加できる。示されたオプションをチェックしてイン</description></item><item><title>Juliaのメタプログラミング</title><link>https://freshrimpsushi.github.io/jp/posts/2024/</link><pubDate>Sat, 22 May 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2024/</guid><description>コード 1 ジュリアではメタプログラミングを言語レベルでサポートしている。以下は文字列をコードそのものとして読み込み、実行した結果だ。 julia&amp;gt; text = &amp;#34;f(x) =</description></item><item><title>Juliaで配列をフラット化する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2022/</link><pubDate>Tue, 18 May 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2022/</guid><description>コード vec() 関数を使えばいい。 julia&amp;gt; A = rand(0:9, 3,4) 3×4 Array{Int64,2}: 6 8 7 3 2 9 3 2 5 0 6 7 julia&amp;gt; vec(A) 12-element Array{Int64,1}: 6 2 5 8 9 0 7 3 6 3 2 7 人間の目には、1次元配列と同じように見え</description></item><item><title>Juliaで距離行列計算を最適化する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2020/</link><pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2020/</guid><description>結論 $n$ 個の座標間の距離を計算しようとする。 全ての座標間を計算する必要がなければ、グループに分けて長方形の距離行列を作ればいい。 長方形の距離行</description></item><item><title>Juliaで重み付けとランダムサンプリングをする方法</title><link>https://freshrimpsushi.github.io/jp/posts/2018/</link><pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2018/</guid><description>概要 Juliaで、Rのsample()やPythonパッケージnumpyのrandom.choice()と同じ役割をするsample()関数</description></item><item><title>Juliaでの文字と整数の等価オペレータ==の速度比較</title><link>https://freshrimpsushi.github.io/jp/posts/2016/</link><pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2016/</guid><description>結論 配列の各要素をEqualオペレータ==で比較すると、整数よりもCharの方が早い。 速度比較 julia&amp;gt; integer = rand(1:5, N); print(typeof(integer)) Array{Int64,1} julia&amp;gt; character = rand([&amp;#39;S&amp;#39;,&amp;#39;E&amp;#39;,&amp;#39;I&amp;#39;,&amp;#39;R&amp;#39;,&amp;#39;D&amp;#39;], N); print(typeof(character)) Array{Char,1} julia&amp;gt; @time integer .== 1; 0.009222 seconds (6 allocations:</description></item><item><title>Juliaパッケージのインストール時に\General\registry.toml: No such file or directoryというエラーを解決</title><link>https://freshrimpsushi.github.io/jp/posts/2069/</link><pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2069/</guid><description>エラー ERROR: SystemError: opening file &amp;quot;C:\\Users\\rmsms\\.julia\\registries\\General\\registry.toml&amp;quot;: No such file or directory 原因 人を本当にイライラさせるエラーだけど、言葉通りこのパスにRegistry.tomlファイルがなくて発生するエラ</description></item><item><title>WindowsでJuliaの最新バージョンをインストールする方法</title><link>https://freshrimpsushi.github.io/jp/posts/2067/</link><pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2067/</guid><description>ガイド ジュリア バージョン 1.10 以降 ターミナルで上記のように winget install julia -s msstore コマンドを入力すればいい。 ジュリア バージョン 1.10 未満 Step 1. ジュリアインストール ジ</description></item><item><title>Juliaで16進数RGBコード（HEX）を使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1921/</link><pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1921/</guid><description>コード Juliaで色を取り扱うために提供されるパッケージはColors.jlだ。可視化パッケージのPlots.jlを読み込めば、Colors</description></item><item><title>Juliaでのデータフレームと2次元配列間の変換方法</title><link>https://freshrimpsushi.github.io/jp/posts/1930/</link><pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1930/</guid><description>環境 OS: Windows11 バージョン: Julia 1.9.0, DataFrames v1.5.0</description></item><item><title>Juliaで *.csvファイルを読み込む方法</title><link>https://freshrimpsushi.github.io/jp/posts/1923/</link><pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1923/</guid><description>ガイド 旧バージョン julia v1.5.0では、*.csvファイルを以下のように読み込んだ。 実際、Juliaはまだデータ入力に特別便利な言語ではない。</description></item><item><title>WindowsでJuliaの並列計算に使用するスレッド数を変更する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1933/</link><pubDate>Sat, 23 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1933/</guid><description>ガイド Juliaでは並列計算が日常的に使用されるため、場合によってはコンピュータの全リソースを計算に集中させる必要がある。スレッド数を変更す</description></item><item><title>Juliaで実行されるコードファイルの位置を確認する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1935/</link><pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1935/</guid><description>ガイド ジュリアを使っている人なら、サーバーを含む複数のオペレーティングシステムやコンピューターを使うことに慣れている可能性が高い。ファイル入</description></item><item><title>Linux上のJuliaでの並列計算に使用するスレッド数の変更方法</title><link>https://freshrimpsushi.github.io/jp/posts/1937/</link><pubDate>Thu, 21 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1937/</guid><description>ガイド Juliaでは、並列計算を日常的に使用するため、場合によってはコンピューターの全てのリソースを計算に集中させる必要がある。スレッド数を</description></item><item><title>Juliaで合成関数を使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1942/</link><pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1942/</guid><description>コード julia&amp;gt; f(x) = 2x + 1 f (generic function with 1 method) julia&amp;gt; g(x) = x^2 g (generic function with 1 method) julia&amp;gt; (g ∘ f)(3) 49 説明 Juliaでは、関数の合成はプログラミングでのパイプオペレーターに似ている。</description></item><item><title>JuliaでGIFを作る方法</title><link>https://freshrimpsushi.github.io/jp/posts/1863/</link><pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1863/</guid><description>コード もともとさくらすし店では、もっと詳しい説明を加えることが多いが、ジュリアでアニメGIFを作るのがどれほど簡単かを強調するために、できる</description></item><item><title>Juliaで距離行列を計算する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1799/</link><pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1799/</guid><description>概要 距離行列distance matrixは、パーティクルダイナミクスparticle dynamicsやムービングエージェントmoving Ag</description></item><item><title>Juliaで空の配列を作成する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1797/</link><pubDate>Thu, 19 Nov 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1797/</guid><description>コード サイズ指定 julia&amp;gt; empty = Array{Float64, 2}(undef, 3, 4) 3×4 Array{Float64,2}: 3.39519e-313 3.18299e-313 4.66839e-313 1.061e-313 4.03179e-313 5.51719e-313 1.6976e-313 4.24399e-314 2.97079e-313 4.66839e-313 7.00259e-313 5.0e-324 上のコードを実行すると、空の配列が作成される。たまに1.76297e-315の</description></item><item><title>LinuxでJuliaの最新バージョンをインストールする方法</title><link>https://freshrimpsushi.github.io/jp/posts/1511/</link><pubDate>Mon, 17 Feb 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1511/</guid><description>ガイド ジュリア バージョン 1.10 以降 ターミナルで上記のように curl -fsSL https://install.julialang.org | sh コマンドを入力すればよい。 ジュリア バージョン 1.10 以前 ステップ 1. ジュリア ダウンロ</description></item><item><title>Juliaでの並列処理の方法</title><link>https://freshrimpsushi.github.io/jp/posts/1474/</link><pubDate>Sat, 08 Feb 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1474/</guid><description>コード 最初に、生えび寿司レストランには詳しい説明が含まれているが、ジュリアは並列処理をどれだけ容易にできるかを強調するために、わざと説明を省</description></item><item><title>Juliaの強力な便利機能、マクロ</title><link>https://freshrimpsushi.github.io/jp/posts/1454/</link><pubDate>Wed, 15 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1454/</guid><description>概要 マクロは、Juliaでコーディングする時の便利機能であり、スコープの前に置いて実行される。例えば、自分のプログラムがどれくらいの時間を消</description></item><item><title>Juliaでパイプオペレータを使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1450/</link><pubDate>Sat, 11 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1450/</guid><description>概要 ジュリアはデータを扱う上での強みを生かして、パイプラインオペレーターをサポートしている。 コード julia&amp;gt; (1:5) .|&amp;gt; (x -&amp;gt; sqrt(x+2)) .|&amp;gt; sin |&amp;gt; minimum 0.4757718381527513 julia&amp;gt; minimum(sin.((x -&amp;gt; sqrt(x+2)).(1:5))) 0.4757718381527513 上のサンプ</description></item><item><title>Juliaでのラムダ式</title><link>https://freshrimpsushi.github.io/jp/posts/1448/</link><pubDate>Tue, 07 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1448/</guid><description>概要 Juliaでは、ラムダ式は以下のように定義される。 (x -&amp;gt; 3x^2 - 2x + 3)(1) これは、匿名関数$\lambda : \mathbb{Z} \to \mathbb{Z}$を定義し、そ</description></item><item><title>Juliaで画像サイズを変更する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1466/</link><pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1466/</guid><description>画像サイズの変更 Images パッケージの imresize を使えばいい。関数名はMatlabと同じだ。 imresize(X, ratio=a): 配列Xをa倍に調整した画像を返す。Matlabとは違って、た</description></item><item><title>Juliaで画像を読み込み、行列として保存する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1446/</link><pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1446/</guid><description>コード using Images cd(&amp;#34;C:/Users/rmsms/OneDrive/examples&amp;#34;) pwd() example = load(&amp;#34;example.jpg&amp;#34;) typeof(example) size(example) gray1 = Gray.(example) typeof(gray1) size(gray1) M = convert(Array{Float64},gray1) typeof(M) size(M) colorview(Gray, M.^(1/2)) save(&amp;#34;rgb.png&amp;#34;, colorview(RGB, example)) save(&amp;#34;gray1.png&amp;#34;, colorview(Gray, gray1)) save(&amp;#34;gray2.png&amp;#34;, colorview(Gray, transpose(gray1))) save(&amp;#34;gray3.png&amp;#34;, colorview(Gray, M.^(1/2))) 上から順にサンプルコードを簡単に理解してみよう: cd() : Change Directory, 作業ディレク</description></item><item><title>Juliaで画像配列を回転する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1462/</link><pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1462/</guid><description>画像の回転 imrotate(X, theta) : 配列Xをthetaラジアンで回転させる。ここで注意すべき点は、角度の単位が度（$^{\circ})$のMATLABと異なり、</description></item><item><title>Juliaで配列をヒートマップ画像として出力保存する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1459/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1459/</guid><description>Heatmap Plots パッケージのheatmap関数を使えば、2次元配列をヒートマップ画像として出力でき、savefig関数でその画像を保存できる。@__DI</description></item><item><title>Juliaでの2次元配列操作の関数들</title><link>https://freshrimpsushi.github.io/jp/posts/1460/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1460/</guid><description>$A = \begin{pmatrix} 1 &amp;amp; 2 &amp;amp; 1 \\ 0 &amp;amp; 3 &amp;amp; 0 \\ 2 &amp;amp; 3 &amp;amp; 4\end{pmatrix}$としよう。 転置行列 julia&amp;gt; A =[1 2 1; 0 3 0; 2 3 4] 3×3 Array{Int64,2}: 1 2 1 0 3 0 2 3 4 julia&amp;gt; transpose(A) 3</description></item><item><title>Juliaでの集合データ型と演算子</title><link>https://freshrimpsushi.github.io/jp/posts/1442/</link><pubDate>Sun, 29 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1442/</guid><description>概要 Juliaでは、Pythonと同様にセットデータ型をサポートしています。元来のセットデータ型がそうであるように、使用する人にとっては非常</description></item><item><title>Juliaにおける配列のスライシングとインデックス化</title><link>https://freshrimpsushi.github.io/jp/posts/1437/</link><pubDate>Thu, 26 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1437/</guid><description>概要 Juliaは、R、Python、マトラボの利点が混在する言語だ。配列はプログラミングの基本であり、その利用で複数の言語の痕跡が見られる。</description></item><item><title>Juliaで配列を平行移動する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1453/</link><pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1453/</guid><description>説明 circshifr(A, (n,m))を使用すると、配列Aの行を$n$カン下にシフトさせ、列を$m$カン右にシフトさせることができる。(n,m)は整数から成るタ</description></item><item><title>Juliaでベクターを生成する様々な方法</title><link>https://freshrimpsushi.github.io/jp/posts/1452/</link><pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1452/</guid><description>코드 julia&amp;gt; x1=[1 2 3] 1×3 Array{Int64,2}: 1 2 3 julia&amp;gt; x2=[1, 2, 3] 3-element Array{Int64,1}: 1 2 3 julia&amp;gt; x3=[i for i in 1:3] 3-element Array{Int64,1}: 1 2 3 julia&amp;gt; x4=[i for i in 1:3:10] 4-element Array{Int64,1}: 1 4 7 10 julia&amp;gt; x5=[i for i in 1:3:11] 4-element Array{Int64,1}: 1 4 7 10 x1は2次元配列です。行ベ</description></item><item><title>Juliaでパッケージをインストールして使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1416/</link><pubDate>Sun, 08 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1416/</guid><description>方法1 using LinearAlgebra using Pkg Pkg.add(&amp;#34;Plots&amp;#34;) Pkg.add(&amp;#34;Distributions&amp;#34;) using Plots 上のコードは、LinearAlgebraパッケージとPkgパッケージを読み込むこと、そして.add()関数を使ってPl</description></item><item><title>줄리아의 타입과 애노테이션</title><link>https://freshrimpsushi.github.io/jp/posts/1379/</link><pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1379/</guid><description>コード julia&amp;gt; typeof(0) Int64 julia&amp;gt; typeof(0.0) Float64 julia&amp;gt; typeof(0 == 0.0) Bool julia&amp;gt; typeof(Bool) DataType julia&amp;gt; typeof(NaN) Float64 julia&amp;gt; typeof(Inf) Float64 julia&amp;gt; typeof(&amp;#39;O&amp;#39;) Char julia&amp;gt; typeof(&amp;#34;Ohmygirl&amp;#34;) String julia&amp;gt; typeof(&amp;#34;O&amp;#34;) String Juliaには様々なタイプが実装されている。$0$と$0.0$は同じ$0$だ</description></item><item><title>Juliaプログラミング言語</title><link>https://freshrimpsushi.github.io/jp/posts/1374/</link><pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1374/</guid><description>概要 ジュリアはMITで開発され、2012年に公開されたプログラミング言語で、高い生産性と速度を目指している。Cやフォートランと同等の速度を実</description></item></channel></rss>