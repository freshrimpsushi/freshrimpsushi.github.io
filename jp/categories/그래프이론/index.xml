<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>그래프이론 on 生エビ寿司屋</title>
    <link>https://freshrimpsushi.github.io/jp/categories/%EA%B7%B8%EB%9E%98%ED%94%84%EC%9D%B4%EB%A1%A0/</link>
    <description>Recent content in 그래프이론 on 生エビ寿司屋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Fri, 16 Feb 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://freshrimpsushi.github.io/jp/categories/%EA%B7%B8%EB%9E%98%ED%94%84%EC%9D%B4%EB%A1%A0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ネットワーク理論における媒介中心性</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2524/</link>
      <pubDate>Fri, 16 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2524/</guid>
      <description>定義 1 ストレス中心性 ネットワーク $\left( V, E \right)$ において二つのノード $s,t \in V$ を繋ぐ最短パスの数を $\sigma_{st} = \sigma_{ts}$ とし、特に $s,t$ を繋ぐパスの中で別のノード $v \in V$ を含</description>
    </item>
    <item>
      <title>ネットワーク理論におけるストレス中心性</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2522/</link>
      <pubDate>Mon, 12 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2522/</guid>
      <description>定義 1 ネットワーク $\left( V, E \right)$ で二つのノード $s,t \in V$ をつなぐ最短距離のパスの数を $\sigma_{st} = \sigma_{ts}$ とし、特に $s,t$ をつなぐパスの中で別のノード $v \in V$ を含むパスの数</description>
    </item>
    <item>
      <title>ネットワーク理論における次数中心性</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2520/</link>
      <pubDate>Thu, 08 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2520/</guid>
      <description>定義 1 あるネットワーク $G (V, E)$ の各ノード $v \in V$ に対して、以下を度中心性Degree Centralityという。 $$ \deg v $$ 説明 中心性 中心性Cent</description>
    </item>
    <item>
      <title>ユークリッドグラフ</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2396/</link>
      <pubDate>Mon, 05 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2396/</guid>
      <description>定義 1 簡単な定義 ユークリッド空間の有限部分集合 $V \subset \mathbb{R}^{p}$ とカットオフ$\delta \ge 0$ が与えられているとする。ユークリッドグラフは、$V$ を頂点</description>
    </item>
    <item>
      <title>NetworkXでのGEXFファイルの読み書き</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3352/</link>
      <pubDate>Sat, 07 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3352/</guid>
      <description>説明1 2 GEXFはGraph Exchange XML Formatの略で、グラフ構造を説明するための言語だ。Gephiプロジェクトと一緒に始まったという説明を見る</description>
    </item>
    <item>
      <title>ジュリアのグラフ分析パッケージ Graphs.jl</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3350/</link>
      <pubDate>Tue, 03 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3350/</guid>
      <description>紹介 Graphs.jlは、PythonのNetworkXと同じようにグラフ(ネットワーク)分析のためのパッケージだ。LightGraphs.</description>
    </item>
    <item>
      <title>Pythonのグラフ（ネットワーク）分析パッケージNetworkX</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3348/</link>
      <pubDate>Fri, 30 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3348/</guid>
      <description>紹介 NetworkXはグラフ(ネットワーク)分析のためのPythonパッケージだ。 コード インストール ターミナルで次のように入力する。 #설치 &amp;gt;</description>
    </item>
    <item>
      <title>グラフ（ネットワーク）の可視化及び分析プログラムGephi</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3346/</link>
      <pubDate>Mon, 26 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3346/</guid>
      <description>はじめに Gephiは、グラフ(ネットワーク)分析のためのオープンソースで、無料のプログラムで、特に視覚化の面で大きな強みを持っている。ウィン</description>
    </item>
    <item>
      <title>ネットワーク理論におけるハブノード</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2189/</link>
      <pubDate>Sun, 17 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2189/</guid>
      <description>定義 1 ネットワークで多くの他のノードに接続されているノードをハブHubと言う。 説明 ネットワーク理論の中心性とは、「重要なノードが何か」という</description>
    </item>
    <item>
      <title>バラバシ-アルバートモデル</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2187/</link>
      <pubDate>Wed, 13 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2187/</guid>
      <description>アルゴリズム 1 Input リンクパラメータ$m \in \mathbb{N}$とネットワーク サイズ$N$が与えられたとする。 ステップ 1. 初期化 $m$個のノードを</description>
    </item>
    <item>
      <title>ブルー・ルーフィットネスモデル</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2185/</link>
      <pubDate>Sat, 09 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2185/</guid>
      <description>定義 各ノードにWeight（重み）を与え、その重みに従ってリンクが接続される確率が異なるランダムネットワークをフィットネス・モデルと言う。 ア</description>
    </item>
    <item>
      <title>スケールフリーネットワーク</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2183/</link>
      <pubDate>Tue, 05 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2183/</guid>
      <description>定義 1 次数分布がパレート分布に従うランダムネットワークをスケールフリーネットワークScale-free Networkという。 説明 スケールフリ</description>
    </item>
    <item>
      <title>ネットワーク内の次数分布</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2122/</link>
      <pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2122/</guid>
      <description>例 次数の分布は、ネットワークの性質となることもあれば、そもそも定義されることもある。例えば、次数分布がパレート分布に従うネットワークで定義さ</description>
    </item>
    <item>
      <title>ギルバートモデル</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2118/</link>
      <pubDate>Fri, 26 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2118/</guid>
      <description>定義 1 2 簡単な定義 リンクがそれぞれ独立に確率 $p \in [0,1]$ に従って接続されるシンプルネットワークのランダムネットワークを、ギルバートモデルGilbe</description>
    </item>
    <item>
      <title>エルデシュ＝レーニイモデル</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2116/</link>
      <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2116/</guid>
      <description>ビルドアップ $n$個のラベル付けられた頂点と$m$個のエッジを持つシンプルグラフについて、プロパティ$\mathscr{G}_{n,m} \subset 2</description>
    </item>
    <item>
      <title>ランダムグラフ</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2114/</link>
      <pubDate>Thu, 18 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2114/</guid>
      <description>定義 簡単な定義 非決定論的な手続きで作られるか、ある確率分布に従って表現されるグラフをランダムグラフRandom Graphという。 難しい定義 確</description>
    </item>
    <item>
      <title>グラフのファミリーとプロパティ</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2112/</link>
      <pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2112/</guid>
      <description>ビルドアップ $n$個のラベリングされた頂点の集合$V = [n] = \left\{ 1 ,\cdots , n \right\}$を持つ単純グラフを考えてみよう。このグラフの辺は異なる</description>
    </item>
    <item>
      <title>完全グラフ</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1662/</link>
      <pubDate>Sat, 12 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1662/</guid>
      <description>定義 グラフ $G$ の全ての 誘導された サブ グラフ $H$ が次を満たすとき、完全グラフという。 $$ \chi (H) = \omega (H) $$ $\chi (H)$ はグラフ $H$ の クロマチック数だ。 $\omega (H)$ はグラフ $H$</description>
    </item>
    <item>
      <title>アンダーソン-リビングストン定理の証明</title>
      <link>https://freshrimpsushi.github.io/jp/posts/20/</link>
      <pubDate>Fri, 14 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/20/</guid>
      <description>要旨 1 $R$ この可換環が単位元$1$を持ち、その零因子の集合を$Z(R)$とするなら、その零因子グラフ$\Gamma (R)$は連結グラフであり、</description>
    </item>
    <item>
      <title>エルデシュ・レーニグラフ</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1604/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1604/</guid>
      <description>定義 可換環 $R$ が与えられたとしよう。$R$ のゼロ因子集合を $Z(R)$ とする時、以下で定義されたグラフ $\Gamma (R)$ を$R$ のゼロ因子グラフZero Divisor Graphと</description>
    </item>
    <item>
      <title>四色地図問題</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1592/</link>
      <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1592/</guid>
      <description>ビルドアップ 四色地図問題とは、隣接する領域が互いに区別できるように地図を色塗りするには4つの色が十分かという問題だ。地図が複雑になれば色も増</description>
    </item>
    <item>
      <title>五色定理の証明</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1590/</link>
      <pubDate>Thu, 16 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1590/</guid>
      <description>証明 戦略：数学的帰納法を使用する。$n-1$個の頂点を持つシンプルな平面グラフが全て$5$-彩色可能だと仮定した場合、頂点がもう1つ多くても</description>
    </item>
    <item>
      <title>グラフ理論における地図の定義</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1586/</link>
      <pubDate>Sun, 12 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1586/</guid>
      <description>定義 1 $3$-接続された平面グラフは地図と定義された。 同じエッジの間で隣接するフェイスが異なる色になるように、$k$個の色で塗ることができる</description>
    </item>
    <item>
      <title>平面グラフの基本的性質</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1584/</link>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1584/</guid>
      <description>要約 1 $G$ が シンプル 平面グラフ だとしよう。 [1]: $G$ が 連結グラフ で、$n \ge 3$ 個の頂点と $m$ 個のエッジを持つ場合、$m \le 3n - 6$ [2]: すべてのシンプル平面グラ</description>
    </item>
    <item>
      <title>抽象的な双対グラフ</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1582/</link>
      <pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1582/</guid>
      <description>ビルドアップ 幾何的デュアルグラフの性質 [3]: 平面グラフ $G$ とその幾何的デュアルグラフ $G^{ \ast }$ において、$C \subset E(G)$ がサイクルの場合 $\iff$ $C^{ \ast } \subset E \left( G^{ \ast } \right)$</description>
    </item>
    <item>
      <title>幾何的デュアルグラフ</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1570/</link>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1570/</guid>
      <description>定義 1 与えられた平面グラフ $G$に対して、幾何学的双対グラフ $G^{ \ast }$は以下のように作られる。 ステップ 1. $G$の各フェース $f$に対応する頂点</description>
    </item>
    <item>
      <title>グラフのk-連結性とメンガーの定理</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1576/</link>
      <pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1576/</guid>
      <description>定義 与えられたグラフ $G$ における コンポーネントの数を $\text{comp} (G)$ と表記しよう。 1-1. 次を満たすエッジの集合 $D \subset E(G)$ を $G$ の切断集合Disconnecting S</description>
    </item>
    <item>
      <title>オイラーの多面体定理の証明</title>
      <link>https://freshrimpsushi.github.io/jp/posts/82/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/82/</guid>
      <description>概要 オイラーの多面体定理は、グラフ理論では単にオイラーの公式とも呼ばれる。幾何学的には、空間図形の点、線、面が#点-#線+#面=2の関係に従</description>
    </item>
    <item>
      <title>平面グラフとクラトフスキーの定理</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1565/</link>
      <pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1565/</guid>
      <description>定義 平面グラフ グラフを平面に描いた時、エッジが重ならずに描けるなら、そのグラフを平面グラフと言う。 説明 平面グラフが描かれると、平面上で区切ら</description>
    </item>
    <item>
      <title>グラフのホモーモルフィズム</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1563/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1563/</guid>
      <description>定義 1 二つのグラフ$G_{1}$と$G_{2}$が与えられたとする。$G_{1}$のある細分$G_{1} &#39; $と$G_{2}$のある細分$G_</description>
    </item>
    <item>
      <title>グラフ彩色とブルックスの定理</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1561/</link>
      <pubDate>Mon, 08 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1561/</guid>
      <description>定義 ループがないグラフ$G$に対して、次のような関数$f : V(G) \to [k]$を$G$の**$k$-カラーリングという。 $$ u \sim v \implies f(u) \ne f(v) $$ グラフ$G</description>
    </item>
    <item>
      <title>ハベル-ハキミ アルゴリズムの証明</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1559/</link>
      <pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1559/</guid>
      <description>要約 非増加シーケンス $D = (d_{1} , \cdots , d_{n})$ が与えられているとしよう。$D$ がグラフィックであれば、次の方法で $D$ の実現 $G$ を見つけることができる。 ステッ</description>
    </item>
    <item>
      <title>エルデシュ＝ガライの定理</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1557/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1557/</guid>
      <description>ビルドアップ グラフ $G$ の次数を重複を含めて集めた集合をグラフスコアと言い、$G$ のグラフスコアを降順に並べたシーケンスを$G$のディグリーシー</description>
    </item>
    <item>
      <title>ラベルツリーとケイリーの定理</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1555/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1555/</guid>
      <description>定義 各ベルテックスに異なる数が割り当てられたツリーをラベルツリーと言う。 説明 ラベルはベルテックスの集合において、実際に要素が同じか異なるかを</description>
    </item>
    <item>
      <title>ツリーグラフ</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1552/</link>
      <pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1552/</guid>
      <description>定義 1 サイクルが存在しない連結グラフを木という。 説明 木は、コンピュータ科学のデータ構造などでよく見られる概念で、少しでもコンピュータを扱う理</description>
    </item>
    <item>
      <title>グラフ理論におけるディラックの定理の証明</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1550/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1550/</guid>
      <description>要約 1 $G$が頂点が$n ( \ge 3)$個の単純グラフだとする。 [1] ディラックの定理：$G$のすべての頂点$v$に対して$\deg (v) \ge n / 2$が成り</description>
    </item>
    <item>
      <title>ハミルトニアングラフ</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1548/</link>
      <pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1548/</guid>
      <description>定義 1 $G$ を連結グラフとする。 $G$の全てのヴァーテックスを含む閉じたパスが存在する場合、$G$をハミルトングラフと呼び、そのサイクルをハミル</description>
    </item>
    <item>
      <title>フルーリーのアルゴリズムの証明</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1546/</link>
      <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1546/</guid>
      <description>定義 1 $G$をオイラーグラフとしよう。すると次の方法でオイラートレイルを作ることができる。 任意の頂点$u$から始め、次の二つのルールに従って</description>
    </item>
    <item>
      <title>ケーニヒスベルクの橋の問題とその解決</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1542/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1542/</guid>
      <description>問題 1 ケーニヒスベルクの橋の問題は、この都市にかかっている7つの橋を一度だけ渡って、最初の位置に戻ることができるのかということだった。解法を</description>
    </item>
    <item>
      <title>オイラーグラフ</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1541/</link>
      <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1541/</guid>
      <description>定義 $G$を連結グラフとしよう。$G$の全てのエッジを含む閉じたトレイルが存在する場合、$G$をオイラーグラフと呼び、そのトレイルをオイラー</description>
    </item>
    <item>
      <title>ケーニヒの定理の証明</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1534/</link>
      <pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1534/</guid>
      <description>要約 1 $G$ を 局所的に有限な 連結グラフとする。すると、すべての $v \in V(G)$ に対して $v$ を始点とする片方向無限パスが存在する。 証明 $G$ は連結グラフであるため</description>
    </item>
    <item>
      <title>グラフのオリエンテーション</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1532/</link>
      <pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1532/</guid>
      <description>Build-up Let&amp;rsquo;s assume a directed graph $D$ is given. A finite sequence of arcs is called a Directed Walk and is represented as follows: $$ v_{0} v_{1} , v_{1} v_{2} , \cdots , v_{m-1} v_{m} \\ v_{0} \rightarrow v_{1} \rightarrow v_{2} \rightarrow \cdots \rightarrow v_{m-1} \rightarrow v_{m} $$ In this case, $v_{0}$ is called the Initial Vertex, $v_{m}$ is called the Final Vertex, and $m$ is referred to as the</description>
    </item>
    <item>
      <title>グラフ内の距離、近傍、直径、周囲</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1530/</link>
      <pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1530/</guid>
      <description>定義 グラフ $G$ で、始点が$v \in V(G)$ で終点が$w \in V(G)$ のパスの集まりを$P(v,w)$ とし、$v \in V(G)$ を含むサイクルの集まりを$C(v)$ としよう。そ</description>
    </item>
    <item>
      <title>グラフ理論における歩行、道、経路、サイクル</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1528/</link>
      <pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1528/</guid>
      <description>定義 1 グラフ $G$ が与えられたとする。 エッジの有限 シーケンスを ウォークと呼び、以下のように表す。 $$ v_{0} v_{1} , v_{1} v_{2} , \cdots , v_{m-1} v_{m} \\ v_{0} \rightarrow v_{1} \rightarrow v_{2} \rightarrow \cdots \rightarrow v_{m-1} \rightarrow v_{m} $$</description>
    </item>
    <item>
      <title>無限グラフ</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1526/</link>
      <pubDate>Tue, 14 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1526/</guid>
      <description>定義 1 グラフ $G$ の頂点集合 $V(G)$ や辺集合 $E(G)$ が無限集合である場合、$G$ を無限グラフという。 $V(G)$ と $E(G)$ が両方とも可算集合である無限グラフ $G$ を可算グラフと</description>
    </item>
    <item>
      <title>二部グラフ</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1524/</link>
      <pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1524/</guid>
      <description>定義 1 グラフ $G$ の頂点 $V(G)$ に対して パーティション $\left\{ A,B \right\}$ が存在し、すべての $xy \in E(G)$ に対して $x \in A, y \in B$ または $x \in B , y \in A$ であれば、$G$ を二部グラ</description>
    </item>
    <item>
      <title>レギュラーグラフ</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1522/</link>
      <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1522/</guid>
      <description>定義 1 全ての頂点の次数が同じであるグラフをレギュラーグラフRegular Graphと言う。特に、全ての頂点の次数が$r$の場合、$r$-レギ</description>
    </item>
    <item>
      <title>ヌルグラフと完全グラフ</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1520/</link>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1520/</guid>
      <description>定義 1 単純グラフ $G$ が与えられたとする。 $E(G) = \emptyset$ ならば、$G$ をヌルグラフという。 $E \left( \overline{G} \right) = \emptyset$ ならば、$G$ を完全グラフという。 説明 ヌルグラフと</description>
    </item>
    <item>
      <title>グラフの補完</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1515/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1515/</guid>
      <description>定義 1 シンプルグラフ $G$ について、以下の条件を満たすグラフ $\overline{G}$ を $G$ のコンプリメントという。 $$ V \left( \overline{G} \right) = V(G) \\ vw \in E \left( \overline{G} \right) \iff vw \notin E(G) $$ 説明 普通の数学で</description>
    </item>
    <item>
      <title>サブグラフ</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1513/</link>
      <pubDate>Wed, 25 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1513/</guid>
      <description>定義 1 グラフ$G$について、グラフ$H$が$V(H) \subset V(G)$と$ E(H) \subset E(G)$を満たす場合、$H$を$G$のサブグラフと言う。 説明 注意す</description>
    </item>
    <item>
      <title>グラフの集合表記</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1512/</link>
      <pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1512/</guid>
      <description>定義 1 二つのグラフ $G_{1}$ と $G_{2}$ に対して $V(G_{1}) \cap V(G_{2}) = \emptyset$ としよう。 二つのグラフの ユニオンUnion $G = G_{1} \cup G_{2}$ は、頂点セット $V(G_{1}) \cup V(G_{2})$ とエッジセット $E (G_{1}) \cup E ( G_{2}</description>
    </item>
    <item>
      <title>グラフの行列表現</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1499/</link>
      <pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1499/</guid>
      <description>定義 1 グラフ $G(V,E)$ が与えられたとしよう。 次数行列 各頂点 $v_{i}\in V$ の次数 $d(v_{i})$を簡単に $d_{i}$と表記しよう。次のような行列を $G$ の次数</description>
    </item>
    <item>
      <title>握手ジレンマの証明</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1506/</link>
      <pubDate>Fri, 13 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1506/</guid>
      <description>定理 1 任意の有向グラフにおいて、入次数の合計と出次数の合計は等しい。 説明 握手のジレンマは、有向グラフにおける握手の補題と言える。 証明 有向グラ</description>
    </item>
    <item>
      <title>握手補題の証明</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1504/</link>
      <pubDate>Mon, 09 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1504/</guid>
      <description>概要 1 任意のグラフにおいて、全ての頂点の次数の合計は偶数である。 説明 名前の「握手」とは見ての通り、各頂点が隣接する頂点と握手をした場合、その</description>
    </item>
    <item>
      <title>グラフ理論における次数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1496/</link>
      <pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1496/</guid>
      <description>定義 1 有向グラフ $G$が与えられているとしよう。 エッジ $vw$が存在する場合、エッジは$v$から出て$w$に入ると言われる。 頂点 $v$に入る</description>
    </item>
    <item>
      <title>グラフの同型写像</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1492/</link>
      <pubDate>Fri, 28 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1492/</guid>
      <description>定義 1 二つのグラフ $G_{1}$ と $G_{2}$ が与えられているとする。$V(G_{1})$ と $V(G_{2})$ の間には全単射が存在し、$G_{1}$ の頂点間のエッジの数とそれに対</description>
    </item>
    <item>
      <title>数学におけるグラフとネットワーク</title>
      <link>https://freshrimpsushi.github.io/jp/posts/966/</link>
      <pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/966/</guid>
      <description>定義1 頂点とそれらを結ぶ線から成る集合をグラフまたはネットワークと呼ぶ。頂点の集合を$V$、線の集合を$E$としよう。 $V(G) := V$の要素を$G$</description>
    </item>
  </channel>
</rss>
