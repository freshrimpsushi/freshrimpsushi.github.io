<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on 生エビ寿司屋</title>
    <link>https://freshrimpsushi.github.io/jp/categories/r/</link>
    <description>Recent content in R on 生エビ寿司屋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Wed, 23 Dec 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://freshrimpsushi.github.io/jp/categories/r/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rファイルの読み取りやパス変更時に「Error: &#39;C:\U&#39; used without hex digits in character string starting &#39;C:\U&#39;」を解決する</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1860/</link>
      <pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1860/</guid>
      <description>もし解決策だけが欲しいなら、どう修正するかを見るだけでもいいけど、同じエラーにまた遭遇したくなければ、全てを読むのをおすすめするよ。 エラー 診</description>
    </item>
    <item>
      <title>Rでフォルダ内のファイルリストを取得する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1451/</link>
      <pubDate>Mon, 13 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1451/</guid>
      <description>コード setwd(&amp;#34;F:\\dsr\\project&amp;#34;) getwd() list.files(getwd()) list.files(getwd(),pattern=&amp;#34;*.csv&amp;#34;) list.files()は、いくつかのファイルに分割されたデータを集約したり、メタプログラミングなどに便利な関数だ： path: 最初の引</description>
    </item>
    <item>
      <title>Rパッケージのインストール時の「Warning in install.packages lib = C:\Program Files\R\R-3.6.1\library is not writable」の解決方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1414/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1414/</guid>
      <description>概要 これは、プログラミングどころか、パソコンにさえ慣れていないが、急にRを使う必要があるユーザー向けに、かなり詳細に説明しているため、細かす</description>
    </item>
    <item>
      <title>Rでデータファイルを素早く読む</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1270/</link>
      <pubDate>Mon, 02 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1270/</guid>
      <description>概要 Rは基本的にcsvデータを読む関数としてread.csv()を提供しているけど、ただ便利に使っている程度ではなく、実際の分析をしているな</description>
    </item>
    <item>
      <title>Rでの並列処理の方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1266/</link>
      <pubDate>Fri, 30 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1266/</guid>
      <description>概要 Rを速度のために使う言語ではないが、速さが必要な時も確かにある。コードをきれいによく書いても、あまりにも時間がかかるなら、普通は並列処理</description>
    </item>
    <item>
      <title>Rでのコード実行時間の測定とベンチマーク方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1246/</link>
      <pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1246/</guid>
      <description>概要 MatlabRは明らかに統計分析に特化しているプログラミング言語だけど、全ての言語と同じように速度に無関心ではない。速度が強みではないと</description>
    </item>
    <item>
      <title>R の ts 関数と window 関数の start、end オプションの違い</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1242/</link>
      <pubDate>Tue, 20 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1242/</guid>
      <description>説明 R에서 時系列データを扱う際、ts()関数とwindow()関数をよく使用する。ts()はRが受け入れることができるように時系列データを作</description>
    </item>
    <item>
      <title>Rで色付き境界のある点をプロットする方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1237/</link>
      <pubDate>Sun, 18 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1237/</guid>
      <description>コード 点の図で境界の色を変更したり内部を塗りたい場合は、次のオプションを変更するといい: pch: シンボルを変えて色を塗る。 21から25までを使えば</description>
    </item>
    <item>
      <title>Rでパイプオペレーター %&gt;% を使用する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1235/</link>
      <pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1235/</guid>
      <description>概要 R では、%&amp;gt;% は パイプ演算子Pipe Operater として知られており、他の演算子と同じように二項演算を行う。名前の通り、パイプ演算子は値がパイ</description>
    </item>
    <item>
      <title>Rでオペレーター%%を定義する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1224/</link>
      <pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1224/</guid>
      <description>概要 Rでは、関数を定義する際に、二項演算子として定義することができる。Rで基本的に定義された割り算の余り%%、商%/%、内積%*%、%o%や</description>
    </item>
    <item>
      <title>Rでのログログスケールプロットの描き方</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1131/</link>
      <pubDate>Tue, 25 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1131/</guid>
      <description>良くない方法 win.graph(7,4); par(mfrow=c(1,2)) plot(pressure,main=&amp;#39;Pressure\&amp;#39;) y&amp;lt;-pressure[-1,]$pressure; logtemp&amp;lt;-log(y) x&amp;lt;-pressure[-1,]$temperature; logpress&amp;lt;-log(x) plot(logpress,logtemp,main=&amp;#39;log scale\&amp;#39;) ログログスケールで図を描く一番簡単な方法は、データ自体にログを取ることだ。ログログプロットを初めて描くなら、こ</description>
    </item>
    <item>
      <title>Rで凡例を挿入する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1129/</link>
      <pubDate>Sun, 23 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1129/</guid>
      <description>コード データを解析することは、それを表現することと同じくらい重要だ。図が複雑になるほど、細かい注釈ときれいな凡例がデータを理解するのに大きな</description>
    </item>
    <item>
      <title>Rでのメタデータとattrの参照方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1127/</link>
      <pubDate>Fri, 21 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1127/</guid>
      <description>概要 Rで関数を使っていると、「attr(,&amp;quot;something&amp;quot;)」のようなデータに時々遭遇することがある。Attrib</description>
    </item>
    <item>
      <title>Rで文字列のベクトルを1つの文字列に結合する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1125/</link>
      <pubDate>Tue, 18 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1125/</guid>
      <description>概要 Rはデータを扱うのに非常に便利な言語だが、他のプログラミング言語にも慣れている人だと、Rの文字列処理は少し馴染みにくいかもしれない。Cや</description>
    </item>
    <item>
      <title>Rでリストを参照するさまざまな方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1123/</link>
      <pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1123/</guid>
      <description>概要 Rはデータを扱うのに本当に良い機能をたくさん提供していて、その中でもリストはRを使う最大の理由の一つだ。パイソンを始めとする他の言語にも</description>
    </item>
    <item>
      <title>R での最大値と最小値の位置を見つける</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1120/</link>
      <pubDate>Fri, 14 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1120/</guid>
      <description>コード set.seed(150421) x&amp;lt;-sample(100,10); x which.max(x) which.min(x) 統計を目的としてデータを見るとき、最大値と最小値が何であるか知るだけでなく、それが何番目の値であるかを把握することも多くの場</description>
    </item>
    <item>
      <title>Rでベクトルの内積を計算する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1089/</link>
      <pubDate>Mon, 03 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1089/</guid>
      <description>コード x&amp;lt;-1:10; x y&amp;lt;-(-1)^(1:10); y sum(x*y) x %*% y x %o% y Rで分析やシミュレーションをするとき、重み付けされた期待値を計算することがよくある。もちろん数式的に$\disp</description>
    </item>
    <item>
      <title>Rでのデータフレームの列に基づく並べ替え方</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1043/</link>
      <pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1043/</guid>
      <description>概要 Rでデータをソートするのにsort()関数を使えば簡単だが、デフォルトではsort()関数はベクターのみをソートする。しかし実際は、デー</description>
    </item>
    <item>
      <title>Rでヒストグラムをより詳細に見る方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1035/</link>
      <pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1035/</guid>
      <description>コード Rでは、hist()関数を使って、ヒストグラムを簡単に描ける。この時、階級のサイズはRが勝手に判断して決めるが、もっと細かく見たい場合</description>
    </item>
    <item>
      <title>Rにおけるデータの標準化：標準化された残差の表示</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1026/</link>
      <pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1026/</guid>
      <description>コード Rは統計に特化した言語だけあって、Z-score $\displaystyle z:= {{x - \mu} \over {\sigma}}$ を計算する必要がある場合が多い。この時、組み込みの scale() 関数を使うと便利だ。</description>
    </item>
    <item>
      <title>Rでの現在の日付と時刻の確認</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1020/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1020/</guid>
      <description>コード Rだけでなく、プログラミング言語を使って多くの作業をする際、ログを記録し、その時刻の情報が必要だ。Rでは、Sys.Date() 関数を通</description>
    </item>
    <item>
      <title>Rでヤコビ行列とヘシアン行列を計算する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/994/</link>
      <pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/994/</guid>
      <description>コード Rでヤコビ行列とヘッセ行列を計算するためには、numDerivパッケージのjacobian()関数とhessian()関数を使う。 install.packages(&amp;#34;numDeriv&amp;#34;) library(numDeriv)</description>
    </item>
    <item>
      <title>Rでの複素数の使い方</title>
      <link>https://freshrimpsushi.github.io/jp/posts/981/</link>
      <pubDate>Tue, 16 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/981/</guid>
      <description>概要 Rには複素数データ型が実装されている。わざわざ自分で実装する必要はなく、そのまま使えばいい。四則演算はもちろん、複素数を扱う上で欠かせな</description>
    </item>
    <item>
      <title>Rでの定積分の計算方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/977/</link>
      <pubDate>Sun, 14 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/977/</guid>
      <description>概要 Rで定積分を求めるには、integrate()関数を使える。例えば、 コード $\displaystyle \int_{0}^{3} \left( x^2 + 4x + 1 \right) dx$ と $\displaystyle \int_{0}^{\infty} e^{-x} dx$ は以下のように求めることができる</description>
    </item>
    <item>
      <title>Rで微分係数を計算する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/971/</link>
      <pubDate>Fri, 12 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/971/</guid>
      <description>概要 Rで微分係数を求めるためには、numDerivパッケージのgrad()関数を使用できる。 コード 例えば、$f(x) = x^2 + 4x + 1$と$g(x</description>
    </item>
    <item>
      <title>Rで現在のOS情報を確認する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/947/</link>
      <pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/947/</guid>
      <description>概要 Rは色々な理由でLinuxでもよく使われている。特にビッグデータを扱うためにハドゥープを使う場合などがある。 当然、WindowsでもLi</description>
    </item>
    <item>
      <title>UbuntuでRをインストールする方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/946/</link>
      <pubDate>Thu, 14 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/946/</guid>
      <description>ガイド ステップ 1. Ctrl+Alt+T を押してコンソール窓を開く。 ステップ 2. コンソール窓に以下のように入力する。 sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 管理者権限が必要であるため、ユーザ</description>
    </item>
    <item>
      <title>Rでグラフの軸ラベルに下付き文字を追加する</title>
      <link>https://freshrimpsushi.github.io/jp/posts/905/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/905/</guid>
      <description>コード Rでは、変数名にアンダースコア _を入れることが許可されているが、グラフにそのように表示すると、可読性が大きく落ちる。expressio</description>
    </item>
    <item>
      <title>Rで2つの配列の要素を比較하기</title>
      <link>https://freshrimpsushi.github.io/jp/posts/842/</link>
      <pubDate>Mon, 04 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/842/</guid>
      <description>概要 Rはデータの形や構造よりも内容に興味が強い分野でよく使われるため、その比較も便利だ。 包含関係 (全く重要ではないが、例でAは三角数$\di</description>
    </item>
    <item>
      <title>Rでのデータフレームの列と行の名前の変更</title>
      <link>https://freshrimpsushi.github.io/jp/posts/840/</link>
      <pubDate>Sat, 02 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/840/</guid>
      <description>概要 Rでデータフレームを使って複雑なコードを書いていると、デフォルトで決まった列の名前がわかりにくくなって変えなければならない状況がある。 names()</description>
    </item>
    <item>
      <title>Rでのデータ構造の解析方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/720/</link>
      <pubDate>Mon, 12 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/720/</guid>
      <description>概要 Rでいろいろな関数を使ってみると、下のように親切に結果が表示されるケースをよく見ることになる。問題は、この結果をただ見るのではなく、アウ</description>
    </item>
    <item>
      <title>Rでのリストの解体、重複要素の削除</title>
      <link>https://freshrimpsushi.github.io/jp/posts/688/</link>
      <pubDate>Sun, 23 Sep 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/688/</guid>
      <description>概要 いろんな未加工のデータを扱うことが多いRでは、リスト型がデータを整理するのに特に便利です。しかし、その反面、データにアクセスすることが少</description>
    </item>
    <item>
      <title>R でグラフを描く際に使用されるシンボル들</title>
      <link>https://freshrimpsushi.github.io/jp/posts/669/</link>
      <pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/669/</guid>
      <description>コード 様々なグラフ関連関数で点の形状を変えるときは、pch オプションを使用する。上の画像は特によく使用されるシンボルを一目で見られるように表</description>
    </item>
    <item>
      <title>Rでプロットに文字列を印刷する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/667/</link>
      <pubDate>Sun, 02 Sep 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/667/</guid>
      <description>コード text() 関数を使って、グラフに文字列を表示させることができる。 一つ目のオプションは$x$軸の座標のベクトル、二つ目のオプションは$y$軸の座</description>
    </item>
    <item>
      <title>Rで水平線と垂直線を描く方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/664/</link>
      <pubDate>Thu, 30 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/664/</guid>
      <description>例 1. abline(h=0) 水平線を引く。 2. abline(v=0) 垂直線を引く。 3. abline(0,3/4) $y$ での切片と$0$ の傾きを持つ直線を引く。 もともと abline() 関数自体が $3/4$ の係数、つまり $y=a+bx$ から名前が来ている</description>
    </item>
    <item>
      <title>Rでグラフを描く</title>
      <link>https://freshrimpsushi.github.io/jp/posts/662/</link>
      <pubDate>Tue, 28 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/662/</guid>
      <description>概要 Rは他の言語に比べてグラフの表現がとても簡単なのが長所だ。 他の統計パッケージと比べると、簡単な図はパッケージが早くても、詳細な表現が増え</description>
    </item>
    <item>
      <title>Rで条件付きでデータをフィルタリングする方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/659/</link>
      <pubDate>Sun, 26 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/659/</guid>
      <description>概要 Rは主に統計学で使われるためか、必要なデータを選んで編集する機能は他の追従を許さない。このようなデータのハンドリングに慣れることは少し難</description>
    </item>
    <item>
      <title>Rでの条件付き合計と条件付き平均の計算</title>
      <link>https://freshrimpsushi.github.io/jp/posts/656/</link>
      <pubDate>Thu, 23 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/656/</guid>
      <description>概要 エクセルで言えば、sumif()やaverageif()のような関数がたまに必要になる。Rではそうした単純な関数はないが、apply系列</description>
    </item>
    <item>
      <title>Rでの様々な分布関数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/578/</link>
      <pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/578/</guid>
      <description>説明 Rで、特定の分布に関連した関数は、以下の接頭辞と接尾辞の組み合わせで作られます。 接頭辞 確率分布$X$の確率分布関数を$f(x)$としまし</description>
    </item>
    <item>
      <title>Rでの切り上げ、切り捨て、特定の桁数への四捨五入</title>
      <link>https://freshrimpsushi.github.io/jp/posts/577/</link>
      <pubDate>Sat, 02 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/577/</guid>
      <description>概要 ceiling() 関数は切り上げを、floor() 関数は切り下げを行う。このような関数は統計を扱うRで必要ないように見えるが、データを扱う時に意外と便利</description>
    </item>
    <item>
      <title>Rでの文字列操作</title>
      <link>https://freshrimpsushi.github.io/jp/posts/568/</link>
      <pubDate>Fri, 25 May 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/568/</guid>
      <description>概要 開発者がよく使う言語と比べるとその程度は少ないが、Rでも文字列を扱うことは意外と多い。データが膨大で好き勝手な程、こんな些細なテクニック</description>
    </item>
    <item>
      <title>Rでのブートストラップ関数の使用方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/558/</link>
      <pubDate>Thu, 17 May 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/558/</guid>
      <description>概要 Rでブートストラップを実行するコードを直接書くこともできるが、基本的に提供されている関数を利用することもできる。その過程は以下のようにシ</description>
    </item>
    <item>
      <title>Rでべき関数のグラフを描く方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/538/</link>
      <pubDate>Wed, 09 May 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/538/</guid>
      <description>概要 単変量関数のグラフを描く方法について簡単に紹介する。統計学で適切な例として、べき関数を描いてみよう。 定義 帰無仮説 $H_{0} : \theta \in \Theta_{0}$ と対立仮説 $H_{1} :</description>
    </item>
    <item>
      <title>Rで桁数の制限をなくす</title>
      <link>https://freshrimpsushi.github.io/jp/posts/528/</link>
      <pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/528/</guid>
      <description>概要 Rは統計学のための言語だけど、Rのコンソールはデータを見るのに適していない。 それにもかかわらず、観測値が数十万に達するビッグデータを扱う</description>
    </item>
    <item>
      <title>RでNAを削除する</title>
      <link>https://freshrimpsushi.github.io/jp/posts/526/</link>
      <pubDate>Sun, 29 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/526/</guid>
      <description>概要 NAはNot Availableの略で、Rプログラミングでは主に「欠損値」を意味します。一般的なプログラミング言語のnullと意味も使用も</description>
    </item>
    <item>
      <title>Rにおけるカテゴリカルデータを数値データに変換する</title>
      <link>https://freshrimpsushi.github.io/jp/posts/497/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/497/</guid>
      <description>概要 数値であるにも関わらずカテゴリカルデータとして読まれ、連続データに変換したいけれど上手くいかない人たちのためのヒントだ。このポストはその</description>
    </item>
    <item>
      <title>Rで外部データをインポートする</title>
      <link>https://freshrimpsushi.github.io/jp/posts/496/</link>
      <pubDate>Sun, 01 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/496/</guid>
      <description>概要 Rは基本的に統計学のために生まれた言語だから、データの入力も便利になっている。 read.table(file, header = FALSE, sep = &amp;#34;&amp;#34;, na.strings = &amp;#34;NA&amp;#34;, fileEncoding = &amp;#34;&amp;#34;) 関数紹介 read.table()</description>
    </item>
    <item>
      <title>Rでデータフレームの行と列を入れ替える</title>
      <link>https://freshrimpsushi.github.io/jp/posts/332/</link>
      <pubDate>Sat, 25 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/332/</guid>
      <description>概要 Rの強みの一つは、プログラミング言語に慣れた人から見れば、かなり難しい操作も簡単に実装できることだ。例えば、配列を使う時には事前にメモリ</description>
    </item>
    <item>
      <title>Rで組み込みデータセットを読み込む方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/331/</link>
      <pubDate>Fri, 24 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/331/</guid>
      <description>概要 Rは代表的な統計プログラミング言語で、便利なメソッドだけでなく、例示に適したデータセットも提供しています。このようなデータセットがなけれ</description>
    </item>
    <item>
      <title>Rでの行列の積、逆行列、転置行列の計算</title>
      <link>https://freshrimpsushi.github.io/jp/posts/317/</link>
      <pubDate>Wed, 15 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/317/</guid>
      <description>概要 Rの強みは、行列をはじめとする様々なデータセットの操作が簡単である点と、豊富な統計パッケージを無料で提供していることだ。言うまでもないが</description>
    </item>
    <item>
      <title>Rでの商と余りの求め方</title>
      <link>https://freshrimpsushi.github.io/jp/posts/316/</link>
      <pubDate>Tue, 14 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/316/</guid>
      <description>概要 プログラミング言語の文法において、本当に統一されていないのが商と余りの演算子である。基本的には似ているように見えるが、逆にそれが混乱の原</description>
    </item>
    <item>
      <title>Rでの全変数の削除とコンソールのクリア</title>
      <link>https://freshrimpsushi.github.io/jp/posts/315/</link>
      <pubDate>Mon, 13 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/315/</guid>
      <description>概要 Rはインタプリタ言語だから、コンソールを見ながらずっと作業をすることになる。この時、デバッグなどのために、いろいろなテストも同じ作業環境</description>
    </item>
    <item>
      <title>Rでのelse if文の使用：「Error: unexpected else in else」の問題を解決する</title>
      <link>https://freshrimpsushi.github.io/jp/posts/314/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/314/</guid>
      <description>概要 Rにはswitch文のような分岐文がないから、if文を複数繋げて分岐を分けなければならない。ここで、この条件文っていうのがプログラミング</description>
    </item>
  </channel>
</rss>
