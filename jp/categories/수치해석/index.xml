<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数値解析 on 生エビ寿司屋</title>
    <link>https://freshrimpsushi.github.io/jp/categories/%EC%88%98%EC%B9%98%ED%95%B4%EC%84%9D/</link>
    <description>Recent content in 数値解析 on 生エビ寿司屋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Sun, 22 Oct 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://freshrimpsushi.github.io/jp/categories/%EC%88%98%EC%B9%98%ED%95%B4%EC%84%9D/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>熱方程式の数値解：有限差分法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3495/</link>
      <pubDate>Sun, 22 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3495/</guid>
      <description>数値的な熱方程式の解1 以下のような一次元の熱方程式が与えられたとしよう。 $$ \dfrac{\partial u}{\partial t} = \dfrac{\partial^{2} u}{\partial x^{2}},\qquad 0\le x \le 1,\quad t \ge 0 \tag{1} $$ 目標は、有限の点でこのソリューショ</description>
    </item>
    <item>
      <title>有限差分法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3494/</link>
      <pubDate>Fri, 20 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3494/</guid>
      <description>定義1 2 有限差分法finite difference method, FDMは、微分係数を計算する数値的方法で、短い間隔での平均変化率で微分係数を近似するものである。 説明 公式導</description>
    </item>
    <item>
      <title>暗示的ルンゲ＝クッタ法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3319/</link>
      <pubDate>Wed, 02 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3319/</guid>
      <description>概要 常微分方程式ソルバーのルンゲ＝クッタ法を紹介する。よく使われる4次ルンゲ＝クッタ法 RK4は、明示的ルンゲ＝クッタ法の一種だ。この文書では</description>
    </item>
    <item>
      <title>明示的なルンゲ＝クッタ法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3317/</link>
      <pubDate>Sat, 29 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3317/</guid>
      <description>概要 微分方程式ソルバー、ルンゲ＝クッタ法を紹介する。よく使われる 4次ルンゲ＝クッタ法 RK4についての詳しい説明は、別記事にて発表されている。</description>
    </item>
    <item>
      <title>四次のルンゲ＝クッタ法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/796/</link>
      <pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/796/</guid>
      <description>メソッド 1 説明 ルンゲ＝クッタ法は、アダムス法のように、多様な形式を持ち、複雑な代数的操作を通じて $\gamma_{j}$ と $V_{j}$ を決定する。その中でも特に人気があるの</description>
    </item>
    <item>
      <title>ディリクレ境界条件が与えられた熱方程式の初期値問題に対する数値解析的解法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/790/</link>
      <pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/790/</guid>
      <description>##例 $$ \begin{cases} u_{t} = \gamma u_{xx} \\ u(t,0) = u(t,l) = 0 \\ u(0,x) = f(x) \end{cases} $$ 与えられた問題には代数的解があるほど簡単で、しかし、微分方程式を解くための数値解析法をなぜ学ぶのか</description>
    </item>
    <item>
      <title>A-ステイブル</title>
      <link>https://freshrimpsushi.github.io/jp/posts/774/</link>
      <pubDate>Thu, 15 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/774/</guid>
      <description>ビルドアップ ミッドポイントメソッドなどのマルチステップメソッドは、$h$が十分に小さくない場合、パラサイティックソリューションが存在する可能</description>
    </item>
    <item>
      <title>一貫性を持つマルチステップ法の収束性とルート条件</title>
      <link>https://freshrimpsushi.github.io/jp/posts/754/</link>
      <pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/754/</guid>
      <description>まとめ もしマルチステップメソッドが一貫性を持つならば、メソッドは収束性を持つ $\iff$ メソッドはルート条件を満たす 説明 閉区間 $[x_{0} , b]$ に対して $h$ を単位と</description>
    </item>
    <item>
      <title>一貫性を持つ多段階法の安定性とルート条件</title>
      <link>https://freshrimpsushi.github.io/jp/posts/734/</link>
      <pubDate>Thu, 08 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/734/</guid>
      <description>要約 もしマルチステップメソッドが一貫性を持つならば、メソッドは安定性を持つ$\iff$メソッドはルート条件を満たす 説明 閉区間$[x_{0} ,</description>
    </item>
    <item>
      <title>マルチステップ法の根の条件</title>
      <link>https://freshrimpsushi.github.io/jp/posts/732/</link>
      <pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/732/</guid>
      <description>定義 1 マルチステップ法: $D \subset \mathbb{R}^2$ で定義された連続関数と初期値問題 $\begin{cases} y &#39; = f(x,y) \\ ( y( x_{0} ) , \cdots , y(x_{p}) ) = (Y_{0}, \cdots , Y_{p} ) \end{cases}$ が区間 $(a,b)$ 上で与えられている。区間を</description>
    </item>
    <item>
      <title>アダムス法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/724/</link>
      <pubDate>Tue, 06 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/724/</guid>
      <description>定義 1 マルチステップメソッド：$D \subset \mathbb{R}^2$ で定義された連続関数に対して、初期値問題 $\begin{cases} y &#39; = f(x,y) \\ ( y( x_{0} ) , \cdots , y(x_{p}) ) = (Y_{0}, \cdots , Y_{p} ) \end{cases}$ が与えられていると</description>
    </item>
    <item>
      <title>リチャードソン誤差推定</title>
      <link>https://freshrimpsushi.github.io/jp/posts/706/</link>
      <pubDate>Mon, 05 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/706/</guid>
      <description>ビルドアップ 微分方程式を解くメソッドのパフォーマンスを確認する方法として、真値と比較するのが最も良いが、すぐに真値を求めるのが面倒な場合から</description>
    </item>
    <item>
      <title>台形法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/704/</link>
      <pubDate>Sun, 04 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/704/</guid>
      <description>定義 1 $D \subset \mathbb{R}^2$で定義された連続関数に対する初期値問題$\begin{cases} y &#39; = f(x,y) \\ y( x_{0} ) = Y_{0} \end{case</description>
    </item>
    <item>
      <title>パラサイティック・ソリューション</title>
      <link>https://freshrimpsushi.github.io/jp/posts/701/</link>
      <pubDate>Fri, 02 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/701/</guid>
      <description>定義 1 パラサイティックソリューションParasitic Solutionとは、方法が進むにつれてその大きさが大きくなり、符号が変わるような項の</description>
    </item>
    <item>
      <title>ミッドポイントメソッド</title>
      <link>https://freshrimpsushi.github.io/jp/posts/700/</link>
      <pubDate>Thu, 01 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/700/</guid>
      <description>メソッド $D \subset \mathbb{R}^2$で定義された連続関数に対し、初期値問題$\begin{cases} y &#39; = f(x,y) \\ ( y( x_{0} ), y (x_{1}) ) = ( Y_{0} , Y_{1} )</description>
    </item>
    <item>
      <title>マルチステップ法の収束性と誤差</title>
      <link>https://freshrimpsushi.github.io/jp/posts/698/</link>
      <pubDate>Wed, 31 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/698/</guid>
      <description>要約 初期値問題 $\begin{cases} y &#39; = f(x,y) \\ ( y( x_{0} ) , \cdots , y(x_{p}) )= ( Y_{0} , \cdots , Y_{p} ) \end{cases}$ に対して、マルチステップ法 $$ \displaystyle y_{n+1} = \sum_{j=0}^{p} a_{j} y_{n-j} + h \sum_{j = -1}^{p} b_{j} f (x_{n-j} , y_{n-j} ) $$ が一貫性があり、</description>
    </item>
    <item>
      <title>マルチステップ法の一貫性と収束次数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/694/</link>
      <pubDate>Mon, 29 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/694/</guid>
      <description>まとめ 初期値問題 $\begin{cases} y &#39; = f(x,y) \\ ( y( x_{0} ) , \cdots , y(x_{p}) )= ( Y_{0} , \cdots , Y_{p} ) \end{cases}$ に対して マルチステップメソッドが $$ \displaystyle y_{n+1} = \sum_{j=0}^{p} a_{j} y_{n-j} + h \sum_{j = -1}^{p} b_{j} f (x_{n-j} , y_{n-j} ) $$ 一貫性を</description>
    </item>
    <item>
      <title>マルチステップ法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/693/</link>
      <pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/693/</guid>
      <description>定義 1 $D \subset \mathbb{R}^2$で定義された連続関数に対して、初期値問題$\begin{cases} y &#39; = f(x,y) \\ ( y( x_{0} ) , \cdots , y(x_{p}) ) = (Y_{0}, \cdots ,</description>
    </item>
    <item>
      <title>初期値が少し異なるときのオイラーメソッドの誤差</title>
      <link>https://freshrimpsushi.github.io/jp/posts/692/</link>
      <pubDate>Thu, 25 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/692/</guid>
      <description>要約 $[x_{0} , b] \times \mathbb{R}$ で定義された $f$ に対する初期値問題 $\begin{cases} y &#39; = f(x,y) \\ y( x_{0} ) = Y_{0} \end{cases}$ の解 $Y(x)$ が $Y \in C^{3} [ x_{0} , b ]$ であり、$\displaystyle f_{y} (x,y) = {{ \partial</description>
    </item>
    <item>
      <title>強いリプシッツ条件とオイラーメソッドの誤差</title>
      <link>https://freshrimpsushi.github.io/jp/posts/689/</link>
      <pubDate>Wed, 24 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/689/</guid>
      <description>要約 $[x_{0} , b] \times \mathbb{R}$ で定義された$f$ に関して、初期値問題 $\begin{cases} y &#39; = f(x,y) \\ y( x_{0} ) = Y_{0} \end{cases}$ の解 $Y(x)$ が $[x_{0} , b]$ で二回微分可能だとする。$f$ が全ての $x_{0} \le x \le b$ と</description>
    </item>
    <item>
      <title>数値解析におけるオイラー法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/687/</link>
      <pubDate>Tue, 23 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/687/</guid>
      <description>メソッド 1 $D \subset \mathbb{R}^2$ で定義された連続関数について、初期値問題が$\begin{cases} y &#39; = f(x,y) \\ y( x_{0} ) = Y_{0} \end{cases}$で与えられ</description>
    </item>
    <item>
      <title>リプシッツ条件</title>
      <link>https://freshrimpsushi.github.io/jp/posts/684/</link>
      <pubDate>Tue, 16 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/684/</guid>
      <description>定義 1次微分方程式の存在性・一意性定理のステートメントで、リプシッツ条件Lipschitz Conditionが見られる。 $D \subset \mathbb{</description>
    </item>
    <item>
      <title>数値的に不適切積分を計算するためのガウス求積法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1161/</link>
      <pubDate>Mon, 15 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1161/</guid>
      <description>定義 1 ガウス・チェビシェフ求積法 $$ \int_{-1}^{1} {{ 1 } \over { \sqrt{1 - x^2 } }} f(x) dx \approx \sum_{i=1}^{n} w_{i} f( x_{i} ) $$ $$ w_{i} = {{ \pi } \over { n }} $$ ここで、$x_{i}$ は $T_{n}(x) = 0$ を満たすチェビ</description>
    </item>
    <item>
      <title>エルミート多項式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1159/</link>
      <pubDate>Sat, 13 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1159/</guid>
      <description>定義 確率論者のエルミート多項式 $$ H_{e_{n}} := (-1)^{n} e^{{x^2} \over {2}} {{d^{n}} \over {dx^{n}}} e^{- {{x^2} \over {2}}} $$ 物理学者のエルミート多項式 $$ H_{n} := (-1)^{n} e^{x^2} {{d^{n}} \over {dx^{n}}} e^{-x^2} $$ 基本的な性質 エルミート多項式は二つ</description>
    </item>
    <item>
      <title>ラゲール多項式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1156/</link>
      <pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1156/</guid>
      <description>定義 $\displaystyle L_{n} := {{ e^{x} } \over { n! }} {{ d^{n} } \over { dx^{n} }} \left( e^{-x} x^{n} \right)$ を ラゲール多項式Laguerre Polynomialという。 基本性質 再帰公式 [0]: $$L_{n+1} (x) = {{ 1 } \over {</description>
    </item>
    <item>
      <title>数値的に広義積分を計算するための変数置換のコツ</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1147/</link>
      <pubDate>Sat, 06 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1147/</guid>
      <description>要約 1 $0 &amp;lt; a &amp;lt; b &amp;lt; \infty$ としよう。 [1]: $ 0 &amp;lt; p &amp;lt; 1$ ならば $$\int_{0}^{b} {{ f(x) } \over {x^{p} }} dx = \int_{0}^{{{ 1 } \over { 1-p }} b^{1-p} } f \left( \left[ ( 1- p ) m \right]^{{{ 1 } \over { 1-p }}} \right) dm$$ [2]: $ 1 &amp;lt; p$ ならば $$\int_{a}^{ \infty</description>
    </item>
    <item>
      <title>ガウス求積法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1144/</link>
      <pubDate>Thu, 04 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1144/</guid>
      <description>定義 1 $f : [a,b] \to \mathbb{R}$が$[a,b]$で積分可能であり、$[a,b]$を$a = x_{1} &amp;lt; \cdots &amp;lt; x_{n} = b$のようなノードポイントで分割した</description>
    </item>
    <item>
      <title>ニュートン＝コーツの積分公式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1138/</link>
      <pubDate>Sat, 29 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1138/</guid>
      <description>定義 1 $f : [a,b] \to \mathbb{R}$が$[a,b]$で積分可能であり、$[a,b]$を間隔が$\displaystyle h:= {{b-a} \over {n}}$の一</description>
    </item>
    <item>
      <title>シンプソンの公式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1132/</link>
      <pubDate>Wed, 26 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1132/</guid>
      <description>定義 $f : [a,b] \to \mathbb{R}$が$[a,b]$で積分可能で、$[a,b]$を$\displaystyle h:= {{b-a} \over {n}}$の間隔で等しく分</description>
    </item>
    <item>
      <title>台形則</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1130/</link>
      <pubDate>Mon, 24 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1130/</guid>
      <description>定義 $f : [a,b] \to \mathbb{R}$が$[a,b]$で積分可能であり、$[a,b]$を$\displaystyle h:= {{b-a} \over {n}}$の間隔で$a</description>
    </item>
    <item>
      <title>数値積分</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1128/</link>
      <pubDate>Sat, 22 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1128/</guid>
      <description>定義 1 $f : [a,b] \to \mathbb{R}$が$[a,b]$で積分可能であり、$[a,b]$を$a = x_{0} &amp;lt; \cdots &amp;lt; x_{n} = b$のようなノードポイントで分割した</description>
    </item>
    <item>
      <title>チェビシェフ・ノード</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1124/</link>
      <pubDate>Mon, 17 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1124/</guid>
      <description>定義 $[-1,1]$から$\displaystyle x_{k} = \cos \left( {{2k-1} \over {2n}} \pi \right)$、$k=1, \cdots , n$をチェビシェフ・ノードという。 説明 チ</description>
    </item>
    <item>
      <title>チェビシェフ展開</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1122/</link>
      <pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1122/</guid>
      <description>ビルドアップ 1 チェビシェフ展開を理解するためには、チェビシェフ展開がどのように導出されるのかをまず知る必要がある。最小化問題を解く代わりに最</description>
    </item>
    <item>
      <title>数値解析における最小最大近似と最小二乗近似</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1116/</link>
      <pubDate>Wed, 12 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1116/</guid>
      <description>ビルドアップ 1 与えられた関数$f : [a,b] \to \mathbb{R}$を近似する問題が与えられているとしよう。計算はコンピュータの仕事なので、多項式$</description>
    </item>
    <item>
      <title>数値解析における関数の近似</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1107/</link>
      <pubDate>Mon, 10 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1107/</guid>
      <description>ビルドアップ 数値計算を行う際、コンピュータが人間よりも圧倒的に速いのは事実だけれど、それが超越関数や無理数を理解しているからではない。例えば</description>
    </item>
    <item>
      <title>数値解析におけるB-スプライン</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1045/</link>
      <pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1045/</guid>
      <description>テキストと数式を読むのが嫌なら、図を見て理解しても全く問題ない。 定義 1 区間 $[a,b]$ を$a \le x_{0} &amp;lt; x_{1} &amp;lt; \cdots &amp;lt; x_{n} &amp;lt; \cdots x_{N} \le b$のようなノードポイントで分割し</description>
    </item>
    <item>
      <title>数値解析におけるスプライン</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1036/</link>
      <pubDate>Thu, 16 May 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1036/</guid>
      <description>ビルドアップ インターポレーションってのは、正確な関数を復元するのではなく、似ているけど扱いやすい関数を求めることが目的だ。もちろん、エクスプ</description>
    </item>
    <item>
      <title>エルミート補間</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1034/</link>
      <pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1034/</guid>
      <description>定義 1 違う$x_{1} , \cdots , x_{n}$のデータ$(x_{1}, y_{1} , y&amp;rsquo;_{1}) , \cdots , (x_{n} , y_{n}, y&amp;rsquo;_{n})$に対して$\begin{cas</description>
    </item>
    <item>
      <title>エルミート-ジェノッキ公式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1031/</link>
      <pubDate>Sun, 12 May 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1031/</guid>
      <description>公式 異なる$x_{0}, \cdots , x_{n}$に対して$f \in C^{n} \left( \mathscr{H} \left\{ x_{0}, \cdots , x_{n} \right\} \right)$としよう。すると、標準シンプレックスにおいて $$ \tau_{n} := \left\{</description>
    </item>
    <item>
      <title>ニュートンの前進差分公式の導出</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1025/</link>
      <pubDate>Fri, 10 May 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1025/</guid>
      <description>式 異なる$x_{0} , \cdots , x_{n}$のデータ$(x_{0}, f(x_{0} )) , \cdots , (x_{n} , f( x_{n} ) )$について $$ p_{n} (x) =\sum_{i=0}^{n} f [ x_{0} , \cdots , x_{i} ] \prod_{j=0}^{i-1} (x - x_{j} ) $$ 説明 複雑に</description>
    </item>
    <item>
      <title>ラグランジュの公式の導出</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1023/</link>
      <pubDate>Wed, 08 May 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1023/</guid>
      <description>公式 1 異なる$x_{0} , \cdots , x_{n}$のデータ$(x_{0}, y_{0}) , \cdots , (x_{n} , y_{n})$について$\displaystyle l_{i} (x) := \prod_{i \ne j}</description>
    </item>
    <item>
      <title>多項式補間</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1021/</link>
      <pubDate>Mon, 06 May 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1021/</guid>
      <description>定義 1 異なる$x_{0} , \cdots , x_{n}$のデータ$(x_{0}, y_{0}) , \cdots , (x_{n} , y_{n})$について、$p (x_{i} ) = y_{i}$と$\deg p \le</description>
    </item>
    <item>
      <title>数値解析における補間</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1016/</link>
      <pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1016/</guid>
      <description>定義 1 与えられた$(n+1)$ペアのデータ$(x_{0}, y_{0}) , \cdots , (x_{n} , y_{n})$に対して、$f (x_{i} ) = y_{i}$を満たしつつある特定の性</description>
    </item>
    <item>
      <title>非線形システムを解くためのニュートン法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1005/</link>
      <pubDate>Fri, 26 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1005/</guid>
      <description>メソッド 1 $\mathbb{f} ( \mathbb{x} ) := \begin{bmatrix} f_{1}( \mathbb{x} ) \\ \vdots \\ f_{N} ( \mathbb{x} ) \end{bmatrix}$のような多変数関数 $\mathbb{f} : \mathbb{R}^{N} \to \mathbb{R}^{N}$が $\mathbb{f} \in C^{2} \left( N (</description>
    </item>
    <item>
      <title>ミューラー法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/976/</link>
      <pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/976/</guid>
      <description>メソッド $f (\alpha) = 0$ としよう。初期値 $x_{0} , x_{1} , x_{2}$ と $$ w_{n} := f [x_{n} , x_{n-1} ] + f [ x_{n} , x_{n-2} ] - f [ x_{n-2} , x_{n-1} ] $$ によって、 $$ x_{n+1} : = x_{n} - {{ 2 f ( x_{n} ) } \over { w_{n} \pm \sqrt{ w_{n}^{2} -</description>
    </item>
    <item>
      <title>セカント法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/682/</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/682/</guid>
      <description>メソッド $f,f&amp;rsquo;,f&amp;rsquo;&amp;rsquo;$ が $\alpha$ の近傍で連続であり、$f(\alpha) = 0, f &#39;(\alpha) \ne 0$ とする。 $\alpha$ に十分近い初期値 $x_{0} , x_{1}$ に対して $$ x_{n+1} := x_{n} - f ( x_{n} ) {{ x_{n} - x_{n-1} } \over { f</description>
    </item>
    <item>
      <title>数値解析学における階差段</title>
      <link>https://freshrimpsushi.github.io/jp/posts/969/</link>
      <pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/969/</guid>
      <description>定義 関数 $f : \mathbb{R} \to \mathbb{R}$ に対して異なる $x_{1} , \cdots , x_{n}$ における 区分差分Divided Differenceは以下のように定義される。 $$ \begin{align*} f[x_{0}] :=&amp;amp; f( x_{0} ) \\ f [ x_{0}</description>
    </item>
    <item>
      <title>ニュートン-ラプソン法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/678/</link>
      <pubDate>Sat, 23 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/678/</guid>
      <description>メソッド 1 $f,f&amp;rsquo;,f&amp;rsquo;&amp;rsquo;$が$\alpha$の近くで連続であり、$f(\alpha) = 0, f &#39;(\alpha) \ne 0$と</description>
    </item>
    <item>
      <title>二分法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/676/</link>
      <pubDate>Fri, 22 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/676/</guid>
      <description>メソッド 1 閉区間$[a,b]$で定義された連続関数 $f$ が $f(a) f(b) &amp;lt; 0$ と等しいとする。許容誤差は $\varepsilon$ である。$f(c) = 0$ を満たす $c \in [a,b]$ は以下のように</description>
    </item>
    <item>
      <title>数値解析における収束率</title>
      <link>https://freshrimpsushi.github.io/jp/posts/674/</link>
      <pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/674/</guid>
      <description>定義 1 数列 $\left\{ x_{n} \right\}$ が $\alpha$ に収束し、$p \ge 1$ の次数Orderに対して $$ | \alpha - x_{n+1} | \le c | \alpha - x_{n} | ^{p} $$ を満たす $c \ge 0$ が存在する場合、$\left\{ x_{n}</description>
    </item>
    <item>
      <title>第一種および第二種チェビシェフ多項式の関係</title>
      <link>https://freshrimpsushi.github.io/jp/posts/780/</link>
      <pubDate>Wed, 19 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/780/</guid>
      <description>要約 第1種チェビシェフ多項式 $T_{n} (x) = \cos \left( n \cos^{-1} x \right)$ と 第2種チェビシェフ多項式 $\displaystyle U_{n} (x) = {{1} \over {n+1} } T_{n+1} &amp;rsquo; (X)$ は、次の関係を持っている。 [1]: $$U_{n} (x) - U_{n-2} (x) = 2 T_{n} (X)$$</description>
    </item>
    <item>
      <title>第二種チェビシェフ多項式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/779/</link>
      <pubDate>Tue, 18 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/779/</guid>
      <description>定義 $$U_{n} (x) := {{1} \over {n+1} } T_{n+1} &amp;rsquo; (x) = {{\sin \left( ( n +1 ) \theta \right)} \over { \sin \theta }} $$を第2種チェビシェフ多項式と言うんだ。 基本性質 再帰公式 [0]: $$U_{n+1} (x) = 2x U_{n} (x) - U_{n-1} (X)$$ 直交集合 [1]</description>
    </item>
    <item>
      <title>第一種チェビシェフ多項式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/777/</link>
      <pubDate>Sun, 16 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/777/</guid>
      <description>定義 1 $T_{n} (x) = \cos \left( n \cos^{-1} x \right)$ を第1種チェビシェフ多項式という。 基本性質 再帰公式 [0]: $$T_{n+1} (x) = 2x T_{n} (x) - T_{n-1} (X)$$ 直交集合 [1] 関数の内積: 重み$w$ を$\disp</description>
    </item>
    <item>
      <title>数値解析における差分</title>
      <link>https://freshrimpsushi.github.io/jp/posts/722/</link>
      <pubDate>Wed, 14 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/722/</guid>
      <description>定義 1 前方差分： $$ \begin{align*} \Delta f(x) =&amp;amp; f(x+h) - f(x) \\ \Delta^{r+1} f(x) =&amp;amp; \Delta^{r} f(x+h) - \Delta^{r} f(x) \end{align*} $$ 後方差分： $$ \begin{align*} \nabla f(x) =&amp;amp; f(x) - f(x- h) \\ \nabla^{r+1} f(x) =&amp;amp; \nabla^{r} f(x) - \nabla^{r} f(x- h) \end{align*} $$ 説明 一般的に差分は数列全体で使われ</description>
    </item>
    <item>
      <title>複数の点を使用した有限差分の導出</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2553/</link>
      <pubDate>Wed, 14 Apr 2004 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2553/</guid>
      <description>要約 $N$番の微分可能な関数 $f : \mathbb{R} \to \mathbb{R}$ が与えられているとする。ある点 $t \in \mathbb{R}$ での $d &amp;lt; N$回目の微分の関数値 $f^{(d)} \left( t \right)$ は、十分に小さい $h &amp;gt; 0$ に対し</description>
    </item>
  </channel>
</rss>
