<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>アルゴリズム on 生エビ寿司屋</title><link>https://freshrimpsushi.github.io/jp/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/</link><description>Recent content in アルゴリズム on 生エビ寿司屋</description><generator>Hugo -- gohugo.io</generator><language>jp</language><lastBuildDate>Thu, 22 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://freshrimpsushi.github.io/jp/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/index.xml" rel="self" type="application/rss+xml"/><item><title>スターリンソート</title><link>https://freshrimpsushi.github.io/jp/posts/2268/</link><pubDate>Thu, 22 Sep 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2268/</guid><description>アルゴリズム 1 長さが$n$の配列が与えられたとしよう。配列を前から後ろまで読んで、後ろの要素が前の要素より大きい場合に削除を繰り返すと、&amp;l</description></item><item><title>スミス-ウォーターマン アラインメント：ローカル シーケンス アラインメント</title><link>https://freshrimpsushi.github.io/jp/posts/2017/</link><pubDate>Sat, 08 May 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2017/</guid><description>概要 二つの塩基配列から、最も似ている部分のアラインメントを見つけることを局所アラインメントlocal Alignmentと言い、その方法として</description></item><item><title>ニードルマン・ワンシュアルゴリズム：グローバルシークエンスアラインメント</title><link>https://freshrimpsushi.github.io/jp/posts/2012/</link><pubDate>Mon, 26 Apr 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2012/</guid><description>概要 二つの塩基配列の共通部分が最も多くなるように整列を見つけることをグローバルアライメントと呼び、その方法として最も広く使われているのがニー</description></item><item><title>配列アラインメントでの置換行列</title><link>https://freshrimpsushi.github.io/jp/posts/1881/</link><pubDate>Sun, 10 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1881/</guid><description>定義 シーケンスアラインメントスコアを記録する時、マッチとミスマッチの基準となる行列を置換行列substitution matrixと呼ぶ。 例 using</description></item><item><title>シーケンスアラインメントスコアとギャップペナルティ</title><link>https://freshrimpsushi.github.io/jp/posts/1878/</link><pubDate>Sun, 10 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1878/</guid><description>定義 参照配列とクエリ配列が与えられているとしよう。配列アラインメントスコアsequence Alignment Scoreとは、２つの配列を比較した時にどの程度</description></item><item><title>シーケンスアラインメントとは？</title><link>https://freshrimpsushi.github.io/jp/posts/1874/</link><pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1874/</guid><description>定義 塩基配列間の類似度に基づいて並べることをシーケンスアライメントsequence Alignmentという。 1 Description In bioinformatics, since genomes are extremely long, even digitalizing them is a huge task.</description></item><item><title>文字列の編集距離</title><link>https://freshrimpsushi.github.io/jp/posts/1872/</link><pubDate>Sat, 02 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1872/</guid><description>ビルドアップ 1 文字列には、次の四つの作用がある: 挿入: 文字列に新しい文字を挿入する。 削除: 文字列から文字一つを取り除く。 置換: 文字列内の文字</description></item><item><title>バイオインフォマティクスにおけるゲノムと遺伝子</title><link>https://freshrimpsushi.github.io/jp/posts/1864/</link><pubDate>Tue, 29 Dec 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1864/</guid><description>定義 生物の全遺伝物質の集まりをゲノムgenomeという。 ゲノムの一部で、遺伝的特徴の単位となる区間を遺伝子geneという。特に真核生物では、</description></item><item><title>バイオインフォマティクスにおけるイントロンとエクソン</title><link>https://freshrimpsushi.github.io/jp/posts/1862/</link><pubDate>Fri, 25 Dec 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1862/</guid><description>定義 真核生物のDNAで、実際にタンパク質の合成に関与する部分をエクソンexon、そうでない部分をイントロンintronという。 説明 原核生物と</description></item><item><title>塩基配列の上流と下流</title><link>https://freshrimpsushi.github.io/jp/posts/1855/</link><pubDate>Mon, 21 Dec 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1855/</guid><description>ビルドアップ 1 塩基配列の方向は、上の図のように糖の炭素原子の位置に番号をつけることで表すことができる。RNAとDNAは具体的に、3番炭素$3</description></item><item><title>バイオインフォマティクスにおけるコドンとアミノ酸の遺伝暗号</title><link>https://freshrimpsushi.github.io/jp/posts/1852/</link><pubDate>Thu, 17 Dec 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1852/</guid><description>定義 DNAの塩基3個を順序対としてまとめた単位をトリプレットコードtriplet Codeと呼ぶ。 セントラルドグマに従って転写されたmRNAの</description></item><item><title>分子生物学の中心原理</title><link>https://freshrimpsushi.github.io/jp/posts/1850/</link><pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1850/</guid><description>原理 分子生物学の中心原理 もしくは セントラルドグマcentral dogmaとは、遺伝情報がDNAからRNAへ、RNAからタンパク質へと伝達され</description></item><item><title>バイオインフォマティクスにおける主要な塩基と塩基対</title><link>https://freshrimpsushi.github.io/jp/posts/1832/</link><pubDate>Mon, 07 Dec 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1832/</guid><description>定義 次の五つの塩基を主要な塩基canonical Baseと呼ぶ。 プリン塩基: アデニンadenin $A$, グアニンguanine $G$ ピリミジン塩基: シ</description></item><item><title>生物情報学における塩基配列</title><link>https://freshrimpsushi.github.io/jp/posts/1828/</link><pubDate>Wed, 02 Dec 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1828/</guid><description>ビルドアップ 化学的合成によって単量体が繰り返し連結された高分子をポリマーpolymerと言う。 リン酸phosphoric Acidは無機酸素酸</description></item><item><title>生命医療情報学におけるDNA、RNA、染色体</title><link>https://freshrimpsushi.github.io/jp/posts/1827/</link><pubDate>Sun, 29 Nov 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1827/</guid><description>ビルドアップ 化学的合成を通じたモノマーの連続した結合によってつくられる高分子をポリマーpolymerと言う。 リン酸phosphoric Aci</description></item><item><title>バイオインフォマティクスにおける原核生物と真核生物</title><link>https://freshrimpsushi.github.io/jp/posts/1810/</link><pubDate>Wed, 25 Nov 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1810/</guid><description>定義 核膜がない生物を原核生物prokaryotesという。 核膜がある核で構成される生物を真核生物eukaryotesという。 説明 真核生物では</description></item><item><title>グリーディアルゴリズム</title><link>https://freshrimpsushi.github.io/jp/posts/1434/</link><pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1434/</guid><description>定義 グリーディアルゴリズムは、その瞬間のみを考慮して最も良い選択をする方法だ。 説明 グリードアルゴリズムは、名前が示す通り、長期的な視点を持た</description></item><item><title>レーベンシュタインアルゴリズム</title><link>https://freshrimpsushi.github.io/jp/posts/510/</link><pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/510/</guid><description>アルゴリズム Input 文字列 $A,B$を $A=[a_{i}]=(a_{1}, a_{2} , \cdots, a_{n})$と $B=[b_{j}]=(b_{1}, b_{2} , \cdots, b_{m})$に表す。 Step 1. 初期化 行列 $M_{(n+1) \times (m+1)} = [m_{x y }]$を作り、$M_{11}</description></item><item><title>基数ソート</title><link>https://freshrimpsushi.github.io/jp/posts/1363/</link><pubDate>Wed, 06 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1363/</guid><description>アルゴリズム 桁数が$k$に限られた$n$個の自然数のデータが与えられているとする。すると、データは以下のアルゴリズムに従ってソートされ、その</description></item><item><title>比較ソートアルゴリズムの時間計算量の下限</title><link>https://freshrimpsushi.github.io/jp/posts/1359/</link><pubDate>Sun, 03 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1359/</guid><description>定理 比較ソートアルゴリズムの時間複雑度は、せいぜい$\Omega ( n \log n )$である。 説明 アルゴリズムは元から不思議なものだけど、挿入ソートの</description></item><item><title>比較ソートアルゴリズムの時間複雑度</title><link>https://freshrimpsushi.github.io/jp/posts/1357/</link><pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1357/</guid><description>定理 $n$個のデータが与えられたとき、比較ソートアルゴリズムの時間計算量は以下の通りです。 [1] バブルソート： $$ \Theta ( n^2 ) \\ O ( n^2 ) $$ [2] 選択ソート</description></item><item><title>ダイナミックプログラミング</title><link>https://freshrimpsushi.github.io/jp/posts/1262/</link><pubDate>Sat, 05 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1262/</guid><description>ビルドアップ 問題を解く時、大きな問題の解答がそれより小さい問題の解答を含んでいれば、最適部分構造optimal Substructureを持つ</description></item><item><title>再帰関数を使用する際に注意すべき理由</title><link>https://freshrimpsushi.github.io/jp/posts/1254/</link><pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1254/</guid><description>注意 プログラミングを初めて学ぶ際、どんな言語でも「再帰関数は慎重に使うべきだ」という警告が付く。実際再帰関数はそれほど頻繁に使われるテクニッ</description></item><item><title>時間計算量と空間計算量</title><link>https://freshrimpsushi.github.io/jp/posts/1283/</link><pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1283/</guid><description>定義 与えられた問題を解く時の時間を時間複雑度time complexity、メモリの要求を空間複雑度space complexityと言う。 例 漸</description></item><item><title>アルゴリズムのコストに関する漸近記法</title><link>https://freshrimpsushi.github.io/jp/posts/1281/</link><pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1281/</guid><description>定義 大きさが$n$のデータに対するアルゴリズムのコストを次のように表示する。 $O$表記: $$ O(g(n)) := \left\{ f(n) \ | \ \exists c &amp;gt; 0, n_{0} \in \mathbb{N} : \forall n \ge n_{0} \implies f(n) \le c g(n) \right\}</description></item><item><title>ジップの法則</title><link>https://freshrimpsushi.github.io/jp/posts/560/</link><pubDate>Sat, 19 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/560/</guid><description>法則 コーパスで$k$番目によく出現する単語の相対頻度を$f_{k}$とした場合 $$ f_{k} = {{C} \over {k}} $$ 説明 ここで、$C$は$\displaystyle</description></item><item><title>ヒープスの法則</title><link>https://freshrimpsushi.github.io/jp/posts/559/</link><pubDate>Fri, 18 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/559/</guid><description>法則 コーパスでのユニークな単語の数を $M$、トークンの数を $T$ とすると $$ M = kT^{b} $$ 説明 コーパスが英語の場合、通常、定数 $k,b$ は $10 \le k \le 100$ で、およそ $b</description></item><item><title>n-グラムとジャッカード係数</title><link>https://freshrimpsushi.github.io/jp/posts/525/</link><pubDate>Sat, 28 Apr 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/525/</guid><description>定義 n-グラムn-gramとは、ある文字列をn個ずつ切り分けたものを指す。 ジャカード係数jaccard Coefficientとは、二つの集合</description></item></channel></rss>