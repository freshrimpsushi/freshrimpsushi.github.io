<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R_s on 生エビ寿司屋</title>
    <link>https://freshrimpsushi.github.io/jp/r_/</link>
    <description>Recent content in R_s on 生エビ寿司屋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Sun, 21 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://freshrimpsushi.github.io/jp/r_/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ジュリアで無限配列を使用する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2511/</link>
      <pubDate>Sun, 21 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2511/</guid>
      <description>概要 InfiniteArrays.jlは無限のサイズを持つ配列を使えるようにするパッケージ1で、実際にはレイジー配列と多くの関連がある。レイ</description>
    </item>
    <item>
      <title>ジュリアでmatファイルを読み書きする方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2509/</link>
      <pubDate>Wed, 17 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2509/</guid>
      <description>概要 MAT.jlは MATLABで使用されるデータ保存形式である*.matファイルを読み書きするライブラリだ1。 Juliaがそうであるように、</description>
    </item>
    <item>
      <title>ジュリアコンソールでシンプルなグラフィックを出力する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2507/</link>
      <pubDate>Sat, 13 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2507/</guid>
      <description>概要 UnicodePlots.jlはジュリア REPLでユニコード文字を使って図を出力するライブラリ1で、プログラムが進行する中で軽量でありな</description>
    </item>
    <item>
      <title>ジュリアでコンソールを初期化する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2505/</link>
      <pubDate>Tue, 09 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2505/</guid>
      <description>方法 コンソールでCtrl + Lを押すと、コンソールが一見してクリアされるが、一部の環境では本当にリセットされるわけではなく、ウィンドウが上にス</description>
    </item>
    <item>
      <title>ジュリアでデータフレームの欠損値を削除する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2503/</link>
      <pubDate>Fri, 05 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2503/</guid>
      <description>概要 1 Juliaでは、dropmissing()関数を使って簡単に欠損値を削除できる。 コード julia&amp;gt; df = DataFrame(x = [&amp;#34;i&amp;#34;, missing, &amp;#34;k&amp;#34;, &amp;#34;j&amp;#34;], y = [1, 2, 3, missing]) 4×2 DataFrame Row │ x y │</description>
    </item>
    <item>
      <title>ジュリアで環境変数を参照する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2499/</link>
      <pubDate>Thu, 28 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2499/</guid>
      <description>概要 Juliaで環境変数を参照する方法を説明する1。 コード Base.ENV Base.ENV[&amp;#34;JULIA_NUM_THREADS&amp;#34;] 見るように、別のパッケージをロードする必要はなく、Base.ENVを通じて直接</description>
    </item>
    <item>
      <title>ジュリアでプログレスバーの使い方</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2497/</link>
      <pubDate>Sun, 24 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2497/</guid>
      <description>概要 ジュリアでもプログラムの進行状況を知らせてくれるグラスバーを手軽に使うことができる。 コード ProgressMeter.jl 「ProgressMeter.jl」パッケー</description>
    </item>
    <item>
      <title>ジュリアで0または欠損値を除外した平均値の計算方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2495/</link>
      <pubDate>Wed, 20 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2495/</guid>
      <description>概要 R言語の合計sum()や平均mean()には、関数自体がその欠損値を無視するオプションを持っているが、ジュリアではそのようなオプションが</description>
    </item>
    <item>
      <title>ジュリアで回帰分析を行う方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2493/</link>
      <pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2493/</guid>
      <description>概要 Juliaの回帰分析を行うためのGLM.jlパッケージを簡単に紹介する1。この説明では、Rのインターフェースとどれくらい似ているかを強調</description>
    </item>
    <item>
      <title>ジュリアで2つの時刻の差を秒単位で計算する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2461/</link>
      <pubDate>Fri, 13 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2461/</guid>
      <description>概要 これを実現するには、Dates モジュールの canonicalize() 関数を使用する1。 コード using Dates tic = DateTime(2022,3,7,7,1,11) toc = now() Dates.canonicalize(toc-tic) 上のコードを実行した結果は次のとおりである。 julia&amp;gt; using Dates</description>
    </item>
    <item>
      <title>ジュリアで2次元配列と行列の間の変換方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2459/</link>
      <pubDate>Mon, 09 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2459/</guid>
      <description>概要 Juliaで2次元配列と行列の間を切り替えるヒントを紹介する1。おそらくJulia 1.7以下の環境では、最もJuliaらしく、シンプルで</description>
    </item>
    <item>
      <title>ジュリアでネイバーからメールを送る方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2457/</link>
      <pubDate>Thu, 05 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2457/</guid>
      <description>概要 SMTPClient.jlパッケージを使って、SMTPSimple Mail Transfer Protocolでナヴァーからメールを送る方法を紹介する1。長時間</description>
    </item>
    <item>
      <title>ジョモロジアンのアルゴリズムの実装</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2449/</link>
      <pubDate>Tue, 19 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2449/</guid>
      <description>概要 ZomorodianとCarlssonの論文「Computing Persistent Homology」で紹介されたアルゴリズムの擬似コードを説明し、実装す</description>
    </item>
    <item>
      <title>ジョモロジアンのアルゴリズム誘導</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2447/</link>
      <pubDate>Fri, 15 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2447/</guid>
      <description>概要 ZomorodianとCarlssonの論文「Computing Persistent Homology」で紹介されたアルゴリズムの導出プロセスを説明する1。</description>
    </item>
    <item>
      <title>質的変数と連続変数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2420/</link>
      <pubDate>Sun, 23 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2420/</guid>
      <description>定義 1 質的変数 質的Qualitativeな特性を測定した変数を質的変数という。 食べ物が&amp;hellip; 美味しい / まあまあ / まずい 色が&amp;hel</description>
    </item>
    <item>
      <title>代数的トポロジーにおけるリフティング定理の証明</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2419/</link>
      <pubDate>Fri, 21 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2419/</guid>
      <description>定理 1 2 カバーとリフトの定義: 単位区間を$I = [0,1]$のように表す。 $X$のオープンセット$U \subset X$が**$p$によって均等にカバーされ</description>
    </item>
    <item>
      <title>ジュリアでデータを省略せずに出力する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2416/</link>
      <pubDate>Sat, 15 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2416/</guid>
      <description>概要 元々ジュリアでは、データを出力する時にREPLのサイズに合わせてきれいに出力されるが、時には全体のデータを楽に見たい時がある。データがf</description>
    </item>
    <item>
      <title>ジュリアで線形代数パッケージを使用する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2412/</link>
      <pubDate>Fri, 07 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2412/</guid>
      <description>概要 Juliaは、MATLABレベルの線形代数をサポートしている。むしろMATLABよりも進化した、直感的で美しい構文を見ると、Juliaが</description>
    </item>
    <item>
      <title>ジュリアでの日付と時刻関連関数の使用方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2410/</link>
      <pubDate>Mon, 03 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2410/</guid>
      <description>概要 1 Datesは、日付や時間に関連する関数をまとめたモジュールだ。一般的なプログラミングはもちろん、時系列に関する、いやそれに関係なく多く</description>
    </item>
    <item>
      <title>表現者の定理の証明</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2408/</link>
      <pubDate>Thu, 29 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2408/</guid>
      <description>定理 インプット集合Input Set $X \ne \emptyset$ と正定値カーネル $k: X \times X \to \mathbb{R}$ が与えられているとする。学習データセットTraining Datasetを $$ D</description>
    </item>
    <item>
      <title>機械学習における政府号カーネルと再生カーネルのヒルベルト空間</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2406/</link>
      <pubDate>Sun, 25 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2406/</guid>
      <description>定義 1 2 入力空間Input Space $X \ne \emptyset$ が定義域であり値域が複素数の集合 $\mathbb{C}$ の写像 $f: X \to \mathbb{C}$ で構成される関数空間 $\left( H , \left&amp;lt; \cdot , \cdot \right&amp;gt; \right) \subset \mathbb{C}^{X}$ がヒルベルト空間</description>
    </item>
    <item>
      <title>サポートベクターマシン</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2402/</link>
      <pubDate>Sat, 17 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2402/</guid>
      <description>モデル 1 簡単な定義 二値分類Binary Classificationが可能なデータを最もよく区別する直線や平面を見つける方法をサポートベクター</description>
    </item>
    <item>
      <title>ホモロジーグループのベッチ数</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2399/</link>
      <pubDate>Sun, 11 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2399/</guid>
      <description>概要 代数位相Algebraic Topologyにおいて、幾何学的な意味を考えずに単に定義だけを述べると、ベッチ数Betti Numberとは、</description>
    </item>
    <item>
      <title>ジュリアでの分散コンピューティングの方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2398/</link>
      <pubDate>Fri, 09 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2398/</guid>
      <description>概要 Juliaでは、複数のデバイスに計算タスクをスケジューリングする方法を紹介する1。正直、自分もよくわからない。 コード using Distributed ip_ = [] for last in [160,161,162,163,164,32,33,34,35,36,43,44,45,46,47] push!(ip_,</description>
    </item>
    <item>
      <title>ジュリアの多次元インデックス</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2394/</link>
      <pubDate>Thu, 01 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2394/</guid>
      <description>概要 Juliaでは、多次元配列を参照するためのインデックスタイプであるCatesianIndexを提供している1。もちろんCatesianと</description>
    </item>
    <item>
      <title>ジュリアのショートサーキット</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2392/</link>
      <pubDate>Sun, 28 May 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2392/</guid>
      <description>概要 Juliaでは、&amp;amp;&amp;amp;と||は論理積、論理和だけでなく、ショートサーキット評価Short-circuit Evaluatio</description>
    </item>
    <item>
      <title>ジュリアのfind関数들</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2390/</link>
      <pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2390/</guid>
      <description>概要 ジュリアの基本組み込み関数は知れば知るほど便利だ。早速、例を見て学ぼう。 コード x = [3, 7, 4, 5, 10, 3, 12, 3, 2, 4] argmin(x) argmax(x) findmin(x) findmax(x) extrema(x) findfirst(x .== 3) findlast(x .== 3) findall(x .== 3) findnext(x .== 3,</description>
    </item>
    <item>
      <title>ジュリアの感嘆符の規約</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2388/</link>
      <pubDate>Sat, 20 May 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2388/</guid>
      <description>概要 1 ジュリアでは、関数名の最後に感嘆符Bang!を追加することをバンク規約と呼ぶ。これらの関数は、与えられた引数を変更する特徴がある。 コー</description>
    </item>
    <item>
      <title>ベルツルアルゴリズム: 最小内包ディスク問題の解法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2385/</link>
      <pubDate>Sun, 14 May 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2385/</guid>
      <description>定義 最小包含円 $n &amp;gt; d$ としよう。$d$次元のユークリッド空間で与えられた有限な集合$P = \left\{ p_{k} \right\}_{k=1}^{n} \subset \mathbb{R}^{d}$に対して、以下の</description>
    </item>
    <item>
      <title>ジュリアで部分配列を迅速に参照する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2384/</link>
      <pubDate>Fri, 12 May 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2384/</guid>
      <description>概要 ジュリアで、viewは配列のサブアレイを素早く参照させるデータ構造だ。実際に使う立場から見れば面倒で差がないように見えるけど、怠惰に参照</description>
    </item>
    <item>
      <title>シンプリシアルホモロジーグループの定義</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2383/</link>
      <pubDate>Wed, 10 May 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2383/</guid>
      <description>ビルドアップ 難しい内容ですが、できるだけ理解しやすいように、すべての計算と説明を省略せずに丁寧に残しました。ホモロジーに興味がある方は、ぜひ</description>
    </item>
    <item>
      <title>ジュリアのブロードキャスティング文法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2382/</link>
      <pubDate>Mon, 08 May 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2382/</guid>
      <description>概要 ブロードキャスティングは Juliaで最も重要な概念の一つであり、ベクトル化されたコードを書く際に非常に便利な文法だ1。二項演算の前に.を</description>
    </item>
    <item>
      <title>ジュリアで配列から辞書を作成する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2375/</link>
      <pubDate>Mon, 24 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2375/</guid>
      <description>コード 1 julia&amp;gt; Dict([&amp;#34;a&amp;#34;, &amp;#34;bc&amp;#34;] .=&amp;gt; [2,8]) Dict{String, Int64} with 2 entries: &amp;#34;a&amp;#34; =&amp;gt; 2 &amp;#34;bc&amp;#34; =&amp;gt; 8 キーKeyとバリューValueとして使いたい二つの配列が与えられた時、Dict(Key .=&amp;gt; Value)</description>
    </item>
    <item>
      <title>ジュリアで複素数を使用する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2373/</link>
      <pubDate>Thu, 20 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2373/</guid>
      <description>概要 Juliaは、基本的にRと同じように複素数をサポートしている。 コード 虚数単位 im julia&amp;gt; z = 3 + 4im 3 + 4im imは純虚数 $i = \sqrt{-1}$ を表す。常識的に使われ</description>
    </item>
    <item>
      <title>ジュリアで条件文を簡潔に書く方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2341/</link>
      <pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2341/</guid>
      <description>概要 ジュリアで、&amp;lt;condition&amp;gt; &amp;amp;&amp;amp; &amp;lt;statement&amp;gt;は&amp;lt;condition&amp;gt;が真のとき&amp;lt;</description>
    </item>
    <item>
      <title>JuliaのデータフレームでNaNを0に置き換える方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2330/</link>
      <pubDate>Tue, 24 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2330/</guid>
      <description>概要 特定の値に変更する方法は、列ごとに変更するので不便で、データフレーム全体でNaNを扱うときはもっといいトリックを使ってみる価値がある。 コ</description>
    </item>
    <item>
      <title>ジュリアの三項演算子 ? :</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2328/</link>
      <pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2328/</guid>
      <description>概要 ジュリアでのA ? B : Cは、いわゆる三項演算子Ternary Operatorで、Aが真ならB、偽ならCを返す関数だ。数学的に二項演算が関数</description>
    </item>
    <item>
      <title>ジュリアでのデータフレーム特定値の変更方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2326/</link>
      <pubDate>Mon, 16 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2326/</guid>
      <description>概要 replace!() メソッドを使えばいい1。最初の引数には変更するデータフレームのカラムが入り、二番目の引数にはペア [ペア](../2201) A =&amp;gt; B` が入る</description>
    </item>
    <item>
      <title>ジュリアで周波数を計算する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2324/</link>
      <pubDate>Thu, 12 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2324/</guid>
      <description>概要 1 FreqTables.jlパッケージのfreqtable()関数を使えばいい。Rのfreq()関数と似た機能を持っている。 コード 配列 julia&amp;gt;</description>
    </item>
    <item>
      <title>JuliaでCSVファイルから列だけを読み込む方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2322/</link>
      <pubDate>Sun, 08 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2322/</guid>
      <description>ガイド 上のようなexample.csvファイルがあるとしよう。このデータフレームに読み込むとき、データ全体ではなく、列名だけを保持し、中身が</description>
    </item>
    <item>
      <title>ジュリアでデータフレームの要約を見る方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2320/</link>
      <pubDate>Wed, 04 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2320/</guid>
      <description>ガイド 1 using RDatasets iris = dataset(&amp;#34;datasets&amp;#34;, &amp;#34;iris&amp;#34;) describe(iris) describe() 関数を使えばいい。iris データを要約してみよう。 julia&amp;gt; describe(iris) 5×7 DataFrame Row │ variable mean min median max nmissing eltype │ Symbol Union… Any Union… Any Int64 DataType</description>
    </item>
    <item>
      <title>ジュリアのカテゴリカル配列</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2318/</link>
      <pubDate>Sat, 31 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2318/</guid>
      <description>概要 JuliaのCategoricalArrays.jlパッケージは、Rのfactorと似た機能を果たす。 コード julia&amp;gt; A = [&amp;#34;red&amp;#34;, &amp;#34;blue&amp;#34;, &amp;#34;red&amp;#34;, &amp;#34;green&amp;#34;] 4-element Vector{String}: &amp;#34;red&amp;#34; &amp;#34;blue&amp;#34; &amp;#34;red&amp;#34; &amp;#34;green&amp;#34; julia&amp;gt;</description>
    </item>
    <item>
      <title>ジュリアでRで使用されていた組み込みデータセットを読み込む方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2316/</link>
      <pubDate>Tue, 27 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2316/</guid>
      <description>ガイド RDatasets.jl パッケージを使えば大丈夫。以下は最も簡単な iris データセットを読み込む例です。基本組み込みデータセットの他にも様々なデータセットが含まれ</description>
    </item>
    <item>
      <title>ジュリアでパッケージバージョンを確認する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2313/</link>
      <pubDate>Wed, 21 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2313/</guid>
      <description>## ガイド 例として`Plots.jl`パッケージのバージョンを確認してみよう。REPLで`]`キーを押すとパッケージモードに入る。ここで`st</description>
    </item>
    <item>
      <title>ジュリアで配列が空かどうかを確認する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2311/</link>
      <pubDate>Sat, 17 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2311/</guid>
      <description>概要 isempty() 関数を使用すればいい。 コード julia&amp;gt; isempty([]) true julia&amp;gt; isempty(Set()) true julia&amp;gt; isempty(&amp;#34;&amp;#34;) true タイトルでは配列とされているが、実際には集合や文字列でも良い。 最適化 もちろん配列が空かど</description>
    </item>
    <item>
      <title>ジュリアで例外処理する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2309/</link>
      <pubDate>Tue, 13 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2309/</guid>
      <description>概要 地の果てまで一人で居る辛さを知ってる人は、ああ、分かるんだ コーディング中にわからないエラーに苦労した人は、プログラミングにおいてエラーが</description>
    </item>
    <item>
      <title>ジュリアでデータフレームのサイズを確認する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2307/</link>
      <pubDate>Fri, 09 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2307/</guid>
      <description>概要 nrow(), ncol(), size() を使用できる。Rと違って、length()はエラーになる。 コード julia&amp;gt; df = DataFrame(rand(100000,5), :auto) 100000×5 DataFrame Row │ x1 x2 x3 x4 x5 │ Float64 Float64 Float64 Float64 Float64 ──────</description>
    </item>
    <item>
      <title>ジュリアで変数名をカラム名として持つデータフレームを作成する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2305/</link>
      <pubDate>Mon, 05 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2305/</guid>
      <description>概要 ネームド・タプルが使える。ネームド・タプルを作る方法は、左の括弧のすぐ後ろにセミコロン;をつけることだ。例えば、DataFrame(; x,</description>
    </item>
    <item>
      <title>ジュリアのネームドタプル</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2303/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2303/</guid>
      <description>概要 名前付きタプルは、一般的なタプルとは異なり、辞書や構造体のように使用できるタプルだ。シンボルの配列をキーとして持ち、キーを使ってバリュー</description>
    </item>
    <item>
      <title>ジュリアでコマンドライン引数を挿入する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2280/</link>
      <pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2280/</guid>
      <description>日本語訳 コード println(ARGS[1] * &amp;#34; + &amp;#34; * ARGS[2] * &amp;#34; = &amp;#34; * string(parse(Float64, ARGS[1]) + parse(Float64, ARGS[2]))) 上記の通り、example.jlというファイルが1行で構成されているとしよう。Juliaでは</description>
    </item>
    <item>
      <title>Juliaで外部プログラムを実行する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2278/</link>
      <pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2278/</guid>
      <description>コード ジュリアでは、run()関数を使ってバックティックBacktickで囲まれた文字列を実行します。Pythonで言うところの[osモジュ</description>
    </item>
    <item>
      <title>ジュリアで文字列を数値に変換する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2276/</link>
      <pubDate>Sat, 08 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2276/</guid>
      <description>コード parse(type, str)を使えばいいんだ。文字列strをtypeタイプの数字に変更してくれる。 julia&amp;gt; parse(Int, &amp;#34;21&amp;#34;) 21 julia&amp;gt; parse(Float64, &amp;#34;3.14&amp;#34;) 3.14 なんでPythonみたいにInt64(</description>
    </item>
    <item>
      <title>ジュリアで可変引数関数を定義する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2266/</link>
      <pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2266/</guid>
      <description>概要 1 可変引数関数とは、プログラミングで一般にVarargs Functionと呼ばれるもので、複数の引数を制限なく受け入れることができる関数</description>
    </item>
    <item>
      <title>ジュリアのコンテナ内部の要素タイプをチェックする方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2264/</link>
      <pubDate>Wed, 14 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2264/</guid>
      <description>概要 eltype() 関数を使うだけだ。多分 element typeからきた名前だろう。 コード julia&amp;gt; set_primes = Set([2,3,5,7,11,13]) Set{Int64} with 6 elements: 5 13 7 2 11 3 julia&amp;gt; arr_primes = Array([2,3,5,7,11,13]) 6-element Vector{Int64}: 2 3 5 7 11 13 次のように$13$までの</description>
    </item>
    <item>
      <title>ジュリアプロットの基本設定を変更する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2262/</link>
      <pubDate>Sat, 10 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2262/</guid>
      <description>コード default() 関数を使用すればいい。 code1 普通の plot() 関数のように設定する方法と、キーとバリューを与えて一つずつ変更する方法がある。普通は前者の方が便利だ</description>
    </item>
    <item>
      <title>ジュリアでデータフレームの特定の行を削除する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2260/</link>
      <pubDate>Tue, 06 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2260/</guid>
      <description>概要 インデックスを取るときは、Not() 関数を使用すればいいんだ1。カラム名そのままのシンボル、またはシンボルの配列を入れると、それらのカラ</description>
    </item>
    <item>
      <title>ジュリアで図に垂直線と水平線を挿入する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2258/</link>
      <pubDate>Fri, 02 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2258/</guid>
      <description>概要 縦線と横線を引くには、vline!() と hline!() 関数を使用すればいい。 コード @time using Plots plot(rand(100)) hline!([0.5], linewidth = 2) vline!([25, 75], linewidth = 2) png(&amp;#34;result&amp;#34;) 線が引かれる位置は配列で渡す。配列の要</description>
    </item>
    <item>
      <title>ジュリアでアートスタイルを作る方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2256/</link>
      <pubDate>Mon, 29 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2256/</guid>
      <description>概要 RecipesBase.jlは、ユーザーが新しい図のスタイルを自分で作れるパッケージだ。Rプログラミング言語でのggplotがそうである</description>
    </item>
    <item>
      <title>ジュリアでデータフレームをグループ分けして計算する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2254/</link>
      <pubDate>Thu, 25 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2254/</guid>
      <description>概要 groupby()を使ってグループ別に分け、combine()を使って計算すればいいんだ1。 groupby(df, :colname) :colnameを基準にしてGroupe</description>
    </item>
    <item>
      <title>JuliaでDataFrameの重複した行を削除する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2252/</link>
      <pubDate>Sun, 21 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2252/</guid>
      <description>概要 これを実現するためには、unique()を使えばいい。正確には、重複した行を削除するというよりも、一つだけ残すことだ。 コード using DataFrames WJSN = DataFrame( member</description>
    </item>
    <item>
      <title>ジュリアでレイアウトを使ってサブプロットを描く方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2250/</link>
      <pubDate>Wed, 17 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2250/</guid>
      <description>概要 Juliaでは、サブプロットに関連するオプションはlayoutオプションを通して制御できる。 整数を入力すると、その数だけのグリッドをうま</description>
    </item>
    <item>
      <title>ジュリアで図の凡例の位置を調整する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2248/</link>
      <pubDate>Sat, 13 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2248/</guid>
      <description>概要 1 plot() 関数の legend オプションで、凡例の位置を自由に調整できる。$0$ から $1$ までの値で構成された2-タプルを与えると、正確にその位置に表示される</description>
    </item>
    <item>
      <title>ジュリア集合の絵のアスペクト比を調整する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2246/</link>
      <pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2246/</guid>
      <description>概要 1 グラフの幅と高さを調整するには、オプションにratioを入れるといい。他の推奨される別名には、aspect_ratios, axis_r</description>
    </item>
    <item>
      <title>ジュリアでCSV出力時の文字化け解決方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2244/</link>
      <pubDate>Fri, 05 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2244/</guid>
      <description>エラー using DataFrames, CSV example = DataFrame(x = 1:10, 가 = &amp;#34;나다&amp;#34;) CSV.write(&amp;#34;example.csv&amp;#34;, example) JuliaでCSVファイルに出力するとき、上のように韓国語が文字化けする現象が見られ</description>
    </item>
    <item>
      <title>- ジュリアでのテキスト出力装飾パッケージ</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2242/</link>
      <pubDate>Mon, 01 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2242/</guid>
      <description>概要 ジュリアでテキスト出力を飾るパッケージとしてCrayons.jlが知られている1。 組み込み関数だけで飾りたい場合は、printstyle</description>
    </item>
    <item>
      <title>ジュリア集合の画像に線を挿入する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2240/</link>
      <pubDate>Thu, 28 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2240/</guid>
      <description>コード using Plots scatter(rand(100), randn(100)) plot!([0,1],[0,1]) png(&amp;#34;example1&amp;#34;) plot!([.00,.25,.50],[-2,0,-2]) png(&amp;#34;example2&amp;#34;) θ = 0:0.01:2π plot!(.5 .+ cos.(θ)/3, 1.5sin.(θ)) png(&amp;#34;example3&amp;#34;) このコードを実行して、図に線分を入れる方法を見て</description>
    </item>
    <item>
      <title>ジュリアでのデータフレームの並べ替え方</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2238/</link>
      <pubDate>Sun, 24 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2238/</guid>
      <description>コード 上の例のコードを実行してみて、その結果を確認しよう。 ```code2 `WJSN` のデータフレームは上のようだ。 ### 列番号で並び替え `sort(df, cols::integer)` `cols`番目の列を基準</description>
    </item>
    <item>
      <title>ジュリアでデータフレームに新しい行を挿入する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2236/</link>
      <pubDate>Wed, 20 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2236/</guid>
      <description>コード using DataFrames Unit1 = DataFrame( member = [&amp;#34;다영&amp;#34;,&amp;#34;루다&amp;#34;,&amp;#34;수빈&amp;#34;,&amp;#34;진숙&amp;#34;], birth = [99,97,96,99], height = [161,157,159,162]</description>
    </item>
    <item>
      <title>ジュリアで無限大を使う方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2234/</link>
      <pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2234/</guid>
      <description>概要 Infinities.jlは、Juliaで無限大記号を使用できるように支援するパッケージだ1。科学計算のコーディングにおいて、無限大は意</description>
    </item>
    <item>
      <title>ジュリアで特定バージョンのパッケージをインストールする方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2232/</link>
      <pubDate>Tue, 12 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2232/</guid>
      <description>ガイド 1 (@v1.6) pkg&amp;gt; status JuMP Status `C:\Users\rmsms\.julia\environments\v1.6\Project.toml` [4076af6c] JuMP v0.20.0 REPLで]キーを押すとパッケージモードに入る。例えば、v0.20.0のバージョンのパッケージをv0.21にバージ</description>
    </item>
    <item>
      <title>ジュリアで空のデータフレームを作る方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2230/</link>
      <pubDate>Fri, 08 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2230/</guid>
      <description>概要 多くの言語でデータフレームがサポートされているにも関わらず、驚くことに毎回新しくてイライラするのが、空の配列の作成だ。 コード タイプ指定 実</description>
    </item>
    <item>
      <title>ジュリア文字列で特定のパターン位置を見つける方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2226/</link>
      <pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2226/</guid>
      <description>コード julia&amp;gt; findfirst(&amp;#34;li&amp;#34;, &amp;#34;multicolinearlity&amp;#34;) 8:9 julia&amp;gt; findlast(&amp;#34;li&amp;#34;, &amp;#34;multicolinearlity&amp;#34;) 14:15 julia&amp;gt; findnext(&amp;#34;l&amp;#34;, &amp;#34;multicolinearlity&amp;#34;, 1) 3:3 julia&amp;gt; findnext(&amp;#34;l&amp;#34;, &amp;#34;multicolinearlity&amp;#34;, 4) 8:8 julia&amp;gt; findnext(&amp;#34;l&amp;#34;, &amp;#34;multicolinearlity&amp;#34;, 9) 14:14 julia&amp;gt; findfirst(r&amp;#34;t.+t&amp;#34;, &amp;#34;multicolinearlity&amp;#34;) 4:16 findfirst(pattern, A) 文字列Aでpatternに合致する区間をRangeでリターンする。 パターンに</description>
    </item>
    <item>
      <title>Juliaで特定の文字列を含むかどうかを確認する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2224/</link>
      <pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2224/</guid>
      <description>コード julia&amp;gt; contains(&amp;#34;qwerty&amp;#34;, &amp;#34;er&amp;#34;) true julia&amp;gt; contains(&amp;#34;qwerty&amp;#34;, &amp;#34;et&amp;#34;) false julia&amp;gt; contains(&amp;#34;qwerty&amp;#34;, r&amp;#34;q?&amp;#34;) true contains(haystack::AbstractString, needle) haystackにneedleが含まれているかをブーリアンで返す。needleにはr&amp;quot;...&amp;q</description>
    </item>
    <item>
      <title>ジュリアでの因数分解および素数関数の使用方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2222/</link>
      <pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2222/</guid>
      <description>概要 Primes.jlは、素数関連の関数や素因数分解を取り扱うパッケージだ。解析的整数論に関する関数の実装はまだ不足している。 パッケージの全</description>
    </item>
    <item>
      <title>ジュリアで多項式を使用する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2220/</link>
      <pubDate>Sat, 18 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2220/</guid>
      <description>概要 Polynomials.jlは多項式関数の表現や計算を含むパッケージだ。数学的に単純な多項式だからコーディングも簡単に考えがちだが、実際</description>
    </item>
    <item>
      <title>ジュリアで文字列を結合する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2218/</link>
      <pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2218/</guid>
      <description>コード 文字列の連結 * julia&amp;gt; &amp;#34;oh&amp;#34; * &amp;#34;my&amp;#34; * &amp;#34;girl&amp;#34; &amp;#34;ohmygirl&amp;#34; Pythonの+に相当する。 複数の文字列を連結する string() julia&amp;gt; string(&amp;#34;oh&amp;#34;,&amp;#34;my&amp;#34;, &amp;#34;girl&amp;#34;) &amp;#34;ohmygirl&amp;#34; Rのpaste0()に相当する。 文字列のリスト</description>
    </item>
    <item>
      <title>ジュリアプロットで特定のデータラベルを隠す方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2216/</link>
      <pubDate>Fri, 10 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2216/</guid>
      <description>コード 1 using Plots x = rand(30) y = rand(30) z = rand(30) plot(x) plot!(y) plot!(z) png(&amp;#34;result1&amp;#34;) 上のように、特定のデータだけ凡例に表示させたくない場合がある。 label = &amp;quot;&amp;quot; plot(x, label = &amp;#34;&amp;#34;) plot!(y) png(&amp;#34;result2&amp;#34;) そんな時は、label</description>
    </item>
    <item>
      <title>ジュリアプロットにテキストを挿入する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2214/</link>
      <pubDate>Mon, 06 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2214/</guid>
      <description>コード 1 annotate!()を使えばいいんだ。以下のコードはブラウン運動で最大点と最小点をマークした絵を描くコードだよ。 using Plots cd(@__DIR__) data = cumsum(randn(100)) plot(data, color =</description>
    </item>
    <item>
      <title>ジュリアプロットに韓国語テキストを挿入する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2212/</link>
      <pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2212/</guid>
      <description>環境 OS: Windows julia: v1.6.2 エラー julia&amp;gt; plot(data, color = :black, label = &amp;#34;값&amp;#34;, title = &amp;#34;브라운모션&amp;#34;) GKS: glyph missing from current font: 48652 GKS: glyph missing from current font: 46972 GKS: glyph missing from current font: 50868 GKS: glyph missing</description>
    </item>
    <item>
      <title>PythonのようにJuliaで文字列を扱う方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2205/</link>
      <pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2205/</guid>
      <description>コード 1 2 3 julia&amp;gt; replace(&amp;#34;qwerty&amp;#34;, &amp;#34;q&amp;#34;=&amp;gt;&amp;#34;Q&amp;#34;) &amp;#34;Qwerty&amp;#34; julia&amp;gt; join(&amp;#34;qwerty&amp;#34;, &amp;#34;,&amp;#34;) &amp;#34;q,w,e,r,t,y&amp;#34; julia&amp;gt; split(&amp;#34;qwerty&amp;#34;, &amp;#34;&amp;#34;) 6-element Vector{SubString{String}}: &amp;#34;q&amp;#34; &amp;#34;w&amp;#34; &amp;#34;e&amp;#34; &amp;#34;r&amp;#34; &amp;#34;t&amp;#34; &amp;#34;y&amp;#34; ジュリアは文字列処理に特出している言語ではないけど、そのせいか、Pythonをたくさん真似</description>
    </item>
    <item>
      <title>ジュリアで近似値をチェックする方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2203/</link>
      <pubDate>Sun, 15 May 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2203/</guid>
      <description>コード 比較演算子として$\approx$を使えば、二つの値が十分に似ている時だけ真を返す。≈は$\TeX$でと同じように、\approxと入</description>
    </item>
    <item>
      <title>ジュリアから：辞書とペア</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2201/</link>
      <pubDate>Wed, 11 May 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2201/</guid>
      <description>コード 1 julia&amp;gt; d = Dict(&amp;#34;A&amp;#34;=&amp;gt;1, &amp;#34;B&amp;#34;=&amp;gt;2) Dict{String, Int64} with 2 entries: &amp;#34;B&amp;#34; =&amp;gt; 2 &amp;#34;A&amp;#34; =&amp;gt; 1 julia&amp;gt; push!(d,(&amp;#34;C&amp;#34;,3)) ERROR: MethodError: no method matching push!(::Dict{String, Int64}, ::Tuple{String, Int64}) julia&amp;gt; push!(d,&amp;#34;C&amp;#34; =&amp;gt; 3) Dict{String, Int64} with 3 entries: &amp;#34;B&amp;#34; =&amp;gt; 2 &amp;#34;A&amp;#34; =&amp;gt; 1 &amp;#34;C&amp;#34; =&amp;gt; 3 julia&amp;gt; typeof(&amp;#34;C&amp;#34; =&amp;gt; 3) Pair{String, Int64} ジュリアの辞書Dictiona</description>
    </item>
    <item>
      <title>ジュリアで.matのようにデータを保存する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2199/</link>
      <pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2199/</guid>
      <description>概要 JLD.jlは、Juliaを使用している間に発生する一時データを保存することができるパッケージだ1。純粋なJuliaプロジェクトを進行し</description>
    </item>
    <item>
      <title>ジュリアのループでインデックスと値の両方を参照する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2197/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2197/</guid>
      <description>コード 1 Base.Iterators.enumerate() は、Pythonのように配列のインデックスと値の両方を参照できるイテレーターIteratorを返す。 julia&amp;gt; x = [3,5,4,1,2] 5-element Vector{Int64}: 3 5 4 1 2 julia&amp;gt; for (idx, value)</description>
    </item>
    <item>
      <title>ジュリアでのシンボル</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2195/</link>
      <pubDate>Fri, 29 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2195/</guid>
      <description>概要 Juliaに初めて接すると、戸惑うことも少なくないのがシンボルSymbolデータタイプである。シンボルは冒頭に:を付けて使用され、内部デ</description>
    </item>
    <item>
      <title>ジュリアで配列の要素がリストに属しているかを確認する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2193/</link>
      <pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2193/</guid>
      <description>ガイド 1 julia&amp;gt; x = rand(&amp;#39;a&amp;#39;:&amp;#39;c&amp;#39;, 10) 10-element Vector{Char}: &amp;#39;a&amp;#39;: ASCII/Unicode U+0061 (category Ll: Letter, lowercase) &amp;#39;a&amp;#39;: ASCII/Unicode U+0061 (category Ll: Letter, lowercase) &amp;#39;b&amp;#39;: ASCII/Unicode U+0062 (category Ll: Letter, lowercase) &amp;#39;c&amp;#39;: ASCII/Unicode U+0063 (category Ll: Letter, lowercase) &amp;#39;b&amp;#39;: ASCII/Unicode U+0062 (category Ll: Letter, lowercase) &amp;#39;c&amp;#39;: ASCII/Unicode U+0063 (category Ll: Letter, lowercase) &amp;#39;c&amp;#39;: ASCII/Unicode U+0063 (category Ll: Letter, lowercase) &amp;#39;c&amp;#39;: ASCII/Unicode U+0063 (category Ll: Letter, lowercase) &amp;#39;b&amp;#39;: ASCII/Unicode U+0062</description>
    </item>
    <item>
      <title>ジュリアでエレガントなループを使用する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2191/</link>
      <pubDate>Thu, 21 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2191/</guid>
      <description>ガイド while while文は他の言語と変わらない。 julia&amp;gt; while x &amp;lt; 10 x += 1 print(&amp;#34;▷eq1◁i - &amp;#34;) end 1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9 - 10 -</description>
    </item>
    <item>
      <title>ジュリアでプロットにTeXを使用する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2180/</link>
      <pubDate>Wed, 30 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2180/</guid>
      <description>コード 1 LaTeXStrings ライブラリを使うには、文字列の前に L を付けて、L&amp;quot;...&amp;quot; のように書く。 @time using Plots @time using LaTeXStrings plot(0:0.1:2π</description>
    </item>
    <item>
      <title>ジュリアでグラフィックスの背景を透明にする方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2173/</link>
      <pubDate>Wed, 16 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2173/</guid>
      <description>コード 1 ブラウザがダークモードになっていれば、背景が透明になっているのをはっきりと確認できる。 background_color オプションに :transparent シンボルを入れればいいんだ。*</description>
    </item>
    <item>
      <title>ジュリアにおける==と===の違い</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2157/</link>
      <pubDate>Sat, 12 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2157/</guid>
      <description>コード 1 ==は値が同じかどうかを比較し、===は比較する値が可変Mutableかどうかによって異なる動作をする。 Mutable: 二項が同じオブジェクトを参</description>
    </item>
    <item>
      <title>ブラック-ショールズモデルの導出</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2156/</link>
      <pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2156/</guid>
      <description>モデル 1 $t$ 時点で $S_{t}$ を基礎資産 $1$単位の価格とし、$S_{t}$ が幾何ブラウン運動をすると仮定しよう。すなわち、標準ブラウン運動 $W_{t}$ とトレンド</description>
    </item>
    <item>
      <title>ジュリアでビット配列を反転させる方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2149/</link>
      <pubDate>Thu, 27 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2149/</guid>
      <description>コード 1 すごく簡単なんだけど、否定演算子の ! と ~ を単項演算子じゃなくて関数として見てしまって、!. や ~. を使う間違いをよくするよ。.! や .~ と書</description>
    </item>
    <item>
      <title>ジュリアでfile.choose()のようにダイアログボックスを開いてファイルを選択する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2143/</link>
      <pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2143/</guid>
      <description>コード 1 using Gtk file_name = open_dialog(&amp;#34;파일 열기&amp;#34;) 最初の引数として与えられる文字列は、ダイアログのタイトルだ。実行すると</description>
    </item>
    <item>
      <title>ジュリアで小数点以下特定の桁で丸める方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2133/</link>
      <pubDate>Sun, 26 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2133/</guid>
      <description>コード 実のところ、Juliaは文字列のフォーマットなどが特に便利な言語ではない。コンソールに出力する際に文字列自体の機能を使う方法もあるが、</description>
    </item>
    <item>
      <title>ジュリアでヒートマップの色範囲を指定する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2126/</link>
      <pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2126/</guid>
      <description>コード 1 ヒートマップを描く時、数値に応じて値のスケールが固定されないと困ることがある。基本のヒートマップ関数でclimオプションを通じて色の</description>
    </item>
    <item>
      <title>ジュリアでzfill()を使う方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2124/</link>
      <pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2124/</guid>
      <description>概要 1 Pythonでは、zfill()は文字列クラスのメソッドとして、左側を0で埋める機能を持っている。しかし、Juliaではもっと汎用的で</description>
    </item>
    <item>
      <title>ジュリアで構造体の属性を確認する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2120/</link>
      <pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2120/</guid>
      <description>コード propertynames() propertynames()関数で確認するといい1。Juliaにはクラスがなく、構造体だけが存在するから2、この関数で返されるすべ</description>
    </item>
    <item>
      <title>ジュリアで特定の値で埋めた配列を作る方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2101/</link>
      <pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2101/</guid>
      <description>コード fill() 関数を使えばいい。Rの rep() 関数と似た機能をする。</description>
    </item>
    <item>
      <title>ジュリアでSHPファイルを読む方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2097/</link>
      <pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2097/</guid>
      <description>コード XsDB_주거인구_100M_TM.shpというshpファイルを読み込むコードは以下の通りだ。 using Shapefile cd(@__DIR__) path = &amp;#34;XsDB_주거인구_</description>
    </item>
    <item>
      <title>ジュリアで小数点以下を切り捨てて整数に変換する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2095/</link>
      <pubDate>Mon, 11 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2095/</guid>
      <description>## 概要 `trunc`関数を使うには、第一引数に`Int`を入れるだけだ。 ## コード julia&amp;gt; @time for t in 1:10^8 Int64(ceil(t/1000)) end 0.189653 seconds julia&amp;gt; @time for t in 1:10^8 trunc(Int64, ceil(t/1000)) end 0.128472 seconds 二つのループは全く</description>
    </item>
    <item>
      <title>ジュリアでデータフレームの列名を変更する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2093/</link>
      <pubDate>Thu, 07 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2093/</guid>
      <description>概要 rename!() 関数を使って変更するといい1。 文字列のリストを与えて一度に変更する方法もあるし、個別に変更する方法もある。 コード using DataFrames df = DataFrame(rand(1:9, 10, 3), :auto) rename!(df, [&amp;#34;X&amp;#34;, &amp;#34;Y&amp;#34;,</description>
    </item>
    <item>
      <title>ジュリアでNearstNeighbors.jlを使用して距離を素早く計算する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2088/</link>
      <pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2088/</guid>
      <description>概要 $n$の座標間の距離を計算する際、行列を作る必要はなく、単に距離を計算するだけで済む場合、多次元検索に有利なデータ構造のk-d ツリー1を</description>
    </item>
    <item>
      <title>ジュリアで2次元配列をCSVファイルに出力する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2073/</link>
      <pubDate>Sat, 28 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2073/</guid>
      <description>コード using CSV, DataFrames A = rand(1:10, 10) B = zeros(10) AB = DataFrame(hcat(A,B), [&amp;#34;A&amp;#34;, &amp;#34;B&amp;#34;]) CSV.write(&amp;#34;AB.csv&amp;#34;, AB) CSVパッケージのwrite関数を通じて簡単に2次元配列を出力できる。A, Bは1次元配列で、hcat</description>
    </item>
    <item>
      <title>ジュリア変数名にグリーク文字と添え字を書く方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2065/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2065/</guid>
      <description>概要 ジュリアでは、変数名にユニコード(UTF-8)を許可している。だから、ギリシャ文字はもちろん、上付き文字、下付き文字、さらには韓国語や絵</description>
    </item>
    <item>
      <title>ジュリアで変数の値を便利に出力する方法、補間</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2041/</link>
      <pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2041/</guid>
      <description>概要 Juliaの便利な機能である補間Interpolationについて説明する。補間をうまく使うと、出力文を簡単できれいに書くことができるの</description>
    </item>
    <item>
      <title>WindowsのCMDとPowerShellでJuliaを使用する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2036/</link>
      <pubDate>Tue, 15 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2036/</guid>
      <description>ガイド ステップ0. julia 1.6 以上をインストール バージョン1.6からは、インストール過程で環境変数に追加できる。示されたオプションをチェックしてイン</description>
    </item>
    <item>
      <title>ジュリアのメタプログラミング</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2024/</link>
      <pubDate>Sat, 22 May 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2024/</guid>
      <description>## コード [^1] [^1]: https://docs.julialang.org/en/v1/manual/metaprogramming/ Juliaでは[メタプログラミング](../1457)を言語レベルでサポートしている。これは文字列をそのままのコードとして読み</description>
    </item>
    <item>
      <title>ジュリアで配列をフラット化する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2022/</link>
      <pubDate>Tue, 18 May 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2022/</guid>
      <description>コード vec() 関数を使えばいい。 julia&amp;gt; A = rand(0:9, 3,4) 3×4 Array{Int64,2}: 6 8 7 3 2 9 3 2 5 0 6 7 julia&amp;gt; vec(A) 12-element Array{Int64,1}: 6 2 5 8 9 0 7 3 6 3 2 7 人間の目には、1次元配列と同じように見え</description>
    </item>
    <item>
      <title>ジュリアで距離行列計算を最適化する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2020/</link>
      <pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2020/</guid>
      <description>結論 $n$ 個の座標間の距離を計算しようとする。 全ての座標間を計算する必要がなければ、グループに分けて長方形の距離行列を作ればいい。 長方形の距離行</description>
    </item>
    <item>
      <title>ジュリアで重み付けとランダムサンプリングをする方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2018/</link>
      <pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2018/</guid>
      <description>概要 Juliaで、Rのsample()やPythonパッケージnumpyのrandom.choice()と同じ役割をするsample()関数</description>
    </item>
    <item>
      <title>ジュリアでの文字と整数の等価オペレータ==の速度比較</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2016/</link>
      <pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2016/</guid>
      <description>結論 配列の各要素をEqualオペレータ==で比較すると、整数よりもCharの方が早い。 速度比較 julia&amp;gt; integer = rand(1:5, N); print(typeof(integer)) Array{Int64,1} julia&amp;gt; character = rand([&amp;#39;S&amp;#39;,&amp;#39;E&amp;#39;,&amp;#39;I&amp;#39;,&amp;#39;R&amp;#39;,&amp;#39;D&amp;#39;], N); print(typeof(character)) Array{Char,1} julia&amp;gt; @time integer .== 1; 0.009222 seconds (6 allocations:</description>
    </item>
    <item>
      <title>RGBカラーチートシート</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2013/</link>
      <pubDate>Wed, 28 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2013/</guid>
      <description>概要 よく使われるRGB色の商標だ。 コード</description>
    </item>
    <item>
      <title>Juliaパッケージのインストール時に\General\Registry.toml: No such file or directoryというエラーを解決</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2069/</link>
      <pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2069/</guid>
      <description>エラー ERROR: SystemError: opening file &amp;quot;C:\\Users\\rmsms\\.julia\\registries\\General\\Registry.toml&amp;quot;: No such file or directory 原因 人を本当にイライラさせるエラーだけど、言葉通りこのパスにRegistry.tomlファイルがなくて発生するエラ</description>
    </item>
    <item>
      <title>WindowsでJuliaの最新バージョンをインストールする方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2067/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2067/</guid>
      <description>ガイド ステップ1. ジュリアのインストール ジュリアのダウンロードページからインストールファイルをダウンロードして、実行する。 ステップ2. VSコ</description>
    </item>
    <item>
      <title>ジュリアで16進数RGBコード（HEX）を使用する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1921/</link>
      <pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1921/</guid>
      <description>コード Juliaで色を取り扱うために提供されるパッケージはColors.jlだ。可視化パッケージのPlots.jlを読み込めば、Colors</description>
    </item>
    <item>
      <title>ジュリアでのデータフレームと2次元配列間の変換方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1930/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1930/</guid>
      <description>環境 OS: Windows11 バージョン: Julia 1.9.0, DataFrames v1.5.0</description>
    </item>
    <item>
      <title>ジュリアで *.csvファイルを読み込む方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1923/</link>
      <pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1923/</guid>
      <description>ガイド 旧バージョン julia v1.5.0では、*.csvファイルを以下のように読み込んだ。 実際、Juliaはまだデータ入力に特別便利な言語ではない。</description>
    </item>
    <item>
      <title>WindowsでJuliaの並列計算に使用するスレッド数を変更する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1933/</link>
      <pubDate>Sat, 23 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1933/</guid>
      <description>ガイド Juliaでは並列計算が日常的に使用されるため、場合によってはコンピュータの全リソースを計算に集中させる必要がある。スレッド数を変更す</description>
    </item>
    <item>
      <title>ジュリアで実行されるコードファイルの位置を確認する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1935/</link>
      <pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1935/</guid>
      <description>ガイド ジュリアを使っている人なら、サーバーを含む複数のオペレーティングシステムやコンピューターを使うことに慣れている可能性が高い。ファイル入</description>
    </item>
    <item>
      <title>Linux上のJuliaでの並列計算に使用するスレッド数の変更方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1937/</link>
      <pubDate>Thu, 21 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1937/</guid>
      <description>ガイド Juliaでは、並列計算を日常的に使用するため、場合によってはコンピューターの全てのリソースを計算に集中させる必要がある。スレッド数を</description>
    </item>
    <item>
      <title>ジュリアで合成関数を使用する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1942/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1942/</guid>
      <description>コード julia&amp;gt; f(x) = 2x + 1 f (generic function with 1 method) julia&amp;gt; g(x) = x^2 g (generic function with 1 method) julia&amp;gt; (g ∘ f)(3) 49 説明 Juliaでは、関数の合成はプログラミングでのパイプオペレーターに似ている。</description>
    </item>
    <item>
      <title>ジュリアでGIFを作る方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1863/</link>
      <pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1863/</guid>
      <description>コード もともとさくらすし店では、もっと詳しい説明を加えることが多いが、ジュリアでアニメGIFを作るのがどれほど簡単かを強調するために、できる</description>
    </item>
    <item>
      <title>ジュリアで距離行列を計算する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1799/</link>
      <pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1799/</guid>
      <description>概要 距離行列Distance Matrixは、パーティクルダイナミクスParticle DynamicsやムービングエージェントMoving Ag</description>
    </item>
    <item>
      <title>ジュリアで空の配列を作成する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1797/</link>
      <pubDate>Thu, 19 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1797/</guid>
      <description>コード サイズ指定 julia&amp;gt; empty = Array{Float64, 2}(undef, 3, 4) 3×4 Array{Float64,2}: 3.39519e-313 3.18299e-313 4.66839e-313 1.061e-313 4.03179e-313 5.51719e-313 1.6976e-313 4.24399e-314 2.97079e-313 4.66839e-313 7.00259e-313 5.0e-324 上のコードを実行すると、空の配列が作成される。たまに1.76297e-315の</description>
    </item>
    <item>
      <title>プアンカレ-ベンディクソン定理の証明</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1788/</link>
      <pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1788/</guid>
      <description>정리 $2$次元の多様体 $\mathcal{P}$ と関数 $f,g \in C^{r} \left( \mathcal{P} \right)$ に対して、次のようなベクトル場が微分方程式として与えられているとする。 $$ \dot{x} = f(x,y) \\ \dot{y} = g(x,y) $$ $\mathcal{M}$ このベク</description>
    </item>
    <item>
      <title>LinuxでJuliaの最新バージョンをインストールする方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1511/</link>
      <pubDate>Mon, 17 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1511/</guid>
      <description>このポストの時点でのJuliaの最新バージョンはv1.3.1です。 ガイド ステップ1. Juliaのダウンロード Generic Linux Binaries for x86から自分のCPUの</description>
    </item>
    <item>
      <title>1万番目までの素数点以下のリスト</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2339/</link>
      <pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2339/</guid>
      <description>素数 1万番目までの素数のリストである。 ダウンロード 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197</description>
    </item>
    <item>
      <title>ジュリアでの並列処理の方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1474/</link>
      <pubDate>Sat, 08 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1474/</guid>
      <description>コード 最初に、生えび寿司レストランには詳しい説明が含まれているが、ジュリアは並列処理をどれだけ容易にできるかを強調するために、わざと説明を省</description>
    </item>
    <item>
      <title>ジュリアの強力な便利機能、マクロ</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1454/</link>
      <pubDate>Wed, 15 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1454/</guid>
      <description>概要 マクロは、Juliaでコーディングする時の便利機能であり、スコープの前に置いて実行される。例えば、自分のプログラムがどれくらいの時間を消</description>
    </item>
    <item>
      <title>ジュリアでパイプオペレータを使用する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1450/</link>
      <pubDate>Sat, 11 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1450/</guid>
      <description>概要 ジュリアはデータを扱う上での強みを生かして、パイプラインオペレーターをサポートしている。 コード julia&amp;gt; (1:5) .|&amp;gt; (x -&amp;gt; sqrt(x+2)) .|&amp;gt; sin |&amp;gt; minimum 0.4757718381527513 julia&amp;gt; minimum(sin.((x -&amp;gt; sqrt(x+2)).(1:5))) 0.4757718381527513 上のサンプ</description>
    </item>
    <item>
      <title>ジュリアでのラムダ式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1448/</link>
      <pubDate>Tue, 07 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1448/</guid>
      <description>概要 Juliaでは、ラムダ式は以下のように定義される。 (x -&amp;gt; 3x^2 - 2x + 3)(1) これは、匿名関数$\lambda : \mathbb{Z} \to \mathbb{Z}$を定義し、そ</description>
    </item>
    <item>
      <title>ジュリアで画像を読み込み、行列として保存する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1446/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1446/</guid>
      <description>コード using Images cd(&amp;#34;C:/Users/rmsms/OneDrive/examples&amp;#34;) pwd() example = load(&amp;#34;example.jpg&amp;#34;) typeof(example) size(example) gray1 = Gray.(example) typeof(gray1) size(gray1) M = convert(Array{Float64},gray1) typeof(M) size(M) colorview(Gray, M.^(1/2)) save(&amp;#34;rgb.png&amp;#34;, colorview(RGB, example)) save(&amp;#34;gray1.png&amp;#34;, colorview(Gray, gray1)) save(&amp;#34;gray2.png&amp;#34;, colorview(Gray, transpose(gray1))) save(&amp;#34;gray3.png&amp;#34;, colorview(Gray, M.^(1/2))) 上から順にサンプルコードを簡単に理解してみよう: cd() : Change Directory, 作業ディレク</description>
    </item>
    <item>
      <title>ジュリアでの集合データ型と演算子</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1442/</link>
      <pubDate>Sun, 29 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1442/</guid>
      <description>概要 Juliaでは、Pythonと同様にセットデータ型をサポートしています。元来のセットデータ型がそうであるように、使用する人にとっては非常</description>
    </item>
    <item>
      <title>ジュリアにおける配列のスライシングとインデックス化</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1437/</link>
      <pubDate>Thu, 26 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1437/</guid>
      <description>概要 ジュリアは、R、パイソン、マトラボの利点が混在する言語だ。配列はプログラミングの基本であり、その利用で複数の言語の痕跡が見られる。 コード</description>
    </item>
    <item>
      <title>Juliaでパッケージをインストールして使用する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1416/</link>
      <pubDate>Sun, 08 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1416/</guid>
      <description>方法1 using LinearAlgebra using Pkg Pkg.add(&amp;#34;Plots&amp;#34;) Pkg.add(&amp;#34;Distributions&amp;#34;) using Plots 上のコードは、LinearAlgebraパッケージとPkgパッケージを読み込むこと、そして.add()関数を使ってPl</description>
    </item>
    <item>
      <title>ジュリアのタイプとアノテーション</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1379/</link>
      <pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1379/</guid>
      <description>julia&amp;gt; function add1(a,b) return a+b end add1 (generic function with 1 method) julia&amp;gt; add1(1,2) 3 julia&amp;gt; add(1,2.0) ERROR: UndefVarError: add not defined Stacktrace: [1] top-level scope at REPL[43]:1 julia&amp;gt; function add2(a::Int64, b::Float64) return a+b end add2 (generic function with 1 method) julia&amp;gt; add2(1,2) ERROR: MethodError: no method matching add2(::Int64, ::Int64) Closest candidates are: add2(::Int64, ::Float64) at REPL[44]:1 Stacktrace: [1] top-level scope at REPL[45]:1 julia&amp;gt; add2(1,2.0) 3.0 上のよう</description>
    </item>
    <item>
      <title>ジュリアプログラミング言語</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1374/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1374/</guid>
      <description>概要 ジュリアはMITで開発され、2012年に公開されたプログラミング言語で、高い生産性と速度を目指している。Cやフォートランと同等の速度を実</description>
    </item>
    <item>
      <title>条件付き期待値の性質</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1322/</link>
      <pubDate>Mon, 07 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1322/</guid>
      <description>定理 確率空間 $( \Omega , \mathcal{F} , P)$ が与えられているとする。 [1] 測度論での定理: 可測関数 $f$, $g$ が $\mathcal{F}$-可測であれば、$g = h (f)$ を満たす</description>
    </item>
    <item>
      <title>ガロア体</title>
      <link>https://freshrimpsushi.github.io/jp/posts/820/</link>
      <pubDate>Sat, 16 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/820/</guid>
      <description>まとめ 1 素数 $p$ と 自然数 $n$ に対して、基数が $p^{n}$ の 有限 体有限体を $p^{n}$ 次のガロア体ガロア体と定義し、$\text{GF} \left( p^{n} \right)$ のように表す。有限体はガ</description>
    </item>
    <item>
      <title>主イデアル整域</title>
      <link>https://freshrimpsushi.github.io/jp/posts/825/</link>
      <pubDate>Mon, 28 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/825/</guid>
      <description>定義 1 整域 $D$ の $p \ne 0$ が単元でないとする。 PID $D$ の全てのイデアルが主イデアルである場合、$D$ を主イデアル整域PIDと呼ぶ。 従属定義 可換環 $R$ が単</description>
    </item>
    <item>
      <title>함수해석학에서 힐베르트 공간</title>
      <link>https://freshrimpsushi.github.io/jp/posts/776/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/776/</guid>
      <description>정의1 완비 내적 공간을 힐베르트 공간Hilbert space라고 한다. 힐베르트의 이름을 따서 주로 $H$라고 표기한다. 설명 완비 공간이란, 모든 코시수열</description>
    </item>
    <item>
      <title>位相空間におけるコンパクトとプレコンパクトとは？</title>
      <link>https://freshrimpsushi.github.io/jp/posts/489/</link>
      <pubDate>Sat, 24 Mar 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/489/</guid>
      <description>定義 1 位相空間 $\left( X, \mathscr{T} \right)$ に対して $A \subset X$ としよう。 $X$ の開集合からなる集合 $\mathscr{O} \subset \mathscr{T}$ が次を満たす場合、$\mathscr{O}$ を $A$ の開被覆Open C</description>
    </item>
    <item>
      <title>エーネストローム-カケヤ定理の証明</title>
      <link>https://freshrimpsushi.github.io/jp/posts/5/</link>
      <pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/5/</guid>
      <description>定理 1 $\left\{ a_{i} \right\}_{i=0}^{n} \subset \mathbb{R}$ で $a_0 &amp;gt; a_1 &amp;gt; \cdots &amp;gt; a_n &amp;gt; 0$ としましょう。すると、多項関数 $$ P(z) := a_0 + a_1 z + \cdots + a_{n-1} z^{n-1} + a_n z^n $$ において、あらゆる根 $z \in \mathbb{C}$ は $|z| \ge 1$ を満たし</description>
    </item>
    <item>
      <title>二本の平行な直線の間の距離を求める公式の導出</title>
      <link>https://freshrimpsushi.github.io/jp/posts/4/</link>
      <pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/4/</guid>
      <description>式 $$ d=\frac {|2k|}{\sqrt{m^2+1}} $$ 説明 双曲線の接線の問題を解いていると、二つの接線の間の距離を求めることがよくあります。点から直線までの距離を求める公式があるため、</description>
    </item>
    <item>
      <title>算術平均と幾何平均、調和平均の間の不等式</title>
      <link>https://freshrimpsushi.github.io/jp/posts/3/</link>
      <pubDate>Tue, 14 Mar 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/3/</guid>
      <description>定義 $n$ 個の正数 ${x}_1,{x}_2,\cdots,{x}_n$ に対して算術平均、幾何平均、調和平均は以下のように定義される。 算術平均 : $$ \sum_{ k=1 }^{ n }{ \frac { {x}_k }{ n } }=\frac { {x}_1+{x}_2+\cdots+{x}_n }{ n } $$ 幾何平均 : $$ \prod_{</description>
    </item>
    <item>
      <title>ジュリアで決定木を使う方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2618/</link>
      <pubDate>Tue, 26 Aug 1924 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2618/</guid>
      <description>概要 ジュリアで決定木Decision Treeを実装したDecisionTree.jlパッケージを紹介する1。 コード 例としては、Rの組み込みデ</description>
    </item>
    <item>
      <title>ジュリアでコレクションの重複を削除する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2616/</link>
      <pubDate>Fri, 22 Aug 1924 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2616/</guid>
      <description>概要 ジュリアでコレクションの重複をなくし、チェックする方法を紹介する。重複をなくすunique()関数は、アルゴリズム的に見て難しくないが、</description>
    </item>
    <item>
      <title>ジュリアでクラスタリングパッケージを使用する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2613/</link>
      <pubDate>Sat, 16 Aug 1924 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2613/</guid>
      <description>概要 Juliaでは、クラスタリング用のパッケージとしてClustering.jlが提供されている1。実装されているアルゴリズムは次の通りです</description>
    </item>
    <item>
      <title>ジュリアの自動微分パッケージZygote.jl</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2609/</link>
      <pubDate>Fri, 08 Aug 1924 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2609/</guid>
      <description>概要 ジュリアでは、マシンラーニング、特にディープラーニングに関連した自動微分Automatic DifferentiationのためにZygo</description>
    </item>
    <item>
      <title>ジュリアで関数として構造体のプロパティを参照する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2607/</link>
      <pubDate>Mon, 04 Aug 1924 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2607/</guid>
      <description>概要 Juliaで構造体のプロパティを参照する方法は主に二つある。文法的な便宜または実際の用途に応じて適切に使用するべきだ。 コード 例として、J</description>
    </item>
    <item>
      <title>ジュリアでベクトル場を描く方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2605/</link>
      <pubDate>Thu, 31 Jul 1924 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2605/</guid>
      <description>コード quiver(, quiver=) Juliaでは、quiver()関数を使ってベクトルフィールドを視覚化することができる。 θ = 0:0.2:2π quiver(cos.</description>
    </item>
    <item>
      <title>ジュリアで配列の特定の位置を関数で参照する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2603/</link>
      <pubDate>Sun, 27 Jul 1924 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2603/</guid>
      <description>概要 複数の配列が与えられた時、例えば、それぞれの配列の3番目の要素にアクセスしたいという状況は意外と多い。Juliaでは、getindex(</description>
    </item>
    <item>
      <title>ジュリアからRへのパッケージのインポート方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2601/</link>
      <pubDate>Wed, 23 Jul 1924 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2601/</guid>
      <description>概要 ジュリアでパッケージを読み込む方法はusingを使うことだけど、プログラムが大きくなるとそれを一つ一つ書くのも大変だ。ループを通してパッ</description>
    </item>
    <item>
      <title>ジュリアで列ごとに行列を正規化する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2599/</link>
      <pubDate>Sat, 19 Jul 1924 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2599/</guid>
      <description>概要 Juliaで行列の正規化を簡単にするヒントを紹介する1。基本的には行列を行ごと、列ごとにスカラー倍する方法とeachcol()関数、Li</description>
    </item>
    <item>
      <title>PLU分解</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2/</link>
      <pubDate>Fri, 11 Jul 1924 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2/</guid>
      <description>定義 1 2 置換行列 $P^{T}$ と 可逆行列 $A \in \mathbb{R}^{n \times n}$ に対し、その 行列の積 $P^{T} A$ は $LU$ を与える。この分解を $A$ の PLU分解Permutation LU Decomposition と言う。$P$</description>
    </item>
    <item>
      <title>順列行列</title>
      <link>https://freshrimpsushi.github.io/jp/posts/1/</link>
      <pubDate>Wed, 09 Jul 1924 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/1/</guid>
      <description>定義 1 各行で成分が一つだけ$1$で、残りがすべて$0$である正方行列$P \in \mathbb{R}^{n \times n}$を順列行列と呼ぶ。 基本的性質 直交性 すべての順列行列は直交</description>
    </item>
    <item>
      <title>ジュリアでString7, String15なしでデータフレームを呼び出す方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2574/</link>
      <pubDate>Mon, 26 May 1924 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2574/</guid>
      <description>エラー Juliaでデータフレームを使っていると、文字列データがString7やString15、String31などと読み込まれて様々なエラ</description>
    </item>
    <item>
      <title>偏微分の記号を使い分ける理由</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2573/</link>
      <pubDate>Sat, 24 May 1924 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2573/</guid>
      <description>質問 偏微分では、通常の微分と異なり、$\displaystyle {{ d f } \over { d t }}$ の代わりに $\displaystyle {{ \partial f } \over { \partial t }}$ のような表現を使用します。$</description>
    </item>
    <item>
      <title>Juliaのサブプロットにメインタイトルを追加する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2572/</link>
      <pubDate>Thu, 22 May 1924 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2572/</guid>
      <description>概要 ジュリアで図を描く時、titleでタイトルを入れるとサブプロット全てに適用されるので、plot_titleを使うべきだ1。これはプロット</description>
    </item>
    <item>
      <title>ジュリアプロットで軸の値を削除する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2570/</link>
      <pubDate>Sun, 18 May 1924 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2570/</guid>
      <description>概要 Juliaで、カラーバー、軸、目盛り、グリッドなどの図のグラフィック要素を消す方法があるけれども、グラフィカルな要素をいじるから数字だけ</description>
    </item>
    <item>
      <title>ジュリアで有限差分を使用する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2568/</link>
      <pubDate>Wed, 14 May 1924 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2568/</guid>
      <description>概要 Juliaで有限差分法を使うには、特に有限差分の係数を求めるためには、FiniteDifferences.jlを使うのがいいだろう1。ノ</description>
    </item>
    <item>
      <title>ジュリアでの数値解析的補間</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2566/</link>
      <pubDate>Sat, 10 May 1924 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2566/</guid>
      <description>概要 ジュリアでは、数値解析的な補間のためにInterpolations.jlパッケージを使用する1。ジュリアで変数の値を出力する際に使用する</description>
    </item>
    <item>
      <title>ジュリアで配列の差分を計算する方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2564/</link>
      <pubDate>Tue, 06 May 1924 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2564/</guid>
      <description>概要 Juliaでは、差分を計算するためにdiff()関数が提供されている1。circshift()関数も使って簡単に書けるけど、端点の処理な</description>
    </item>
    <item>
      <title>ジュリアで円形配列を使う方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2562/</link>
      <pubDate>Fri, 02 May 1924 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2562/</guid>
      <description>概要 実は、Juliaではネイティブに円形配列Circular Arrayをサポートしていないが、要素を円形にCircularlyシフトしてくれ</description>
    </item>
    <item>
      <title>ジュリアでのマーカーとラインスタイルのリスト</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2560/</link>
      <pubDate>Mon, 28 Apr 1924 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2560/</guid>
      <description>コード 1 長々と説明する必要はなく、文字通りマーカースタイルとラインスタイルが実際にどう見えるかを示す。 linesytle [:auto, :solid, :dash, :dot, :dashdot, :dashdotdot] の中から一つ選ぶ。 shape [:none, :auto,</description>
    </item>
    <item>
      <title>ジュリアプロットで回帰直線を描く方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2558/</link>
      <pubDate>Thu, 24 Apr 1924 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2558/</guid>
      <description>コード Juliaの散布図に回帰直線を入れる方法は、オプションでsmooth = trueを使うことだ。 using Plots x = rand(100) scatter(x, 2x .+ 0.1randn(100), smooth = true) savefig(&amp;#34;plot.svg&amp;#34;) 環境 OS: Windows julia: v1.8.3 Plots v1.38.5</description>
    </item>
    <item>
      <title>Juliaスプラットオペレーターを通じたオプション引数の渡し方のヒント</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2554/</link>
      <pubDate>Wed, 16 Apr 1924 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2554/</guid>
      <description>概要 Juliaで頻繁に使われるsplatの...の用途について、オプショナル引数を伝える方法を説明する。基本的に、どんなオプションにどんな引</description>
    </item>
    <item>
      <title>ジュリアのスプラットオペレータ</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2552/</link>
      <pubDate>Sat, 12 Apr 1924 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2552/</guid>
      <description>概要 Juliaで...はスプラット・オペレーターと呼ばれ、関数を使用したり、配列を定義する際に便利に使われる1。このオペレーターはJulia</description>
    </item>
    <item>
      <title>ジュリアでユニコード文字列の一部だけをスライスする方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2550/</link>
      <pubDate>Tue, 08 Apr 1924 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2550/</guid>
      <description>概要 他のプログラム言語がそうであるように、ジュリアでは英語をASCIIコードASCII Codeで書き、漢字、韓国語などをユニコードUnico</description>
    </item>
    <item>
      <title>Julia StatsPlotsでデータフレーム名を省略するマクロ@df</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2548/</link>
      <pubDate>Fri, 04 Apr 1924 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2548/</guid>
      <description>概要 ジュリアのStatsPlotsパッケージでは、図を描く時に@dfマクロを通して、繰り返されるデータフレーム名を省略することができる1。マ</description>
    </item>
    <item>
      <title>ジュリアで他のファイルに定義された関数の使用方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2544/</link>
      <pubDate>Thu, 27 Mar 1924 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2544/</guid>
      <description>概要 他のファイルにある関数を使えるようにするために、ジュリアコード自体を実行するinclude()関数を紹介する。マットラボでは、同じディレ</description>
    </item>
    <item>
      <title>ジュリア集合でマーカーに色をつける方法</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2537/</link>
      <pubDate>Thu, 13 Mar 1924 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2537/</guid>
      <description>コード using Plots x, y = rand(100), rand(100) 上記のようなデータが与えられたとしよう。データが連続かカテゴリカルかによって、図の形や描く方法が異なる。 連続型 scatter(marker_z=) z = x +</description>
    </item>
    <item>
      <title>空間データ分析におけるクリギングとは？</title>
      <link>https://freshrimpsushi.github.io/jp/posts/2521/</link>
      <pubDate>Sun, 10 Feb 1924 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/jp/posts/2521/</guid>
      <description>モデル オーディナリークリギング 空間データ分析で、ランダムフィールド $\mathbf{Y} = \left( Y \left( s_{1} \right) , \cdots , Y \left( s_{n} \right) \right)$ の平均 $\mu \in \mathbb{R}$ と共分散行列 $\Sigma \in \mathbb{R}^{n \times n}$ が多変量正</description>
    </item>
  </channel>
</rss>
