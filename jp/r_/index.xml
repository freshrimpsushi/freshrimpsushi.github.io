<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>R_s on 生エビ寿司屋</title><link>https://freshrimpsushi.github.io/jp/r_/</link><description>Recent content in R_s on 生エビ寿司屋</description><generator>Hugo -- gohugo.io</generator><language>jp</language><lastBuildDate>Sat, 20 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://freshrimpsushi.github.io/jp/r_/index.xml" rel="self" type="application/rss+xml"/><item><title>HTMLフォームでユーザーの入力に無関係な値をサーバーに送信する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2713/</link><pubDate>Sat, 20 Sep 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2713/</guid><description>ショーケース 上のフォームで &amp;ldquo;your message&amp;rdquo; を入力して送信した後、アドレスバーを確認すると、入力した値に関係なく &amp;ldquo;subject=statistics&amp;rdquo; が含まれていることが確認できる。これは同</description></item><item><title>CSSでマウスオーバー時にツールチップを表示する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2712/</link><pubDate>Thu, 18 Sep 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2712/</guid><description>ショーケース mouse hover 上の &amp;lsquo;mouse hover&amp;rsquo; にマウスを載せるとツールチップが表示される。 コード HTML &amp;lt;div class=&amp;#34;container&amp;#34; tooltip=&amp;#34;This is tooltip&amp;#34;&amp;gt;mouse hover&amp;lt;/div&amp;gt; class=&amp;quot;container&amp;quot;: ツールチップを表示する要素を包むコンテナとしての役</description></item><item><title>Pythonパッケージをインストールする際のエラー: externally-managed-environment の解決方法</title><link>https://freshrimpsushi.github.io/jp/posts/2710/</link><pubDate>Sun, 14 Sep 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2710/</guid><description>問題 error: externally-managed-environment は主に Linux 系でシステムパッケージマネージャーによってインストールされた Python 環境で発生するエラーだ。セキュリティのために外部からのパッケー</description></item><item><title>Linuxでごみ箱を強制的に空にする方法</title><link>https://freshrimpsushi.github.io/jp/posts/2709/</link><pubDate>Fri, 12 Sep 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2709/</guid><description>問題 Linuxで容量が不足しているためゴミ箱を空にしようとすると、&amp;lsquo;Failed to delete the item from the trash&amp;rsquo;という説明と</description></item><item><title>2025年夏のお任せ：想像上の数</title><link>https://freshrimpsushi.github.io/jp/posts/2707/</link><pubDate>Mon, 08 Sep 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2707/</guid><description>紹介 二次方程式 $x^{2} + 1 = 0$ の解 $i$ を &amp;lsquo;想像上の数&amp;rsquo;という意味で虚数と呼ぶが、実際のところ無理数が認められていなかった時代</description></item><item><title>CSSでチェックボックスのボックスのみを隠す方法</title><link>https://freshrimpsushi.github.io/jp/posts/2706/</link><pubDate>Sat, 06 Sep 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2706/</guid><description>ショーケース R G B 最近では検索やフィルタリング設定などでチェックボックスの枠を表示せず、背景だけを変えてON/OFFを示すケースが増えている</description></item><item><title>エクセル、パワーポイント、ワードで別名で保存するショートカット</title><link>https://freshrimpsushi.github.io/jp/posts/2705/</link><pubDate>Thu, 04 Sep 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2705/</guid><description>概要 正確な理由はわからないが、MSオフィス製品群では普通に使われていた「名前を付けて保存」機能がなくなり「コピーを保存」という機能に置き換え</description></item><item><title>Excelで現在の日付と時刻を入力するショートカット</title><link>https://freshrimpsushi.github.io/jp/posts/2704/</link><pubDate>Tue, 02 Sep 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2704/</guid><description>概要 Excelでセルに直接現在の日付と時刻を入力するショートカットを紹介する。特に手動でログを作成する場合に便利だ。 ガイド excel1.mp4 ctrl;: 選択したセルに</description></item><item><title>Windowsで環境変数を参照する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2703/</link><pubDate>Sun, 31 Aug 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2703/</guid><description>ガイド ${env:변수명}을 통해 &amp;lsquo;변수명&amp;rsquo;이라는 이름을 가진 환경변수를 참조할 수 있다. 예를 들어, 윈도우즈에서 사용자 이름을</description></item><item><title>Gitのユーザー名とメールアドレスの設定方法</title><link>https://freshrimpsushi.github.io/jp/posts/2702/</link><pubDate>Fri, 29 Aug 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2702/</guid><description>ガイド git config --global user.name &amp;#34;Your Name&amp;#34; git config --global user.email &amp;#34;Your Email&amp;#34; 当然と言えば当然だが、gitgitを使う多くの操作でGitHubのユーザー名とメールアドレスを要求する。上のよ</description></item><item><title>JavaScript マルチドロップダウン実装例</title><link>https://freshrimpsushi.github.io/jp/posts/2701/</link><pubDate>Wed, 27 Aug 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2701/</guid><description>ショーケース 界 動物 植物 種 亜種 左から順に大きな分類から小さな分類へ降りていく多段ドロップダウンを実装した。上位のドロップダウンが選択されると、</description></item><item><title>JavaScriptでlocalhostを介してJuliaサーバーにデータを送信する例</title><link>https://freshrimpsushi.github.io/jp/posts/2700/</link><pubDate>Mon, 25 Aug 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2700/</guid><description>ショーケース Send &amp;lsquo;A&amp;rsquo; Send &amp;lsquo;B&amp;rsquo; 左のボタンをクリックすると &amp;lsquo;A&amp;rsquo; というメッセージを、右のボタンをクリックすると &amp;lsquo;B&amp;rsquo; というメッセージを Julia サーバに送信する。 Julia サー</description></item><item><title>HTMLでマウスカーソルの形を変更する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2699/</link><pubDate>Sat, 23 Aug 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2699/</guid><description>ショーケース auto | default | none | context-menu | help | pointer | progress | wait | cell | crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed | grab | grabbing | all-scroll | col-resize | row-resize | n-resize | e-resize | s-resize | w-resize | ne-resize | nw-resize | se-resize | sw-resize | ew-resize | ns-resize |</description></item><item><title>統計学におけるランク</title><link>https://freshrimpsushi.github.io/jp/posts/2677/</link><pubDate>Thu, 10 Jul 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2677/</guid><description>定義 統計学でランク $R : \mathbb{R} \to \mathbb{N}$ は通常、データを昇順で並べた際のそのデータの順位を示す関数として使われる。 説明 $$ x_{3} &amp;lt; x_{1} &amp;lt; x_{2} \implies x_{(1)} = x_{3}, x_{(2)} = x_{1}, x_{(3)} = x_{2} $$</description></item><item><title>一致する: consistent with, agree with</title><link>https://freshrimpsushi.github.io/jp/posts/2676/</link><pubDate>Tue, 08 Jul 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2676/</guid><description>語彙 consistent with: 「一致する」という意味の熟語で、consistentが「一貫した」という意味では使われていない。 agree with: 「一致する」という意味で、agr</description></item><item><title>ノンパラメトリック統計学とは何ですか？</title><link>https://freshrimpsushi.github.io/jp/posts/2675/</link><pubDate>Sun, 06 Jul 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2675/</guid><description>定義 1 統計学において、非パラメトリック統計nonparametric statisticsとは、主に母集団の分布についての仮定をしない統計的手</description></item><item><title>Hearts of Iron 4でWASDを使って画面を移動する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2674/</link><pubDate>Fri, 04 Jul 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2674/</guid><description>概要 このポストの別のタイトルは「Windowsでキーバインディングを設定する方法」だ。 Linuxとは違って、Windowsはキーバインディン</description></item><item><title>常微分方程式を時間を逆に解くトリック</title><link>https://freshrimpsushi.github.io/jp/posts/2673/</link><pubDate>Wed, 02 Jul 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2673/</guid><description>メソッド $$ {\frac{ d y }{ d t }} = f(y) $$ 上記のように与えられる常微分方程式を解くための数値的ソルバー $K$ は未来の時点 $T &amp;gt; 0$ と初期値 $y_{0}$ に対して $$ K \left( f , T</description></item><item><title>"小さい、極小の: 小さな、超小型の"</title><link>https://freshrimpsushi.github.io/jp/posts/2672/</link><pubDate>Mon, 30 Jun 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2672/</guid><description>語彙 tiny: &amp;ldquo;とても小さい&amp;rdquo;, 数式的に言及される量や大きさよりも minuscule: &amp;ldquo;とても小さい&amp;rdquo;, もう少し洗練さ</description></item><item><title>常微分方程式の解法において、顕式法より陰式法が推奨される状況</title><link>https://freshrimpsushi.github.io/jp/posts/2671/</link><pubDate>Sat, 28 Jun 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2671/</guid><description>概要 $$ \dot{y} = f(y) $$ 上記のように与えられた常微分方程式を解くための数値的ソルバーは、その計算方式によって明示的手法explicit methodと暗</description></item><item><title>テックスで項の数を示す表現 브레이스</title><link>https://freshrimpsushi.github.io/jp/posts/2670/</link><pubDate>Thu, 26 Jun 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2670/</guid><description>コード TeXで項の数を表す際、よく複数の項をまとめる表現として \overbrace, \underbrace コマンドが使用される。この2つのコマンドを使用するには、\usepacka</description></item><item><title>二元分散分析 (にげんぶんさんぶんせき)</title><link>https://freshrimpsushi.github.io/jp/posts/2669/</link><pubDate>Tue, 24 Jun 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2669/</guid><description>仮説検定 1 実験計画 上 $k$ 個の処理と $b$ 個のブロックがあり、$n = bk$ 個のサンプルを得たとする。$j = 1 , \cdots , k$ 番目の処理のサンプルがそれぞれ独立し</description></item><item><title>テキストでリプサム（意味のない文字列）を使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2668/</link><pubDate>Sun, 22 Jun 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2668/</guid><description>コード ローレム イプサムLorem Ipsum または リプサムLipsumは、文書のデザインに集中するために意味のない文字列で作られたプレースホルダーpl</description></item><item><title>一元配置分散分析</title><link>https://freshrimpsushi.github.io/jp/posts/2667/</link><pubDate>Fri, 20 Jun 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2667/</guid><description>仮説検定 1 実験設計 上 $k$ 個の処理がある場合、それぞれの処理から $n_{j}$ 個ずつ合計で $n = n_{1} + \cdots + n_{k}$ 個の標本を得たとする。$j = 1 , \cdots , k$ 番目の処理の標</description></item><item><title>バッチコマンドの入力パラメーター拡張</title><link>https://freshrimpsushi.github.io/jp/posts/2666/</link><pubDate>Wed, 18 Jun 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2666/</guid><description>コード 複数の入力パラメータの中で最初の引数 C:\data\ABC.csv をチルダが含まれた %1として受け取るとする。この入力引数の様々な機能を紹介する1。 文法 由来 説明 結</description></item><item><title>分散分析のF検定</title><link>https://freshrimpsushi.github.io/jp/posts/2665/</link><pubDate>Mon, 16 Jun 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2665/</guid><description>仮説検定 1 実験計画上、$k$個の処理があるとき、各処理から$n_{j}$個ずつ合計$n = n_{1} + \cdots + n_{k}$個の標本を得たとする。$j = 1 ,</description></item><item><title>バッチコマンドで複数の入力パラメータを受け取る方法</title><link>https://freshrimpsushi.github.io/jp/posts/2664/</link><pubDate>Sat, 14 Jun 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2664/</guid><description>コード バッチコマンドでは、自然数 $m$ に対して %nは$n$番目のパラメーターを意味し、すべてのパラメーターの配列は%*で表される1。例えば 上記の</description></item><item><title>ANOVA表 (アノバひょう)</title><link>https://freshrimpsushi.github.io/jp/posts/2663/</link><pubDate>Thu, 12 Jun 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2663/</guid><description>定義 1 分散分析において要約された結果を示す表をアノバテーブルANOVA tableと言う。実験計画に応じてアノバテーブルの形態は少し異なる。 完</description></item><item><title>バッチコマンドでプログラムをバックグラウンドで実行する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2662/</link><pubDate>Tue, 10 Jun 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2662/</guid><description>コード programというプログラムを実行したいとする。 ウィンドウズ START /B program programの前にSTART /Bを付ければいい1。例えば、以下の</description></item><item><title>統計学における分散分析またはANOVAとは何ですか?</title><link>https://freshrimpsushi.github.io/jp/posts/2661/</link><pubDate>Sun, 08 Jun 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2661/</guid><description>定義 1 2 二つ以上の集団の母平均を比較するために分散を分析することを分散分析analysis of varianceといい、省略してアノバANOVA</description></item><item><title>バッチコマンドにおける '>' と '>>' の違い</title><link>https://freshrimpsushi.github.io/jp/posts/2660/</link><pubDate>Fri, 06 Jun 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2660/</guid><description>概要 バッチコマンドで &amp;gt; は文字列を上書きし、&amp;gt;&amp;gt; は文字列を追加する。 コード 例えば、次のように作成された example.bat ファイルがあるとする。 @echo off</description></item><item><title>統計学における実験計画</title><link>https://freshrimpsushi.github.io/jp/posts/2659/</link><pubDate>Wed, 04 Jun 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2659/</guid><description>定義 1 測定や観測が行われる対象を実験単位experimental unitという。 実験者によって制御されて変化する独立変数を因子factorと</description></item><item><title>VSCodeでマルチカーソルを使用して連続した数字を簡単に入力する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2658/</link><pubDate>Mon, 02 Jun 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2658/</guid><description>ガイド プログラミング言語を扱う際でも、配列を使うのが難しかったり、マークアップ言語を使用する場合には、0または1から順番に続く数を直接入力す</description></item><item><title>正規分布に従う集団の母分散の推定</title><link>https://freshrimpsushi.github.io/jp/posts/2657/</link><pubDate>Sat, 31 May 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2657/</guid><description>仮説検定 1 標本 の数が $n$ である母集団の分布が 正規分布 $N \left( \mu , \sigma^{2} \right)$ に従うとしよう。母分散 の候補 $\sigma_{0}$ に対する 仮説検定 は次のようになる。 $H_{0}$: $\sigma^{2} = \sigma_{0}^{2}$ $H_{1}$: $\sigma^{2} \neq</description></item><item><title>バッチコマンドの入力パラメーターにおけるチルダの意味</title><link>https://freshrimpsushi.github.io/jp/posts/2656/</link><pubDate>Thu, 29 May 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2656/</guid><description>概要 バッチコマンドの入力パラメータを受け取る際に、%1と%~1のようなチルダ記号は入力からダブルクォーテーション&amp;quot;を削除するかしな</description></item><item><title>コクランの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/2655/</link><pubDate>Tue, 27 May 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2655/</guid><description>定理 サンプル $\mathbf{X} = \left( X_{1} , \cdots , X_{n} \right)$ が $X_{1} , \cdots , X_{n} \overset{\text{iid}}{\sim} N \left( 0, \sigma^{2} \right)$ のように iid で 正規分布 に従うとしよう。ランク が $r_{j}$ の 対称行列 $A_{1} , \cdots , A_{k} \in \mathbb{R}^{n \times n}$ に対して 確率</description></item><item><title>Juliaのデータフレームに新しい列を最初の列に追加する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2654/</link><pubDate>Sun, 25 May 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2654/</guid><description>コード 新しい列を追加すること自体はそれほど難しくないが、特定の位置に追加するのが難しいときがある。 insertcols! julia&amp;gt; df = DataFrame(a = 1:3, b = 4:6) 3×2 DataFrame Row │ a b │ Int64 Int64</description></item><item><title>行列ランクの準加法性の証明: rank(A+B) ≤ rankA + rankB</title><link>https://freshrimpsushi.github.io/jp/posts/2653/</link><pubDate>Fri, 23 May 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2653/</guid><description>定理 行列のランクは準加法性を持つ。つまり、二つの行列 $A, B$ に対して次が成り立つ。 $$ \rank \left( A + B \right) \le \rank A + \rank B $$ 説明 この定理はコクランの定理の証明</description></item><item><title>Juliaで特定のパス下のファイル一覧を再帰的に取得する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2652/</link><pubDate>Wed, 21 May 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2652/</guid><description>コード walkdir julia&amp;gt; walkdir(&amp;#34;D:\\U\\B&amp;#34;) Channel{Tuple{String, Vector{String}, Vector{String}}}(0) (1 item available) julia&amp;gt; collect(walkdir(&amp;#34;D:\\U\\B&amp;#34;)) 2-element Vector{Tuple{String, Vector{String}, Vector{String}}}: (&amp;#34;D:\\U\\B&amp;#34;, [&amp;#34;b&amp;#34;], [&amp;#34;alpha.txt&amp;#34;, &amp;#34;beta.txt&amp;#34;]) (&amp;#34;D:\\U\\B\\b&amp;#34;, [], [&amp;#34;m.txt&amp;#34;]) walkdirは、与えられたパスの下のすべてのファイルを探索する組み込み関数だ。それ自体は</description></item><item><title>ホッグ・クレイグ定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/2651/</link><pubDate>Mon, 19 May 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2651/</guid><description>定理 サンプル $\mathbf{X} = \left( X_{1} , \cdots , X_{n} \right)$ が $X_{1} , \cdots , X_{n} \overset{\text{iid}}{\sim} N \left( 0, \sigma^{2} \right)$ のように iid より 正規分布 に従うとしよう。対称行列 $A_{1} , \cdots , A_{k} \in \mathbb{R}^{n \times n}$ に対して 確率変数 $Q_{1} , \cdots</description></item><item><title>Juliaで配列の配列を連結するトリック</title><link>https://freshrimpsushi.github.io/jp/posts/2650/</link><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2650/</guid><description>概要 Juliaでは、append!のような関数を通して配列の配列を連結することができるが、バングコンベンション !が付いているだけに、元の配列</description></item><item><title>正定行列の主対角成分の性質</title><link>https://freshrimpsushi.github.io/jp/posts/2649/</link><pubDate>Thu, 15 May 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2649/</guid><description>定理 正定値行列 $A = \left( a_{ij} \right) \in \mathbb{C}^{n \times n}$ が与えられていると仮定する。 主対角成分の符号 $A$ の 主対角成分 $a_{ii}$ の符号は $A$ の符号と同じである。 $A$ が正定値の場合 $a_{ii}</description></item><item><title>バッチコマンドで出力を無視する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2648/</link><pubDate>Tue, 13 May 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2648/</guid><description>コード output &amp;gt; nul ファイルに書き出すまたは画面に表示する結果を省略するためには、ヌルデバイスnull deviceに出力をリダイレクトすれば良い。 ウ</description></item><item><title>クレイグの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/2647/</link><pubDate>Sun, 11 May 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2647/</guid><description>定理 サンプル $\mathbf{X} = \left( X_{1} , \cdots , X_{n} \right)$ は $X_{1} , \cdots , X_{n} \overset{\text{iid}}{\sim} N \left( 0, \sigma^{2} \right)$ と同様に iid で 正規分布 に従うと仮定する。対称行列 $A, B \in \mathbb{R}^{n \times n}$ に対して 確率変数 $Q_{1}$ と $Q_{2}$ が ラン</description></item><item><title>Juliaを実行する統合開発環境の確認方法</title><link>https://freshrimpsushi.github.io/jp/posts/2646/</link><pubDate>Fri, 09 May 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2646/</guid><description>ガイド vscodeなどのIDE（統合開発環境）でコードを実行する場合、開発段階に基づいて設定を異なるようにする場合が多い。これを確認するには</description></item><item><title>対角化可能な行列の累乗のトレースがその固有値の累乗の和に等しいことを証明する</title><link>https://freshrimpsushi.github.io/jp/posts/2645/</link><pubDate>Wed, 07 May 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2645/</guid><description>定理 対角化可能な行列$A \in \mathbb{C}^{n \times n}$と自然数$k \in \mathbb{N}$が与えられたとする。$A$の固有値を$\lambda_{1} , \cdots , \</description></item><item><title>Juliaでデータフレームの最初と最後の部分を表示する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2644/</link><pubDate>Mon, 05 May 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2644/</guid><description>概要 Juliaのデータフレームには head や tail 関数がない。他の言語に比べてもう一度手を動かす必要があり面倒だが、first と last 関数を使えばいい。な</description></item><item><title>対称実数行列の全ての固有値が0または1である場合、それが冪等行列であることを証明</title><link>https://freshrimpsushi.github.io/jp/posts/2643/</link><pubDate>Sat, 03 May 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2643/</guid><description>定理 対称行列 $A \in \mathbb{R}^{n \times n}$ の固有値がすべて $0$ または $1$ である場合、$A$ は冪等行列である。 説明 この補助定理は正規分布のランダムベクトル二次形式のカ</description></item><item><title>Juliaで非公式パッケージをインストールする方法</title><link>https://freshrimpsushi.github.io/jp/posts/2642/</link><pubDate>Thu, 01 May 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2642/</guid><description>ガイド 非公式パッケージの場合、レジスターを登録するなど複雑にインストールしなければならないと説明されることもあるが、実際にはGitHubアド</description></item><item><title>冪等行列の固有値が0または1であることの証明</title><link>https://freshrimpsushi.github.io/jp/posts/2641/</link><pubDate>Tue, 29 Apr 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2641/</guid><description>定理 冪等行列の固有値は $0$ または $1$ だけだ。 説明 この補助定理は正規分布ランダムベクトル二次形式のカイ二乗性の同値条件の証明で使われる。 この定理の</description></item><item><title>Juliaのデータフレームに同じ値で埋められた列を追加する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2640/</link><pubDate>Sun, 27 Apr 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2640/</guid><description>コード 本質的には新しい列を追加する方法と同じだが、代入演算子 = にブロードキャストを適用した .= を用いることで、別個にカラムを作成することなく簡</description></item><item><title>正規分布ランダムベクトルの二次形式におけるカイ二乗性の同値条件</title><link>https://freshrimpsushi.github.io/jp/posts/2639/</link><pubDate>Fri, 25 Apr 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2639/</guid><description>定理 サンプル $\mathbf{X} = \left( X_{1} , \cdots , X_{n} \right)$ は $X_{1} , \cdots , X_{n} \overset{\text{iid}}{\sim} N \left( 0, \sigma^{2} \right)$ に従って iid の 正規分布 に従うとする。ランク が $r \le n$ の 対称行列 $A \in \mathbb{R}^{n \times n}$ に対して ランダムベ</description></item><item><title>MATLABプロットで目盛りガイドを削除する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2638/</link><pubDate>Wed, 23 Apr 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2638/</guid><description>コード &amp;gt;&amp;gt; scatter(rand(10, 1), rand(10, 1)) ティック自体を完全に削除したければ、xtick([]) または ytick([]) を使用すれば良いが、値はそのままにしてティックガイドだけを削除</description></item><item><title>正規分布ランダムベクトルの二次形式のモーメント母関数</title><link>https://freshrimpsushi.github.io/jp/posts/2637/</link><pubDate>Mon, 21 Apr 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2637/</guid><description>定理 サンプル $\mathbf{X} = \left( X_{1} , \cdots , X_{n} \right)$ が $X_{1} , \cdots , X_{n} \overset{\text{iid}}{\sim} N \left( 0, \sigma^{2} \right)$ と同様に iidで 正規分布に従うとする。 ランクが $r \le n$ である 対称行列 $A \in \mathbb{R}^{n \times n}$ に対して、</description></item><item><title>MATLABで図に枠を追加する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2636/</link><pubDate>Sat, 19 Apr 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2636/</guid><description>コード &amp;gt;&amp;gt; scatter(rand(10, 1), rand(10, 1)) 例として、マトラボで散布図を描くと、デフォルト設定では上部と右側の枠が表示されない。このとき、枠を表示するためには、以下のよ</description></item><item><title>ランダムベクトルの二次形式で表された偏差平方和</title><link>https://freshrimpsushi.github.io/jp/posts/2635/</link><pubDate>Thu, 17 Apr 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2635/</guid><description>公式 ランダムベクトル $\mathbf{X} = \left( X_{1} , \cdots , X_{n} \right)$ と 単位行列 $I_{n} \in \mathbb{R}^{n \times n}$ およびすべての成分が $1$ である一行列 $J_{n} \in \mathbb{R}^{n \times n}$ に対して、次が成り立つ。 $$ \mathbf{X}^{T} \left( I_{n} - {\frac{ 1</description></item><item><title>トゥープリッツ行列</title><link>https://freshrimpsushi.github.io/jp/posts/2634/</link><pubDate>Tue, 15 Apr 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2634/</guid><description>定義 行列 $A \in \mathbb{R}^{m \times n}$ の成分 $\left( A \right)_{ij}$ がすべての $i, j$ に対して $\left( A \right)_{i, j} = \left( A \right)_{i+1, j+1}$ を満たす場合、$A$ をトゥープリッツ行列Toeplitz matrixと</description></item><item><title>ランダムベクトルの二次形式の期待値</title><link>https://freshrimpsushi.github.io/jp/posts/2633/</link><pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2633/</guid><description>公式 母平均ベクトル $\mu \in \mathbb{R}^{n}$ と 共分散行列 $\Sigma \in \mathbb{R}^{n \times n}$ に対して、ランダムベクトル が $\mathbf{X}$ となり、$\mathbf{X} \sim \left( \mu , \Sigma \right)$ とする。対称行列 $A$ に対</description></item><item><title>Juliaでl1トレンドフィルタリングを使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2632/</link><pubDate>Fri, 11 Apr 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2632/</guid><description>概要 L1TrendFiltering.jlは元々マトラボで実装された$\ell_{1}$トレンドフィルタリングコードをジュリアに翻訳したパッ</description></item><item><title>ランダムベクトルの二次形式</title><link>https://freshrimpsushi.github.io/jp/posts/2631/</link><pubDate>Wed, 09 Apr 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2631/</guid><description>定義 1 ランダムベクトル $\mathbf{X} = \left( X_{1} , \cdots , X_{n} \right)$ と 対称行列 $A \in \mathbb{R}^{n \times n}$ に関して $Q = \mathbf{X}^{T} A \mathbf{X}$ を二次形式quadratic form in $\mathbf{X}$と呼ぶ</description></item><item><title>複素ステップ微分近似</title><link>https://freshrimpsushi.github.io/jp/posts/2630/</link><pubDate>Mon, 07 Apr 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2630/</guid><description>公式 関数 $f : \mathbb{R} \to \mathbb{R}$ の導関数 $f ' (x)$ は以下のように複素数を利用して近似することができる。 $$ f ' (x) \approx \frac{\im \left( f \left( x + i h \right) \right)}{h} $$ ここで $\im$ は複素数の虚部を</description></item><item><title>JavaScriptでボタンによる出力変更の例</title><link>https://freshrimpsushi.github.io/jp/posts/2629/</link><pubDate>Sat, 05 Apr 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2629/</guid><description>ショーケース 0 0から始まり、+ボタンを押すと数字が1ずつ増え、-ボタンを押すと数字が1ずつ減る例です。 コード HTML &amp;lt;input type=&amp;#39;button&amp;#39; onclick=&amp;#39;count(&amp;#34;+&amp;#34;)&amp;#39; value=&amp;#39;+&amp;#39;/&amp;gt; &amp;lt;input type=&amp;#39;button&amp;#39; onclick=&amp;#39;count(&amp;#34;-&amp;#34;)&amp;#39; value=&amp;#39;-&amp;#39;/&amp;gt; &amp;lt;div id=&amp;#39;result&amp;#39;&amp;gt;0&amp;lt;/div&amp;gt; &amp;lt;div id='</description></item><item><title>集団の同質性検定</title><link>https://freshrimpsushi.github.io/jp/posts/894/</link><pubDate>Thu, 03 Apr 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/894/</guid><description>仮説検定 1 多項実験でカテゴリが$C$個のカテゴリカルデータを$R$個の母集団から得たと仮定しよう。$i = 1 , \cdots , R$番目の母集団で要素が$j</description></item><item><title>機械学習におけるSiLUまたはSwish関数</title><link>https://freshrimpsushi.github.io/jp/posts/883/</link><pubDate>Tue, 01 Apr 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/883/</guid><description>定義 1 2 シルーSiLU, Sigmoid-weighted Linear Unit または スウィッシュSwish 関数は次のように定義される。 $$ \operatorname{SiLU}(x) = x \cdot \sigma(x) $$ ここで $\sigma$ はシグモイド関数のうち特にロジス</description></item><item><title>グループの独立性検定</title><link>https://freshrimpsushi.github.io/jp/posts/882/</link><pubDate>Sun, 30 Mar 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/882/</guid><description>仮説検定 1 多項実験において、データが二つの特性 $X$、$Y$ を持ち、$X$ のカテゴリが $R$ つ、$Y$ のカテゴリが $C$ つあるカテゴリカルデータを $n$</description></item><item><title>解析における不連続の同値条件</title><link>https://freshrimpsushi.github.io/jp/posts/869/</link><pubDate>Fri, 28 Mar 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/869/</guid><description>定理 1 関数 $f : \mathbb{R} \to \mathbb{R}$ が $x_{0}$ で連続でないことは次のことと同値だ: $$ \exists \epsilon &amp;gt; 0 , \forall \delta &amp;gt; 0 : \exists x ( \delta ) \in \mathbb{R} \left( \left| x ( \delta ) - x_{0} \right| &amp;lt; \delta \land \left| f \left( x ( \delta ) - f \left(</description></item><item><title>ロジ写像</title><link>https://freshrimpsushi.github.io/jp/posts/855/</link><pubDate>Wed, 26 Mar 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/855/</guid><description>定義 1 次のように力学系を定義する写像をロジ写像Lozi map mapという。 $$ \begin{align*} x \mapsto&amp;amp; 1 - a \left| x \right| + y \\ y \mapsto&amp;amp; b x \end{align*} $$ 説明 ロジ写像はエノン写像において</description></item><item><title>Juliaの置換次元関数とその応用 permutedims</title><link>https://freshrimpsushi.github.io/jp/posts/834/</link><pubDate>Mon, 24 Mar 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/834/</guid><description>概要 Juliaの組み込み関数 permutedimsは、ある意味転置行列の一般化として、多次元配列の次元を扱うのに有用だ。 コード テンソルの次元</description></item><item><title>ストレンジ・アトラクター</title><link>https://freshrimpsushi.github.io/jp/posts/816/</link><pubDate>Sat, 22 Mar 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/816/</guid><description>定義 カオス 1 不変である閉集合が位相的に推移的であればアトラクターと呼ばれる。コンパクトな不変集合が初期条件に敏感で位相的に推移的であれば、キ</description></item><item><title>幾何学における接点と交差点</title><link>https://freshrimpsushi.github.io/jp/posts/815/</link><pubDate>Thu, 20 Mar 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/815/</guid><description>用語 二つのマニホールドが交わる一点を$p$としよう。この二つのマニホールドがただかすめるだけの場合、この点を接点tangent point、お</description></item><item><title>準周期的軌道</title><link>https://freshrimpsushi.github.io/jp/posts/768/</link><pubDate>Tue, 18 Mar 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/768/</guid><description>定義 有界かつ漸近周期的でない軌道が、初期条件に敏感sensitive dependence on initial conditionでない場合、その軌道を準周期的quasiperi</description></item><item><title>準周期関数</title><link>https://freshrimpsushi.github.io/jp/posts/759/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/759/</guid><description>定義 1 関数 $h : \mathbb{R} \to \mathbb{R}^{n}$ が 基礎周波数basic frequency $\omega_{1} , \cdots , \omega_{n}$ およびそれぞれの $x_{1} , \cdots , x_{n}$ に対して $2 \pi$-周期関数である $H$として次のように表す</description></item><item><title>SがAの状態に保たれている</title><link>https://freshrimpsushi.github.io/jp/posts/726/</link><pubDate>Fri, 14 Mar 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/726/</guid><description>文型 主語 S と形容詞 A が与えられているとしよう。 &amp;ldquo;S remains A&amp;rdquo; $\iff$ &amp;ldquo;SがAな状態で残っている。&amp;rdquo; 例文 形容詞 &amp;ldquo;それにも</description></item><item><title>マンデルブロ集合とジュリア集合</title><link>https://freshrimpsushi.github.io/jp/posts/718/</link><pubDate>Wed, 12 Mar 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/718/</guid><description>定義 $$ P_{c} : z \mapsto z^{2} + c $$ 複素平面 $\mathbb{C}$ で与えられた $c \in \mathbb{C}$ に対して、上記のようにマップで定義された動力学系とその軌道 $P_{c}^{n} (z)$ を考えてみよう。 マンデルブロ</description></item><item><title>次元の呪い</title><link>https://freshrimpsushi.github.io/jp/posts/708/</link><pubDate>Mon, 10 Mar 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/708/</guid><description>定義 1 主にユークリッド空間 $\mathbb{R}^{d}$において、ある問題を解決するために必要なメモリの量や演算回数が次元$d$に対して指</description></item><item><title>イケダ写像</title><link>https://freshrimpsushi.github.io/jp/posts/671/</link><pubDate>Sat, 08 Mar 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/671/</guid><description>定義 複素数空間 $\mathbb{C}$ において、次のように動力学系を定義するマップを イケダ マップIkeda map と呼ぶ。 $$ z \mapsto \mu z \exp \left( i \left[ a + {\frac{ b }{ |z|^{2} + 1 }} \right] \right) + c $$</description></item><item><title>2025年冬のお任せ：形式に圧倒されたコンセプト</title><link>https://freshrimpsushi.github.io/jp/posts/639/</link><pubDate>Thu, 06 Mar 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/639/</guid><description>紹介 2025年、青い蛇の年が明けた。このコースでは、難しく複雑な内容を新たに紹介するというより、理工系の歴史の中で繰り返し登場する数式の形態</description></item><item><title>リドールド盆地</title><link>https://freshrimpsushi.github.io/jp/posts/617/</link><pubDate>Tue, 04 Mar 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/617/</guid><description>定義 1 力学系で $n$ 個のアトラクターに対するベイスン $R_{1} , \cdots , R_{n}$ が与えられているとする。集合 $\mathcal{R}$ がすべての $\mathbf{x} \in \mathcal{R}$ とすべての $\varepsilon &amp;gt; 0$ に対してオープンボー</description></item><item><title>平均と分散の別の定義</title><link>https://freshrimpsushi.github.io/jp/posts/610/</link><pubDate>Sun, 02 Mar 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/610/</guid><description>定義 ユークリッド空間 $\mathbb{R}$ 1 確率変数 $X :\Omega \to \mathbb{R}$ について偏差自乗の期待値の下限 $\sigma^{2} (X) \in \mathbb{R}$ を $X$ の分散varianceと定義する。 $$ \sigma^{2} \left( X \right) := \inf_{a \in \mathbb{R}} E \left[ \left(</description></item><item><title>相関関係次元</title><link>https://freshrimpsushi.github.io/jp/posts/606/</link><pubDate>Fri, 28 Feb 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/606/</guid><description>定義 1 2 距離空間 $\left( X , d \right)$ における 集合 $S = \left\{ x_{1} , \cdots , x_{n} \right\} \subset X$ の要素を $x \in S$ のように表そう。中心が $x$ で半径が $\varepsilon &amp;gt; 0$ の オープンボール $B \left( x ; \varepsilon \right)$</description></item><item><title>ランダムフィールドの定義</title><link>https://freshrimpsushi.github.io/jp/posts/595/</link><pubDate>Wed, 26 Feb 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/595/</guid><description>定義 1 集合型の定義 確率変数の集合を確率過程という。パラメータ集合またはインデックス集合$T$について、$T$上での確率過程$f$は、$t \in T</description></item><item><title>ボックス・カウンティング次元</title><link>https://freshrimpsushi.github.io/jp/posts/584/</link><pubDate>Mon, 24 Feb 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/584/</guid><description>定義 1 2 有界された集合$S \subset \mathbb{R}^{n}$ が与えられているとする。一辺の長さが $\varepsilon$ のハイパーキューブが $S$ をカバーできるようにする最小の数を$N \left( \varepsilon \rig</description></item><item><title>線形回帰分析におけるSST = SSR + SSEの証明</title><link>https://freshrimpsushi.github.io/jp/posts/511/</link><pubDate>Sat, 22 Feb 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/511/</guid><description>定理 $$ \begin{bmatrix} y_{1} \\ y_{2} \\ \vdots \\ y_{n} \end{bmatrix} = \begin{bmatrix} 1 &amp;amp; x_{11} &amp;amp; \cdots &amp;amp; x_{p1} \\ 1 &amp;amp; x_{12} &amp;amp; \cdots &amp;amp; x_{p2} \\ \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \\ 1 &amp;amp; x_{1n} &amp;amp; \cdots &amp;amp; x_{pn} \end{bmatrix} \begin{bmatrix} \beta_{0} \\ \beta_{1} \\ \vdots \\ \beta_{p} \end{bmatrix} + \begin{bmatrix} \varepsilon_{1} \\ \varepsilon_{2} \\ \vdots \\ \varepsilon_{n} \end{bmatrix} $$ $n$ 個のデ</description></item><item><title>力学におけるフラクタルとは何か?</title><link>https://freshrimpsushi.github.io/jp/posts/442/</link><pubDate>Thu, 20 Feb 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/442/</guid><description>用語 フラクタルfractalは一般に自己相似性self-similarityを持つ幾何学的オブジェクトを指し、その例や概念も広く知られている</description></item><item><title>分ける: 分割される</title><link>https://freshrimpsushi.github.io/jp/posts/441/</link><pubDate>Tue, 18 Feb 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/441/</guid><description>語彙 be divided into: 言葉の通り分けられることを意味する。重要なのは前置詞として into を使うという点だ。 例文 &amp;ldquo;まず、パテ $T$ は異なる連結されていな</description></item><item><title>類似性次元</title><link>https://freshrimpsushi.github.io/jp/posts/397/</link><pubDate>Sun, 16 Feb 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/397/</guid><description>定義 集合 $\displaystyle A := \lim_{n \to \infty} A_{n}$ が 自己相似集合と仮定する。 $A_{1}$ が持つ $A_{0}$ と類似の部分集合を $A_{0}$ のコピーcopy of $A_{0}$ と呼ぶとき、 $A_{0}$ のコピーの ボリュームvolu</description></item><item><title>Vを行うにおけるAの役割</title><link>https://freshrimpsushi.github.io/jp/posts/393/</link><pubDate>Fri, 14 Feb 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/393/</guid><description>文型 動詞Vと形容詞Aが与えられているとしよう。 &amp;ldquo;play a A role V-ing&amp;rdquo; $\iff$ VするにあたってAな役割を果たす 例文 &amp;ldquo;追加的に、0に近いRMSEを達成</description></item><item><title>フォン・コッホ曲線</title><link>https://freshrimpsushi.github.io/jp/posts/387/</link><pubDate>Wed, 12 Feb 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/387/</guid><description>定義 1 $K_{n+1}$ は次のように定義される。 $K_{n}$ の長さが $l$ のすべての線分を三等分し、 中央の点に辺の長さが $l/3$ の正三角形を追加し、 正三角形と $K_{n}$ が重なる部分を除</description></item><item><title>量子エントロピーの考慮</title><link>https://freshrimpsushi.github.io/jp/posts/386/</link><pubDate>Mon, 10 Feb 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/386/</guid><description>語彙 take into account: 「考慮する」という意味の熟語で、モデルやメソッドなどで「ある要素を考慮した」といった文脈でよく使われる。 consider: 「考慮する」という意味の</description></item><item><title>ハウスドルフ次元</title><link>https://freshrimpsushi.github.io/jp/posts/370/</link><pubDate>Sat, 08 Feb 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/370/</guid><description>定義 1 距離空間 $\left( X, d \right)$ が与えられているとする。$S \subset X$ の 直径diameter $\diam S$ は次のように定義される。 $$ \diam S := \sup \left\{ d (x, y) : x, y \in S \right\} $$ ハウ</description></item><item><title>일본어: それに対応するX</title><link>https://freshrimpsushi.github.io/jp/posts/369/</link><pubDate>Thu, 06 Feb 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/369/</guid><description>文型 &amp;ldquo;the corresponding X&amp;rdquo; $\iff$ &amp;ldquo;それに対応する X&amp;rdquo; 例文 &amp;ldquo;$g$ が 連続な 導関数を持つとき、二階微分方程式 $\ddot{x} + g(x) = 0$ またはそれに対応するシステム $\dot{x} = y , \dot{y} = g(x)$</description></item><item><title>自己相似集合</title><link>https://freshrimpsushi.github.io/jp/posts/368/</link><pubDate>Tue, 04 Feb 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/368/</guid><description>定義 1 二つの集合 $A, B$ に対して $f(A) = B$ を満たす全単射 $f$ が存在すれば、二つの集合 $A, B$ は相似だsimilarとする。集合 $X$ に対して $X$ と相似な部分集合</description></item><item><title>アフィン変換</title><link>https://freshrimpsushi.github.io/jp/posts/365/</link><pubDate>Sun, 02 Feb 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/365/</guid><description>定義 簡単な定義 行列 $A$ と ベクトル $\mathbf{b}$ が与えられたとしよう。次のようにベクトル $\mathbf{x}$ に $A$ を掛けて $\mathbf{b}$ を足す 変換を アフィン変換 と呼ぶ。 $$ \mathbf{x} \mapsto A \mathbf{x} + \mathbf{b} $$ 難し</description></item><item><title>初期条件に対する感度</title><link>https://freshrimpsushi.github.io/jp/posts/364/</link><pubDate>Fri, 31 Jan 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/364/</guid><description>定義 1 空間 $X = \left( \mathbb{R}^{n} , \left\| \cdot \right\| \right)$ と スムーズな関数 $f,g : X \to X$ に対して、ベクトル場、マップが次のように表現されるとする。 $$ \dot{x} = f(x) \\ x \mapsto g(x) $$ $\phi (t, \cdot)$ はベ</description></item><item><title>英文法: AとBの組み合わせであるX</title><link>https://freshrimpsushi.github.io/jp/posts/363/</link><pubDate>Wed, 29 Jan 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/363/</guid><description>文型 &amp;ldquo;a X coupling A and B&amp;rdquo; $\iff$ &amp;ldquo;AとBの組み合わせであるX&amp;rdquo; 例文 &amp;ldquo;このような観点から、人工ニューラルネットワークと遺</description></item><item><title>微分方程式で表されるシステムのカオス</title><link>https://freshrimpsushi.github.io/jp/posts/337/</link><pubDate>Mon, 27 Jan 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/337/</guid><description>定義 1 関数 $f : \mathbb{R}^{n} \to \mathbb{R}^{n}$ に対して、次のような ベクトル場 が微分方程式として与えられているとする。 $$ \dot{x} = f(x) $$ ある点 $x_{0} \in X$ において、このシステムの オー</description></item><item><title>英文法: Xの近傍に</title><link>https://freshrimpsushi.github.io/jp/posts/335/</link><pubDate>Sat, 25 Jan 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/335/</guid><description>文型 &amp;ldquo;in the vicinity of X&amp;rdquo; $\iff$ &amp;ldquo;Xの近傍で&amp;rdquo; 例文 &amp;ldquo;一般的に、これらの手順はトラジェクトリーシミュレーションで、特に不連</description></item><item><title>エノン写像</title><link>https://freshrimpsushi.github.io/jp/posts/334/</link><pubDate>Thu, 23 Jan 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/334/</guid><description>定義 次のように力学系を定義するマップをエノンマップHénon mapと呼ぶ。 $$ \begin{align*} x \mapsto&amp;amp; 1 - a x^{2} + y \\ y \mapsto&amp;amp; b x \end{align*} $$ 説明 フランスの天文学者エノンHé</description></item><item><title>ストレンジノンカオティックアトラクター (SNA)</title><link>https://freshrimpsushi.github.io/jp/posts/326/</link><pubDate>Sun, 19 Jan 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/326/</guid><description>定義 1 2 ストレンジだがカオティックでないアトラクターSNA, strange nonchaotic attractorはフラクタル幾何学の構造を備えているが、ダイナミカルセンス</description></item><item><title>絶対アークタンジェント平均パーセンテージ誤差 MAAPE</title><link>https://freshrimpsushi.github.io/jp/posts/320/</link><pubDate>Fri, 17 Jan 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/320/</guid><description>定義 1 回帰問題で、データポイント $\left\{ x_{k} \right\}_{k=1}^{n}$ とその予測値 $\left\{ \widehat{x}_{k} \right\}_{k=1}^{n}$ に対して、平均アークタンジェント絶対百分誤差MAAPE (Mean Arctangent Absolute Percentage Error)を次のよう</description></item><item><title>固定点を含まない軌跡は少なくとも1つのゼロリアプノフ指数を持つ。</title><link>https://freshrimpsushi.github.io/jp/posts/313/</link><pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/313/</guid><description>定理 空間 $X = \mathbb{R}^{n}$ と 連続な 関数 $f : X \to X$ に対して次のような ベクトル場が 微分方程式として与えられているとする。 $$ \dot{x} = f(x) $$ このシステムの トラジェクト</description></item><item><title>平均絶対百分率誤差 MAPE</title><link>https://freshrimpsushi.github.io/jp/posts/312/</link><pubDate>Mon, 13 Jan 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/312/</guid><description>定義 1 回帰問題で、データポイント $\left\{ x_{k} \right\}_{k=1}^{n}$ とその予測値 $\left\{ \widehat{x}_{k} \right\}_{k=1}^{n}$ に対して、平均絶対比誤差MAPE(Mean Absolute Percentage Error) を次のように定義する。 $$ \text{MAPE} = {{ 1 } \over</description></item><item><title>動力学における食物連鎖システム</title><link>https://freshrimpsushi.github.io/jp/posts/302/</link><pubDate>Sat, 11 Jan 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/302/</guid><description>モデル 1 $$ \begin{align*} \dot{R} =&amp;amp; R \left( 1 - {\frac{ R }{ K }} \right) - {\frac{ x_{c} y_{c} C R }{ R + R_{0} }} \\ \dot{C} =&amp;amp; x_{c} C \left( {\frac{ y_{c} R }{ R + R_{0} }} - 1 \right) - {\frac{ x_{p} y_{p} P C }{ C + C_{0} }} \\ \dot{P} =&amp;amp; x_{p} P \left( {\frac{ y_{p} C }{ C + C_{0}</description></item><item><title>平均がゼロの正規分布に従う確率変数のべき乗の期待値</title><link>https://freshrimpsushi.github.io/jp/posts/300/</link><pubDate>Thu, 09 Jan 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/300/</guid><description>公式 確率変数 $X$ が 正規分布 $N \left( 0 , \sigma^{2} \right)$ に従うとすると、その累乗 $X^{n}$ の 期待値 は次のように再帰的な公式で表される1。 $$ E \left( X^{n} \right) = (n - 1) \sigma^{2} E \left( X^{n-2} \right) $$ $E</description></item><item><title>ホリング型関数反応</title><link>https://freshrimpsushi.github.io/jp/posts/294/</link><pubDate>Tue, 07 Jan 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/294/</guid><description>概要 生態系eco systemをモデル化する常微分方程式などで捕食者と被食者間に適用される質量作用の法則を関数の形として仮定する場合、一般的に</description></item><item><title>Linuxでviまたはvimを終了する方法</title><link>https://freshrimpsushi.github.io/jp/posts/292/</link><pubDate>Sun, 05 Jan 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/292/</guid><description>概要 vivisualエディター または vimvi improved は、Linuxシステムで長命を誇るテキストエディタだ。geditと比べて明らかに不便だが、サーバーへ</description></item><item><title>微分方程式で表されるシステムのリアプノフスペクトルとその数値計算法</title><link>https://freshrimpsushi.github.io/jp/posts/287/</link><pubDate>Fri, 03 Jan 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/287/</guid><description>アルゴリズム 空間 $X = \mathbb{R}^{n}$ と 関数 $f : X \to X$ に対して次のような ベクトル場 が 微分方程式 として与えられているとしよう。 $$ \dot{x} = f(x) $$ $f$ の ヤコビ行列 $J$ に対し</description></item><item><title>正規行列の定義</title><link>https://freshrimpsushi.github.io/jp/posts/286/</link><pubDate>Wed, 01 Jan 2025 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/286/</guid><description>定義 正方行列 $A \in \mathbb{C}^{n \times n}$ が次を満たすとき、正規行列normal matrixという。 $$ A A^{\ast} = A^{\ast} A $$ ここで $X^{\ast}$ は行列 $X$ の共役転置行列である。 性質 $A$ が</description></item><item><title>KOSIS 国家データポータルの紹介</title><link>https://freshrimpsushi.github.io/jp/posts/284/</link><pubDate>Mon, 30 Dec 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/284/</guid><description>紹介 KOSIS 国家データポータルは、国内、国際、北朝鮮の主要統計を一箇所に集め、ユーザーが望む統計を簡単に見つけられるように、統計庁が提供するOne</description></item><item><title>線形システムのリアプノフスペクトル</title><link>https://freshrimpsushi.github.io/jp/posts/283/</link><pubDate>Sat, 28 Dec 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/283/</guid><description>定理 行列 $A \in \mathbb{R}^{n \times n}$ に対して次のようなベクトル場が線形微分方程式で与えられているとする。 $$ \dot{\mathbf{x}} = A \mathbf{x} \qquad , \mathbf{x} \in \mathbb{R}^{n} $$ もし $A$ が対称行列であるなら、この</description></item><item><title>行政標準コード管理システムの紹介</title><link>https://freshrimpsushi.github.io/jp/posts/280/</link><pubDate>Thu, 26 Dec 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/280/</guid><description>紹介 行政標準コード管理システム、その中でもこのポストでは法定洞コードリスト照会について紹介する。韓国のデータを扱うときに非常に便利であるため</description></item><item><title>リアプノフスペクトルの定義</title><link>https://freshrimpsushi.github.io/jp/posts/272/</link><pubDate>Tue, 24 Dec 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/272/</guid><description>定義 空間 $X = \mathbb{R}^{n}$ と 函数 $f : X \to X$ に対して次のような ベクトル場 が 微分方程式 として与えられているとする。 $$ \dot{x} = f(x) $$ 簡単な定義 フロー $F_{T} (v)$ の時間-$1</description></item><item><title>ネットワークデータリポジトリーの紹介</title><link>https://freshrimpsushi.github.io/jp/posts/271/</link><pubDate>Sun, 22 Dec 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/271/</guid><description>紹介 ネットワークデータリポジトリNetwork Data Repositoryは、30以上のテーマに対して数千もの多様なネットワークを提供するサイトだ</description></item><item><title>変分方程式</title><link>https://freshrimpsushi.github.io/jp/posts/270/</link><pubDate>Fri, 20 Dec 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/270/</guid><description>定義 1 2 空間 $X = \mathbb{R}^{n}$ と 関数 $f : X \to X$ に対して、次のような ベクトル場 が 微分方程式 で与えられているとする。 $$ \dot{x} = f(x) $$ $f$ の ヤコビアン行列 $J$ に対して、</description></item><item><title>ベースボール・サヴァントの紹介</title><link>https://freshrimpsushi.github.io/jp/posts/269/</link><pubDate>Wed, 18 Dec 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/269/</guid><description>紹介 ベースボールサーヴァントBaseball Savantはメジャーリーグベースボール(MLB)のデータを提供するサイトだ。 要求事項 どんな要求</description></item><item><title>ダイナミカルシステムとしてのメムリスターヒンドマーシュ・ローズニューロンモデル</title><link>https://freshrimpsushi.github.io/jp/posts/268/</link><pubDate>Mon, 16 Dec 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/268/</guid><description>概要 ヒンドマッシュ-ローズモデルHindmarsh-Rose modelはニューロンneuronにおけるイオンチャネルion channelに関</description></item><item><title>ライフのウェブの紹介</title><link>https://freshrimpsushi.github.io/jp/posts/261/</link><pubDate>Sat, 14 Dec 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/261/</guid><description>紹介 ウェブ オブ ライフWeb of Lifeは、チューリッヒ大学が提供する生態系ネットワークデータと関連情報を得ることができるサイトだ。 要件 どんな要</description></item><item><title>力学系としての二重振り子</title><link>https://freshrimpsushi.github.io/jp/posts/259/</link><pubDate>Thu, 12 Dec 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/259/</guid><description>モデル 平面上で振り子pendulumの先にもう一つの振り子がある構造を二重振り子double pendulumと呼ぶ1。 $$ \begin{align*} \ddot{\phi} =&amp;amp; \left[ 1 - \mu \cos^{2} \left( \psi</description></item><item><title>JuliaでExcel XLSXファイルを読み込む方法</title><link>https://freshrimpsushi.github.io/jp/posts/242/</link><pubDate>Tue, 10 Dec 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/242/</guid><description>概要 ジュリアでエクセル統合ドキュメント拡張子である *.XLSX ファイルを読む方法について紹介する。CSVファイルを読むことよりはやや難しいが、データそ</description></item><item><title>フィゲンバウムの普遍性</title><link>https://freshrimpsushi.github.io/jp/posts/241/</link><pubDate>Sun, 08 Dec 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/241/</guid><description>推測 $$ x \mapsto f_{\alpha} (x) \qquad , x \in \mathbb{R}^{1} $$ 上記のように定義されたマップで表される動力学系が$\alpha$を分岐パラメータとする周期倍加分岐を示すとする。$</description></item><item><title>Juliaでオペレーティングシステムを確認する方法</title><link>https://freshrimpsushi.github.io/jp/posts/233/</link><pubDate>Fri, 06 Dec 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/233/</guid><description>概要 Juliaは科学計算に特化した言語であるため、複数のサーバーにプログラムをデプロイして実行することが多く、様々なオペレーティングシステム</description></item><item><title>ニーマーク・サッカー分岐</title><link>https://freshrimpsushi.github.io/jp/posts/190/</link><pubDate>Wed, 04 Dec 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/190/</guid><description>定義 簡単な定義 ネイマルク-サッカー分岐Neimark-Sacker bifurcationは動力学系のパラメーター変化に従って固定点から不変閉</description></item><item><title>Juliaでの横軸と縦軸の入れ替え方</title><link>https://freshrimpsushi.github.io/jp/posts/179/</link><pubDate>Mon, 02 Dec 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/179/</guid><description>概要 ジュリアにおいて図の横軸と縦軸の入れ替え方法について紹介する。 コード plot関数の引数としてpermute = (:y, :x)を使い軸の順序を変え</description></item><item><title>ピリオド倍加分岐</title><link>https://freshrimpsushi.github.io/jp/posts/146/</link><pubDate>Sat, 30 Nov 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/146/</guid><description>定義 簡単な定義 周期倍加分岐period-doubling bifurcationは、動力学系のパラメータ変化に従って周期軌道の周期が2倍に増え</description></item><item><title>SAMBAを使用してLinuxクライアントからWindowsサーバーにアクセスする方法</title><link>https://freshrimpsushi.github.io/jp/posts/143/</link><pubDate>Thu, 28 Nov 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/143/</guid><description>概要 サンバsambaはWindowsとLinux間のファイル共有機能を提供するソフトウェアで、このポストではLinuxクライアント側からWi</description></item><item><title>ダイナミクスにおけるリミットサイクルの双曲性</title><link>https://freshrimpsushi.github.io/jp/posts/140/</link><pubDate>Tue, 26 Nov 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/140/</guid><description>定義 ユークリッド空間 $\mathbb{R}^{n}$ と 開集合 $U \subset \mathbb{R}^{n}$ で 連続な 関数 $f : U \to \mathbb{R}^{n}$ に対して、次のような ベクトル場 が 微分方程式で与えられているとする。 $$ \dot{x} = f(x) $$ このシ</description></item><item><title>クロームを通じてLinuxにリモートアクセスする方法と黒い画面の問題の解決方法</title><link>https://freshrimpsushi.github.io/jp/posts/139/</link><pubDate>Sun, 24 Nov 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/139/</guid><description>概要 Linuxの場合、Chromeリモートデスクトップへの接続がWindowsほど簡単ではない。黒い画面とカーソルだけが表示され、使用できな</description></item><item><title>動力学における固定点の双曲線性</title><link>https://freshrimpsushi.github.io/jp/posts/128/</link><pubDate>Fri, 22 Nov 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/128/</guid><description>定義 1 空間 $\mathbb{R}^{p}$ と スムーズ な 関数 $f , g : \mathbb{R}^{p} \to \mathbb{R}^{p}$ に関して 動力学系 が次のように ベクトル場やマップとして表されるとする。 $$ \dot{x} = f(x) \\ x \mapsto g(x) $$ これらの 固定</description></item><item><title>Juliaで軸に円周率の記号を使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/127/</link><pubDate>Wed, 20 Nov 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/127/</guid><description>概要 Juliaでティックに直接円周率記号を使う方法について説明する。実際には必ずしも円周率である必要はなく、タプルでティックの位置と表記を伝</description></item><item><title>ホップ分岐</title><link>https://freshrimpsushi.github.io/jp/posts/125/</link><pubDate>Mon, 18 Nov 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/125/</guid><description>定義 ホップ分岐Hopf bifurcationは力学系のパラメータ変化に伴い、固定点の安定性が反転し、新しい周期軌道が現れるか消える分岐である</description></item><item><title>国別のISO3コードと緯度経度データ</title><link>https://freshrimpsushi.github.io/jp/posts/124/</link><pubDate>Sat, 16 Nov 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/124/</guid><description>紹介 特定のサイトというよりも、ISO alpha-2、alpha-3と国土全域で平均を取った緯度、経度が得られるGistページだ。個人によって</description></item><item><title>無限周期分岐</title><link>https://freshrimpsushi.github.io/jp/posts/123/</link><pubDate>Thu, 14 Nov 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/123/</guid><description>定義 無限周期バイフェルケーションinfinite-periodは、動力学系のパラメータ変化に伴い、サドルポイントとステーブルノードを含むリミ</description></item><item><title>PowerPointで大きな長方形行列を簡単に作成する方法</title><link>https://freshrimpsushi.github.io/jp/posts/120/</link><pubDate>Tue, 12 Nov 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/120/</guid><description>概要 パワーポイントで直角行列を追加したい場合、労働以前に正統な方法があるかどちらも把握するのが難しい。2次元形式に関する便利なヒントを発見し</description></item><item><title>ヘテロクリニック分岐</title><link>https://freshrimpsushi.github.io/jp/posts/119/</link><pubDate>Sun, 10 Nov 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/119/</guid><description>定義 ヘテロクリニック分岐heteroclinic bifurcationは 動力学系のパラメータ変化に従ってヘテロクリニック軌道が現れたり消えた</description></item><item><title>PowerPointで大きな正方行列を簡単に作成する方法</title><link>https://freshrimpsushi.github.io/jp/posts/115/</link><pubDate>Fri, 08 Nov 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/115/</guid><description>概要 パワーポイントで大きな 正方行列 を挿入したいときには、手動作業 をするしかなかったが、2次元形式に関連した便利な方法を発見したので紹介する。</description></item><item><title>ホモクリニック分岐"</title><link>https://freshrimpsushi.github.io/jp/posts/114/</link><pubDate>Wed, 06 Nov 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/114/</guid><description>定義 ホモクリニック分岐homoclinic bifurcationは動力学系のパラメーター変化に従ってホモクリニック軌道が現れるか消えるかする</description></item><item><title>パワーポイントで等号を基準に整列する方法</title><link>https://freshrimpsushi.github.io/jp/posts/113/</link><pubDate>Mon, 04 Nov 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/113/</guid><description>概要 パワーポイントで数式を使用する際、等号基準で整列する方法を紹介する。 ガイド 1. 数式 上記のように数式の一行目が与えられているとする。 2. 改行 shift</description></item><item><title>ホモクリニック軌道とヘテロクリニック軌道</title><link>https://freshrimpsushi.github.io/jp/posts/107/</link><pubDate>Sat, 02 Nov 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/107/</guid><description>定義1 ホモクリニック ある固定点 $x_{0}$ に対して次を満たす $\phi$ を ホモクリニック軌道homoclinic orbit と呼ぶ。 $$ \lim_{t \to \pm \infty} \phi ( t , x ) = x_{0} $$ ヘテロクリ</description></item><item><title>クヌースの矢印表記法：プログラミングでべき乗を^で表す理由</title><link>https://freshrimpsushi.github.io/jp/posts/105/</link><pubDate>Thu, 31 Oct 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/105/</guid><description>定義 クヌースの上向き矢印記法Knuth&amp;rsquo;s up-arrow notationとは、大きな整数を表すために考案された記法である。 加算、乗算、べき乗</description></item><item><title>解析学におけるヌルクライン</title><link>https://freshrimpsushi.github.io/jp/posts/99/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/99/</guid><description>定義 アイソクライン 曲線の集合が与えられているとする。傾きが同じ点の集合をアイソクラインisoclineという。 ヌルクライン $p$次元の常微分</description></item><item><title>確率分布のヘリンガー距離</title><link>https://freshrimpsushi.github.io/jp/posts/91/</link><pubDate>Sun, 27 Oct 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/91/</guid><description>定義 次のように定義される確率分布自体の距離関数をヘリンガー距離Hellinger distanceと呼ぶ。 離散型1 $p, q$を確率質量関数とする。</description></item><item><title>ダイナミクスにおけるチッピングポイント</title><link>https://freshrimpsushi.github.io/jp/posts/87/</link><pubDate>Fri, 25 Oct 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/87/</guid><description>用語 動力学系で状態のあるタイプから別のタイプへの急激な転移を経験することをティッピングポイント現象phenomenon of tipping pointと呼ぶ1</description></item><item><title>グラフとグラフの間の編集距離</title><link>https://freshrimpsushi.github.io/jp/posts/85/</link><pubDate>Wed, 23 Oct 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/85/</guid><description>定義 1 頂点の有限集合 $X$ と有限なアルファベットの集合を $\alpha$ としよう。ここでアルファベットは空白またはヌルnullを含むとする。頂点ラベリングve</description></item><item><title>ダイナミクスにおけるヒステリシス現象</title><link>https://freshrimpsushi.github.io/jp/posts/81/</link><pubDate>Mon, 21 Oct 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/81/</guid><description>定義 パラメータの変化に伴って起こる力学系の変化が非可逆的irreversibleである現象をヒステリシス現象hysteresisという1。 説</description></item><item><title>グラフ間のスペクトル距離</title><link>https://freshrimpsushi.github.io/jp/posts/80/</link><pubDate>Sat, 19 Oct 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/80/</guid><description>定義 頂点の数が $n$ の二つのグラフ $G_{1}$、$G_{2}$ の隣接行列をそれぞれ $A_{1}$、$A_{2}$ とする。これらが降順でソートさ</description></item><item><title>サドルノード分岐</title><link>https://freshrimpsushi.github.io/jp/posts/79/</link><pubDate>Thu, 17 Oct 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/79/</guid><description>定義 簡単な定義 サドルノードバイファーケーションsaddle-node bifurcationは、力学系のパラメータ変化によって不動点が生成また</description></item><item><title>ハミング距離</title><link>https://freshrimpsushi.github.io/jp/posts/78/</link><pubDate>Tue, 15 Oct 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/78/</guid><description>定義 自然数 $n \in \mathbb{N}$ に対して、長さが $n$ のコードポイントcode pointの集合 $\left\{ 0, 1 \right\}^{n}$ から、次のように定義された距離関数 $H$ をハミング距離Hamm</description></item><item><title>トランスクリティカル分岐</title><link>https://freshrimpsushi.github.io/jp/posts/77/</link><pubDate>Sun, 13 Oct 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/77/</guid><description>定義 1 2 トランスクリティカルバイファーケーションtranscritical bifurcationは、力学系のパラメータ変化に伴い、2つの不動</description></item><item><title>ソルト・アンド・ペッパーノイズ</title><link>https://freshrimpsushi.github.io/jp/posts/76/</link><pubDate>Fri, 11 Oct 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/76/</guid><description>定義 画像に小さな点として白や黒で表されるノイズをソルト・アンド・ペッパーノイズsalt-and pepper noiseという。 例示 例として、上の画像にソ</description></item><item><title>正定値行列とその実数乗</title><link>https://freshrimpsushi.github.io/jp/posts/69/</link><pubDate>Wed, 09 Oct 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/69/</guid><description>定義 正定行列である行列 $A \ge 0$ と実数 $t \in \mathbb{R}$ に対して、$A$ の**$t$乗数**$t$-powerを次のように定義する。 $$ A^{t} := \exp \left( t \log A \right) $$ ここ</description></item><item><title>数学におけるグラフのレイアウト</title><link>https://freshrimpsushi.github.io/jp/posts/68/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/68/</guid><description>概要 数学において、グラフまたはネットワークのレイアウトとは、2Dまたは3Dで視覚化する際に、具体的に頂点とエッジをどのように配置するかについ</description></item><item><title>行列アンワインディング関数</title><link>https://freshrimpsushi.github.io/jp/posts/67/</link><pubDate>Sat, 05 Oct 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/67/</guid><description>定義 指数関数 $\exp$ と 対数関数 $\log$ を 行列 に対して一般化しようとしている。 行列の指数 指数関数を行列に対して一般化した $\exp : \mathbb{C}^{n \times n} \to \mathbb{C}^{n \times n}$ は行列 $A \in \mathbb{C}^{n \times n}$</description></item><item><title>Juliaカラースキームで0から1の間の値で色を得る方法</title><link>https://freshrimpsushi.github.io/jp/posts/46/</link><pubDate>Thu, 03 Oct 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/46/</guid><description>概要 Juliaのカラースキームで0から1の間の値で色を得るには、get関数を使います1。この関数は元々Baseにもありますが、using Co</description></item><item><title>エルミート行列のロワーナー順序</title><link>https://freshrimpsushi.github.io/jp/posts/26/</link><pubDate>Tue, 01 Oct 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/26/</guid><description>定義 ロウナー順序 二つの行列 $A, B \in \mathbb{C}^{n \times n}$ が エルミート行列であるとする。$\left( A - B \right)$ が 半正定値ならば $A \ge B$ のように表し、$\left(</description></item><item><title>Julia自然言語処理パッケージTextAnalysis.jlの紹介</title><link>https://freshrimpsushi.github.io/jp/posts/24/</link><pubDate>Sun, 29 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/24/</guid><description>概要 Juliaの自然言語処理パッケージであるTextAnaylsis.jlについて軽く紹介する1。実践的な自然言語処理のためには、語幹抽出s</description></item><item><title>論文レビュー：コルモゴロフ・アーノルドニューラルネットワーク（KAN）</title><link>https://freshrimpsushi.github.io/jp/posts/322/</link><pubDate>Sun, 29 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/322/</guid><description>概要と要約 Kolmogorov–Arnold Networks（KAN）は、その名の通りコルモゴロフ-アルノルト表現定理Kolmogorov–</description></item><item><title>エルミート行列空間と半正定値行列の凸錐</title><link>https://freshrimpsushi.github.io/jp/posts/19/</link><pubDate>Fri, 27 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/19/</guid><description>定義 $n \in \mathbb{N}$ としましょう。 エルミート行列空間 サイズが$n \times n$のエルミート行列の集合を次のように表します。 $$ \mathbb{H}_{n} := \left\{ A \in \mathbb{C}^{n \times n} : A = A^{\ast} \right\} $$ 正定値</description></item><item><title>Juliaのシンボリック演算パッケージSymbolics.jlの紹介</title><link>https://freshrimpsushi.github.io/jp/posts/18/</link><pubDate>Wed, 25 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/18/</guid><description>概要 Juliaのシンボリック代数システムであるSymbolics.jlについて紹介します1。このパッケージは、特にJuliaの基本文法と一緒</description></item><item><title>コーンと凸コーンの定義</title><link>https://freshrimpsushi.github.io/jp/posts/8/</link><pubDate>Mon, 23 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/8/</guid><description>定義 1 コーン ベクトル空間 $V$ の 部分集合 $C \subset V$ が全ての スカラー $a &amp;gt; 0$ と $x \in C$ に対して次を満たす時、$C$ を コーンconeと言う。 $$ ax \in C $$ 平らな</description></item><item><title>Juliaで画像を垂直および水平に反転させる方法</title><link>https://freshrimpsushi.github.io/jp/posts/7/</link><pubDate>Sat, 21 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/7/</guid><description>概要 Juliaで画像を上下反転させたり、左右反転させる方法を紹介します。一般的にImages.jlにflipのような関数があると思われがちで</description></item><item><title>JavaScriptモジュールの外で関数を使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/6/</link><pubDate>Thu, 19 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/6/</guid><description>概要 JavaScriptでは、モジュールの関数は外部から使用できません。Web環境でのモジュールは&amp;lt;script type=&amp;quot;</description></item><item><title>Juliaでデバイス名とアカウント名を参照する方法</title><link>https://freshrimpsushi.github.io/jp/posts/902/</link><pubDate>Tue, 17 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/902/</guid><description>概要 Juliaは高性能コンピューティングを志向しているため、一般的なレベルの計算量を遥かに超えて複数のサーバーを使用する可能性が高い。この際</description></item><item><title>Juliaでクリップボードを使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2628/</link><pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2628/</guid><description>概要 Juliaでクリップボードを使用する方法を紹介します。 コード clipboardは2つのメソッドで実装されています。 clipboard(x) クリップボードにxを</description></item><item><title>VSCodeで自動折り返し設定を変更する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2627/</link><pubDate>Fri, 13 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2627/</guid><description>ガイド プログラミング言語とマークアップ言語の両方を使用していると、改行の設定をしなければならない場合がある。ショートカットキーを通じて簡単に</description></item><item><title>Juliaでコードの性能を評価、ベンチマークする方法</title><link>https://freshrimpsushi.github.io/jp/posts/2626/</link><pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2626/</guid><description>概要 Juliaを使用する最大の理由が速度とパフォーマンスであるため、工学的に最適化されたコードを書くことは非常に重要である。Benchmar</description></item><item><title>vscodeの複数ウィンドウの使い方</title><link>https://freshrimpsushi.github.io/jp/posts/2625/</link><pubDate>Mon, 09 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2625/</guid><description>ガイド vscodeでは、タブとターミナルを新しいウィンドウに分離して、複数のモニターを利用することができる。 タブ 任意のタブで右クリックし、[</description></item><item><title>Juliaの整列順列関数とその応用 sortperm</title><link>https://freshrimpsushi.github.io/jp/posts/2624/</link><pubDate>Sat, 07 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2624/</guid><description>コード sortpermは与えられた配列をソートされた状態にするためのインデックスの配列を返す1。言葉だけ見ると難しそうだけど、例を見るとすぐ</description></item><item><title>vscodeの基本スニペットパス</title><link>https://freshrimpsushi.github.io/jp/posts/2623/</link><pubDate>Thu, 05 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2623/</guid><description>ガイド vscodeでのデフォルトのスニペットパスは以下の通りです。 C:\Users\ユーザー名\AppData\Local\Programs</description></item><item><title>Juliaで単一要素セットの唯一の要素にアクセスする関数 only</title><link>https://freshrimpsushi.github.io/jp/posts/2622/</link><pubDate>Tue, 03 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2622/</guid><description>概要 集合論で言及される単一要素集合$\left\{ a \right\}$とその要素$a$が明確に異なるように、プログラミングにおいて要素を一つ</description></item><item><title>ガンマ関数の単純極</title><link>https://freshrimpsushi.github.io/jp/posts/2621/</link><pubDate>Sun, 01 Sep 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2621/</guid><description>定理 複素関数としてのガンマ関数 $\Gamma$ の定義域は以下の通りです。 $$ \mathbb{C} \setminus \left( \mathbb{Z} \setminus \mathbb{N} \right) = \mathbb{C} \setminus \left\{ 0 , -1, -2, \cdots \right\} $$ それだけでなく、$\Gamma$ の特異点の集</description></item><item><title>Julia vscodeでデータフレームを綺麗に見る方法</title><link>https://freshrimpsushi.github.io/jp/posts/2620/</link><pubDate>Fri, 30 Aug 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2620/</guid><description>ガイド 1 julia&amp;gt; using DataFrames julia&amp;gt; df = DataFrame(a = 10:-1:1, b = &amp;#39;a&amp;#39;:&amp;#39;j&amp;#39;) 10×2 DataFrame Row │ a b │ Int64 Char ─────┼───────────── 1 │ 10 a 2 │ 9 b 3 │ 8 c 4 │ 7 d 5 │ 6 e 6 │ 5</description></item><item><title>ハイパーグラフの定義</title><link>https://freshrimpsushi.github.io/jp/posts/2619/</link><pubDate>Wed, 28 Aug 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2619/</guid><description>定義 ある有限集合 $V \ne \emptyset$ をハイパーバーテックスセットhypervertex setと呼びます。 ハイパーエッジhyperedgeとはハイパーバーテ</description></item><item><title>Juliaで決定木を使う方法</title><link>https://freshrimpsushi.github.io/jp/posts/2618/</link><pubDate>Mon, 26 Aug 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2618/</guid><description>概要 Juliaで決定木decision Treeを実装したDecisionTree.jlパッケージを紹介する1。 コード 例としては、Rの組み込み</description></item><item><title>ガンマ関数の1における微分係数</title><link>https://freshrimpsushi.github.io/jp/posts/2617/</link><pubDate>Sat, 24 Aug 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2617/</guid><description>定理 ガンマ関数 $\Gamma$ とオイラー-マスケローニ定数 $\gamma$ について、以下が成立します。 $$ \Gamma ' (1) = - \gamma $$ 証明 1 ガンマ関数の導関数と逆数の積: $$ {{ \Gamma ' (z) } \over</description></item><item><title>Juliaでコレクションの重複を削除する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2616/</link><pubDate>Thu, 22 Aug 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2616/</guid><description>概要 Juliaでコレクションの重複をなくし、チェックする方法を紹介する。重複をなくすunique()関数は、アルゴリズム的に見て難しくないが</description></item><item><title>ディガンマ関数：ガンマ関数の導関数とその逆数の積</title><link>https://freshrimpsushi.github.io/jp/posts/2615/</link><pubDate>Tue, 20 Aug 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2615/</guid><description>定義 対数ガンマ関数の導関数をディガンマ関数digamma functionと言います。 $$ \psi_{0} (z) := \dfrac{d}{dz} \ln \Gamma (z) = \dfrac{\Gamma^{\prime}(z)}{\Gamma (z)} $$ 定理 ガンマ関数 $\Gamma$ とオイラー-マス</description></item><item><title>ピッチフォーク分岐</title><link>https://freshrimpsushi.github.io/jp/posts/2614/</link><pubDate>Tue, 20 Aug 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2614/</guid><description>定義 1 2 ピッチフォークバイフケーションpitchfork bifurcationは、動力学系のパラメータ変化によって固定点の安定性が反転し、新</description></item><item><title>Juliaでクラスタリングパッケージを使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2613/</link><pubDate>Fri, 16 Aug 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2613/</guid><description>概要 Juliaでは、クラスタリング用のパッケージとしてClustering.jlが提供されている1。実装されているアルゴリズムは次の通りです</description></item><item><title>力学系としての振動衝撃モデル</title><link>https://freshrimpsushi.github.io/jp/posts/2612/</link><pubDate>Wed, 14 Aug 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2612/</guid><description>概要 振動衝撃モデルvibro-impact modelは、振動する円筒形カプセル内の物体の動きを表す非スムーズなダイナミックシステムで、主にハ</description></item><item><title>Julia・フラックスでGPUを使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2611/</link><pubDate>Mon, 12 Aug 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2611/</guid><description>概要 Juliaの機械学習ライブラリーであるFlux.jl1を使ってディープラーニングを実装する方法と、GPUを使って学習のパフォーマンスを加</description></item><item><title>動力学におけるベクトル場の法線形</title><link>https://freshrimpsushi.github.io/jp/posts/2610/</link><pubDate>Sat, 10 Aug 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2610/</guid><description>定義 $p(x;r)$ がある多項式関数としましょう。 $$ \dot{x} = p(x; r) $$ 動力学系の性質を説明するために、上記のように簡略化されたベクトル場をノーマルフォームnorm</description></item><item><title>Juliaの自動微分パッケージZygote.jl</title><link>https://freshrimpsushi.github.io/jp/posts/2609/</link><pubDate>Thu, 08 Aug 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2609/</guid><description>概要 Juliaでは、マシンラーニング、特にディープラーニングに関連した自動微分automatic DifferentiationのためにZyg</description></item><item><title>ダイナミクスにおける分岐</title><link>https://freshrimpsushi.github.io/jp/posts/2608/</link><pubDate>Tue, 06 Aug 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2608/</guid><description>定義 1 2 力学系の中でパラメーターの変化に伴ってフェーズ ポートレートの位相的不一致topological nonequivalentが現れること</description></item><item><title>Juliaで関数として構造体のプロパティを参照する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2607/</link><pubDate>Sun, 04 Aug 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2607/</guid><description>概要 Juliaで構造体のプロパティを参照する方法は主に二つある。文法的な便宜または実際の用途に応じて適切に使用するべきだ。 コード 例として、J</description></item><item><title>数理統計学における主成分分析（PCA）</title><link>https://freshrimpsushi.github.io/jp/posts/2606/</link><pubDate>Fri, 02 Aug 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2606/</guid><description>概要 主成分分析は、回帰分析で多重共線性を避けることやデータを要約するなど、統計学で多くの使い道があり、機械学習でも次元削減という重要な意味を</description></item><item><title>Juliaでベクトル場を描く方法</title><link>https://freshrimpsushi.github.io/jp/posts/2605/</link><pubDate>Wed, 31 Jul 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2605/</guid><description>コード quiver(, quiver=) Juliaでは、quiver()関数を使ってベクトルフィールドを視覚化することができる。 θ = 0:0.2:2π quiver(cos.</description></item><item><title>正定値行列の固有値と二次形式の最大値</title><link>https://freshrimpsushi.github.io/jp/posts/2604/</link><pubDate>Mon, 29 Jul 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2604/</guid><description>定理 正定値行列 $A \in \mathbb{R}^{p \times p}$ の 固有対 $\left\{ \left( \lambda_{k} , e_{k} \right) \right\}_{k=1}^{n}$ が $\lambda_{1} \ge \cdots \ge \lambda_{n} \ge 0$ の順に並んでいるとする。単位球unit Sphere 上での 二次形式 $\mathbf{x}^{T} A \mathbf{x}$ の最大値と最小値は</description></item><item><title>Juliaで配列の特定の位置を関数で参照する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2603/</link><pubDate>Sat, 27 Jul 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2603/</guid><description>概要 複数の配列が与えられた時、例えば、それぞれの配列の3番目の要素にアクセスしたいという状況は意外と多い。Juliaでは、getindex(</description></item><item><title>正定値半不定行列と拡張されたコーシー・シュワルツの不等式の証明</title><link>https://freshrimpsushi.github.io/jp/posts/2602/</link><pubDate>Thu, 25 Jul 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2602/</guid><description>定理 1 任意の二つのベクトル$\mathbf{b}, \mathbf{d} \in \mathbf{R}^{p}$と正定値行列$A \in \mathbf{R}^{p \times p}$に対して、以下の不等式が成立</description></item><item><title>JuliaからRへのパッケージのインポート方法</title><link>https://freshrimpsushi.github.io/jp/posts/2601/</link><pubDate>Tue, 23 Jul 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2601/</guid><description>概要 Juliaでパッケージを読み込む方法はusingを使うことだけど、プログラムが大きくなるとそれを一つ一つ書くのも大変だ。ループを通してパ</description></item><item><title>データの正規化</title><link>https://freshrimpsushi.github.io/jp/posts/2600/</link><pubDate>Sun, 21 Jul 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2600/</guid><description>用語 正規化 与えられたデータを$0$から$1$の間の値に変換することを正規化normalizationと言う。普通、データの最大値$x_{\t</description></item><item><title>Juliaで列ごとに行列を正規化する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2599/</link><pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2599/</guid><description>概要 Juliaで行列の正規化を簡単にするヒントを紹介する1。基本的には行列を行ごと、列ごとにスカラー倍する方法とeachcol()関数、Li</description></item><item><title>大学院生の降下法</title><link>https://freshrimpsushi.github.io/jp/posts/2598/</link><pubDate>Wed, 17 Jul 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2598/</guid><description>ビルドアップ 冷蔵庫-象問題 伝統的に、象を冷蔵庫に入れる方法は大学院生に依存してきた。どれほど難しいか、大変か、どんな方法が良いかはよくわから</description></item><item><title>Juliaで行ごと、列ごとにスカラー倍する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2597/</link><pubDate>Mon, 15 Jul 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2597/</guid><description>概要 Juliaの行列において、行ごと、列ごとにスカラー乗算する方法を紹介する。 コード julia&amp;gt; d = 1:10 1:10 julia&amp;gt; X = ones(Int64, 10, 10) 10×10 Matrix{Int64}: 1 1 1 1 1 1 1 1 1 1 1</description></item><item><title>グリッドサーチ、ブルートフォース、肉体労働</title><link>https://freshrimpsushi.github.io/jp/posts/2596/</link><pubDate>Sat, 13 Jul 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2596/</guid><description>用語 グリッドサーチ 主に最適化問題で、ユークリッド空間 $\mathbb{R}^{n}$ をグリッドgridに分割し、可能な限り多くの点で試行を繰り返し最適解を見つける方法をグ</description></item><item><title>PLU分解</title><link>https://freshrimpsushi.github.io/jp/posts/2/</link><pubDate>Thu, 11 Jul 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2/</guid><description>定義 1 2 順列行列 $P^{T}$ と 可逆行列 $A \in \mathbb{R}^{n \times n}$ について、それらの行列の積 $P^{T} A$ のLU分解 を $A$ のPLU分解permutation LU decompositi</description></item><item><title>順列行列</title><link>https://freshrimpsushi.github.io/jp/posts/1/</link><pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1/</guid><description>定義 1 各行で成分が一つだけ$1$で、残りがすべて$0$である正方行列$P \in \mathbb{R}^{n \times n}$を順列行列と呼ぶ。 基本的性質 直交性 すべての順列行列は直交</description></item><item><title>動力学におけるアトピー性皮膚炎システム</title><link>https://freshrimpsushi.github.io/jp/posts/2595/</link><pubDate>Sun, 07 Jul 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2595/</guid><description>モデル 以下のノンスムースダイナミックシステムをアトピー性皮膚炎システムと呼ぶ。 $$ \begin{align*} {{ d P (t) } \over { d t }} =&amp;amp; {{ P_{\text{env}} \kappa_{P} } \over { 1 + \gamma_{B} B (t) }} - \alpha_{I} R(t) P(t) - \delta_{P}</description></item><item><title>ハイパーパラメータとは？</title><link>https://freshrimpsushi.github.io/jp/posts/2594/</link><pubDate>Fri, 05 Jul 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2594/</guid><description>用語 ベイズ統計学 1 ベイジアンパラダイムにおいて、次のことをベイジアン階層モデルと呼ぶ。 (1) データ$y_{1} , \cdots , y_{n}$がパラメータ$\</description></item><item><title>ダイナミックシステムとしてのDC-DCバックコンバータ</title><link>https://freshrimpsushi.github.io/jp/posts/2593/</link><pubDate>Wed, 03 Jul 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2593/</guid><description>モデル 上の回路図1の電圧$V$と電流 $I$は以下のような非自律的ノンスムースシステムで表される。これをDC-DCバックコンバータDC-DC Buck</description></item><item><title>正定値行列の逆行列と平方根行列</title><link>https://freshrimpsushi.github.io/jp/posts/2592/</link><pubDate>Mon, 01 Jul 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2592/</guid><description>公式 1 正定値行列 $A$ の 固有対 $\left\{ \left( \lambda_{k} , e_{k} \right) \right\}_{k=1}^{n}$ が $\lambda_{1} &amp;gt; \cdots &amp;gt; \lambda_{n} &amp;gt; 0$ の順に整列されているとしよう。直交行列 $P = \begin{bmatrix} e_{1} &amp;amp; \cdots &amp;amp; e_{n} \end{bmatrix} \in \mathbb{R}^{n \times n}$ と 対角行列 $\Lambda = \diag \left( \lambda_{1}</description></item><item><title>スローファストシステム</title><link>https://freshrimpsushi.github.io/jp/posts/2591/</link><pubDate>Sat, 29 Jun 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2591/</guid><description>定義 1 スロー・ファストシステム ユークリッド空間の開部分集合 $W \subset \mathbb{R}^{m + n}$ の要素が $\left( \mathbf{x}, \mathbf{y} \right)$ のように表されるとする。$k \in \mathbb{N}$ で、二つの関数 $\mathbf{f} : W \times [0,1]</description></item><item><title>スペクトラル分解</title><link>https://freshrimpsushi.github.io/jp/posts/2590/</link><pubDate>Thu, 27 Jun 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2590/</guid><description>定義 1 スペクトル理論では、$A$がエルミート行列であることと、ユニタリ対角化可能なことは同値である： $$ A = A^{\ast} \iff A = Q \Lambda Q^{\ast} $$ スペクトル理論で言</description></item><item><title>ダイナミクスにおけるノンスムースシステム</title><link>https://freshrimpsushi.github.io/jp/posts/2589/</link><pubDate>Tue, 25 Jun 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2589/</guid><description>用語 $S_{k} \subset \mathbb{R}^{n}$ で定義された 部分毎にスムースなシステム $$ \dot{x} = f_{k} (x) \qquad , k = 1, \cdots, s $$ または、ヘテロクリニック写像 $F : \mathbb{R}^{n} \rightrightarrows \mathbb{R}^{n}$ に関する 微分包含式 $$ \dot{x} \in F(x) $$</description></item><item><title>トェプリッツ行列はエルミート行列である</title><link>https://freshrimpsushi.github.io/jp/posts/2588/</link><pubDate>Sun, 23 Jun 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2588/</guid><description>証明 正定値行列 $A \in \mathbb{C}^{n \times n}$ は エルミート行列だ。もちろん、半正定値行列もエルミート行列だ。 証明 1 $$ \mathbf{x}^{\ast} A \mathbf{x} = \lambda $$ $A$ が正定値行列ならば、全ての $\mathbf{x} \in \mathbb{C}^{n}$</description></item><item><title>微分包含の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2587/</link><pubDate>Fri, 21 Jun 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2587/</guid><description>定義 1 微分包含式 多価写像、または集合値写像multivalued mapping $F : \mathbb{R}^{n} \to \mathbb{R}^{n}$ において、$x \in \mathbb{R}^{n}$ での微分 $\dot{x} = dx/dt$ が集合 $F(x)$ の要素の一つであることを</description></item><item><title>二次形式が0になるための必要十分条件</title><link>https://freshrimpsushi.github.io/jp/posts/2586/</link><pubDate>Wed, 19 Jun 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2586/</guid><description>定理 行列の形 $A \in \mathbb{C}^{n \times n}$が行列を表し、$\mathbf{x} \in \mathbb{C}^{n}$がベクトルを表すとする。 すべての$\mathb</description></item><item><title>ダイナミクスにおける各セグメントのスムーズなシステム</title><link>https://freshrimpsushi.github.io/jp/posts/2585/</link><pubDate>Mon, 17 Jun 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2585/</guid><description>定義 ピースワイズスムースシステム 状態空間が$\mathbb{R}^{n}$で、変数$x \in \mathbb{R}^{n}$とパラメータ$\mu \in</description></item><item><title>偏微分環と微分環</title><link>https://freshrimpsushi.github.io/jp/posts/2584/</link><pubDate>Sat, 15 Jun 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2584/</guid><description>定義 1 リング $R$で定義される代数的微分 $\Delta = \left\{ \partial_{1} , \cdots , \partial_{n} \right\}$が全ての$i,j = 1, \cdots, n$に対して $$ \partial_{i} \left( \partial_{j} (r) \right) = \partial_{j} \left( \partial_{i} (r) \right) \qquad \forall r \in</description></item><item><title>一般的な多面体写像、集合値写像の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2583/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2583/</guid><description>定義 1 2 3 二つの集合 $X, Y$ と $Y$ の冪集合 $\mathcal{P} (Y)$ に関して、関数 $f : X \to \mathcal{P} (Y)$ を多値写像multivalued mappingまたは集合値写像set-va</description></item><item><title>抽象代数における微分体</title><link>https://freshrimpsushi.github.io/jp/posts/2582/</link><pubDate>Tue, 11 Jun 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2582/</guid><description>定義 1 $R$を(アーベル的) 環としよう。次を満たす関数 $d: R \to R$を微分derivationと呼ぶ。 $$ \begin{align*} d \left( x + y \right) =&amp;amp; d (x) + d(y) \\ d \left( x y \right) =&amp;amp; d</description></item><item><title>シンディアルゴリズムとは？</title><link>https://freshrimpsushi.github.io/jp/posts/2581/</link><pubDate>Sun, 09 Jun 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2581/</guid><description>アルゴリズム 1 状態空間が $\mathbb{R}^{n}$ であるダイナミカルシステムが、次のようにスムース関数 $f : \mathbb{R}^{n} \to \mathbb{R}^{n}$ で与えられているとしよう。 $$ \dot{\mathbf{x}} = f \left( \mathbf{x} \right) $$ 簡単に $\mathbf{x} =</description></item><item><title>抽象代数における微分環</title><link>https://freshrimpsushi.github.io/jp/posts/2580/</link><pubDate>Fri, 07 Jun 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2580/</guid><description>Definition Differential Ring 1 Let $R$ be an (Abelian) ring. A function $d: R \to R$ that satisfies the following is called an (algebraic) derivationalgebraic derivation. $$ \begin{align*} d \left( x + y \right) =&amp;amp; d (x) + d(y) \\ d \left( x y \right) =&amp;amp; d (x) y + x d(y) \end{align*} $$ The ordered pair $\left( R, d \right)$ is called a Differential Ringdifferential ring. === 定義</description></item><item><title>STLSQとは何か？</title><link>https://freshrimpsushi.github.io/jp/posts/2579/</link><pubDate>Wed, 05 Jun 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2579/</guid><description>アルゴリズム STLSQ フルランクの行列 $X \in \mathbb{R}^{m \times p}$ と $Y \in \mathbb{R}^{m \times n}$ が与えられたとき、割と スパース な $B \in \mathbb{R}^{p \times n}$ を見つけるスパース回帰問題を考えよう。STLS</description></item><item><title>分数環と分数体</title><link>https://freshrimpsushi.github.io/jp/posts/2578/</link><pubDate>Mon, 03 Jun 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2578/</guid><description>定義 1 リング $\left( A , + , \cdot \right)$ に対して、$S := A^{\ast} = A \setminus \left\{ 0 \right\}$ が $A$ での加算 $+$ の単位元 $0$ を省いた部分集合 $S \subset A$ とする。 分数体 $A$ が 整域 である場合、 $$ (a,s)</description></item><item><title>均等不確定性原理: 限られた等距離条件</title><link>https://freshrimpsushi.github.io/jp/posts/2577/</link><pubDate>Sat, 01 Jun 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2577/</guid><description>定義 $$ \begin{align*} \left\| \mathbf{v} \right\|_{0} :=&amp;amp; \left| \operatorname{supp} \mathbf{v} \right| \\ =&amp;amp; \operatorname{card} \left\{ k : \left( \mathbf{v} \right) _{k} \ne 0 \right\} \end{align*} $$ ベクトル空間 $V$ のベクトル $\mathbf{v} \in V$ に対して $l_{0}$-ノルム $\left\| \mathbf{v} \right\|_{0} : V \to \mathbb{Z}$ を上記のよう</description></item><item><title>数学での閉じた形とは何か？</title><link>https://freshrimpsushi.github.io/jp/posts/2576/</link><pubDate>Thu, 30 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2576/</guid><description>1 数学では、関数の**閉じた式（クローズド フォーム）**は、有限回の記号と四則演算$+, -, \cdot, \div$、そしていくつかのよく知られた関数だけ</description></item><item><title>圧縮センシングとは何か？</title><link>https://freshrimpsushi.github.io/jp/posts/2575/</link><pubDate>Tue, 28 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2575/</guid><description>定義 $$ \mathbf{y} = \Theta \mathbf{s} $$ $\Theta \in \mathbb{R}^{n \times p}$ に対して $n \ll p$ の時、つまり上の行列方程式を満たす解 $\mathbf{s}$ が無数に存在するとしよう。この行列方程式を満たすことを制約条件</description></item><item><title>JuliaでString7, String15なしでデータフレームを呼び出す方法</title><link>https://freshrimpsushi.github.io/jp/posts/2574/</link><pubDate>Sun, 26 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2574/</guid><description>エラー Juliaでデータフレームを使っていると、文字列データがString7やString15、String31などと読み込まれて様々なエラ</description></item><item><title>偏微分の記号を使い分ける理由</title><link>https://freshrimpsushi.github.io/jp/posts/2573/</link><pubDate>Fri, 24 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2573/</guid><description>質問 偏微分では、通常の微分と異なり、$\displaystyle {{ d f } \over { d t }}$ の代わりに $\displaystyle {{ \partial f } \over { \partial t }}$ のような表現を使用します。$</description></item><item><title>Juliaのサブプロットにメインタイトルを追加する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2572/</link><pubDate>Wed, 22 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2572/</guid><description>概要 Juliaで図を描く時、titleでタイトルを入れるとサブプロット全てに適用されるので、plot_titleを使うべきだ1。これはプロッ</description></item><item><title>ラッソ回帰とは？</title><link>https://freshrimpsushi.github.io/jp/posts/2571/</link><pubDate>Mon, 20 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2571/</guid><description>定義 $$ \begin{bmatrix} y_{1} \\ y_{2} \\ \vdots \\ y_{n} \end{bmatrix} = \begin{bmatrix} 1 &amp;amp; x_{11} &amp;amp; \cdots &amp;amp; x_{p1} \\ 1 &amp;amp; x_{12} &amp;amp; \cdots &amp;amp; x_{p2} \\ \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \\ 1 &amp;amp; x_{1n} &amp;amp; \cdots &amp;amp; x_{pn} \end{bmatrix} \begin{bmatrix} \beta_{0} \\ \beta_{1} \\ \vdots \\ \beta_{p} \end{bmatrix} + \begin{bmatrix} \varepsilon_{1} \\ \varepsilon_{2} \\ \vdots \\ \varepsilon_{n} \end{bmatrix} $$ $n$ 個のデ</description></item><item><title>Juliaプロットで軸の値を削除する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2570/</link><pubDate>Sat, 18 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2570/</guid><description>概要 Juliaで、カラーバー、軸、目盛り、グリッドなどの図のグラフィック要素を消す方法があるけれども、グラフィカルな要素をいじるから数字だけ</description></item><item><title>ハードスレッショルディングとソフトスレッショルディングの関数として</title><link>https://freshrimpsushi.github.io/jp/posts/2569/</link><pubDate>Thu, 16 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2569/</guid><description>定義 1 閾値threshold $\lambda \in \mathbb{R}$ が与えられているとする。 ハードスレッショルディング 以下のように定義された $\eta _{H} \left( x ; \lambda \right) : \mathbb{R} \to \mathbb{R}$ をハードスレ</description></item><item><title>Juliaで有限差分を使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2568/</link><pubDate>Tue, 14 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2568/</guid><description>概要 Juliaで有限差分法を使うには、特に有限差分の係数を求めるためには、FiniteDifferences.jlを使うのがいいだろう1。ノ</description></item><item><title>リッジ回帰とは？</title><link>https://freshrimpsushi.github.io/jp/posts/2567/</link><pubDate>Sun, 12 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2567/</guid><description>定義 $$ \begin{bmatrix} y_{1} \\ y_{2} \\ \vdots \\ y_{n} \end{bmatrix} = \begin{bmatrix} 1 &amp;amp; x_{11} &amp;amp; \cdots &amp;amp; x_{p1} \\ 1 &amp;amp; x_{12} &amp;amp; \cdots &amp;amp; x_{p2} \\ \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \\ 1 &amp;amp; x_{1n} &amp;amp; \cdots &amp;amp; x_{pn} \end{bmatrix} \begin{bmatrix} \beta_{0} \\ \beta_{1} \\ \vdots \\ \beta_{p} \end{bmatrix} + \begin{bmatrix} \varepsilon_{1} \\ \varepsilon_{2} \\ \vdots \\ \varepsilon_{n} \end{bmatrix} $$ $n$ 個のデ</description></item><item><title>Juliaでの数値解析的補間</title><link>https://freshrimpsushi.github.io/jp/posts/2566/</link><pubDate>Fri, 10 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2566/</guid><description>概要 Juliaでは、数値解析的な補間のためにInterpolations.jlパッケージを使用する1。ジュリアで変数の値を出力する際に使用す</description></item><item><title>残差二乗和の勾配</title><link>https://freshrimpsushi.github.io/jp/posts/2565/</link><pubDate>Wed, 08 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2565/</guid><description>概要 統計学および機械学習の多くの回帰問題では、以下のように残差平方和を目的関数として使用し、特に$f$が線形結合の場合、行列形で簡潔に表現す</description></item><item><title>Juliaで配列の差分を計算する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2564/</link><pubDate>Mon, 06 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2564/</guid><description>概要 Juliaでは、差分を計算するためにdiff()関数が提供されている1。circshift()関数も使って簡単に書けるけど、端点の処理な</description></item><item><title>スパース回帰とは?</title><link>https://freshrimpsushi.github.io/jp/posts/2563/</link><pubDate>Sat, 04 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2563/</guid><description>定義 行列$A \in \mathbb{R}^{m \times n}$とベクトル$\mathbf{b} \in \mathbb{R}^{m}$に関する行列方程式が以下のように与えられているとする</description></item><item><title>Juliaで円形配列を使う方法</title><link>https://freshrimpsushi.github.io/jp/posts/2562/</link><pubDate>Thu, 02 May 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2562/</guid><description>概要 実は、Juliaではネイティブに円形配列circular Arrayをサポートしていないが、要素を円形にcircularlyシフトしてくれ</description></item><item><title>ハンケル行列</title><link>https://freshrimpsushi.github.io/jp/posts/2561/</link><pubDate>Tue, 30 Apr 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2561/</guid><description>定義 $$ H = \begin{bmatrix} h_{11} &amp;amp; h_{12} &amp;amp; h_{13} &amp;amp; \cdots &amp;amp; h_{1n} \\ h_{21} &amp;amp; h_{22} &amp;amp; h_{23} &amp;amp; \cdots &amp;amp; h_{2n} \\ h_{31} &amp;amp; h_{32} &amp;amp; h_{33} &amp;amp; \cdots &amp;amp; h_{3n} \\ \vdots &amp;amp; \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \\ h_{m1} &amp;amp; h_{m2} &amp;amp; h_{m3} &amp;amp; \cdots &amp;amp; h_{mn} \end{bmatrix} $$ 与えられた行列 $H = \left( h_{ij} \right) \in</description></item><item><title>Juliaでのマーカーとラインスタイルのリスト</title><link>https://freshrimpsushi.github.io/jp/posts/2560/</link><pubDate>Sun, 28 Apr 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2560/</guid><description>コード 1 長々と説明する必要はなく、文字通りマーカースタイルとラインスタイルが実際にどう見えるかを示す。 linesytle [:auto, :solid, :dash, :dot, :dashdot, :dashdotdot] の中から一つ選ぶ。 shape [:none, :auto,</description></item><item><title>アークタンジェント2関数の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2559/</link><pubDate>Fri, 26 Apr 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2559/</guid><description>定義 アークタンジェント2arc Tangent 2 $\arctan 2 : \left( \mathbb{R}^{2} \setminus \left\{ (0,0) \right\} \right) \to \mathbb{R}$ は次のように定義される。 $$ \arctan 2 : \left( r \sin \theta , r \cos \theta \right) \mapsto \theta $$ $r &amp;gt; 0$ は任意の正数だ。 説明</description></item><item><title>Juliaプロットで回帰直線を描く方法</title><link>https://freshrimpsushi.github.io/jp/posts/2558/</link><pubDate>Wed, 24 Apr 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2558/</guid><description>コード Juliaの散布図に回帰直線を入れる方法は、オプションでsmooth = trueを使うことだ。 using Plots x = rand(100) scatter(x, 2x .+ 0.1randn(100), smooth = true) savefig(&amp;#34;plot.svg&amp;#34;) 環境 OS: Windows julia: v1.8.3 Plots v1.38.5</description></item><item><title>3次元回転変換行列：ロール、ピッチ、ヨー</title><link>https://freshrimpsushi.github.io/jp/posts/2557/</link><pubDate>Mon, 22 Apr 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2557/</guid><description>定義 1 3次元空間 $\mathbb{R}^{3}$ で、ベクトルを $x$ 軸、$y$ 軸、$z$ 軸を基準に反時計回りに $\theta$ だけ回転させる行列 $R_{x}$、$R_{y}$、$R_{z}</description></item><item><title>Juliaでゼロ除算したときのInfとNaNの違い</title><link>https://freshrimpsushi.github.io/jp/posts/2556/</link><pubDate>Sat, 20 Apr 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2556/</guid><description>概要 Juliaで 0/0 と 1/0 がどのように違うかを説明する。 コード julia&amp;gt; 0/0 NaN julia&amp;gt; 1/0 Inf 少なくともプログラミングでは、無限 Inf は初期値や大小関係の比較という点で</description></item><item><title>ランダムベクトルの期待値</title><link>https://freshrimpsushi.github.io/jp/posts/2555/</link><pubDate>Thu, 18 Apr 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2555/</guid><description>定義 1 $$ E \left( X \right) := \begin{bmatrix} E \left( X_{1} \right) \\ \vdots \\ E \left( X_{n} \right) \end{bmatrix} $$ ランダムベクトル $X = \left( X_{1} , \cdots , X_{n} \right)$ の期待値expectationは、上記のように各成分の期待値</description></item><item><title>Juliaスプラットオペレーターを通じたオプション引数の渡し方のヒント</title><link>https://freshrimpsushi.github.io/jp/posts/2554/</link><pubDate>Tue, 16 Apr 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2554/</guid><description>概要 Juliaで頻繁に使われるsplatの...の用途について、オプショナル引数を伝える方法を説明する。基本的に、どんなオプションにどんな引</description></item><item><title>複数の点を使用した有限差分の導出</title><link>https://freshrimpsushi.github.io/jp/posts/2553/</link><pubDate>Sun, 14 Apr 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2553/</guid><description>定理 $N$番の微分可能な関数 $f : \mathbb{R} \to \mathbb{R}$ が与えられているとする。ある点 $t \in \mathbb{R}$ での $d &amp;lt; N$回目の微分の関数値 $f^{(d)} \left( t \right)$ は、十分に小さい $h &amp;gt; 0$ に対し</description></item><item><title>Juliaのスプラットオペレータ</title><link>https://freshrimpsushi.github.io/jp/posts/2552/</link><pubDate>Fri, 12 Apr 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2552/</guid><description>概要 Juliaで...はスプラット・オペレーターと呼ばれ、関数を使用したり、配列を定義する際に便利に使われる1。このオペレーターはJulia</description></item><item><title>ロスラー・アトラクタ</title><link>https://freshrimpsushi.github.io/jp/posts/2551/</link><pubDate>Wed, 10 Apr 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2551/</guid><description>概要 ロスラー方程式rössler equationは、シンプルだけどカオスなアトラクターを持っていると紹介されたシステムの一つである。 システム</description></item><item><title>Juliaでユニコード文字列の一部だけをスライスする方法</title><link>https://freshrimpsushi.github.io/jp/posts/2550/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2550/</guid><description>概要 他のプログラム言語がそうであるように、Juliaでは英語をASCIIコードaSCII Codeで書き、漢字、韓国語などをユニコードunic</description></item><item><title>データサイエンスにおけるF1スコアとは？</title><link>https://freshrimpsushi.github.io/jp/posts/2549/</link><pubDate>Sat, 06 Apr 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2549/</guid><description>定義 分類問題でPositive $P$ とNegative $N$ を区別するモデルがあるとする。正を正として認識した数をTrue Positive $TP$、負を負として認</description></item><item><title>Julia StatsPlotsでデータフレーム名を省略するマクロ@df</title><link>https://freshrimpsushi.github.io/jp/posts/2548/</link><pubDate>Thu, 04 Apr 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2548/</guid><description>概要 JuliaのStatsPlotsパッケージでは、図を描く時に@dfマクロを通して、繰り返されるデータフレーム名を省略することができる1。</description></item><item><title>データサイエンスにおける再現性とは？</title><link>https://freshrimpsushi.github.io/jp/posts/2547/</link><pubDate>Tue, 02 Apr 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2547/</guid><description>定義 陽性positive $P$ と陰性negative $N$ を区別する分類問題において、陽性と陰性を判断するモデルが与えられたとする。陽を陽と判断した</description></item><item><title>因数階乗0が0!=1と定義される理由</title><link>https://freshrimpsushi.github.io/jp/posts/2546/</link><pubDate>Sun, 31 Mar 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2546/</guid><description>定義 $0 \notin \mathbb{N}$に対する階乗の$0!$を次のように定義する。 $$ 0! := 1 $$ 説明 なぜ$0!$が$0$ではなく、$1$なのか？元々$0</description></item><item><title>データサイエンスにおける精度とは?</title><link>https://freshrimpsushi.github.io/jp/posts/2545/</link><pubDate>Fri, 29 Mar 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2545/</guid><description>定義 分類問題で陽性positive $P$ と陰性negative $N$ を分けるモデルがあるとする。陽を陽として判断した数を真陽性true Positive $TP$、陰</description></item><item><title>Juliaで他のファイルに定義された関数の使用方法</title><link>https://freshrimpsushi.github.io/jp/posts/2544/</link><pubDate>Wed, 27 Mar 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2544/</guid><description>概要 他のファイルにある関数を使えるようにするために、ジュリアコード自体を実行するinclude()関数を紹介する。MATLABでは、同じディ</description></item><item><title>データサイエンスにおける精度の過大評価</title><link>https://freshrimpsushi.github.io/jp/posts/2543/</link><pubDate>Mon, 25 Mar 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2543/</guid><description>定義 分類問題において、陽性positive $P$ と陰性negative $N$ を区別するモデルが与えられたとする。正を陽と正しく判断した数を真陽性tr</description></item><item><title>Windowsでシステム復元する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2542/</link><pubDate>Sat, 23 Mar 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2542/</guid><description>ガイド ウインドウズ11は、23年2月基準でまだ多くの互換性の問題を経験しており、パソコンをプロとして多く使用するならば、俗に言う&amp;rsquo</description></item><item><title>地球統計学におけるPROJの紹介</title><link>https://freshrimpsushi.github.io/jp/posts/2541/</link><pubDate>Thu, 21 Mar 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2541/</guid><description>ビルドアップ 地球は丸くて、より具体的には楕円体と考えられている。単に縮小された「地球儀」は正確なモデルではあるが、利用場面がそれほど多くはな</description></item><item><title>データサイエンスにおける分類問題と回帰問題の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2540/</link><pubDate>Tue, 19 Mar 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2540/</guid><description>用語 データサイエンスでは、問題の従属変数が何かによって、以下のように区別することもある。 分類問題 従属変数が質的変数である問題を分類class</description></item><item><title>人口バランス方程式</title><link>https://freshrimpsushi.github.io/jp/posts/2539/</link><pubDate>Sun, 17 Mar 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2539/</guid><description>定義 1 $t$ の時点での集団の人口を$P_{t}$ としよう。次の時点 $(t+1)$ までに生まれる人口を$B_{t}$、死ぬ人口を$D_{t}$、移民の人口を$</description></item><item><title>データサイエンスにおける独立変数と従属変数</title><link>https://freshrimpsushi.github.io/jp/posts/2538/</link><pubDate>Fri, 15 Mar 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2538/</guid><description>用語 統計学や機械学習、その他のデータ科学の分野のモデルで、変数は一般的に以下の二つのカテゴリーに分けられる。 従属変数 従属変数は、通常モデルの</description></item><item><title>Julia集合でマーカーに色をつける方法</title><link>https://freshrimpsushi.github.io/jp/posts/2537/</link><pubDate>Wed, 13 Mar 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2537/</guid><description>コード using Plots x, y = rand(100), rand(100) 上記のようなデータが与えられたとしよう。データが連続かカテゴリカルかによって、図の形や描く方法が異なる。 連続型 scatter(marker_z=) z = x +</description></item><item><title>ブルックの補助定理証明</title><link>https://freshrimpsushi.github.io/jp/posts/2536/</link><pubDate>Mon, 11 Mar 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2536/</guid><description>定理 1 ランダムベクトル $Z : \Omega \to \mathbb{R}^{n}$ の 確率質量関数 $p : \mathbb{R}^{n} \to \mathbb{R}$ について、$Z$ の サポート を以下のように表そう。 $$ S_{Z} = \left\{ \left( z_{1} , \cdots , z_{n} \right) \in \mathbb{R}^{n} : p \left( z_{1} ,</description></item><item><title>CLI経由でSSHサーバーに接続する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2535/</link><pubDate>Sat, 09 Mar 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2535/</guid><description>ガイド 接続しようとするサーバーのIPが192.168.1.1だとしよう。 ssh user@192.168.1.1 ターミナルで上のようなコマンドを入力すればいい1。 ウィンドウ サー</description></item><item><title>R回帰分析における「not defined because of singularities」問題の解決</title><link>https://freshrimpsushi.github.io/jp/posts/2534/</link><pubDate>Thu, 07 Mar 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2534/</guid><description>数理統計学や数学を専攻しているなら、原因を大まかに把握して直面している問題を解決するだけでなく、数理的証明まで理解することを強く勧める。 エラ</description></item><item><title>X^T X の逆行列が存在するための必要十分条件</title><link>https://freshrimpsushi.github.io/jp/posts/2533/</link><pubDate>Tue, 05 Mar 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2533/</guid><description>定理 行列 $X \in \mathbb{R}^{m \times n}$ が与えられており $m \ge n$ とすると、次が成り立つ。 $$ \exists \left( X^{T} X \right)^{-1} \iff \text{rank} X = n $$ つまり、$X^{T} X$ の 逆行列 が存在する 同値条件 は $X$</description></item><item><title>Windows11 初期設定</title><link>https://freshrimpsushi.github.io/jp/posts/2532/</link><pubDate>Sun, 03 Mar 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2532/</guid><description>ガイド 詳細な説明は省略する。すべてのコマンドは、Windowsターミナルを管理者モードで実行した後に入力する必要がある。 コンテキストメニュー</description></item><item><title>GIS開発者の紹介</title><link>https://freshrimpsushi.github.io/jp/posts/2531/</link><pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2531/</guid><description>紹介 GISの専門家であり開発者のキム・ヒョンジュン氏が運営するブログだ。少なくとも韓国のデータを使って分析するなら、この人の助けなしには何も</description></item><item><title>調和平均</title><link>https://freshrimpsushi.github.io/jp/posts/2530/</link><pubDate>Wed, 28 Feb 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2530/</guid><description>定義 正の数$a,b &amp;gt; 0$に対して、次のものを調和平均harmonic meanという。 $$ H (a,b) := 2 \left( {{ 1 } \over { a }} + {{ 1 } \over { b }} \right)^{-1} = {{ 2 ab } \over</description></item><item><title>多変量正規分布の条件付き平均と分散</title><link>https://freshrimpsushi.github.io/jp/posts/2529/</link><pubDate>Mon, 26 Feb 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2529/</guid><description>数式 二変量正規分布 $$ \left( X, Y \right) \sim N_{2} \left( \begin{bmatrix} \mu_{1} \\ \mu_{n} \end{bmatrix} , \begin{bmatrix} \sigma_{X}^{2} &amp;amp; \rho \sigma_{X} \sigma_{Y} \\ \rho \sigma_{X} \sigma_{Y} &amp;amp; \sigma_{Y}^{2} \end{bmatrix} \right) $$ ランダムベクトル $\left( X,Y \right)$ が上記のように二変量正規分布に従う場合、$</description></item><item><title>ネットワーク理論における固有ベクトル中心性</title><link>https://freshrimpsushi.github.io/jp/posts/2528/</link><pubDate>Sat, 24 Feb 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2528/</guid><description>定義 1 ネットワーク $\left( V , E \right)$の隣接行列 $A$ のスペクトル半径 $\lambda_{1}$ に対応する固有ベクトル $\mathbf{v}_{1}$ の $i$番目の成分を$i$番目のノード $v_{i}$ の固</description></item><item><title>多変量正規分布での独立とゼロ相関は同値である</title><link>https://freshrimpsushi.github.io/jp/posts/2527/</link><pubDate>Thu, 22 Feb 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2527/</guid><description>定理 1 $$ \begin{align*} \mathbf{X} =&amp;amp; \begin{bmatrix} \mathbf{X}_{1} \\ \mathbf{X}_{2} \end{bmatrix} &amp;amp; : \Omega \to \mathbb{R}^{n} \\ \mu =&amp;amp; \begin{bmatrix} \mu_{1} \\ \mu_{2} \end{bmatrix} &amp;amp; \in \mathbb{R}^{n} \\ \Sigma =&amp;amp; \begin{bmatrix} \Sigma_{11} &amp;amp; \Sigma_{12} \\ \Sigma_{21} &amp;amp; \Sigma_{22} \end{bmatrix} &amp;amp; \in \mathbb{R}^{n \times n} \end{align*} $$ ジョーダンブロック形で表された$\mathbf</description></item><item><title>ネットワーク理論における近接中心性</title><link>https://freshrimpsushi.github.io/jp/posts/2526/</link><pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2526/</guid><description>定義 1 ネットワーク $\left( V, E \right)$のジオデシック距離を$d$としよう。次に、$C_{C} : V \to \mathbb{R}$をノード$v \in V$</description></item><item><title>多変量正規分布の線形変換</title><link>https://freshrimpsushi.github.io/jp/posts/2525/</link><pubDate>Sun, 18 Feb 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2525/</guid><description>定理 1 線形変換の正規性 行列 $A \in \mathbb{R}^{m \times n}$ と ベクトル $\mathbf{b} \in \mathbb{R}^{m}$ について、多変量正規分布に従う ランダムベクトル $\mathbf{X} \sim N_{n} \left( \mu , \Sigma \right)$ の線形変換 $\mathbf{Y} = A \mathbf{X} + \mathbf{b}$ は、</description></item><item><title>ネットワーク理論における媒介中心性</title><link>https://freshrimpsushi.github.io/jp/posts/2524/</link><pubDate>Fri, 16 Feb 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2524/</guid><description>定義 1 ストレス中心性 ネットワーク $\left( V, E \right)$ において二つのノード $s,t \in V$ を繋ぐ最短パスの数を $\sigma_{st} = \sigma_{ts}$ とし、特に $s,t$ を繋ぐパスの中で別のノード $v \in V$ を含</description></item><item><title>ユニバーサル・クリギング</title><link>https://freshrimpsushi.github.io/jp/posts/2523/</link><pubDate>Wed, 14 Feb 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2523/</guid><description>モデル オーディナリークリギング 空間データ分析で、ランダムフィールド $\mathbf{Y} = \left( Y \left( s_{1} \right) , \cdots , Y \left( s_{n} \right) \right)$ の平均$\mu \in \mathbb{R}$と共分</description></item><item><title>ネットワーク理論におけるストレス中心性</title><link>https://freshrimpsushi.github.io/jp/posts/2522/</link><pubDate>Mon, 12 Feb 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2522/</guid><description>定義 1 ネットワーク $\left( V, E \right)$ で二つのノード $s,t \in V$ をつなぐ最短距離のパスの数を $\sigma_{st} = \sigma_{ts}$ とし、特に $s,t$ をつなぐパスの中で別のノード $v \in V$ を含むパスの数</description></item><item><title>空間データ分析におけるクリギングとは？</title><link>https://freshrimpsushi.github.io/jp/posts/2521/</link><pubDate>Sat, 10 Feb 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2521/</guid><description>モデル オーディナリークリギング 空間データ分析で、ランダムフィールド $\mathbf{Y} = \left( Y \left( s_{1} \right) , \cdots , Y \left( s_{n} \right) \right)$ の平均 $\mu \in \mathbb{R}$ と共分散行列 $\Sigma \in \mathbb{R}^{n \times n}$ が多変量正</description></item><item><title>ネットワーク理論における次数中心性</title><link>https://freshrimpsushi.github.io/jp/posts/2520/</link><pubDate>Thu, 08 Feb 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2520/</guid><description>定義 1 あるネットワーク $G (V, E)$ の各ノード $v \in V$ に対して、以下を度中心性degree Centralityという。 $$ \deg v $$ 説明 中心性 中心性cent</description></item><item><title>経験的バリオグラム</title><link>https://freshrimpsushi.github.io/jp/posts/2519/</link><pubDate>Tue, 06 Feb 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2519/</guid><description>ビルドアップ バリオグラムの定義：ユークリッド空間の固定された部分集合 $D \subset \mathbb{R}^{r}$ の中で、方向ベクトル $\mathbf{h} \in \mathbb{R}^{r}$ を持つ確率変数 $Y(s) : \Omega \to \mathbb{R}^{1}$ の集合である空間</description></item><item><title>非中心F分布</title><link>https://freshrimpsushi.github.io/jp/posts/2518/</link><pubDate>Sun, 04 Feb 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2518/</guid><description>定義 単一非中心F分布 1 自由度 $r_{1} , r_{2} &amp;gt; 0$ と非中心性non-centrality $\lambda_{1} \ge 0$ によって定義される連続確率分布 $F \left( r_{1} , r_{2} , \lambda_{1} \right)$ の確率密度関</description></item><item><title>ガウス消去法を使った逆行列の求め方アルゴリズム</title><link>https://freshrimpsushi.github.io/jp/posts/2517/</link><pubDate>Fri, 02 Feb 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2517/</guid><description>アルゴリズム Input 可逆行列 $M \in \mathbb{R}^{n \times n}$ が与えられているとする。 Step 1. 初期化 $M$ と同じサイズの単位行列 $X$ を作る。 Step 2. エシュロン形 ガウスの消去法を通じて $M$</description></item><item><title>非中心カイ二乗分布</title><link>https://freshrimpsushi.github.io/jp/posts/2516/</link><pubDate>Wed, 31 Jan 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2516/</guid><description>定義 自由度 $r &amp;gt; 0$ と 非中心性non-centrality $\lambda \ge 0$ に関して、次の確率密度関数を持つ 連続確率分布 $\chi^{2} \left( r , \lambda \right)$ を 非中心カイ二乗分布no</description></item><item><title>平方根行列</title><link>https://freshrimpsushi.github.io/jp/posts/2515/</link><pubDate>Mon, 29 Jan 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2515/</guid><description>定義 1 行列 $A$ に対して、以下を満たす行列 $B$ を $A$ の平方根行列square root matrixと呼び、$\sqrt{A} := B$ のように表す。 $$ B^{2} = A $$ 説明</description></item><item><title>ピタゴラス勝率の導出</title><link>https://freshrimpsushi.github.io/jp/posts/2514/</link><pubDate>Sat, 27 Jan 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2514/</guid><description>公式 特定競技リーグのチームが一つあるとする。チーム得点scores $S$ と チーム失点allows $A$ はそれぞれ ワイブル分布に従う 確率変数 $$ \begin{align*} S &amp;amp; \sim</description></item><item><title>スパース行列</title><link>https://freshrimpsushi.github.io/jp/posts/2513/</link><pubDate>Thu, 25 Jan 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2513/</guid><description>定義 自然言語において、スパースsparse（希薄な、まばらな）とは、値が$0$である場合、ほぼ存在しないものとみなされることからきた言葉だ。</description></item><item><title>ケント分布</title><link>https://freshrimpsushi.github.io/jp/posts/2512/</link><pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2512/</guid><description>定義 1 集中度concentration $\kappa &amp;gt; 0$ と $\beta \in \mathbb{R}$、平均mean $\gamma_{1} \in S^{p-1}$、長軸major Axis $\gamma_{2} \in S^{p-1</description></item><item><title>Juliaで無限配列を使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2511/</link><pubDate>Sun, 21 Jan 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2511/</guid><description>概要 InfiniteArrays.jlは無限のサイズを持つ配列を使えるようにするパッケージ1で、実際にはレイジー配列と多くの関連がある。レイ</description></item><item><title>ビンガム-マルディア 分布</title><link>https://freshrimpsushi.github.io/jp/posts/2510/</link><pubDate>Fri, 19 Jan 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2510/</guid><description>定義 1 ユニークモードunique mode $\mu \in S^{p-1}$ と 集中concentration $\kappa &amp;gt; 0$ そして半径 $\nu &amp;gt; 0$ について、次のような確率密度関数を持つ多変量分</description></item><item><title>Juliaでmatファイルを読み書きする方法</title><link>https://freshrimpsushi.github.io/jp/posts/2509/</link><pubDate>Wed, 17 Jan 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2509/</guid><description>概要 MAT.jlは MATLABで使用されるデータ保存形式である*.matファイルを読み書きするライブラリだ1。 Juliaがそうであるように、</description></item><item><title>なぜ正規分布인가</title><link>https://freshrimpsushi.github.io/jp/posts/2508/</link><pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2508/</guid><description>定義 1 ロケーションlocation $\xi \in \mathbb{R}$とスケールscale $\omega &amp;gt; 0$とシェイプshape $\alpha \in \mathbb{R}$に関す</description></item><item><title>Juliaコンソールでシンプルなグラフィックを出力する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2507/</link><pubDate>Sat, 13 Jan 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2507/</guid><description>概要 UnicodePlots.jlはJulia REPLでユニコード文字を使って図を出力するライブラリ1で、プログラムが進行する中で軽量であり</description></item><item><title>폰 푀르스터 방정식</title><link>https://freshrimpsushi.github.io/jp/posts/2506/</link><pubDate>Thu, 11 Jan 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2506/</guid><description>モデル 1 $$ {{ \partial n } \over { \partial t }} + {{ \partial n } \over { \partial a }} = - \mu \left( a \right) n \qquad t, a \in (0, \infty) $$ 上記の偏微分方程式をフォン・フォースター方程式von Foester equat</description></item><item><title>Juliaでコンソールを初期化する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2505/</link><pubDate>Tue, 09 Jan 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2505/</guid><description>方法 コンソールでCtrl + Lを押すと、コンソールが一見してクリアされるが、一部の環境では本当にリセットされるわけではなく、ウィンドウが上にス</description></item><item><title>フォン・ミーゼス・フィッシャー分布</title><link>https://freshrimpsushi.github.io/jp/posts/2504/</link><pubDate>Sun, 07 Jan 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2504/</guid><description>定義 1 ユニークモードunique mode $\mu \in S^{p-1}$ と 集中concentration $\kappa &amp;gt; 0$ を有する確率密度関数で定義される多変量分布 $\text{vMF}_{p} \left( \mu , \kappa \right)$ を フォン</description></item><item><title>Juliaでデータフレームの欠損値を削除する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2503/</link><pubDate>Fri, 05 Jan 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2503/</guid><description>概要 1 Juliaでは、dropmissing()関数を使って簡単に欠損値を削除できる。 コード julia&amp;gt; df = DataFrame(x = [&amp;#34;i&amp;#34;, missing, &amp;#34;k&amp;#34;, &amp;#34;j&amp;#34;], y = [1, 2, 3, missing]) 4×2 DataFrame Row │ x y │</description></item><item><title>セミバリオグラムのモデル</title><link>https://freshrimpsushi.github.io/jp/posts/2502/</link><pubDate>Wed, 03 Jan 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2502/</guid><description>概要 空間統計分析では、空間過程がアイソトロピックで、セミバリオグラムが$\gamma \left( \left\| \mathbf{h} \right\| \right) = \gamma (d)$を満たす場合、$\gamma$は複</description></item><item><title>第2回想像上のマトリックスエビ寿司レストランコンテスト</title><link>https://freshrimpsushi.github.io/jp/posts/2501/</link><pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2501/</guid><description>空想行列 $$ x^{2} = -1 \longrightarrow X^{2} = - E_{p} $$ 第二回大会では、上のように複素数を行列$\mathbb{R}^{p \times p}$で一般化した空想行列imaginary</description></item><item><title>バリオグラムの等方性</title><link>https://freshrimpsushi.github.io/jp/posts/2500/</link><pubDate>Sat, 30 Dec 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2500/</guid><description>定義 1 空間プロセスのセミバリオグラム$\gamma \left( \mathbf{h} \right)$が方向ベクトル$\mathbf{h} \in \mathbb{R}^{r}$に</description></item><item><title>Juliaで環境変数を参照する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2499/</link><pubDate>Thu, 28 Dec 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2499/</guid><description>概要 Juliaで環境変数を参照する方法を説明する1。 コード Base.ENV Base.ENV[&amp;#34;JULIA_NUM_THREADS&amp;#34;] 見るように、別のパッケージをロードする必要はなく、Base.ENVを通じて直接</description></item><item><title>バリオグラムの定義</title><link>https://freshrimpsushi.github.io/jp/posts/2498/</link><pubDate>Tue, 26 Dec 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2498/</guid><description>定義 1 ユークリッド空間の固定された部分集合 $D \subset \mathbb{R}^{r}$ で、確率変数 $Y(s) : \Omega \to \mathbb{R}^{1}$ の集合である空間過程 $\left\{ Y(s) \right\}_{s \in D}$ と方向ベクトル $\mathbf{h} \in \mathbb{R}^{r}$ を考える。具体的に $n</description></item><item><title>Juliaでプログレスバーの使い方</title><link>https://freshrimpsushi.github.io/jp/posts/2497/</link><pubDate>Sun, 24 Dec 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2497/</guid><description>概要 Juliaでもプログラムの進行状況を知らせてくれるグラスバーを手軽に使うことができる。 コード ProgressMeter.jl 「ProgressMeter.jl」パッケ</description></item><item><title>空間過程の定常性</title><link>https://freshrimpsushi.github.io/jp/posts/2496/</link><pubDate>Fri, 22 Dec 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2496/</guid><description>定義 1 Euclidean 空間の固定された部分集合 $D \subset \mathbb{R}^{r}$における確率変数 $Y(s) : \Omega \to \mathbb{R}^{1}$の集合である空間過程</description></item><item><title>Juliaで0または欠損値を除外した平均値の計算方法</title><link>https://freshrimpsushi.github.io/jp/posts/2495/</link><pubDate>Wed, 20 Dec 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2495/</guid><description>概要 R言語の合計sum()や平均mean()には、関数自体がその欠損値を無視するオプションを持っているが、Juliaではそのようなオプション</description></item><item><title>空間プロセス</title><link>https://freshrimpsushi.github.io/jp/posts/2494/</link><pubDate>Mon, 18 Dec 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2494/</guid><description>定義 1 特に$r &amp;gt; 1$の時、ユークリッド空間の固定された部分集合$D \in \mathbb{R}^{r}$に対して、以下の$p$-変量ランダムベクト</description></item><item><title>Juliaで回帰分析を行う方法</title><link>https://freshrimpsushi.github.io/jp/posts/2493/</link><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2493/</guid><description>概要 Juliaの回帰分析を行うためのGLM.jlパッケージを簡単に紹介する1。この説明では、Rのインターフェースとどれくらい似ているかを強調</description></item><item><title>空間データ分析とは？</title><link>https://freshrimpsushi.github.io/jp/posts/2492/</link><pubDate>Thu, 14 Dec 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2492/</guid><description>説明 1 空間データspatial Dataとは、文字通り空間に関する情報を含むデータであり、空間統計学spatial Statisticsは、実際</description></item><item><title>集団の適合度検定</title><link>https://freshrimpsushi.github.io/jp/posts/2491/</link><pubDate>Tue, 12 Dec 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2491/</guid><description>仮説検定 1 $k$個のカテゴリーがそれぞれ理論的に$p_{j} &amp;gt; 0$の確率で選ばれる多項実験で、$n$回の独立した試行により得られたカテゴリー</description></item><item><title>二変量フォンミーゼス分布</title><link>https://freshrimpsushi.github.io/jp/posts/2490/</link><pubDate>Sun, 10 Dec 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2490/</guid><description>定義 1 ある行列$A \in \mathbb{R}^{2 \times 2}$に対する平均方向mean Direction$\mu, \nu \in \mathbb{R}$と集中concentration$\kappa_{1}, \kappa_{2}</description></item><item><title>多項式実験と分割表</title><link>https://freshrimpsushi.github.io/jp/posts/2489/</link><pubDate>Fri, 08 Dec 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2489/</guid><description>定義 1 多項実験 以下の特性を持ち、三つ以上の可能な結果またはカテゴリを持つ実験を多項実験multinomial experimentと呼ぶ。 $n</description></item><item><title>フォン・ミーゼス分布</title><link>https://freshrimpsushi.github.io/jp/posts/2488/</link><pubDate>Wed, 06 Dec 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2488/</guid><description>定義 1 2 平均方向mean Direction $\mu \in \mathbb{R}$ と 集中concentration $\kappa &amp;gt; 0$ に関して以下の確率密度関数を持つ連続確率分布 $\text{vM} \left( \mu , \kappa \right)$ を フォン・ミー</description></item><item><title>ピアソンカイ二乗検定統計量</title><link>https://freshrimpsushi.github.io/jp/posts/2487/</link><pubDate>Mon, 04 Dec 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2487/</guid><description>定義 1 $k$ 個のカテゴリがそれぞれ $p_{j} &amp;gt; 0$ の確率で選ばれる多項試験で $n$ 回の独立な試行によって得たカテゴリカルデータが与えられたとする。 $j$ 番目のカテ</description></item><item><title>ピアソンの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/2486/</link><pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2486/</guid><description>定理 $$ \sum_{i=1}^{k} N_{i} = n \qquad \&amp;amp; \qquad \sum_{i=1}^{k} p_{i} = 1 $$を満たす$\mathbf{p} = \left( p_{1} , \cdots , p_{k} \right) \in [0,1]^{k}$とサンプルサイズ$n \in \mathbb{N</description></item><item><title>三角行列の行列式</title><link>https://freshrimpsushi.github.io/jp/posts/2485/</link><pubDate>Thu, 30 Nov 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2485/</guid><description>日本語訳 定理 三角行列の行列式は、対角成分の積で表される。 証明 1 一般性を失わないために、$A$が上三角行列だとしよう。 $$ A := \begin{bmatrix} a_{11} &amp;amp; a_{12} &amp;amp; a_{13} &amp;amp; \cdots &amp;amp;</description></item><item><title>多項分布の共分散行列の導出</title><link>https://freshrimpsushi.github.io/jp/posts/2484/</link><pubDate>Tue, 28 Nov 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2484/</guid><description>公式 ランダムベクター $\mathbf{X} := \left( X_{1} , \cdots , X_{k} \right)$ が 多項分布 $M_{k} \left( n, \mathbf{p} \right)$ に従うなら、共分散行列は次の通りだ。 $$ \operatorname{Cov} \left( \mathbf{X} \right) = n \begin{bmatrix} p_{1} \left( 1 - p_{1} \right) &amp;amp; - p_{1} p_{2} &amp;amp; \cdots &amp;amp; - p_{1}</description></item><item><title>固有値と固有ベクトル</title><link>https://freshrimpsushi.github.io/jp/posts/2483/</link><pubDate>Sun, 26 Nov 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2483/</guid><description>定義 正方行列 $A_{n \times n} = (a_{ij})$ が与えられているとする。 $A$ の $i$ 番目の行と $j$ 番目の行を除いた 行列の行列式 $M_{ij}$ を 小行列式minorという。 $C_{ij} := (-1)^{i + j} M_{ij}$ を 余因</description></item><item><title>確率論におけるレヴィの連続性定理</title><link>https://freshrimpsushi.github.io/jp/posts/2482/</link><pubDate>Fri, 24 Nov 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2482/</guid><description>定理 1 可測空間 $\left( \mathbb{R}^{d} , \mathcal{B} \left( \mathbb{R}^{d} \right) \right)$ が与えられているとする。$n \in \overline{\mathbb{N}}$ に対して 確率測度を $\mu_{n}$ とし、それに対応する 特性関数を $\varphi_{n}$ と表す。次のは同値である。</description></item><item><title>シャーマン-モリソン公式の導出</title><link>https://freshrimpsushi.github.io/jp/posts/2481/</link><pubDate>Wed, 22 Nov 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2481/</guid><description>定理 可逆行列 $A \in \mathbb{R}^{n \times n}$と$\mathbf{u} , \mathbf{v} \in \mathbb{R}^{n}$に対して以下が成立する。 $$ 1 + \mathbf{v}^{T} A^{-1} \mathbf{u} \ne 0 \iff \exists : \left( A + \mathbf{u}</description></item><item><title>多項分布</title><link>https://freshrimpsushi.github.io/jp/posts/2480/</link><pubDate>Mon, 20 Nov 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2480/</guid><description>定義 $n \in \mathbb{N}$ とカテゴリ $k \in \mathbb{N}$ の数の確率変数で構成されるランダムベクトルを $\left( X_{1} , \cdots , X_{k} \right)$ と示そう。 $$ \sum_{i=1}^{k} X_{i} = n \qquad \&amp;amp; \qquad \sum_{i=1}^{k} p_{i} = 1 $$ これを満たす $\mathbf{p} = \left( p_{1}</description></item><item><title>行列式の補助定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/2479/</link><pubDate>Sat, 18 Nov 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2479/</guid><description>概要 可逆行列は$A \in \mathbb{R}^{n \times n}$及び$\mathbf{u} , \mathbf{v} \in \mathbb{R}^{n}$に対して下記が成り立つ。 $$ \det \left( A + \mathbf{u} \mathbf{v}^{T} \right) = \left( 1 +</description></item><item><title>第一種変形ベッセル関数が方向統計学に登場する理由</title><link>https://freshrimpsushi.github.io/jp/posts/2478/</link><pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2478/</guid><description>ビルドアップ 変形ベッセル関数 $$ J_{\nu}(x) = \sum \limits_{n=0}^{\infty} \frac{(-1)^{n} }{\Gamma (n+1) \Gamma (n+\nu+1)} \left(\frac{x}{2} \right)^{2n+\nu} $$ 第一種ベッセル関数 $J_{\nu}$ に対して次のように定義される $I_{\nu}$ を変形第一種ベッセル関数という1。 $$</description></item><item><title>数学における不動点</title><link>https://freshrimpsushi.github.io/jp/posts/2477/</link><pubDate>Tue, 14 Nov 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2477/</guid><description>定義 関数 $f : X \to X$ に対して以下を満たす $x_{0} \in X$ を不動点fixed pointと呼ぶ。 $$ f \left( x_{0} \right) = x_{0} $$ $f$ の導関数 $f '$ が与えられた場合、以下も不動点</description></item><item><title>二つの母平均の差に対する小標本仮説検定</title><link>https://freshrimpsushi.github.io/jp/posts/2476/</link><pubDate>Sun, 12 Nov 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2476/</guid><description>仮説検証 1 互いに独立した二つの母集団がそれぞれ正規分布$N \left( \mu_{1} , \sigma_{1}^{2} \right)$と$N \left( \mu_{2} , \sigma_{2}^{2} \right)$に従っており$\sigma_</description></item><item><title>解と解の違い</title><link>https://freshrimpsushi.github.io/jp/posts/2475/</link><pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2475/</guid><description>定義 与えられた関数の関数値が$0$になる定義域の点を根rootと言う。 与えられた問題の条件を満たすものを解solutionと言う。 説明 簡単に</description></item><item><title>小標本による母平均の仮説検定</title><link>https://freshrimpsushi.github.io/jp/posts/2474/</link><pubDate>Wed, 08 Nov 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2474/</guid><description>帰無仮説検定 1 母集団の分布が正規分布 $N \left( \mu , \sigma^{2} \right)$ に従うが、母分散 $\sigma^{2}$ はわからないとする。標本が $n &amp;lt; 30$ 個だけの小標本の場合、その母平均の候補 $\mu_{0}$ に</description></item><item><title>複素関数の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2473/</link><pubDate>Mon, 06 Nov 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2473/</guid><description>定義 1 r 複素数集合 $\mathbb{C}$ の空集合じゃない部分集合 $A,B \subset \mathbb{C}$ に対して、$f : A \to B$ を 複素値関数complex Valued functionと呼ぶ。一方で、$A, B</description></item><item><title>合同共分散の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2472/</link><pubDate>Sat, 04 Nov 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2472/</guid><description>ビルドアップ 分布が$X \sim \left( \mu , \sigma^{2} \right)$の母集団から相互独立で引いた$n$個のサンプルが実際には$m$つの母集団$\left( \mu_{1} , \sigma_{1}^{2}</description></item><item><title>リーマン球の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2471/</link><pubDate>Thu, 02 Nov 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2471/</guid><description>説明 リーマン・スフィアは[複素解析](../../categories/Complex Analysis)で複素平面を単位球に移すものだ。単位</description></item><item><title>加重平均の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2470/</link><pubDate>Tue, 31 Oct 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2470/</guid><description>定義 データ $\mathbf{x} = \left\{ x_{1} , \cdots , x_{n} \right\}$ と ベクトル $\mathbf{w} = \left( w_{1} , \cdots , w_{n} \right) \in \mathbb{R}^{n}$ に対して、以下を加重平均weighted meanという。 $$ {{ \sum_{k=1}^{n} w_{k} x_{k} } \over { \sum_{k=1}^{n} w_{k} }} =</description></item><item><title>複素平面における実数軸の非開集合性</title><link>https://freshrimpsushi.github.io/jp/posts/2469/</link><pubDate>Sun, 29 Oct 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2469/</guid><description>定理 $$ \mathbb{R}^{\circ} \ne \mathbb{R} \subset \mathbb{C} $$ 実数軸$\mathbb{R} \subset \mathbb{C}$は、複素平面$\mathbb{C}$でオープンではない。 説明 したがって</description></item><item><title>二つの母平均の差に関する大標本仮説検定</title><link>https://freshrimpsushi.github.io/jp/posts/2468/</link><pubDate>Fri, 27 Oct 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2468/</guid><description>仮説検定 1 二つの独立な母集団がそれぞれ$\left( \mu_{1} , \sigma_{1}^{2} \right)$と$\left( \mu_{2} , \sigma_{2}^{2} \right)$の分布に従うとしよう。標本の</description></item><item><title>複素空間の位相空間学</title><link>https://freshrimpsushi.github.io/jp/posts/2467/</link><pubDate>Wed, 25 Oct 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2467/</guid><description>概要 複素数の集合$\mathbb{C}$を位相空間として扱うための定義を紹介する。位相空間とは言っても、ほとんどが距離空間での定義を複素集合</description></item><item><title>母平均に対する標本仮説検定</title><link>https://freshrimpsushi.github.io/jp/posts/2466/</link><pubDate>Mon, 23 Oct 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2466/</guid><description>仮説検証 1 母集団の分布が$\left( \mu , \sigma^{2} \right)$に従ってると仮定しよう。標本が大標本の場合、つまり標本の数が$n &amp;gt; 30$の時、母</description></item><item><title>定数関数の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2465/</link><pubDate>Sat, 21 Oct 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2465/</guid><description>定義 関数 $c : X \to Y$ が全ての $x_{1} , x_{2} \in X$ に対して次を満足するなら、定数関数constant functionと言う。 $$ c \left( x_{1} \right) = c \left( x_{2} \right) $$ 説明 普通</description></item><item><title>多重回帰分析における残差の分散の推定量と回帰係数の標準誤差</title><link>https://freshrimpsushi.github.io/jp/posts/2464/</link><pubDate>Thu, 19 Oct 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2464/</guid><description>定理 $$ \begin{bmatrix} y_{1} \\ y_{2} \\ \vdots \\ y_{n} \end{bmatrix} = \begin{bmatrix} 1 &amp;amp; x_{11} &amp;amp; \cdots &amp;amp; x_{p1} \\ 1 &amp;amp; x_{12} &amp;amp; \cdots &amp;amp; x_{p2} \\ \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \\ 1 &amp;amp; x_{1n} &amp;amp; \cdots &amp;amp; x_{pn} \end{bmatrix} \begin{bmatrix} \beta_{0} \\ \beta_{1} \\ \vdots \\ \beta_{p} \end{bmatrix} + \begin{bmatrix} \varepsilon_{1} \\ \varepsilon_{2} \\ \vdots \\ \varepsilon_{n} \end{bmatrix} $$ $p$ 個の独</description></item><item><title>有理関数の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2463/</link><pubDate>Tue, 17 Oct 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2463/</guid><description>定義 1 2つの多項式関数 $P_{1}(z), P_{2}(z) : \mathbb{C} \to \mathbb{C}$ について、$P_{2} (z) \ne 0$ である全ての $z \in \mathbb{C}$ を $\left( P_{1} / P_{2} \right) (z)$ に対応させる次の関数 $Q$ を有理関数または代数的分</description></item><item><title>標準誤差の一般的な定義</title><link>https://freshrimpsushi.github.io/jp/posts/2462/</link><pubDate>Sun, 15 Oct 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2462/</guid><description>定義 1 ある推定量estimator $T$ について、$T$ の標準偏差の推定値estimateを標準誤差standard errorと言う。 $$ \text{s.e.} \left( T \right)</description></item><item><title>Juliaで2つの時刻の差を秒単位で計算する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2461/</link><pubDate>Fri, 13 Oct 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2461/</guid><description>概要 これを実現するには、Dates モジュールの canonicalize() 関数を使用する1。 コード using Dates tic = DateTime(2022,3,7,7,1,11) toc = now() Dates.canonicalize(toc-tic) 上のコードを実行した結果は次のとおりである。 julia&amp;gt; using Dates</description></item><item><title>回帰係数の正規性証明</title><link>https://freshrimpsushi.github.io/jp/posts/2460/</link><pubDate>Wed, 11 Oct 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2460/</guid><description>定理 $$ \begin{bmatrix} y_{1} \\ y_{2} \\ \vdots \\ y_{n} \end{bmatrix} = \begin{bmatrix} 1 &amp;amp; x_{11} &amp;amp; \cdots &amp;amp; x_{p1} \\ 1 &amp;amp; x_{12} &amp;amp; \cdots &amp;amp; x_{p2} \\ \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \\ 1 &amp;amp; x_{1n} &amp;amp; \cdots &amp;amp; x_{pn} \end{bmatrix} \begin{bmatrix} \beta_{0} \\ \beta_{1} \\ \vdots \\ \beta_{p} \end{bmatrix} + \begin{bmatrix} \varepsilon_{1} \\ \varepsilon_{2} \\ \vdots \\ \varepsilon_{n} \end{bmatrix} $$ $p$ 個の独</description></item><item><title>Juliaで2次元配列と行列の間の変換方法</title><link>https://freshrimpsushi.github.io/jp/posts/2459/</link><pubDate>Mon, 09 Oct 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2459/</guid><description>概要 Juliaで2次元配列と行列の間を切り替えるヒントを紹介する1。おそらくJulia 1.7以下の環境では、最もJuliaらしく、シンプルで</description></item><item><title>回帰係数の定義と推定量の公式導出</title><link>https://freshrimpsushi.github.io/jp/posts/2458/</link><pubDate>Sat, 07 Oct 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2458/</guid><description>定義 1 $$ Y = \beta_{0} + \beta_{1} X_{1} + \cdots + \beta_{p} X_{p} + \varepsilon $$ 多重回帰分析で与えられた $p$ 個の独立変数 $X_{1} , \cdots , X_{p}$ に対して、上記のような線形モデルlinear modelを</description></item><item><title>Juliaでネイバーからメールを送る方法</title><link>https://freshrimpsushi.github.io/jp/posts/2457/</link><pubDate>Thu, 05 Oct 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2457/</guid><description>概要 SMTPClient.jlパッケージを使って、SMTPsimple Mail Transfer Protocolでナヴァーからメールを送る方法を紹介する1。長時間</description></item><item><title>統計学における自由度</title><link>https://freshrimpsushi.github.io/jp/posts/2456/</link><pubDate>Tue, 03 Oct 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2456/</guid><description>用語 ある統計量を算出する際にその値を変更できる独立的なデータの数を自由度degree of freedomと呼ぶ1。 説明 自由度を説明するのが難しい</description></item><item><title>累積平均公式の導出</title><link>https://freshrimpsushi.github.io/jp/posts/2455/</link><pubDate>Sun, 01 Oct 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2455/</guid><description>公式 与えられたサンプル $x_{1} , \cdots , x_{n}$ の標本平均が $y_{n}$ だとするなら、サンプル $x_{n+1}$ が新たに与えられた時の全体の標本平均 $y_{n+1}$ は以下の通りだ。 $$ y_{n+1} := {{ n } \over {n</description></item><item><title>エクセルで地図形の図を描く方法</title><link>https://freshrimpsushi.github.io/jp/posts/2454/</link><pubDate>Fri, 29 Sep 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2454/</guid><description>概要 エクセルを使って地図の特定の領域を与えられた数値に応じて色付けした図を描く。具体的にどんなディテールがあるのかは後で自分で習得するとして</description></item><item><title>数学における区間の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2453/</link><pubDate>Wed, 27 Sep 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2453/</guid><description>定義 $$ [a,b] := \left\{ x \in \mathbb{R} : a \le x \le b \right\} \subset \mathbb{R} $$ 二つの実数$a \le b$に対して、上のような集合を区間intervalと言う。 特に、両端$a,b$を含む場</description></item><item><title>パーセンタイルと外れ値</title><link>https://freshrimpsushi.github.io/jp/posts/2452/</link><pubDate>Mon, 25 Sep 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2452/</guid><description>定義 1 量的データが与えられたとしよう。 全体から$p \%$より大きく、$(100-p) \%$より小さい値を**$p$-パーセンタイル**$p$</description></item><item><title>円周率の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2451/</link><pubDate>Sat, 23 Sep 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2451/</guid><description>定義 幾何学的な定義 平面で与えられた一点から距離$r &amp;gt; 0$だけ離れた点の集合を円circleと定義する。 円の周$l$と直径$2r$の比を円周率</description></item><item><title>Zスコアと標準化</title><link>https://freshrimpsushi.github.io/jp/posts/2450/</link><pubDate>Thu, 21 Sep 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2450/</guid><description>定義 1 平均が$\mu$で標準偏差が$\sigma$の分布に従う確率変数$X$に対して、以下の変換を標準化と呼ぶ。 $$ Z = {{ X - \mu } \over { \sigma }} $$ 量</description></item><item><title>ジョモロジアンのアルゴリズムの実装</title><link>https://freshrimpsushi.github.io/jp/posts/2449/</link><pubDate>Tue, 19 Sep 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2449/</guid><description>概要 ZomorodianとCarlssonの論文「Computing Persistent Homology」で紹介されたアルゴリズムの擬似コードを説明し、実装す</description></item><item><title>基礎統計学における分散の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2448/</link><pubDate>Sun, 17 Sep 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2448/</guid><description>定義 1 $n$個の量的データが与えられたとしよう。 標本平均$\overline{x}$とデータの差$\left( \overline{x} - x_{i} \right)$を偏差d</description></item><item><title>ジョモロジアンのアルゴリズム誘導</title><link>https://freshrimpsushi.github.io/jp/posts/2447/</link><pubDate>Fri, 15 Sep 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2447/</guid><description>概要 ZomorodianとCarlssonの論文「Computing Persistent Homology」で紹介されたアルゴリズムの導出プロセスを説明する1。</description></item><item><title>基礎統計学における最頻値の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2446/</link><pubDate>Wed, 13 Sep 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2446/</guid><description>定義 1 質的データが与えられた場合、最も度数が高いカテゴリーを最頻値modeという。量的データの場合、最も度数が高い階級を最頻階級modal c</description></item><item><title>パーシステント・モジュール</title><link>https://freshrimpsushi.github.io/jp/posts/2445/</link><pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2445/</guid><description>定義 1 $R$を環とし、拡張された整数集合 $\mathbb{Z}$を$\overline{\mathbb{Z}} := \mathbb{Z} \cup \left\{ \pm \infty \right\}$</description></item><item><title>基礎統計学における中央値の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2444/</link><pubDate>Sat, 09 Sep 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2444/</guid><description>定義 1 $n$個の量的データが大きさ順に与えられたとき、全データの中央に位置する値を中央値またはメディアンmedian $m$という。$n$が奇</description></item><item><title>永続ホモロジーグループの定義</title><link>https://freshrimpsushi.github.io/jp/posts/2443/</link><pubDate>Thu, 07 Sep 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2443/</guid><description>ビルドアップ オリエンテッドoriented$k$-シンプレックス $K$ から得たフリーグループ$\mathsf{C}_{k}$において、$\par</description></item><item><title>仮説検定の簡単な定義</title><link>https://freshrimpsushi.github.io/jp/posts/2442/</link><pubDate>Tue, 05 Sep 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2442/</guid><description>定義 1 2 科学で母集団についてのある推測を統計的仮説と言い、仮説を採用または棄却する統計的意思決定プロセスを統計的仮説検定testing of statistical h</description></item><item><title>複素体のフィルトレーション</title><link>https://freshrimpsushi.github.io/jp/posts/2441/</link><pubDate>Sun, 03 Sep 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2441/</guid><description>定義 1 $K$を単体複体とする。部分集合$L \subset K$も単体複体であれば、$K$の部分複体という。 $$ \emptyset = K^{0} \subset K^{1} \subset \cdots \subset K^{m} = K $$ $K$の部分複体からな</description></item><item><title>基礎統計学における母数と統計量</title><link>https://freshrimpsushi.github.io/jp/posts/2440/</link><pubDate>Fri, 01 Sep 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2440/</guid><description>定義 1 母集団に関連する数値的に記述される尺度数値的記述尺度を母数パラメータといい、サンプルから算出されたものを統計量スタティスティックという</description></item><item><title>等級モジュールの定義</title><link>https://freshrimpsushi.github.io/jp/posts/2439/</link><pubDate>Wed, 30 Aug 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2439/</guid><description>ビルドアップ 記号上 $n,m,i \in \mathbb{Z}$ としよう。 グレード環 リンク $\left( R , + , \cdot \right)$ がアーベル群 $R$ の直和 $\left( R , \otimes \right) \simeq \bigoplus_{i} R_{i}$ に装着された グレード環graded rin</description></item><item><title>基礎統計学における平均の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2438/</link><pubDate>Mon, 28 Aug 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2438/</guid><description>定義 1 $$ \overline{x} := {{ 1 } \over { n }} \sum_{k=1}^{n} x_{k} $$ $n$量的データが与えられた時、その値を全て足し$n$で割った値$\overline{x}$を標本平均sam</description></item><item><title>位相数学におけるレトラクト</title><link>https://freshrimpsushi.github.io/jp/posts/2437/</link><pubDate>Sat, 26 Aug 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2437/</guid><description>定義 1 2 位相空間 $X$ の部分空間 $A \subset X$ が与えられて、恒等関数を $\text{id}$ と表示しよう。 包含 $i : A \to X$ に対して、 $$ r \circ i = \text{id}_{A} : A \to A $$ を満たす連続な 全射 関</description></item><item><title>多変量データの散布図</title><link>https://freshrimpsushi.github.io/jp/posts/2436/</link><pubDate>Thu, 24 Aug 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2436/</guid><description>定義 1 多変量データが与えられたとしよう。量的データを2つ選んで、1つは水平軸（x軸）、もう1つは垂直軸（y軸）として、点をプロットした図を散</description></item><item><title>定義可能な空間の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2435/</link><pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2435/</guid><description>定義 1 2 ホモトピー型：二つの位相空間 $X, Y$ について、次を満たす連続関数 $f : X \to Y$、$g: Y \to X$ が存在する場合、$X, Y$ は同じ ホモトピー型を持</description></item><item><title>時系列データの折れ線グラフ</title><link>https://freshrimpsushi.github.io/jp/posts/2434/</link><pubDate>Sun, 20 Aug 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2434/</guid><description>説明 &amp;ldquo;Line Chart&amp;quot;という英語の呼び方とは違って、韓国では折れ線グラフという非純化された言い方が普通に使われる。以下は、時系列データ</description></item><item><title>トーラスの基本群は二つの整数群の積と同型である</title><link>https://freshrimpsushi.github.io/jp/posts/2433/</link><pubDate>Fri, 18 Aug 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2433/</guid><description>定理 1 $$ \pi_{1} \left( T^{2} \right) \simeq \mathbb{Z} \times \mathbb{Z} $$ トーラス $T^{2}$の基本群は$\mathbb{Z} \times \mathbb{Z}$だ。 証明 誘導されたホモモルフィズムの</description></item><item><title>量的データのヒストグラム</title><link>https://freshrimpsushi.github.io/jp/posts/2432/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2432/</guid><description>定義 1 2 難しい定義 定量データの度数分布で作成された棒グラフをヒストグラムhistogramと言う。 簡単な定義 数字で表されたデータを一定の区間</description></item><item><title>ホモトピー型</title><link>https://freshrimpsushi.github.io/jp/posts/2431/</link><pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2431/</guid><description>定義 1 二つの位相空間 $X, Y$に対して、以下を満たす連続関数 $f : X \to Y$、$g: Y \to X$が存在する場合、$X, Y$は同じホモトピー型homoto</description></item><item><title>質的データの棒グラフ</title><link>https://freshrimpsushi.github.io/jp/posts/2430/</link><pubDate>Sat, 12 Aug 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2430/</guid><description>定義 1 質的データの度数分布が与えられているとしよう。 棒の高さで度数を示すグラフをバーチャートbar Chartという。 弧の面積で相対度数を示す</description></item><item><title>積空間の基本群は基本群の積と同型である</title><link>https://freshrimpsushi.github.io/jp/posts/2429/</link><pubDate>Thu, 10 Aug 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2429/</guid><description>定理 $X, Y$を位相空間としよう。その（位相学的）デカルト積の基本群と、それぞれの成分の群のデカルト積は同型である。 $$ \pi_{1} \left( X \times Y , \left( x_{0} , y_{0} \right) \right) \simeq</description></item><item><title>量的データの階級</title><link>https://freshrimpsushi.github.io/jp/posts/2428/</link><pubDate>Tue, 08 Aug 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2428/</guid><description>定義 1 量的データの値によって上限と下限を定め分けた区間をクラスclassと言う。 各クラスに属するデータの数を度数frequencyと言う。 説</description></item><item><title>円の基本群は整数群と同型である</title><link>https://freshrimpsushi.github.io/jp/posts/2427/</link><pubDate>Sun, 06 Aug 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2427/</guid><description>定理 単位円 $S^{1}$の基本群 $\pi_{1} \left( S^{1}, 1 \right)$ と 整数群 $\mathbb{Z}$ は 同型である。 $$ \pi_{1} \left( S^{1}, 1 \right) \simeq \mathbb{Z} $$ ここで、$(1,0) \in \mathbb{R}^{2}$ を簡単に $1$ とも表す。 説明 応用 ホモ</description></item><item><title>定性データの頻度</title><link>https://freshrimpsushi.github.io/jp/posts/2426/</link><pubDate>Fri, 04 Aug 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2426/</guid><description>定義 質的データの各観測値が現れる頻度を頻度という。 頻度を全データの数で割ったものを相対頻度とし、相対頻度に100を掛けた値をパーセンテージと</description></item><item><title>連続関数の相対的ホモトピー</title><link>https://freshrimpsushi.github.io/jp/posts/2425/</link><pubDate>Wed, 02 Aug 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2425/</guid><description>定義 1 ホモトピーの一般化 $I = [0,1]$ を単位区間、$X, Y$ を位相空間とする。二つの連続写像 $f_{0} , f_{1} : X \to Y$ に対し、 $$ F (x , 0) = f_{0} (x) \\ F (x , 1) = f_{1} (x) $$ を</description></item><item><title>統計学の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2424/</link><pubDate>Mon, 31 Jul 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2424/</guid><description>定義 1 統計学は、データを収集し、分析し、表示し、解釈し、決定する方法の集合だ。 記述統計学は、図表やグラフと要約尺度などを使用してデータを構成</description></item><item><title>代数トポロジーにおける誘導された準同型写像</title><link>https://freshrimpsushi.github.io/jp/posts/2423/</link><pubDate>Sat, 29 Jul 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2423/</guid><description>定義 1 2 $X,Y$を位相空間とし、$\varphi : X \to Y$が連続であるとする。以下のように定義される準同型写像 $$ \varphi_{\ast} [f] := \left[ \varphi f \right] = \left[ \varphi \circ f \right]</description></item><item><title>統計学における尺度：名義、順序、区間、比率</title><link>https://freshrimpsushi.github.io/jp/posts/2422/</link><pubDate>Thu, 27 Jul 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2422/</guid><description>概要 一般的に、実際の世界でデータを 作ることは、現象や実験を観察して、それについて記録する作業を言い、これを計測すると言う。 定義 1 データを計測</description></item><item><title>モノドロミー定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/2421/</link><pubDate>Tue, 25 Jul 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2421/</guid><description>整理 1 $1$-スフィア $S^{1}$ において、点 $1 := (1,0)$ を起点とし、同値である二つのパス $f_{0} \simeq f_{1}$ が存在するとしよう。それぞれのリフトが $\widetilde{f}_{0}, \widetilde{f}_{1}$ が $\widetilde{f}_{0} (0) = \widetilde{f}_{1} (0)$ を満た</description></item><item><title>質的変数と連続変数</title><link>https://freshrimpsushi.github.io/jp/posts/2420/</link><pubDate>Sun, 23 Jul 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2420/</guid><description>定義 1 質的変数 質的qualitativeな特性を測定した変数を質的変数という。 食べ物が&amp;hellip; 美味しい / まあまあ / まずい 色が&amp;hel</description></item><item><title>代数的トポロジーにおけるリフティング定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/2419/</link><pubDate>Fri, 21 Jul 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2419/</guid><description>定理 1 2 カバーとリフトの定義: 単位区間を$I = [0,1]$のように表す。 $X$のオープンセット$U \subset X$が**$p$によって均等にカバーされ</description></item><item><title>データの定義と語源</title><link>https://freshrimpsushi.github.io/jp/posts/2418/</link><pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2418/</guid><description>概要 現代社会では、データについて全く知らない知識人はいない。全く関心がない非専門家でも、「何かについての知識」や「通信するための資源」のよう</description></item><item><title>代数トポロジーにおける被覆と持ち上げ</title><link>https://freshrimpsushi.github.io/jp/posts/2417/</link><pubDate>Mon, 17 Jul 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2417/</guid><description>定義 1 2 二つの位相空間$\widetilde{X}, X$に対して、$p : \widetilde{X} \to X$が連続関数であるとしよう。任意の添字集合を$\forall$</description></item><item><title>Juliaでデータを省略せずに出力する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2416/</link><pubDate>Sat, 15 Jul 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2416/</guid><description>概要 元々ジュリアでは、データを出力する時にREPLのサイズに合わせてきれいに出力されるが、時には全体のデータを楽に見たい時がある。データがf</description></item><item><title>代数位相幾何学における基本群</title><link>https://freshrimpsushi.github.io/jp/posts/2415/</link><pubDate>Thu, 13 Jul 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2415/</guid><description>定義 1 位相空間 $X$ と単位区間 $I = [0,1]$ が与えられたとする。 $X$ のパス $f, g : I \to X$ に対して、$f (1) = g(0)$ の時、2つのパスの積または合成 $f \cdot g$ を以下のよう</description></item><item><title>第1回 生エビ寿司店大会：グラフグループ</title><link>https://freshrimpsushi.github.io/jp/posts/2414/</link><pubDate>Tue, 11 Jul 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2414/</guid><description>2022年を迎え、新鮮エビ寿司店は読者の皆さんが参加できる定期イベントを開催することになった。一四半期ごとに一つの課題を公開する。今回の大会</description></item><item><title>ホモトピー類</title><link>https://freshrimpsushi.github.io/jp/posts/2413/</link><pubDate>Sun, 09 Jul 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2413/</guid><description>定理 簡単な説明 どんな位相空間でも、2つの固定された点の間で定義されたホモトピーの関係は同値関係だ。 詳しい説明 位相空間 $X$ と2つの点 $x_{0}, x_{1} \in X$ が与</description></item><item><title>Juliaで線形代数パッケージを使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2412/</link><pubDate>Fri, 07 Jul 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2412/</guid><description>概要 Juliaは、MATLABレベルの線形代数をサポートしている。むしろMATLABよりも進化した、直感的で美しい構文を見ると、Juliaが</description></item><item><title>ホモトピーの定義</title><link>https://freshrimpsushi.github.io/jp/posts/2411/</link><pubDate>Wed, 05 Jul 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2411/</guid><description>定義1 単位閉区間$I := [0,1]$と位相空間$X$が与えられているとする。 固定された二点$x_{0} , x_{1} \in X$に対して、次を満たす連続関数$</description></item><item><title>Juliaでの日付と時刻関連関数の使用方法</title><link>https://freshrimpsushi.github.io/jp/posts/2410/</link><pubDate>Mon, 03 Jul 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2410/</guid><description>概要 1 Datesは、日付や時間に関連する関数をまとめたモジュールだ。一般的なプログラミングはもちろん、時系列に関する、いやそれに関係なく多く</description></item><item><title>抽象単体複合体の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2409/</link><pubDate>Sat, 01 Jul 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2409/</guid><description>定義 1 任意の集合 $X$ が与えられたとする。 $X$ の冪集合 $2^{X}$ の有限な部分集合の中で次を満たす複体 $A \subset 2^{X}$ を**（抽象的な）シンプレクス**abstrac</description></item><item><title>表現者の定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/2408/</link><pubDate>Thu, 29 Jun 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2408/</guid><description>定理 インプット集合input set $X \ne \emptyset$ と正定値カーネル $k: X \times X \to \mathbb{R}$ が与えられているとする。学習データセットtraining Datasetを $$ D</description></item><item><title>代数的トポロジーにおけるオイラー指標</title><link>https://freshrimpsushi.github.io/jp/posts/2407/</link><pubDate>Tue, 27 Jun 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2407/</guid><description>定義 1 シンプレックス $\Delta$ が与えられているとする。$\Delta$ の頂点の数を$n$、エッジの数を$m$、フェイスの数を$f$ としたとき、$\D</description></item><item><title>機械学習における政府号カーネルと再生カーネルのヒルベルト空間</title><link>https://freshrimpsushi.github.io/jp/posts/2406/</link><pubDate>Sun, 25 Jun 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2406/</guid><description>定義 1 2 入力空間input space $X \ne \emptyset$ が定義域であり値域が複素数の集合 $\mathbb{C}$ の写像 $f: X \to \mathbb{C}$ で構成される関数空間 $\left( H , \left&amp;lt; \cdot , \cdot \right&amp;gt; \right) \subset \mathbb{C}^{X}$ がヒルベルト空間</description></item><item><title>計算トポロジーにおける境界行列</title><link>https://freshrimpsushi.github.io/jp/posts/2405/</link><pubDate>Fri, 23 Jun 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2405/</guid><description>説明 定義では単体複合体について述べられているが、以下の説明で抽象単体複合体のみ言及される理由は、境界行列について調べたかっただけの人の視点で</description></item><item><title>最適化理論：ラグランジュの未定乗数法</title><link>https://freshrimpsushi.github.io/jp/posts/2404/</link><pubDate>Wed, 21 Jun 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2404/</guid><description>⚡ 이 포스트는 패스트 트랙Fast Track으로 작성되었습니다. 説明 非線形な目的関数を持つ非線形最適化問題で、ラグランジュ乗数法という解法があり</description></item><item><title>チェック複体の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2403/</link><pubDate>Mon, 19 Jun 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2403/</guid><description>定義 1 2 距離空間 $\left( X, d \right)$ と正の数 $\varepsilon &amp;gt; 0$ が与えられたとする。有限集合 $S \subset X$ に対して以下のように定義された抽象単体複体 $\check{C}_{\varepsilon} (S)$ を チェック複体Čech</description></item><item><title>サポートベクターマシン</title><link>https://freshrimpsushi.github.io/jp/posts/2402/</link><pubDate>Sat, 17 Jun 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2402/</guid><description>モデル 1 簡単な定義 二値分類binary Classificationが可能なデータを最もよく区別する直線や平面を見つける方法をサポートベクター</description></item><item><title>ベトリス-リプス コンプレックスの定義</title><link>https://freshrimpsushi.github.io/jp/posts/2401/</link><pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2401/</guid><description>定義 1 2 簡単な定義 ユークリッド空間 $\left( \mathbb{R}^{d} , \left\| \cdot \right\|_{2} \right)$ と正数 $\varepsilon &amp;gt; 0$ が与えられたとしよう。有限集合 $S \subset \mathbb{R}^{d}$ に対し、以下の2つの条件を満たす単体複体 $\text{VR}_{\varepsilon} (S)$</description></item><item><title>一般的な凸関数の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2400/</link><pubDate>Tue, 13 Jun 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2400/</guid><description>定義 ベクトル空間 $V$ で定義された関数 $f : V \to \mathbb{R}$ が全ての $\mathbf{x}, \mathbf{y} \in V$ と全ての $t \in [0,1]$ に対して次を満たす時、凸関数convex functionと言われる</description></item><item><title>ホモロジーグループのベッチ数</title><link>https://freshrimpsushi.github.io/jp/posts/2399/</link><pubDate>Sun, 11 Jun 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2399/</guid><description>概要 代数位相algebraic Topologyにおいて、幾何学的な意味を考えずに単に定義だけを述べると、ベッチ数betti numberとは、</description></item><item><title>Juliaでの分散コンピューティングの方法</title><link>https://freshrimpsushi.github.io/jp/posts/2398/</link><pubDate>Fri, 09 Jun 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2398/</guid><description>概要 Juliaでは、複数のデバイスに計算タスクをスケジューリングする方法を紹介する1。正直、自分もよくわからない。 コード using Distributed ip_ = [] for last in [160,161,162,163,164,32,33,34,35,36,43,44,45,46,47] push!(ip_,</description></item><item><title>有限生成アーベル群の基本定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/2397/</link><pubDate>Wed, 07 Jun 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2397/</guid><description>Theorem A finitely generated free group $G$ that is an Abelian group, and let $T \subset G$ be the torsion subgroup of $G$. (1): There exists a free Abelian group $H \subset G$ with finite rank $\beta \ge 0$ satisfying the following: $$ G = H \oplus T $$ (2): Let $T_{i}$ be a finite cyclic group of order $t_{i} &amp;gt; 1$. Then there exists $T_{1} , \cdots , T_{k}$</description></item><item><title>ユークリッドグラフ</title><link>https://freshrimpsushi.github.io/jp/posts/2396/</link><pubDate>Mon, 05 Jun 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2396/</guid><description>定義 1 簡単な定義 ユークリッド空間の有限部分集合 $V \subset \mathbb{R}^{p}$ とカットオフ$\delta \ge 0$ が与えられているとする。ユークリッドグラフは、$V$ を頂点</description></item><item><title>同型写像のスミス標準形</title><link>https://freshrimpsushi.github.io/jp/posts/2395/</link><pubDate>Sat, 03 Jun 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2395/</guid><description>要旨 1 自由アーベル群$G$と$G'$は、それぞれ基底$a_{1} , \cdots , a_{n}$と$a_{1}' , \cdots , a_{m}'$を持つとする。関数$f</description></item><item><title>Juliaの多次元インデックス</title><link>https://freshrimpsushi.github.io/jp/posts/2394/</link><pubDate>Thu, 01 Jun 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2394/</guid><description>概要 Juliaでは、多次元配列を参照するためのインデックスタイプであるCatesianIndexを提供している1。もちろんCatesianと</description></item><item><title>ねじれ部分群の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2393/</link><pubDate>Tue, 30 May 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2393/</guid><description>定義 1 $G$がアーベル群とする。 $g \in G$が何らかの$n \in \mathbb{N}$に対して$ng = 0$を満たせば、$g$は有限オーダーfinit</description></item><item><title>Juliaのショートサーキット</title><link>https://freshrimpsushi.github.io/jp/posts/2392/</link><pubDate>Sun, 28 May 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2392/</guid><description>概要 Juliaでは、&amp;amp;&amp;amp;と||は論理積、論理和だけでなく、ショートサーキット評価short-circuit Evaluatio</description></item><item><title>フリーグループとその部分群</title><link>https://freshrimpsushi.github.io/jp/posts/2391/</link><pubDate>Fri, 26 May 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2391/</guid><description>定理 $F$をフリーなアーベル群としよう。 [2]: もし$F$がランク$n$なら、$F$の部分群$R \subset F$はランク$r \le n$のフリーアーベル群だ。 [3]: さ</description></item><item><title>Juliaのfind関数들</title><link>https://freshrimpsushi.github.io/jp/posts/2390/</link><pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2390/</guid><description>概要 Juliaの基本組み込み関数は知れば知るほど便利だ。早速、例を見て学ぼう。 コード x = [3, 7, 4, 5, 10, 3, 12, 3, 2, 4] argmin(x) argmax(x) findmin(x) findmax(x) extrema(x) findfirst(x .== 3) findlast(x .== 3) findall(x .== 3) findnext(x .==</description></item><item><title>スミス標準形の存在証明</title><link>https://freshrimpsushi.github.io/jp/posts/2389/</link><pubDate>Mon, 22 May 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2389/</guid><description>アルゴリズム $R$が主イデアル領域の時、全ての行列 $A \in R^{m \times n}$についてスミス標準形が一意に存在する。つまり、行列 $A \in R^{m \times n}$に対して、次</description></item><item><title>Juliaの感嘆符の規約</title><link>https://freshrimpsushi.github.io/jp/posts/2388/</link><pubDate>Sat, 20 May 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2388/</guid><description>概要 1 Juliaでは、関数名の最後に感嘆符bang!を追加することをバンク規約と呼ぶ。これらの関数は、与えられた引数を変更する特徴がある。 コ</description></item><item><title>行列のスミス標準形</title><link>https://freshrimpsushi.github.io/jp/posts/2387/</link><pubDate>Thu, 18 May 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2387/</guid><description>定義 1 2 PID、すなわち主イデアル領域 $R$ が与えられたとする。行列 $A \in R^{m \times n}$ に対して、以下を満たす $d_{1} , \cdots , d_{r} \in R$ と 可逆行列 $P \in R^{m \times m}$、$Q</description></item><item><title>ベズーの定理</title><link>https://freshrimpsushi.github.io/jp/posts/2386/</link><pubDate>Tue, 16 May 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2386/</guid><description>定義 整域 $D$で次の等式をベズーの恒等式という。 $$ m a + n b = \gcd \left( a, b \right) $$ 全ての$a, b \in D$に対してベズーの恒等式を満たす$m,n \in D$が</description></item><item><title>ベルツルアルゴリズム: 最小内包ディスク問題の解法</title><link>https://freshrimpsushi.github.io/jp/posts/2385/</link><pubDate>Sun, 14 May 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2385/</guid><description>定義 最小包含円 $n &amp;gt; d$ としよう。$d$次元のユークリッド空間で与えられた有限な集合$P = \left\{ p_{k} \right\}_{k=1}^{n} \subset \mathbb{R}^{d}$に対して、以下の</description></item><item><title>Juliaで部分配列を迅速に参照する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2384/</link><pubDate>Fri, 12 May 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2384/</guid><description>概要 Juliaで、viewは配列のサブアレイを素早く参照させるデータ構造だ。実際に使う立場から見れば面倒で差がないように見えるけど、怠惰に参</description></item><item><title>シンプリシアルホモロジーグループの定義</title><link>https://freshrimpsushi.github.io/jp/posts/2383/</link><pubDate>Wed, 10 May 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2383/</guid><description>ビルドアップ 難しい内容ですが、できるだけ理解しやすいように、すべての計算と説明を省略せずに丁寧に残しました。ホモロジーに興味がある方は、ぜひ</description></item><item><title>Juliaのブロードキャスティング文法</title><link>https://freshrimpsushi.github.io/jp/posts/2382/</link><pubDate>Mon, 08 May 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2382/</guid><description>概要 ブロードキャスティングは Juliaで最も重要な概念の一つであり、ベクトル化されたコードを書く際に非常に便利な文法だ1。二項演算の前に.を</description></item><item><title>デルタ-コンプレックスの定義</title><link>https://freshrimpsushi.github.io/jp/posts/2381/</link><pubDate>Sat, 06 May 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2381/</guid><description>定義 1 シンプレックスの定義: アフィン独立な $v_{0}, v_{1} , \cdots , v_{n} \in \mathbb{R}^{n+1}$ の凸包を $n$-シンプレックス$n$-simplex $\Delta^{n}$ と言い、ベクター $v_{k}$ を 頂点ve</description></item><item><title>マップとリデュースを用いたプログラミング</title><link>https://freshrimpsushi.github.io/jp/posts/2380/</link><pubDate>Thu, 04 May 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2380/</guid><description>定義 マップ 関数 $f : X \to Y$ の集合を$F$としよう。以下のように定義される高階関数 $\text{map}$ をマップという。 $$ \text{map} : F \times 2^{X} \to 2^{Y} \\ \text{map} \left( f , \left\{ x_{1} , \cdots , x_{n} \right\} \right) :=</description></item><item><title>単体複合体の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2379/</link><pubDate>Tue, 02 May 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2379/</guid><description>定義 難しい定義 1 $$ \Delta^{k} \in K $$ 有限なシンプレックスの集合 $K$ が以下の二つの条件を満たす場合、シンプリシャル・コンプレックスsimplicial Co</description></item><item><title>プログラミングにおける高階関数</title><link>https://freshrimpsushi.github.io/jp/posts/2378/</link><pubDate>Sun, 30 Apr 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2378/</guid><description>定義 プログラミングで、関数が第一級オブジェクトの場合、関数を引数に取ったり返したりする関数を高階関数と呼ぶ。その逆で、高階関数ではない関数を</description></item><item><title>数学でのトーラスとは?</title><link>https://freshrimpsushi.github.io/jp/posts/2377/</link><pubDate>Fri, 28 Apr 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2377/</guid><description>定義 上述のような写像mapによって、$1$スフィアの二乗である四角形$S^{1} \times S^{1} = [0,1] \times [0,1]$と、位相同型である商空間$T$をトーラ</description></item><item><title>CWコンプレックスの定義</title><link>https://freshrimpsushi.github.io/jp/posts/2376/</link><pubDate>Wed, 26 Apr 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2376/</guid><description>概要1 CW複合体は、セル複合体cell Complexとも呼ばれる複合体で、次の再帰的な手順で構築される。 定義 離散的discreteな集合$X</description></item><item><title>Juliaで配列から辞書を作成する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2375/</link><pubDate>Mon, 24 Apr 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2375/</guid><description>コード 1 julia&amp;gt; Dict([&amp;#34;a&amp;#34;, &amp;#34;bc&amp;#34;] .=&amp;gt; [2,8]) Dict{String, Int64} with 2 entries: &amp;#34;a&amp;#34; =&amp;gt; 2 &amp;#34;bc&amp;#34; =&amp;gt; 8 キーKeyとバリューValueとして使いたい二つの配列が与えられた時、Dict(Key .=&amp;gt; Value)</description></item><item><title>位相数学における複体とは?</title><link>https://freshrimpsushi.github.io/jp/posts/2374/</link><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2374/</guid><description>概要 普通、数学ではコンプレックスcomplexと言えば複素数を指すが、幾何学や位相数学ではコンプレックスと言えば、以下のような用語のことを言</description></item><item><title>Juliaで複素数を使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2373/</link><pubDate>Thu, 20 Apr 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2373/</guid><description>概要 Juliaは、基本的にRと同じように複素数をサポートしている。 コード 虚数単位 im julia&amp;gt; z = 3 + 4im 3 + 4im imは純虚数 $i = \sqrt{-1}$ を表す。常識的に使われ</description></item><item><title>位相数学におけるディスクとスフィア</title><link>https://freshrimpsushi.github.io/jp/posts/2372/</link><pubDate>Tue, 18 Apr 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2372/</guid><description>定義 1 ユークリッド空間 $\left( \mathbb{R}^{n} , \left\| \cdot \right\| \right)$では、次のような形を定義している。 $D^{n} \subset \mathbb{R}^{n}$として定義されたものを</description></item><item><title>マーク・ニューマンによるネットワークデータ入門</title><link>https://freshrimpsushi.github.io/jp/posts/2371/</link><pubDate>Sun, 16 Apr 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2371/</guid><description>紹介 マーク・ニューマンmark Newmanは、複雑系とネットワークに関する卓越した業績を残した物理学者であり、その分野において彼の名声はまさ</description></item><item><title>弱位相の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2370/</link><pubDate>Fri, 14 Apr 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2370/</guid><description>定義 1 $X$ を二つの位相 $\mathscr{T}_{1}$、$\mathscr{T}_{2}$ をもつ集合とする。もし $\mathscr{T}_{1} \subset \mathscr{T}_{2}$ ならば、$\maths</description></item><item><title>OpenFlights への紹介</title><link>https://freshrimpsushi.github.io/jp/posts/2369/</link><pubDate>Wed, 12 Apr 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2369/</guid><description>紹介 オープンフライトは、世界中の空港や航空ネットワークのデータを提供する。少し前処理が必要だけれど、このようなレベルのネットワークデータは珍</description></item><item><title>ラグランジュ運動モデル</title><link>https://freshrimpsushi.github.io/jp/posts/2368/</link><pubDate>Mon, 10 Apr 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2368/</guid><description>定義 1 短期間の集団間の相互作用を扱うメタ個体群モデルをオイラー移動モデルeulerian Movement modelと呼ぶ。 例 シンプルなSIRモデルの拡張を</description></item><item><title>スタンフォード ネットワーク 分析 プロジェクト 紹介</title><link>https://freshrimpsushi.github.io/jp/posts/2367/</link><pubDate>Sat, 08 Apr 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2367/</guid><description>紹介 SNAP(Stanford Network Analysis Project)は、スタンフォード大学でメンテナンスされているネットワーク分析/マイニングライブラリで、巨大ネットワークと言えるネ</description></item><item><title>オイラーの運動モデル</title><link>https://freshrimpsushi.github.io/jp/posts/2366/</link><pubDate>Thu, 06 Apr 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2366/</guid><description>例 $n$個のパッチがあり、$k$番目のパッチの人口が$N_{k}$であるとすると、全体のシステムの人口は$i$から$j$への移動率$f_{i</description></item><item><title>ワールドポップ紹介</title><link>https://freshrimpsushi.github.io/jp/posts/2365/</link><pubDate>Tue, 04 Apr 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2365/</guid><description>紹介 世界の航空ネットワーク、国家間の移民統計、都市化、年齢及び性別の構造などのデータを提供している。扱っているデータはサイト名と合って、人口</description></item><item><title>メタ個体群モデル</title><link>https://freshrimpsushi.github.io/jp/posts/2364/</link><pubDate>Sun, 02 Apr 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2364/</guid><description>用語 1 空間的に分離された複数の個体群に関するモデルを メタ個体群モデルmetapopulation modelという。 この文脈では、その分離され</description></item><item><title>SEES:lab 紹介</title><link>https://freshrimpsushi.github.io/jp/posts/2363/</link><pubDate>Fri, 31 Mar 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2363/</guid><description>紹介 研究室の名前SEESは、Science and Engineering of Emerging Systemsの頭文字を取ったものだ。空港、メールなどのネットワークに関するデータは、きれ</description></item><item><title>Rで線形計画問題を解く方法</title><link>https://freshrimpsushi.github.io/jp/posts/2362/</link><pubDate>Wed, 29 Mar 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2362/</guid><description>概要 lpSolve パッケージを使えばよい1。行列の形で表示された 線形計画問題 の$A, \mathbf{b}, \mathbf{c}$ を入力して使用する。 コード $$ \begin{matrix} \text{Maximize} &amp;amp; &amp;amp; x_{1} &amp;amp; + &amp;amp; x_{2} \\ \text{subject to} &amp;amp;-&amp;amp; x_{1} &amp;amp; + &amp;amp; x_{2}</description></item><item><title>データで見る私たちの世界の紹介</title><link>https://freshrimpsushi.github.io/jp/posts/2361/</link><pubDate>Mon, 27 Mar 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2361/</guid><description>紹介 Our World in Dataはそのサイト名の通り、世界中の人口、年齢、経済、政治、エネルギー、ジェンダー、病気など、数百種類のデータを国別、年度別に無</description></item><item><title>MATLABで線形計画問題を解く方法</title><link>https://freshrimpsushi.github.io/jp/posts/2360/</link><pubDate>Sat, 25 Mar 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2360/</guid><description>概要 Optimization Toolboxを使えばいいんだ1。線形計画問題を行列形で表された$A, \mathbf{b}, \mathbf{c}$を入れて使う。 コード $$ \begin{matrix} \text{Maximize} &amp;amp; &amp;amp; x_{1} &amp;amp; + &amp;amp; x_{2}</description></item><item><title>カイ二乗分布の十分統計量</title><link>https://freshrimpsushi.github.io/jp/posts/2359/</link><pubDate>Thu, 23 Mar 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2359/</guid><description>定理 カイ二乗分布に従うランダムサンプル $\mathbf{X} := \left( X_{1} , \cdots , X_{n} \right) \sim \chi^{2} (r)$ が与えられているとしよう。$r$ に対する十分統計量 $T$ は、次の通りである。 $$ T =</description></item><item><title>Pythonで線形計画問題を解く方法</title><link>https://freshrimpsushi.github.io/jp/posts/2358/</link><pubDate>Tue, 21 Mar 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2358/</guid><description>概要 scipyパッケージを使えばいい1。行列形で示された線形計画問題の$A, \mathbf{b}, \mathbf{c}$を入れて使う。 コード $$ \begin{matrix} \text{Maximize} &amp;amp; &amp;amp; x_{1} &amp;amp; + &amp;amp; x_{2}</description></item><item><title>ベータ分布の十分統計量</title><link>https://freshrimpsushi.github.io/jp/posts/2357/</link><pubDate>Sun, 19 Mar 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2357/</guid><description>概要 ベータ分布に従うランダムサンプル $\mathbf{X} := \left( X_{1} , \cdots , X_{n} \right) \sim \text{Beta} \left( \alpha, \beta \right)$ が与えられているとする。 $\left( \alpha, \beta \right)$ のための十分統計量 $T$ は、以下の通りである。</description></item><item><title>Juliaで線形計画問題を解く方法</title><link>https://freshrimpsushi.github.io/jp/posts/2356/</link><pubDate>Fri, 17 Mar 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2356/</guid><description>Overview To solve optimization problems, one can use the JuMP package[^1]. JuMP stands for Julia Mathematical Programming. Compared to other languages, coding in Julia is almost like directly transcribing mathematical formulas, which is very intuitive. Code $$ \begin{matrix} \text{Maximize} &amp;amp; &amp;amp; x_{1} &amp;amp; + &amp;amp; x_{2} \\ \text{subject to} &amp;amp;-&amp;amp; x_{1} &amp;amp; + &amp;amp; x_{2} &amp;amp; \le &amp;amp; 1 \\ &amp;amp; &amp;amp; x_{1} &amp;amp; &amp;amp; &amp;amp; \le &amp;amp; 3 \\</description></item><item><title>ガンマ分布の十分統計量</title><link>https://freshrimpsushi.github.io/jp/posts/2355/</link><pubDate>Wed, 15 Mar 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2355/</guid><description>概要 ガンマ分布に従うランダムサンプル $\mathbf{X} := \left( X_{1} , \cdots , X_{n} \right) \sim \Gamma \left( k, \theta \right)$ が与えられたとする。 $\left( k, \theta \right)$ に対する十分統計量 $T$ は以下の通りである。 $$ T =</description></item><item><title>Excelで線形計画問題を解く方法</title><link>https://freshrimpsushi.github.io/jp/posts/2354/</link><pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2354/</guid><description>ガイド ステップ1. ソルバーアドインの有効化 ファイル/オプション/アドイン タブで、管理(A)の Excelアドイン の隣の 移動(G) ボタンをクリッ</description></item><item><title>正規分布の十分統計量と最尤推定量</title><link>https://freshrimpsushi.github.io/jp/posts/2353/</link><pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2353/</guid><description>定理 正規分布に従うランダムサンプル $\mathbf{X} := \left( X_{1} , \cdots , X_{n} \right) \sim N \left( \mu , \sigma^{2} \right)$ が与えられたとする。 $\left( \mu, \sigma^{2} \right)$ に対する十分統計量 $T$ と最尤推定量 $\left( \hat{\mu}, \widehat{\sigma^{2}} \right)$ は以下</description></item><item><title>線形計画法における強い双対性定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/2352/</link><pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2352/</guid><description>定理 $$ \begin{align*} \text{Maximize} &amp;amp; \sum_{j=1}^{n} c_{j} x_{j} &amp;amp; \text{(Primal)} \\ \text{subject to} &amp;amp; \sum_{j=1}^{n} a_{ij} x_{j} \le b_{i} &amp;amp; i = 1 ,\cdots , m \\ &amp;amp; x_{j} \ge 0 &amp;amp; j = 1, \cdots , n \end{align*} $$ $$ \begin{align*} \text{Minimize} &amp;amp; \sum_{i=1}^{m} b_{i} y_{i} &amp;amp; \text{(Dual)} \\ \text{subject to} &amp;amp; \sum_{i=1}^{m} y_{i} a_{ij} \ge c_{j} &amp;amp; j = 1 ,\cdots , n \\ &amp;amp; y_{i} \ge</description></item><item><title>線形計画法における弱双対性定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/2350/</link><pubDate>Sun, 05 Mar 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2350/</guid><description>定理 $$ \begin{align*} \text{Maximize} &amp;amp; \sum_{j=1}^{n} c_{j} x_{j} &amp;amp; \text{(Primal)} \\ \text{subject to} &amp;amp; \sum_{j=1}^{n} a_{ij} x_{j} \le b_{i} &amp;amp; i = 1 ,\cdots , m \\ &amp;amp; x_{j} \ge 0 &amp;amp; j = 1, \cdots , n \end{align*} $$ $$ \begin{align*} \text{Minimize} &amp;amp; \sum_{i=1}^{m} b_{i} y_{i} &amp;amp; \text{(Dual)} \\ \text{subject to} &amp;amp; \sum_{i=1}^{m} y_{i} a_{ij} \ge c_{j} &amp;amp; j = 1 ,\cdots , n \\ &amp;amp; y_{i} \ge</description></item><item><title>指数分布の十分統計量と最尤推定量</title><link>https://freshrimpsushi.github.io/jp/posts/2349/</link><pubDate>Fri, 03 Mar 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2349/</guid><description>定理 指数分布に従うランダムサンプル $\mathbf{X} := \left( X_{1} , \cdots , X_{n} \right) \sim \exp \left( \lambda \right)$ が与えられているとする。 $\lambda$ に関する十分統計量 $T$ と最尤推定量 $\hat{\lambda}$ は以下の通りである</description></item><item><title>線形計画法における双対性</title><link>https://freshrimpsushi.github.io/jp/posts/2348/</link><pubDate>Wed, 01 Mar 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2348/</guid><description>ビルドアップ $x_{1} , x_{2} \ge 0$ について、次のような線形計画問題があるとしよう。 $$ \begin{matrix} \text{Maximize} &amp;amp; &amp;amp; 2x_{1} &amp;amp; + &amp;amp; 3x_{2} \\ \text{subject to} &amp;amp; &amp;amp; 4x_{1} &amp;amp; + &amp;amp; 8x_{2} &amp;amp; \le &amp;amp; 12 \\ &amp;amp; &amp;amp; 2x_{1} &amp;amp; + &amp;amp; x_{2} &amp;amp; \le &amp;amp;</description></item><item><title>ポアソン分布の十分統計量と最尤推定量</title><link>https://freshrimpsushi.github.io/jp/posts/2347/</link><pubDate>Mon, 27 Feb 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2347/</guid><description>定理 ポアソン分布に従うランダムサンプル $\mathbf{X} := \left( X_{1} , \cdots , X_{n} \right) \sim \text{Poi} \left( \lambda \right)$ が与えられたとしよう。 $\lambda$ に対する十分統計量 $T$ と最尤推定量 $\hat{\lambda}$ は次の通りだ。 $$</description></item><item><title>線形計画法の基本定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/2346/</link><pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2346/</guid><description>定理 方程式形式の線形計画問題に関して、次の三つのうち一つは真である。 (1): もし最適解が存在しない場合、問題自体が不可解infeasibleまたは</description></item><item><title>幾何分布の十分統計量と最尤推定量</title><link>https://freshrimpsushi.github.io/jp/posts/2345/</link><pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2345/</guid><description>要旨 幾何分布に従うランダムサンプル $\mathbf{X} := \left( X_{1} , \cdots , X_{n} \right) \sim \text{Geo} \left( p \right)$ が与えられたとする。$p$ に対する十分統計量 $T$ と最尤推定量 $\hat{p}$ は次のとおりである</description></item><item><title>シンプレックス法のブランドのルール</title><link>https://freshrimpsushi.github.io/jp/posts/2344/</link><pubDate>Tue, 21 Feb 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2344/</guid><description>要旨 辞書において、$i = 1 , \cdots , m$に対する以下の形式の方程式の組み合わせを辞書dictionaryという。 $$ \begin{align*} \zeta &amp;amp;=&amp;amp; &amp;amp; &amp;amp; \sum_{j=1}^{n} c_{j} x_{j} \\ x_{n+i} &amp;amp;=&amp;amp; b_{i} &amp;amp;-&amp;amp; \sum_{j=1}^{n} a_{ij}</description></item><item><title>二項分布の十分統計量と最尤推定量</title><link>https://freshrimpsushi.github.io/jp/posts/2343/</link><pubDate>Sun, 19 Feb 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2343/</guid><description>概要 一様分布に従うランダムサンプル $\mathbf{X} := \left( X_{1} , \cdots , X_{n} \right) \sim U \left( 0 , \theta \right)$ が与えられているとしよう。 $\theta$ に対する十分統計量 $T$ と最尤推定量 $\hat{\theta}$ は次の通りだ</description></item><item><title>シンプレックス・メソッドのサイクリング</title><link>https://freshrimpsushi.github.io/jp/posts/2342/</link><pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2342/</guid><description>定義 $$ \begin{matrix} \text{Maximize} &amp;amp; \mathbf{c}^{T} \mathbf{x} \\ \text{subject to} &amp;amp; A \mathbf{x} = \mathbf{b} \\ &amp;amp; \mathbf{x} \ge \mathbf{0} \end{matrix} $$ 行列 $A \in \mathbb{R}^{m \times n}$、$\mathbf{b} \in \mathbb{R}^{m \times 1}$、そして$\mathbf{c} \in \mat</description></item><item><title>Juliaで条件文を簡潔に書く方法</title><link>https://freshrimpsushi.github.io/jp/posts/2341/</link><pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2341/</guid><description>概要 Juliaで、&amp;lt;condition&amp;gt; &amp;amp;&amp;amp; &amp;lt;statement&amp;gt;は&amp;lt;condition&amp;gt;が真のとき&amp;lt</description></item><item><title>線形計画法における目的関数の無限大</title><link>https://freshrimpsushi.github.io/jp/posts/2340/</link><pubDate>Mon, 13 Feb 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2340/</guid><description>説明 $$ \begin{matrix} \text{Maximize} &amp;amp; \mathbf{c}^{T} \mathbf{x} \\ \text{subject to} &amp;amp; A \mathbf{x} = \mathbf{b} \\ &amp;amp; \mathbf{x} \ge \mathbf{0} \end{matrix} $$ 行列 $A \in \mathbb{R}^{m \times n}$と$\mathbf{b} \in \mathbb{R}^{m \times 1}$と$\mathbf{c} \in \mathbb</description></item><item><title>シンプレックス法の初期化と補助問題</title><link>https://freshrimpsushi.github.io/jp/posts/2338/</link><pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2338/</guid><description>ビルドアップ $$ \begin{matrix} \text{Maximize} &amp;amp; \mathbf{c}^{T} \mathbf{x} \\ \text{subject to} &amp;amp; A \mathbf{x} = \mathbf{b} \\ &amp;amp; \mathbf{x} \ge \mathbf{0} \end{matrix} $$ 行列 $A \in \mathbb{R}^{m \times n}$、$\mathbf{b} \in \mathbb{R}^{m \times 1}$、$\mathbf{c} \in \ma</description></item><item><title>ユニモーダル分布の最短信頼区間</title><link>https://freshrimpsushi.github.io/jp/posts/2337/</link><pubDate>Tue, 07 Feb 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2337/</guid><description>定理 ユニモーダル関数の定義 関数 $f : \mathbb{R} \to \mathbb{R}$ が $x \le x^{\ast}$ で減少せず、$x \ge x^{\ast}$ で増加しないようにする モード $x^{\ast}$ が存在する場合、$f$ は ユニモーダル と呼ぶ</description></item><item><title>線形計画法のシンプレックス法</title><link>https://freshrimpsushi.github.io/jp/posts/2336/</link><pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2336/</guid><description>ビルドアップ 1 $x_{1} , x_{2} \ge 0$ に関して、次の線形計画問題が与えられたとしよう。 $$ \begin{matrix} \text{Maximize} &amp;amp; &amp;amp; x_{1} &amp;amp; + &amp;amp; x_{2} \\ \text{subject to} &amp;amp;-&amp;amp; x_{1} &amp;amp; + &amp;amp; x_{2} &amp;amp; \le &amp;amp; 1 \\ &amp;amp; &amp;amp; x_{1} &amp;amp; &amp;amp; &amp;amp; \le &amp;amp; 3 \\</description></item><item><title>確率的増減関数と信頼区間</title><link>https://freshrimpsushi.github.io/jp/posts/2335/</link><pubDate>Fri, 03 Feb 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2335/</guid><description>定理 1 確率的単調関数の定義 累積分布関数$F \left( t ; \theta \right)$が$\theta$に対して増加（減少）関数ならば確率的増加（減少）関数とい</description></item><item><title>線形計画法における辞書と表</title><link>https://freshrimpsushi.github.io/jp/posts/2334/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2334/</guid><description>ノーテーション $$ \begin{matrix} \text{Maximize} &amp;amp; \mathbf{c}^{T} \mathbf{x} \\ \text{subject to} &amp;amp; A \mathbf{x} = \mathbf{b} \\ &amp;amp; \mathbf{x} \ge \mathbf{0} \end{matrix} $$ matrix $A \in \mathbb{R}^{m \times n}$、$\mathbf{b} \in \mathbb{R}^{m \times 1}$、$\mathbf{c} \in \ma</description></item><item><title>最も正確な信頼集合</title><link>https://freshrimpsushi.github.io/jp/posts/2333/</link><pubDate>Mon, 30 Jan 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2333/</guid><description>定義 1 $\theta$に対する仮説検定の$1 - \alpha$信頼集合を$C \left( \mathbf{x} \right)$とし、受容域を$A \left( \theta \right) = C \left( \mathbf{x} \right)</description></item><item><title>仮説検定と信頼集合の一対一対応関係</title><link>https://freshrimpsushi.github.io/jp/posts/2332/</link><pubDate>Sat, 28 Jan 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2332/</guid><description>定理 パラメータ空間 $\Theta$ と空間 $\mathcal{X}$ が与えられているとしよう。 各々の $\theta_{0} \in \Theta$ に対して、$A \left( \theta_{0} \right)$ を仮説検定 $H_{0} : \theta = \theta_{0}$のレベル $\alpha$ 棄却</description></item><item><title>数理統計学におけるピボットの定義</title><link>https://freshrimpsushi.github.io/jp/posts/2331/</link><pubDate>Thu, 26 Jan 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2331/</guid><description>定義 1 確率変数 $Q \left( \mathbf{X} ; \theta \right) := Q \left( X_{1} , \cdots , X_{n} ; \theta \right)$ の確率分布が全てのパラメータ $\theta$ に独立ならば、$Q$ を ピボットpivot または ピボタル量piv</description></item><item><title>JuliaのデータフレームでNaNを0に置き換える方法</title><link>https://freshrimpsushi.github.io/jp/posts/2330/</link><pubDate>Tue, 24 Jan 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2330/</guid><description>概要 特定の値に変更する方法は、列ごとに変更するので不便で、データフレーム全体でNaNを扱うときはもっといいトリックを使ってみる価値がある。 コ</description></item><item><title>数理統計的な信頼集合の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2329/</link><pubDate>Sun, 22 Jan 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2329/</guid><description>定義 1 パラメータ $\theta$ の区間推定値 $\left[ L \left( \mathbf{X} \right), U \left( \mathbf{X} \right) \right]$ において、以下をカバレッジ確率coverage Probabilityと呼ぶ。 $$ P_{\theta} \left( \theta \in \left[ L</description></item><item><title>Juliaの三項演算子 ? :</title><link>https://freshrimpsushi.github.io/jp/posts/2328/</link><pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2328/</guid><description>概要 JuliaでのA ? B : Cは、いわゆる三項演算子ternary Operatorで、Aが真ならB、偽ならCを返す関数だ。数学的に二項演算が関</description></item><item><title>区間推定量</title><link>https://freshrimpsushi.github.io/jp/posts/2327/</link><pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2327/</guid><description>定義 1 パラメーター$\theta \in \mathbb{R}$に対して、順序対$\left( L \left( x_{1} , \cdots , x_{n} \right), U \left( x_{1} , \cdots , x_{n} \right) \right)$が全て</description></item><item><title>Juliaでのデータフレーム特定値の変更方法</title><link>https://freshrimpsushi.github.io/jp/posts/2326/</link><pubDate>Mon, 16 Jan 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2326/</guid><description>概要 replace!() メソッドを使えばいい1。最初の引数には変更するデータフレームのカラムが入り、二番目の引数にはペア [ペア](../2201) A =&amp;gt; B` が入る</description></item><item><title>SIRD モデル：死亡と致死率</title><link>https://freshrimpsushi.github.io/jp/posts/2325/</link><pubDate>Sat, 14 Jan 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2325/</guid><description>概要 SIRDモデルはSIRモデルに死亡を加えた疫学的区画モデルだ。 モデル $$ \begin{align*} {{d S} \over {d t}} =&amp;amp; - {{ \beta } \over { N }} I S \\ {{d I} \over {d t}} =&amp;amp; {{ \beta } \over { N }} S I</description></item><item><title>Juliaで周波数を計算する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2324/</link><pubDate>Thu, 12 Jan 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2324/</guid><description>概要 1 FreqTables.jlパッケージのfreqtable()関数を使えばいい。Rのfreq()関数と似た機能を持っている。 コード 配列 julia&amp;gt;</description></item><item><title>SIRVモデル：ワクチンと突破感染</title><link>https://freshrimpsushi.github.io/jp/posts/2323/</link><pubDate>Tue, 10 Jan 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2323/</guid><description>概要 SIRV モデルは、SIR モデルにワクチンを追加した疫学コンパートメントモデルです。 モデル $$ \begin{align*} {{d S} \over {d t}} =&amp;amp; - {{ \beta } \over { N }} I S - vS \\ {{d I} \over {d t}} =&amp;amp;</description></item><item><title>JuliaでCSVファイルから列だけを読み込む方法</title><link>https://freshrimpsushi.github.io/jp/posts/2322/</link><pubDate>Sun, 08 Jan 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2322/</guid><description>ガイド 上のようなexample.csvファイルがあるとしよう。このデータフレームに読み込むとき、データ全体ではなく、列名だけを保持し、中身が</description></item><item><title>SEIRモデル：潜伏期と潜在期</title><link>https://freshrimpsushi.github.io/jp/posts/2321/</link><pubDate>Fri, 06 Jan 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2321/</guid><description>概要 SEIR モデルは、SIR モデルに接触群を追加した疫学の区分モデルです。 モデル 1 2 $$ \begin{align*} {{d S} \over {d t}} =&amp;amp; - {{ \beta } \over { N }} I S \\ {{d E} \over {d t}} =&amp;amp; {{ \beta } \over { N</description></item><item><title>Juliaでデータフレームの要約を見る方法</title><link>https://freshrimpsushi.github.io/jp/posts/2320/</link><pubDate>Wed, 04 Jan 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2320/</guid><description>ガイド 1 using RDatasets iris = dataset(&amp;#34;datasets&amp;#34;, &amp;#34;iris&amp;#34;) describe(iris) describe() 関数を使えばいい。iris データを要約してみよう。 julia&amp;gt; describe(iris) 5×7 DataFrame Row │ variable mean min median max nmissing eltype │ Symbol Union… Any Union… Any Int64 DataType</description></item><item><title>対角行列積を通した行列の行別、列別スカラップ</title><link>https://freshrimpsushi.github.io/jp/posts/2319/</link><pubDate>Mon, 02 Jan 2023 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2319/</guid><description>定理 対角行列 $D := \text{diag} \left( d_{1} , \cdots , d_{n} \right)$ と 行列 $A := \left( a_{ij} \right) \in \mathbb{C}^{n \times n}$ について、以下が成り立つ。 $$ \begin{align*} D A =&amp;amp; \begin{bmatrix} d_{1} a_{11} &amp;amp; d_{1} a_{12} &amp;amp; \cdots &amp;amp; d_{1} a_{1n} \\ d_{2} a_{21} &amp;amp; d_{2} a_{22} &amp;amp; \cdots &amp;amp; d_{2} a_{2n} \\ \vdots</description></item><item><title>Juliaのカテゴリカル配列</title><link>https://freshrimpsushi.github.io/jp/posts/2318/</link><pubDate>Sat, 31 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2318/</guid><description>概要 JuliaのCategoricalArrays.jlパッケージは、Rのfactorと似た機能を果たす。 コード julia&amp;gt; A = [&amp;#34;red&amp;#34;, &amp;#34;blue&amp;#34;, &amp;#34;red&amp;#34;, &amp;#34;green&amp;#34;] 4-element Vector{String}: &amp;#34;red&amp;#34; &amp;#34;blue&amp;#34; &amp;#34;red&amp;#34; &amp;#34;green&amp;#34; julia&amp;gt;</description></item><item><title>シンプレックスの定義</title><link>https://freshrimpsushi.github.io/jp/posts/2317/</link><pubDate>Thu, 29 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2317/</guid><description>定義 1 アフィン独立(../2315)な $v_{0}, v_{1} , \cdots , v_{n} \in \mathbb{R}^{n+1}$ の 凸包を $n$-シンプレックス$n$-simplex $\Delta^{n}$ と言い、ベクトル $v_{k}$ を 頂点vert</description></item><item><title>JuliaでRで使用されていた組み込みデータセットを読み込む方法</title><link>https://freshrimpsushi.github.io/jp/posts/2316/</link><pubDate>Tue, 27 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2316/</guid><description>ガイド RDatasets.jl パッケージを使えば大丈夫。以下は最も簡単な iris データセットを読み込む例です。基本組み込みデータセットの他にも様々なデータセットが含まれ</description></item><item><title>アフィン独立の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2315/</link><pubDate>Sun, 25 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2315/</guid><description>説明 アフィンaffineって言葉がついてると、だいたい平行移動に関連する何かだ。定義でベクトル $v_{0}$ を引くことが、その平行移動に当たるんだ。 数学</description></item><item><title>レズリーの年齢構造モデル</title><link>https://freshrimpsushi.github.io/jp/posts/2314/</link><pubDate>Fri, 23 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2314/</guid><description>定義 1 集団に$m \in \mathbb{N}$段階の年齢があるとしよう。そして、時点$t$での$a \in \left\{ 1 , \cdots , m \right\}$段階の人口の数を</description></item><item><title>Juliaでパッケージバージョンを確認する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2313/</link><pubDate>Wed, 21 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2313/</guid><description>ガイド 例としてPlots.jlパッケージのバージョンを確認してみよう。REPLで]キーを押すとパッケージモードに入る。ここでstatus fo</description></item><item><title>ポーカー・プランク方程式の導出</title><link>https://freshrimpsushi.github.io/jp/posts/2312/</link><pubDate>Mon, 19 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2312/</guid><description>定理 $$ d X_{t} = f \left( t, X_{t} \right) dt + g \left( t , X_{t} \right) d W_{t} \qquad , t \in \left[ t_{0} , T \right] $$ 確率微分方程式が上記のように与えられ、$F \in C_{0}^{\infty} \left( \mathbb{R} \right)$とする。そう</description></item><item><title>Juliaで配列が空かどうかを確認する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2311/</link><pubDate>Sat, 17 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2311/</guid><description>概要 isempty() 関数を使用すればいい。 コード julia&amp;gt; isempty([]) true julia&amp;gt; isempty(Set()) true julia&amp;gt; isempty(&amp;#34;&amp;#34;) true タイトルでは配列とされているが、実際には集合や文字列でも良い。 最適化 もちろん配列が空かど</description></item><item><title>ホモロジー群の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2310/</link><pubDate>Thu, 15 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2310/</guid><description>定義 1 2 $n \in \mathbb{N}_{0}$ とする。アーベル群 $C_{n}$ とホモモルフィズム $\partial_{n} : C_{n} \longrightarrow C_{n-1}$ のチェーン $$ \cdots \longrightarrow C_{n+1} \overset{\partial_{n+1}}{\longrightarrow} C_{n} \overset{\partial_{n}}{\longrightarrow} C_{n-1} \longrightarrow \cdots \longrightarrow C_{1} \overset{\partial_{1}}{\longrightarrow} C_{0} \overset{\partial_{0}}{\longrightarrow} 0 $$ が全ての $n$ に対して $$ \partial_{n} \circ \partial_{n+1} = 0 $$ を</description></item><item><title>Juliaで例外処理する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2309/</link><pubDate>Tue, 13 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2309/</guid><description>概要 地の果てまで一人で居る辛さを知ってる人は、ああ、分かるんだ コーディング中にわからないエラーに苦労した人は、プログラミングにおいてエラーが</description></item><item><title>ゼロ射変換</title><link>https://freshrimpsushi.github.io/jp/posts/2308/</link><pubDate>Sun, 11 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2308/</guid><description>定義 1 $$ W \to X \overset{f}{\to} Y \to Z $$ モルフィズムmorphism $f : X \to Y$ を考えてみよう。 すべてのモルフィズム $g,h : W \to X$ に対し $fg = fh$ ならば $f$ を 定数モルフ</description></item><item><title>Juliaでデータフレームのサイズを確認する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2307/</link><pubDate>Fri, 09 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2307/</guid><description>概要 nrow(), ncol(), size() を使用できる。Rと違って、length()はエラーになる。 コード julia&amp;gt; df = DataFrame(rand(100000,5), :auto) 100000×5 DataFrame Row │ x1 x2 x3 x4 x5 │ Float64 Float64 Float64 Float64 Float64 ──────</description></item><item><title>抽象代数学における自由群</title><link>https://freshrimpsushi.github.io/jp/posts/2306/</link><pubDate>Wed, 07 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2306/</guid><description>定義 1 インデックス集合 $I \ne \emptyset$ に対して、集合 $A := \left\{ a_{i} : i \in I \right\}$ を アルファベットalphabetと呼び、その要素 $a_{i} \in A$ を レターletterとしよ</description></item><item><title>Juliaで変数名をカラム名として持つデータフレームを作成する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2305/</link><pubDate>Mon, 05 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2305/</guid><description>概要 ネームド・タプルが使える。ネームド・タプルを作る方法は、左の括弧のすぐ後ろにセミコロン;をつけることだ。例えば、DataFrame(; x,</description></item><item><title>数理統計的な有意確率の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2304/</link><pubDate>Sat, 03 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2304/</guid><description>定義 1 仮説検定 $H_{0} \text{ vs } H_{1}$が与えられているとしよう。全ての実現 $\mathbf{x} \in \Omega$に対して$0 \le p \left( \mathbf{x} \right) \le 1$を満たす検定統計量 $p \left( \mathbf{X}</description></item><item><title>Juliaのネームドタプル</title><link>https://freshrimpsushi.github.io/jp/posts/2303/</link><pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2303/</guid><description>概要 名前付きタプルは、一般的なタプルとは異なり、辞書や構造体のように使用できるタプルだ。シンボルの配列をキーとして持ち、キーを使ってバリュー</description></item><item><title>微分演算子行列を通じたポアソン過程の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2302/</link><pubDate>Tue, 29 Nov 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2302/</guid><description>定義 $\lambda &amp;gt; 0$が与えられたとする。$X(0) = 0$を満たし、次のような微小確率infinitesimal Probabilitiesを持つ連続確</description></item><item><title>十分統計量を含む最強力検定</title><link>https://freshrimpsushi.github.io/jp/posts/2301/</link><pubDate>Sun, 27 Nov 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2301/</guid><description>定理 仮説検定: $$ \begin{align*} H_{0} :&amp;amp; \theta = \theta_{0} \\ H_{1} :&amp;amp; \theta = \theta_{1} \end{align*} $$ このような仮説検定では、十分統計量 $T$ の $\theta_{0}, \theta_{1}$ に対する確率密度関数または確率質量関数を $g \left( t | \theta_{0} \right), g</description></item><item><title>線形代数学でのF-ベクトル空間</title><link>https://freshrimpsushi.github.io/jp/posts/2300/</link><pubDate>Fri, 25 Nov 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2300/</guid><description>定義 環 $R = F$ がフィールドである$R$-モジュールを $F$-ベクトル空間$F$-vector spaceと言います。 説明 洗練された定義を感じさせ</description></item><item><title>カリン-ルビン定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/2299/</link><pubDate>Wed, 23 Nov 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2299/</guid><description>定理 仮説検定: $$ \begin{align*} H_{0} :&amp;amp; \theta \le \theta_{0} \\ H_{1} :&amp;amp; \theta &amp;gt; \theta_{0} \end{align*} $$ このような仮説検定では、$T$ を $\theta$ の十分統計量と言い、$t$ の確率密度関数または確率質量関数のフ</description></item><item><title>R-加群における抽象代数</title><link>https://freshrimpsushi.github.io/jp/posts/2298/</link><pubDate>Mon, 21 Nov 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2298/</guid><description>定義 1 アーベル群$(G,+)$(../309)と乗法の単位元$1 \ne 0$を持つリング$(R,+,\cdot)$(../587)が二項演算$$ \mu</description></item><item><title>単調確率の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2297/</link><pubDate>Sat, 19 Nov 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2297/</guid><description>定義 パラメーター$\theta \in \mathbb{R}$と一変量確率変数$T$に関する確率質量関数または確率密度関数のファミリーを$G := \left\{ g (</description></item><item><title>元素列挙法におけるハット記法</title><link>https://freshrimpsushi.github.io/jp/posts/2296/</link><pubDate>Thu, 17 Nov 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2296/</guid><description>説明 $$ \left\{ 1, \cdots , \hat{k} , \cdots , n \right\} $$ 集合を表す時、上のように特定のインデックスにハットを乗せる場合があって、その元を省く意味だ。例えば、$\left</description></item><item><title>ネイマン-ピアソン補助定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/2295/</link><pubDate>Tue, 15 Nov 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2295/</guid><description>定理 仮説検定: $$ \begin{align*} H_{0} :&amp;amp; \theta = \theta_{0} \\ H_{1} :&amp;amp; \theta = \theta_{1} \end{align*} $$ 上記の仮説検定において、$\theta_{0}, \theta_{1}$の確率密度関数または確率質</description></item><item><title>一変量確率変数のサンプリング方法</title><link>https://freshrimpsushi.github.io/jp/posts/2294/</link><pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2294/</guid><description>概要 確率変数の具体的な実現を求める方法だ。 定理 単変量確率変数 $T$ の累積分布関数 $F = F_{T}$ が増加関数だとする。そうすると、一様分布に従う確率変数 $U \sim</description></item><item><title>不便検定力関数と最強力検定</title><link>https://freshrimpsushi.github.io/jp/posts/2293/</link><pubDate>Fri, 11 Nov 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2293/</guid><description>定義 1 仮説検定: $$ \begin{align*} H_{0} :&amp;amp; \theta \in \Theta_{0} \\ H_{1} :&amp;amp; \theta \in \Theta_{0}^{c} \end{align*} $$ 検定力関数 $\beta (\theta)$が全ての$\theta_{0} \in \Theta_{0}$と$\th</description></item><item><title>スペクトル半径の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2292/</link><pubDate>Wed, 09 Nov 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2292/</guid><description>定義 行列 $A \in \mathbb{C}^{n \times n}$ の 固有値 $\lambda_{1} , \cdots , \lambda_{n}$ の中で 絶対値 が最も大きい固有値 $\rho (A) = \argmax_{\lambda} \left| \lambda \right|$ をスペクトル半径spectral Radiusと言う。 説明 普通</description></item><item><title>仮説検定の検定力関数</title><link>https://freshrimpsushi.github.io/jp/posts/2291/</link><pubDate>Mon, 07 Nov 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2291/</guid><description>定義 1 仮説検定: $$ \begin{align*} H_{0} :&amp;amp; \theta \in \Theta_{0} \\ H_{1} :&amp;amp; \theta \in \Theta_{0}^{c} \end{align*} $$ このような仮説検定が与えられていて、$\alpha \in [0,1]$ とする。 パラメータ $\theta$ に対して、棄却域が $R$</description></item><item><title>ジレスピ確率シミュレーションアルゴリズム</title><link>https://freshrimpsushi.github.io/jp/posts/2290/</link><pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2290/</guid><description>アルゴリズム 1 $\mathbf{x}_{t} = i$について、 $$ P \left( \mathbf{X}_{t + \tau} = j | \mathbf{x}_{t} = i \right) = a_{j} \left( \mathbf{x}_{t} \right) \qquad , j = 1, \cdots , n $$ 連続マルコフ連鎖 $\left\{ \mathbf{X}_{t} \right\}$の実現をシミュレ</description></item><item><title>十分統計量を含む尤度比検定</title><link>https://freshrimpsushi.github.io/jp/posts/2289/</link><pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2289/</guid><description>定理 仮説検定: $$ \begin{align*} H_{0} :&amp;amp; \theta \in \Theta_{0} \\ H_{1} :&amp;amp; \theta \in \Theta_{0}^{c} \end{align*} $$ 尤度比検定統計量: $$ \lambda \left( \mathbf{x} \right) := {{ \sup_{\Theta_{0}} L \left( \theta \mid \mathbf{x} \right) } \over { \sup_{\Theta} L \left( \theta \mid \mathbf{x} \right) }} $$ $T \left( \mathbf{X} \right)$がパ</description></item><item><title>コルモゴロフ微分方程式の導出</title><link>https://freshrimpsushi.github.io/jp/posts/2288/</link><pubDate>Tue, 01 Nov 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2288/</guid><description>定理 遷移確率行列$P(t)$と微分行列$Q$について、次の微分方程式が成立する。 $$ {{ d P(t) } \over { dt }} = Q P(t) = P(t) Q $$ 説明 特に区別するなら、$dP</description></item><item><title>数理統計学における尤度比検定の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2287/</link><pubDate>Sun, 30 Oct 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2287/</guid><description>定義 1 $$ \begin{align*} H_{0} :&amp;amp; \theta \in \Theta_{0} \\ H_{1} :&amp;amp; \theta \in \Theta_{0}^{c} \end{align*} $$ 上記の仮説検定について、次の統計量 $\lambda$ を 尤度比検定統計量likelihood Ratio test statisticと言う。</description></item><item><title>連続マルコフ連鎖</title><link>https://freshrimpsushi.github.io/jp/posts/2286/</link><pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2286/</guid><description>定義 全ての時点の有限シーケンス $0 \le t_{0} \le \cdots \le t_{n} \le t_{n+1}$ に対して状態空間が可算集合であり、次を満たす連続的確率過程 $\left\{ X_{t} \right\}$ を連続マルコフ連鎖cTMCと</description></item><item><title>ロケーションファミリーの十分統計量と最尤推定量</title><link>https://freshrimpsushi.github.io/jp/posts/2285/</link><pubDate>Wed, 26 Oct 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2285/</guid><description>定理 確率密度関数が$f_{X} \left( x ; \theta \right) = f_{X} \left( x - \theta \right)$であるロケーションファミリーから得たランダムサンプル$X_{1} , \cdots , X_{n}</description></item><item><title>確率過程の遷移確率</title><link>https://freshrimpsushi.github.io/jp/posts/2284/</link><pubDate>Mon, 24 Oct 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2284/</guid><description>定義 状態空間が可算集合の確率過程 $\left\{ X_{t} \right\}$ が与えられているとする。 二つの時点 $t_{1} &amp;lt; t_{2}$ に対して、遷移確率 $p_{ij} \left( t_{1} , t_{2} \right)$ を次のように定義する。 $$ p_{ij} \left( t_{1} ,</description></item><item><title>数理統計的な仮説検定の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2283/</link><pubDate>Sat, 22 Oct 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2283/</guid><description>定義 1 パラメーターに関する命題を仮説hypothesisという。 与えられたサンプルに基づき仮説$H_{0}$を真と受け入れるか、仮説$H_{</description></item><item><title>ターミナルでテキストファイルのエンコーディングを確認する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2282/</link><pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2282/</guid><description>ガイド 1 この方法を使用するには、Pythonがインストールされている必要がある。ターミナルにpip install chardetと入力してchardetを</description></item><item><title>ランダムサンプルの標本平均の平均と分散</title><link>https://freshrimpsushi.github.io/jp/posts/2281/</link><pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2281/</guid><description>説明 簡単すぎて、実際に簡単だからって適当に考えてると、突然聞かれると意外と混乱して恥ずかしいのがまさに標本平均の平均と分散だ。少しだけ頭を使</description></item><item><title>Juliaでコマンドライン引数を挿入する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2280/</link><pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2280/</guid><description>日本語訳 コード println(ARGS[1] * &amp;#34; + &amp;#34; * ARGS[2] * &amp;#34; = &amp;#34; * string(parse(Float64, ARGS[1]) + parse(Float64, ARGS[2]))) 上記の通り、example.jlというファイルが1行で構成されているとしよう。Juliaでは</description></item><item><title>唯一の最尤推定量は十分統計量に依存する</title><link>https://freshrimpsushi.github.io/jp/posts/2279/</link><pubDate>Fri, 14 Oct 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2279/</guid><description>定理 もしパラメータ $\theta$ に対する十分統計量 $T$ が存在し、$\theta$ の最尤推定量 $\hat{\theta}$ が一意に存在するなら、$\hat{\theta}$ は $T$ の関数</description></item><item><title>Juliaで外部プログラムを実行する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2278/</link><pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2278/</guid><description>コード ジュリアでは、run() 関数を通じてバックティックbacktick `で囲まれた文字列を実行する。Pythonでは os モジュールの os.system() を使っ</description></item><item><title>レマン-シェップの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/2277/</link><pubDate>Mon, 10 Oct 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2277/</guid><description>定理 1 2 完備 十分 統計量に従属する不偏推定量は一意的である。つまり、$\theta$ の完備十分統計量 $T$ について、もし $E \left[ \phi (T) \right] = \tau (\theta)$ ならば $\phi (T)$</description></item><item><title>Juliaで文字列を数値に変換する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2276/</link><pubDate>Sat, 08 Oct 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2276/</guid><description>コード parse(type, str)を使えばいいんだ。文字列strをtypeタイプの数字に変更してくれる。 julia&amp;gt; parse(Int, &amp;#34;21&amp;#34;) 21 julia&amp;gt; parse(Float64, &amp;#34;3.14&amp;#34;) 3.14 なんでPythonみたいにInt64(</description></item><item><title>最小分散不偏推定量の一意性</title><link>https://freshrimpsushi.github.io/jp/posts/2275/</link><pubDate>Thu, 06 Oct 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2275/</guid><description>定理 1 もし$W$が$\tau (\theta)$の最良不偏推定量だったら、$W$は唯一無二である。 証明 コーシー・シュヴァルツの不等式：確率変数</description></item><item><title>数理統計学におけるコーシー-シュワルツの不等式の証明</title><link>https://freshrimpsushi.github.io/jp/posts/2274/</link><pubDate>Tue, 04 Oct 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2274/</guid><description>定理 確率変数について$X, Y$が成立する。 $$ \operatorname{Cov} (X,Y) \le \Var X \Var Y $$ 等号が成立する必要十分条件は以下の通りだ1。 $$ \exist a \ne 0 , b \in \mathbb{R} : a X + b = Y $$ 証</description></item><item><title>最良不偏推定量、最小分散不偏推定量 UMVUE</title><link>https://freshrimpsushi.github.io/jp/posts/2273/</link><pubDate>Sun, 02 Oct 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2273/</guid><description>定義 1 パラメータ $\theta$ が与えられているとする。偏りのない推定量 $W^{\ast}$ が、他の全ての偏りのない推定量 $W$ に対して以下を満たす場合、それを 最良偏りのない推</description></item><item><title>ガルトン＝ワトソン過程</title><link>https://freshrimpsushi.github.io/jp/posts/2272/</link><pubDate>Fri, 30 Sep 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2272/</guid><description>定義 1 基礎再生産率basic Reproductive rate$m = EX &amp;lt; \infty$の確率変数$X$が与えられたとする。 ブランチングプロセスの$n$世代generation</description></item><item><title>不偏推定量とクラメール・ラオの限界</title><link>https://freshrimpsushi.github.io/jp/posts/2271/</link><pubDate>Wed, 28 Sep 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2271/</guid><description>定理 正則条件: (R0): 確率密度関数 $f$ は $\theta$ について単射である。次の式を満たす。 $$ \theta \ne \theta ' \implies f \left( x_{k} ; \theta \right) \ne f \left( x_{k} ; \theta ' \right) $$ (R1): 確率密度関数 $f$ は全ての $\theta$ に</description></item><item><title>分岐過程</title><link>https://freshrimpsushi.github.io/jp/posts/2270/</link><pubDate>Mon, 26 Sep 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2270/</guid><description>説明 定義を読めば分かる通り、ブランチング・プロセスは非常に多くの場所に適用されているから、それら全てを包含する形式的な定義を下すのが難しいん</description></item><item><title>最尤推定量の不変性の証明</title><link>https://freshrimpsushi.github.io/jp/posts/2269/</link><pubDate>Sat, 24 Sep 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2269/</guid><description>정리 最尤推定量は、関数を取ることに関して不変invariantだ。つまり、もし$\hat{\theta}$がパラメータ$\theta$の最尤</description></item><item><title>スターリンソート</title><link>https://freshrimpsushi.github.io/jp/posts/2268/</link><pubDate>Thu, 22 Sep 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2268/</guid><description>アルゴリズム 1 長さが$n$の配列が与えられたとしよう。配列を前から後ろまで読んで、後ろの要素が前の要素より大きい場合に削除を繰り返すと、&amp;l</description></item><item><title>サタスウェイトの近似</title><link>https://freshrimpsushi.github.io/jp/posts/2267/</link><pubDate>Tue, 20 Sep 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2267/</guid><description>ビルドアップ 自由度が$r_{k}$のカイ二乗分布に従う独立した$n$個の確率変数$Y_{k} \sim \chi_{r_{k}}^{2}$があるとしよ</description></item><item><title>Juliaで可変引数関数を定義する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2266/</link><pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2266/</guid><description>概要 1 可変引数関数とは、プログラミングで一般にVarargs Functionと呼ばれるもので、複数の引数を制限なく受け入れることができる関数</description></item><item><title>ロケーション-スケール族の補助統計量</title><link>https://freshrimpsushi.github.io/jp/posts/2265/</link><pubDate>Fri, 16 Sep 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2265/</guid><description>定理 1 $X_{1} , \cdots , X_{n}$がロケーションファミリーであり、かつスケールファミリーから来るランダムサンプルであるとしよう。二つの統計量 $T_{1} \left( X_{1} ,</description></item><item><title>Juliaのコンテナ内部の要素タイプをチェックする方法</title><link>https://freshrimpsushi.github.io/jp/posts/2264/</link><pubDate>Wed, 14 Sep 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2264/</guid><description>概要 eltype() 関数を使うだけだ。多分 element typeからきた名前だろう。 コード julia&amp;gt; set_primes = Set([2,3,5,7,11,13]) Set{Int64} with 6 elements: 5 13 7 2 11 3 julia&amp;gt; arr_primes = Array([2,3,5,7,11,13]) 6-element Vector{Int64}: 2 3 5 7 11 13 次のように$13$までの</description></item><item><title>最小十分統計量が与えられた偏りのない推定量の分散は最小化される</title><link>https://freshrimpsushi.github.io/jp/posts/2263/</link><pubDate>Mon, 12 Sep 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2263/</guid><description>定理 1 パラメーター $\theta$ が与えられたとしよう。$U$ は不偏推定量、$T_{1}$ は十分統計量で、$T_{2}$ は最小十分統計量で以下のように $$ \begin{align*}</description></item><item><title>Juliaプロットの基本設定を変更する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2262/</link><pubDate>Sat, 10 Sep 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2262/</guid><description>コード default() 関数を使用すればいい。 using Plots default(size = (400,400), color = :red) default(:size, (400,400)) for key in [:size, :color], value in [(400,400), :red] default(key, value) end 普通の plot() 関数のように設定する方法と、キーとバリューを与えて一つずつ</description></item><item><title>指数族確率分布の完全統計量</title><link>https://freshrimpsushi.github.io/jp/posts/2261/</link><pubDate>Thu, 08 Sep 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2261/</guid><description>定理 1 パラメーター$\mathbf{\theta} = \left( \theta_{1} , \cdots , \theta_{k} \right)$が与えられて、ランダムサンプル$X_{1} , \cdots , X_{n}$</description></item><item><title>Juliaでデータフレームの特定の行を削除する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2260/</link><pubDate>Tue, 06 Sep 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2260/</guid><description>概要 インデックスを取るときは、Not() 関数を使用すればいいんだ1。カラム名そのままのシンボル、またはシンボルの配列を入れると、それらのカラ</description></item><item><title>モーメント法</title><link>https://freshrimpsushi.github.io/jp/posts/2259/</link><pubDate>Sun, 04 Sep 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2259/</guid><description>定義 1 与えられた分布のパラメーターを知らない場合に、モーメントを利用してパラメーターに関する連立方程式を作り、その解をパラメーターの推定値と</description></item><item><title>Juliaで図に垂直線と水平線を挿入する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2258/</link><pubDate>Fri, 02 Sep 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2258/</guid><description>概要 縦線と横線を引くには、vline!() と hline!() 関数を使用すればいい。 コード @time using Plots plot(rand(100)) hline!([0.5], linewidth = 2) vline!([25, 75], linewidth = 2) png(&amp;#34;result&amp;#34;) 線が引かれる位置は配列で渡す。配列の要</description></item><item><title>ベズーの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/2257/</link><pubDate>Wed, 31 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2257/</guid><description>定理 もし$T \left( \mathbf{X} \right)$が完結統計量であり、最小十分統計量でもあるなら、$T \left( \mathbf{X} \right)$は全ての補助統計量と独立である。 説明</description></item><item><title>Juliaでアートスタイルを作る方法</title><link>https://freshrimpsushi.github.io/jp/posts/2256/</link><pubDate>Mon, 29 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2256/</guid><description>概要 RecipesBase.jlは、ユーザーが新しい図のスタイルを自分で作れるパッケージだ。Rプログラミング言語でのggplotがそうである</description></item><item><title>十分統計量</title><link>https://freshrimpsushi.github.io/jp/posts/2255/</link><pubDate>Sat, 27 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2255/</guid><description>定義 1 $\Omega$をパラメータの集合としよう。サンプル$\mathbf{X}$の統計量$T := T \left( \mathbf{X} \right)$の確率密度関数または確</description></item><item><title>Juliaでデータフレームをグループ分けして計算する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2254/</link><pubDate>Thu, 25 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2254/</guid><description>概要 groupby()を使ってグループ別に分け、combine()を使って計算すればいいんだ1。 groupby(df, :colname) :colnameを基準にしてgroupe</description></item><item><title>スケールファミリー</title><link>https://freshrimpsushi.github.io/jp/posts/2253/</link><pubDate>Tue, 23 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2253/</guid><description>定義 累積分布関数 $F$ が全ての $x$ に対して $F_{\sigma} (x) = F \left( x / \sigma \right)$ を満たすとしよう。 $\left\{ F_{\sigma} : \sigma &amp;gt; 0 \right\}$ をスケールファミリーという。 例 1 パラメータ $\sigma$ のランダム</description></item><item><title>JuliaでDataFrameの重複した行を削除する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2252/</link><pubDate>Sun, 21 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2252/</guid><description>概要 これを実現するためには、unique()を使えばいい。正確には、重複した行を削除するというよりも、一つだけ残すことだ。 コード using DataFrames WJSN = DataFrame( member</description></item><item><title>ロケーションファミリー</title><link>https://freshrimpsushi.github.io/jp/posts/2251/</link><pubDate>Fri, 19 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2251/</guid><description>定義 累積分布関数 $F$ について $F_{\theta}$ が全ての $x$ に対し $F_{\theta} (x) = F \left( x - \theta \right)$ を満たすとする。 $\left\{ F_{\theta} : \theta \in \mathbb{R} \right\}$ をロケーションファミリーと呼ぶ。 例 1 パラメーター</description></item><item><title>Juliaでレイアウトを使ってサブプロットを描く方法</title><link>https://freshrimpsushi.github.io/jp/posts/2250/</link><pubDate>Wed, 17 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2250/</guid><description>概要 Juliaでは、サブプロットに関連するオプションはlayoutオプションを通して制御できる。 整数を入力すると、その数だけのグリッドをうま</description></item><item><title>補助統計量</title><link>https://freshrimpsushi.github.io/jp/posts/2249/</link><pubDate>Mon, 15 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2249/</guid><description>定義 1 $S$がサンプルの$\mathbf{X}$の統計量だとしよう。$S \left( \mathbf{X} \right)$の分布が母数$\theta$に依存しない場合、補</description></item><item><title>Juliaで図の凡例の位置を調整する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2248/</link><pubDate>Sat, 13 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2248/</guid><description>概要 1 plot() 関数の legend オプションで、凡例の位置を自由に調整できる。$0$ から $1$ までの値で構成された2-タプルを与えると、正確にその位置に表示される</description></item><item><title>最小十分統計量</title><link>https://freshrimpsushi.github.io/jp/posts/2247/</link><pubDate>Thu, 11 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2247/</guid><description>定義 1 $T \left( \mathbf{X} \right)$を十分統計量だとしよう。全ての別の十分統計量$T ' \left( \mathbf{X} \right)$に対して、$T \left( \mathbf{x} \right)$が$T '</description></item><item><title>Julia集合の絵のアスペクト比を調整する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2246/</link><pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2246/</guid><description>概要 1 グラフの幅と高さを調整するには、オプションにratioを入れるといい。他の推奨される別名には、aspect_ratios, axis_r</description></item><item><title>ペロン-フロベニウス定理</title><link>https://freshrimpsushi.github.io/jp/posts/2245/</link><pubDate>Sun, 07 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2245/</guid><description>定理の要約 補助定義 行列に対してパーミュテーションpermutationを適用するとは、行と列の順序を変更することを意味する。 行列$A$が縮約</description></item><item><title>JuliaでCSV出力時の文字化け解決方法</title><link>https://freshrimpsushi.github.io/jp/posts/2244/</link><pubDate>Fri, 05 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2244/</guid><description>エラー using DataFrames, CSV example = DataFrame(x = 1:10, 가 = &amp;#34;나다&amp;#34;) CSV.write(&amp;#34;example.csv&amp;#34;, example) JuliaでCSVファイルに出力するとき、上のように韓国語が文字化けする現象が見られ</description></item><item><title>指示関数の積</title><link>https://freshrimpsushi.github.io/jp/posts/2243/</link><pubDate>Wed, 03 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2243/</guid><description>定理 $x_{1} , \cdots , x_{n} \in \mathbb{R}$ と定数 $\theta \in \mathbb{R}$ について、$I_{\cdot} \left( x_{i} \right)$ の積は次のようになる。 $$ \prod_{i=1}^{n} I_{[\theta,\infty)} \left( x_{i} \right) = I_{[\theta,\infty)} \left( \min_{i \in [n]} x_{i} \right) $$ $I_{A}$ は集合 $A$ に対する指示</description></item><item><title>- ジュリアでのテキスト出力装飾パッケージ</title><link>https://freshrimpsushi.github.io/jp/posts/2242/</link><pubDate>Mon, 01 Aug 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2242/</guid><description>概要 Juliaでテキスト出力を飾るパッケージとしてCrayons.jlが知られている1。 組み込み関数だけで飾りたい場合は、printstyl</description></item><item><title>不等式の形で不等式を要約する</title><link>https://freshrimpsushi.github.io/jp/posts/2241/</link><pubDate>Sat, 30 Jul 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2241/</guid><description>定理 $x_{1} , \cdots , x_{n}$ と正の数 $a_{1} , \cdots , a_{n} &amp;gt; 0$ および定数 $\theta \in \mathbb{R}$ が与えられているとしよう。 $$ \forall i \in [n] : x_{i} &amp;lt; a_{i} \theta \iff \max_{i \in [n]} {{ x_{i} } \over { a_{i} }} &amp;lt; \theta $$ 証明 $(\implies)$ 全ての $i</description></item><item><title>Julia集合の画像に線を挿入する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2240/</link><pubDate>Thu, 28 Jul 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2240/</guid><description>コード using Plots scatter(rand(100), randn(100)) plot!([0,1],[0,1]) png(&amp;#34;example1&amp;#34;) plot!([.00,.25,.50],[-2,0,-2]) png(&amp;#34;example2&amp;#34;) θ = 0:0.01:2π plot!(.5 .+ cos.(θ)/3, 1.5sin.(θ)) png(&amp;#34;example3&amp;#34;) このコードを実行して、図に線分を入れる方法を見て</description></item><item><title>尤度関数の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2239/</link><pubDate>Tue, 26 Jul 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2239/</guid><description>定義 1 サンプル $\mathbf{X} := \left( X_{1} , \cdots , X_{n} \right)$ のジョイント確率密度関数または確率質量関数を$f(\mathbf{x}|\theta)$ としよう。その実現が</description></item><item><title>Juliaでデータフレームを並べ替える方法</title><link>https://freshrimpsushi.github.io/jp/posts/2238/</link><pubDate>Sun, 24 Jul 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2238/</guid><description>コード using DataFrames Unit1 = DataFrame( member = [&amp;#34;다영&amp;#34;,&amp;#34;루다&amp;#34;,&amp;#34;수빈&amp;#34;,&amp;#34;진숙&amp;#34;], birth = [99,97,96,99], height = [161,157,159,162]</description></item><item><title>数理統計学におけるデルタ法</title><link>https://freshrimpsushi.github.io/jp/posts/2237/</link><pubDate>Fri, 22 Jul 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2237/</guid><description>定理 定数$\theta \in \mathbb{R}$と確率変数のシーケンス$\left\{ Y_{n} \right\}_{n \in \mathbb{N}}$について、$\sqrt{n</description></item><item><title>Juliaでデータフレームに新しい行を挿入する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2236/</link><pubDate>Wed, 20 Jul 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2236/</guid><description>コード using DataFrames Unit1 = DataFrame( member = [&amp;#34;다영&amp;#34;,&amp;#34;루다&amp;#34;,&amp;#34;수빈&amp;#34;,&amp;#34;진숙&amp;#34;], birth = [99,97,96,99], height = [161,157,159,162]</description></item><item><title>スターリングの公式の統計的証明</title><link>https://freshrimpsushi.github.io/jp/posts/2235/</link><pubDate>Mon, 18 Jul 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2235/</guid><description>정리 $$ \lim_{n \to \infty} {{n!} \over {e^{n \ln n - n} \sqrt{ 2 \pi n} }} = 1 $$ 설명 スターリングの近似またはスターリングの公式stirling formulaは、統計学や物理学など</description></item><item><title>Juliaで無限大を使う方法</title><link>https://freshrimpsushi.github.io/jp/posts/2234/</link><pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2234/</guid><description>概要 Infinities.jlは、Juliaで無限大記号を使用できるように支援するパッケージだ1。科学計算のコーディングにおいて、無限大は意</description></item><item><title>t分布からF分布への導出</title><link>https://freshrimpsushi.github.io/jp/posts/2233/</link><pubDate>Thu, 14 Jul 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2233/</guid><description>定理 1 自由度$\nu &amp;gt; 0$のt分布に従う確率変数$X \sim t(\nu)$について、以下のように定義された$Y$はF分布$F (1,\nu)$に従う</description></item><item><title>Juliaで特定バージョンのパッケージをインストールする方法</title><link>https://freshrimpsushi.github.io/jp/posts/2232/</link><pubDate>Tue, 12 Jul 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2232/</guid><description>ガイド 1 (@v1.6) pkg&amp;gt; status JuMP Status `C:\Users\rmsms\.julia\environments\v1.6\Project.toml` [4076af6c] JuMP v0.20.0 REPLで]キーを押すとパッケージモードに入る。例えば、v0.20.0のバージョンのパッケージをv0.21にバージ</description></item><item><title>F分布からベータ分布を導出する</title><link>https://freshrimpsushi.github.io/jp/posts/2231/</link><pubDate>Sun, 10 Jul 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2231/</guid><description>定理 1 自由度 $r_{1} , r_{2}$ の F-分布に従う確率変数 $X \sim F \left( r_{1}, r_{2} \right)$ に対して、以下のように定義される $Y$ は、ベータ分布 $\text{Best} \left( {{ r_{1} } \over { 2 }} , {{ r_{2} } \over { 2 }} \right)$</description></item><item><title>Juliaで空のデータフレームを作成する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2230/</link><pubDate>Fri, 08 Jul 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2230/</guid><description>概要 多くの言語でデータフレームがサポートされているにも関わらず、毎回新しくてイライラすることが空の配列の作成です。 コード タイプ指定 julia&amp;gt; using DataFrames julia&amp;gt; df1</description></item><item><title>線形計画問題において最適解が存在する場合、そのうちの一つは基底実行可能解である</title><link>https://freshrimpsushi.github.io/jp/posts/2229/</link><pubDate>Wed, 06 Jul 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2229/</guid><description>定理 1 $$ \begin{matrix} \text{Maximize} &amp;amp; \mathbf{c}^{T} \mathbf{x} \\ \text{subject to} &amp;amp; A \mathbf{x} = \mathbf{b} \\ &amp;amp; \mathbf{x} \ge \mathbf{0} \end{matrix} $$ 行列 $A \in \mathbb{R}^{m \times n}$ および $\mathbf{b} \in \mathbb{R}^{m \times 1}$ と $\mathbf{c} \in \mathbb{R}^{n}$ について、線形計画問題が上のように方程式の形で表される</description></item><item><title>凸包の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2228/</link><pubDate>Mon, 04 Jul 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2228/</guid><description>定義 1 ベクトル空間 $V$ の部分集合 $X$ の凸包convex Hull $C$ とは、$X$ を含む全ての凸集合の共通部分を指し、数式では以下の通りになる。 $$ C = \left\{ \sum_{k} t_{k}</description></item><item><title>線形計画問題の方程式形式における最適解の存在証明</title><link>https://freshrimpsushi.github.io/jp/posts/2227/</link><pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2227/</guid><description>定理 1 $$ \begin{matrix} \text{Maximize} &amp;amp; \mathbf{c}^{T} \mathbf{x} \\ \text{subject to} &amp;amp; A \mathbf{x} = \mathbf{b} \\ &amp;amp; \mathbf{x} \ge \mathbf{0} \end{matrix} $$ 行列$A \in \mathbb{R}^{m \times n}$、$\mathbf{b} \in \mathbb{R}^{m \times 1}$、そして$\mathbf{c} \in \m</description></item><item><title>Julia文字列で特定のパターン位置を見つける方法</title><link>https://freshrimpsushi.github.io/jp/posts/2226/</link><pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2226/</guid><description>コード julia&amp;gt; findfirst(&amp;#34;li&amp;#34;, &amp;#34;multicolinearlity&amp;#34;) 8:9 julia&amp;gt; findlast(&amp;#34;li&amp;#34;, &amp;#34;multicolinearlity&amp;#34;) 14:15 julia&amp;gt; findnext(&amp;#34;l&amp;#34;, &amp;#34;multicolinearlity&amp;#34;, 1) 3:3 julia&amp;gt; findnext(&amp;#34;l&amp;#34;, &amp;#34;multicolinearlity&amp;#34;, 4) 8:8 julia&amp;gt; findnext(&amp;#34;l&amp;#34;, &amp;#34;multicolinearlity&amp;#34;, 9) 14:14 julia&amp;gt; findfirst(r&amp;#34;t.+t&amp;#34;, &amp;#34;multicolinearlity&amp;#34;) 4:16 findfirst(pattern, A) 文字列Aでpatternに合致する区間をRangeでリターンする。 パターンに</description></item><item><title>基底可溶性の一意性の証明</title><link>https://freshrimpsushi.github.io/jp/posts/2225/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2225/</guid><description>定理 1 $$ \begin{matrix} \text{Maximize} &amp;amp; \mathbf{c}^{T} \mathbf{x} \\ \text{subject to} &amp;amp; A \mathbf{x} = \mathbf{b} \\ &amp;amp; \mathbf{x} \ge \mathbf{0} \end{matrix} $$ 行列 $A \in \mathbb{R}^{m \times n}$ と $\mathbf{b} \in \mathbb{R}^{m \times 1}$ と $\mathbf{c} \in \mathbb{R}^{n}$ が与えられたとき、線形計画問題が上記のように方程式の形で表</description></item><item><title>Juliaで特定の文字列を含むかどうかを確認する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2224/</link><pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2224/</guid><description>コード julia&amp;gt; contains(&amp;#34;qwerty&amp;#34;, &amp;#34;er&amp;#34;) true julia&amp;gt; contains(&amp;#34;qwerty&amp;#34;, &amp;#34;et&amp;#34;) false julia&amp;gt; contains(&amp;#34;qwerty&amp;#34;, r&amp;#34;q?&amp;#34;) true contains(haystack::AbstractString, needle) haystackにneedleが含まれているかをブーリアンで返す。needleにはr&amp;quot;...&amp;q</description></item><item><title>線形計画問題の基底解</title><link>https://freshrimpsushi.github.io/jp/posts/2223/</link><pubDate>Fri, 24 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2223/</guid><description>定義 1 $$ \begin{matrix} \text{Maximize} &amp;amp; \mathbf{c}^{T} \mathbf{x} \\ \text{subject to} &amp;amp; A \mathbf{x} = \mathbf{b} \\ &amp;amp; \mathbf{x} \ge \mathbf{0} \end{matrix} $$ 行列 $A \in \mathbb{R}^{m \times n}$、$\mathbf{b} \in \mathbb{R}^{m \times 1}$、$\mathbf{c} \in \mathbb{R}^{n}$ に対して、</description></item><item><title>Juliaでの因数分解および素数関数の使用方法</title><link>https://freshrimpsushi.github.io/jp/posts/2222/</link><pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2222/</guid><description>概要 Primes.jlは、素数関連の関数や素因数分解を取り扱うパッケージだ。解析的整数論に関する関数の実装はまだ不足している。 パッケージの全</description></item><item><title>線形計画問題の方程式フォーム</title><link>https://freshrimpsushi.github.io/jp/posts/2221/</link><pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2221/</guid><description>定義 1 行列 $A \in \mathbb{R}^{m \times n}$、$\mathbf{b} \in \mathbb{R}^{m \times 1}$、そして $\mathbf{c} \in \mathbb{R}^{n}$に関して、以下の線形計画問題を標準形s</description></item><item><title>Juliaで多項式を使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2220/</link><pubDate>Sat, 18 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2220/</guid><description>概要 Polynomials.jlは多項式関数の表現や計算を含むパッケージだ。数学的に単純な多項式だからコーディングも簡単に考えがちだが、実際</description></item><item><title>ワイブル分布</title><link>https://freshrimpsushi.github.io/jp/posts/2219/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2219/</guid><description>定義 スケールパラメータ$\lambda &amp;gt; 0$とシェイプパラメータ$k &amp;gt; 0$に関して、以下の確率密度関数を持つ確率分布をワイブル分布weibu</description></item><item><title>Juliaで文字列を結合する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2218/</link><pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2218/</guid><description>コード 文字列の連結 * julia&amp;gt; &amp;#34;oh&amp;#34; * &amp;#34;my&amp;#34; * &amp;#34;girl&amp;#34; &amp;#34;ohmygirl&amp;#34; Pythonの+に相当する。 複数の文字列を連結する string() julia&amp;gt; string(&amp;#34;oh&amp;#34;,&amp;#34;my&amp;#34;, &amp;#34;girl&amp;#34;) &amp;#34;ohmygirl&amp;#34; Rのpaste0()に相当する。 文字列のリスト</description></item><item><title>ピタゴラス勝率</title><link>https://freshrimpsushi.github.io/jp/posts/2217/</link><pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2217/</guid><description>式 1 特定のスポーツリーグのチームが与えられたとしよう。チーム得点scores $S$ と チーム失点allows $A$ について、このチームのシーズン期待勝</description></item><item><title>Juliaプロットで特定のデータラベルを隠す方法</title><link>https://freshrimpsushi.github.io/jp/posts/2216/</link><pubDate>Fri, 10 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2216/</guid><description>コード 1 using Plots x = rand(30) y = rand(30) z = rand(30) plot(x) plot!(y) plot!(z) png(&amp;#34;result1&amp;#34;) 上のように、特定のデータだけ凡例に表示させたくない場合がある。 label = &amp;quot;&amp;quot; plot(x, label = &amp;#34;&amp;#34;) plot!(y) png(&amp;#34;result2&amp;#34;) そんな時は、label</description></item><item><title>VS CodeでCtrl+Shift+Cを使ってデフォルトのターミナルを変更する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2215/</link><pubDate>Wed, 08 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2215/</guid><description>ガイド ビジュアルスタジオコードでCtrl + Shift + Cを押すと、ターミナルウィンドウが表示されます。さまざまなテストや理由で意外とよく使う機能なん</description></item><item><title>Juliaプロットにテキストを挿入する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2214/</link><pubDate>Mon, 06 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2214/</guid><description>コード 1 annotate!()を使えばいいんだ。以下のコードはブラウン運動で最大点と最小点をマークした絵を描くコードだよ。 using Plots cd(@__DIR__) data = cumsum(randn(100)) plot(data, color =</description></item><item><title>指数族の確率分布</title><link>https://freshrimpsushi.github.io/jp/posts/2213/</link><pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2213/</guid><description>定義 1 2 パラメーター $\theta$ を持つ確率分布の確率質量関数または確率密度関数が、いくつかの関数 $p,K,H,q,h,c,w_{i},t_{i}$ に対して以下のように表せる場合、それは 指数族expo</description></item><item><title>Juliaプロットに韓国語テキストを挿入する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2212/</link><pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2212/</guid><description>環境 OS: Windows julia: v1.6.2 エラー julia&amp;gt; plot(data, color = :black, label = &amp;#34;값&amp;#34;, title = &amp;#34;브라운모션&amp;#34;) GKS: glyph missing from current font: 48652 GKS: glyph missing from current font: 46972 GKS: glyph missing from current font: 50868 GKS: glyph missing</description></item><item><title>確率密度関数の畳み込み公式</title><link>https://freshrimpsushi.github.io/jp/posts/2211/</link><pubDate>Tue, 31 May 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2211/</guid><description>式 1 ２つの独立した連続確率変数 $X, Y$ の確率密度関数が $f_{X}, f_{Y}$ で与えられるとする。それでは、$Z := X + Y$ の確率密度関数は２つの確率密度関数の畳み込み</description></item><item><title>レイリー分布</title><link>https://freshrimpsushi.github.io/jp/posts/2210/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2210/</guid><description>定義 1 スケールパラメータ$\sigma &amp;gt; 0$に対して、次のような確率密度関数を持つ連続確率分布をレイリー分布rayleigh distribu</description></item><item><title>関数形の確率変数の和の期待値</title><link>https://freshrimpsushi.github.io/jp/posts/2209/</link><pubDate>Fri, 27 May 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2209/</guid><description>定理 1 $X_{1} , \cdots , X_{n}$がランダムサンプルであり、$E g \left( X_{1} \right)$と$\Var g \left( X_{1} \right)$が存在して$g : \mathbb{R} \to \mat</description></item><item><title>野球におけるOPSの定義</title><link>https://freshrimpsushi.github.io/jp/posts/2208/</link><pubDate>Wed, 25 May 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2208/</guid><description>定義 1 出塁率 OBPと長打率 SLGの合計を OPSon-base Plus Sluggingと言う。 $$ OPS := OBP + SLG $$ 説明 高い出塁率は、チーム全体として見た場合に期待得点を増や</description></item><item><title>線形計画問題の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2207/</link><pubDate>Mon, 23 May 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2207/</guid><description>定義 1 目的関数objective functionと制約constraintが線形な最適化問題を線形計画問題linear Programming Problem、略し</description></item><item><title>野球における出塁率の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2206/</link><pubDate>Sat, 21 May 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2206/</guid><description>定義 1 2 打者がどれだけ出塁するかを示す比率を出塁率on-base Percentage、略してOBPと呼ぶ。ヒットH、四球BBと死球HBP、打</description></item><item><title>PythonのようにJuliaで文字列を扱う方法</title><link>https://freshrimpsushi.github.io/jp/posts/2205/</link><pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2205/</guid><description>コード 1 2 3 julia&amp;gt; replace(&amp;#34;qwerty&amp;#34;, &amp;#34;q&amp;#34;=&amp;gt;&amp;#34;Q&amp;#34;) &amp;#34;Qwerty&amp;#34; julia&amp;gt; join(&amp;#34;qwerty&amp;#34;, &amp;#34;,&amp;#34;) &amp;#34;q,w,e,r,t,y&amp;#34; julia&amp;gt; split(&amp;#34;qwerty&amp;#34;, &amp;#34;&amp;#34;) 6-element Vector{SubString{String}}: &amp;#34;q&amp;#34; &amp;#34;w&amp;#34; &amp;#34;e&amp;#34; &amp;#34;r&amp;#34; &amp;#34;t&amp;#34; &amp;#34;y&amp;#34; Juliaは文字列処理に特出している言語ではないけど、そのせいか、Pythonをたくさん真</description></item><item><title>野球における長打率の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2204/</link><pubDate>Tue, 17 May 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2204/</guid><description>定義 1 2 打者がヒットで獲得した塁の総数を総塁打total Basesと言い、TBと略す。 総塁打 TBを打数 ABで割った比率を長打率sluggin</description></item><item><title>Juliaで近似値をチェックする方法</title><link>https://freshrimpsushi.github.io/jp/posts/2203/</link><pubDate>Sun, 15 May 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2203/</guid><description>コード 比較演算子として$\approx$を使えば、二つの値が十分に似ている時だけ真を返す。≈は$\TeX$でと同じように、\approxと入</description></item><item><title>野球における打率の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2202/</link><pubDate>Fri, 13 May 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2202/</guid><description>定義 1 ヒット Hを打数 ABで割った比率を打率batting Averageといい、略してAVGと呼ばれる。つまり、打率は以下のように定義される。</description></item><item><title>Juliaから：辞書とペア</title><link>https://freshrimpsushi.github.io/jp/posts/2201/</link><pubDate>Wed, 11 May 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2201/</guid><description>コード 1 julia&amp;gt; d = Dict(&amp;#34;A&amp;#34;=&amp;gt;1, &amp;#34;B&amp;#34;=&amp;gt;2) Dict{String, Int64} with 2 entries: &amp;#34;B&amp;#34; =&amp;gt; 2 &amp;#34;A&amp;#34; =&amp;gt; 1 julia&amp;gt; push!(d,(&amp;#34;C&amp;#34;,3)) ERROR: MethodError: no method matching push!(::Dict{String, Int64}, ::Tuple{String, Int64}) julia&amp;gt; push!(d,&amp;#34;C&amp;#34; =&amp;gt; 3) Dict{String, Int64} with 3 entries: &amp;#34;B&amp;#34; =&amp;gt; 2 &amp;#34;A&amp;#34; =&amp;gt; 1 &amp;#34;C&amp;#34; =&amp;gt; 3 julia&amp;gt; typeof(&amp;#34;C&amp;#34; =&amp;gt; 3) Pair{String, Int64} Juliaの辞書diction</description></item><item><title>野球での犠牲打の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2200/</link><pubDate>Mon, 09 May 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2200/</guid><description>定義 1 2 打者がアウトになったが、バントで走者を進めた回数は犠牲バントsacrifice Buntといい、略してSHと呼ばれる。 打者がフライアウ</description></item><item><title>Juliaで.matのようにデータを保存する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2199/</link><pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2199/</guid><description>概要 JLD.jlは、Juliaを使用している間に発生する一時データを保存することができるパッケージだ1。純粋なJuliaプロジェクトを進行し</description></item><item><title>野球における四球と死球の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2198/</link><pubDate>Thu, 05 May 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2198/</guid><description>定義 1 バッターが「ストライクゾーンの外に投げられた四つの球」pitches out of the strike zoneで一塁に出る回数をベース・オン・ボールズ(Base</description></item><item><title>Juliaのループでインデックスと値の両方を参照する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2197/</link><pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2197/</guid><description>コード 1 Base.Iterators.enumerate() は、Pythonのように配列のインデックスと値の両方を参照できるイテレーターiteratorを返す。 julia&amp;gt; x = [3,5,4,1,2] 5-element Vector{Int64}: 3 5 4 1 2 julia&amp;gt; for (idx, value)</description></item><item><title>野球におけるホームランの定義</title><link>https://freshrimpsushi.github.io/jp/posts/2196/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2196/</guid><description>説明 ホームランは野球の華とされ、ベース上のランナー数に応じて一度に4点を取る可能性がある強力な打球である。クローザーの記録であるセーブsav</description></item><item><title>Juliaでのシンボル</title><link>https://freshrimpsushi.github.io/jp/posts/2195/</link><pubDate>Fri, 29 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2195/</guid><description>概要 Juliaに初めて接すると、戸惑うことも少なくないのがシンボルsymbolデータタイプである。シンボルは冒頭に:を付けて使用され、内部デ</description></item><item><title>野球におけるヒットの定義</title><link>https://freshrimpsushi.github.io/jp/posts/2194/</link><pubDate>Wed, 27 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2194/</guid><description>定義 1 打者が打ったボールが有効エリアに落ちたもののうち、野手の選択とエラーを除いた打球の数をヒットhit、略してHと呼ぶ。ヒットはシングルs</description></item><item><title>Juliaで配列の要素がリストに属しているかを確認する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2193/</link><pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2193/</guid><description>ガイド 1 julia&amp;gt; x = rand(&amp;#39;a&amp;#39;:&amp;#39;c&amp;#39;, 10) 10-element Vector{Char}: &amp;#39;a&amp;#39;: ASCII/Unicode U+0061 (category Ll: Letter, lowercase) &amp;#39;a&amp;#39;: ASCII/Unicode U+0061 (category Ll: Letter, lowercase) &amp;#39;b&amp;#39;: ASCII/Unicode U+0062 (category Ll: Letter, lowercase) &amp;#39;c&amp;#39;: ASCII/Unicode U+0063 (category Ll: Letter, lowercase) &amp;#39;b&amp;#39;: ASCII/Unicode U+0062 (category Ll: Letter, lowercase) &amp;#39;c&amp;#39;: ASCII/Unicode U+0063 (category Ll: Letter, lowercase) &amp;#39;c&amp;#39;: ASCII/Unicode U+0063 (category Ll: Letter, lowercase) &amp;#39;c&amp;#39;: ASCII/Unicode U+0063 (category Ll: Letter, lowercase) &amp;#39;b&amp;#39;: ASCII/Unicode U+0062</description></item><item><title>野球における打数の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2192/</link><pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2192/</guid><description>定義 1 バッターが ヒットを打つか 野手の選択によって出塁するか エラーで出塁するか アウトされる(犠牲ヒットは除く) 回数を打数at Bat、略してAB</description></item><item><title>Juliaでエレガントなループを使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2191/</link><pubDate>Thu, 21 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2191/</guid><description>ガイド while while文は他の言語と変わらない。 julia&amp;gt; while x &amp;lt; 10 x += 1 print(&amp;#34;▷eq1◁i - &amp;#34;) end 1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9 - 10 -</description></item><item><title>野球における打席の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2190/</link><pubDate>Tue, 19 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2190/</guid><description>定義 1 打者が打席に入り、何らかの方法で打席から下がる(終了する)回数を打席plate Appearance、略してPAと呼ぶ。 定理 $$ \begin{align*} PA =&amp;amp; AB +</description></item><item><title>ネットワーク理論におけるハブノード</title><link>https://freshrimpsushi.github.io/jp/posts/2189/</link><pubDate>Sun, 17 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2189/</guid><description>定義 1 ネットワークで多くの他のノードに接続されているノードをハブhubと言う。 説明 ネットワーク理論の中心性とは、「重要なノードが何か」という</description></item><item><title>KDX韓国データ取引所の紹介</title><link>https://freshrimpsushi.github.io/jp/posts/2188/</link><pubDate>Fri, 15 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2188/</guid><description>紹介 一般的なデータハブとは異なり、有料でデータを販売する企業だ。有料なだけあって、韓国実状に合ったデータの量と質は最高レベルで、無料で販売さ</description></item><item><title>バラバシ-アルバートモデル</title><link>https://freshrimpsushi.github.io/jp/posts/2187/</link><pubDate>Wed, 13 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2187/</guid><description>アルゴリズム 1 Input リンクパラメータ$m \in \mathbb{N}$とネットワーク サイズ$N$が与えられたとする。 ステップ 1. 初期化 $m$個のノードを</description></item><item><title>ITS国家交通情報センターの紹介</title><link>https://freshrimpsushi.github.io/jp/posts/2186/</link><pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2186/</guid><description>紹介 国家交通情報センターは、国内の交通流通、工事事故、CCTV、交通予測、車両検知器、VMS、交通安全アシスタント、可変速度表示、脆弱区間情</description></item><item><title>ブルー・ルーフィットネスモデル</title><link>https://freshrimpsushi.github.io/jp/posts/2185/</link><pubDate>Sat, 09 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2185/</guid><description>定義 各ノードにWeight（重み）を与え、その重みに従ってリンクが接続される確率が異なるランダムネットワークをフィットネス・モデルと言う。 ア</description></item><item><title>気象データオープンポータルの紹介</title><link>https://freshrimpsushi.github.io/jp/posts/2184/</link><pubDate>Thu, 07 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2184/</guid><description>紹介 気象データオープンポータルは、総合気象観測、気候、地震火山など様々なデータセットとオープンAPIを提供している。温度、降水量、微粒子、風</description></item><item><title>スケールフリーネットワーク</title><link>https://freshrimpsushi.github.io/jp/posts/2183/</link><pubDate>Tue, 05 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2183/</guid><description>定義 1 次数分布がパレート分布に従うランダムネットワークをスケールフリーネットワークscale-free Networkという。 説明 スケールフリ</description></item><item><title>環境ビッグデータプラットフォームの紹介</title><link>https://freshrimpsushi.github.io/jp/posts/2182/</link><pubDate>Sun, 03 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2182/</guid><description>紹介 環境ビッグデータプラットフォームは、環境データマーケットと視覚化、教育サービス、コンテストなどを提供している。マーケットと言っても無料デ</description></item><item><title>パレート分布</title><link>https://freshrimpsushi.github.io/jp/posts/2181/</link><pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2181/</guid><description>定義 1 スケールパラメータ$x_{0} &amp;gt; 0$とシェイプパラメータ$\alpha &amp;gt; 0$の場合、以下の確率関数をパレート分布、パワー法則、またはス</description></item><item><title>JuliaでプロットにTeXを使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2180/</link><pubDate>Wed, 30 Mar 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2180/</guid><description>コード 1 LaTeXStrings ライブラリを使うには、文字列の前に L を付けて、L&amp;quot;...&amp;quot; のように書く。 @time using Plots @time using LaTeXStrings plot(0:0.1:2π</description></item><item><title>Letの後ろには必ず動詞の原形が来る。</title><link>https://freshrimpsushi.github.io/jp/posts/2179/</link><pubDate>Mon, 28 Mar 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2179/</guid><description>文法 主語 S と動詞 V について、「Let S V 〜」節の V は動詞の原形で書かれなくてはならない。 例文 「さあ、殺し合いを始めよう。」 「Let the killing beg</description></item><item><title>investing.com の紹介</title><link>https://freshrimpsushi.github.io/jp/posts/2178/</link><pubDate>Sat, 26 Mar 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2178/</guid><description>紹介 Investing.comは、KOSPI、KOSDAQなどの銘柄のチャート情報を無料で簡単に提供する世界的な金融情報サイトだ。でも、リア</description></item><item><title>aの確率でVする</title><link>https://freshrimpsushi.github.io/jp/posts/2177/</link><pubDate>Thu, 24 Mar 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2177/</guid><description>文型 動詞 Vと確率rate $a \in [0,1]$ が与えられているとしよう。 &amp;ldquo;It V at the rate $a$.&amp;rdquo; $\iff$ &amp;ldquo;$a$の確率でVする。&amp;rdquo; 例文 &amp;ldquo;病</description></item><item><title>창원市ビッグデータポータル紹介</title><link>https://freshrimpsushi.github.io/jp/posts/2176/</link><pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2176/</guid><description>はじめに チャンウォンビッグデータポータルは、チャンウォン市を中心にした公共データポータルで、9億件以上のデータとビッグデータスタジオや商圏分</description></item><item><title>結合動的システム</title><link>https://freshrimpsushi.github.io/jp/posts/2175/</link><pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2175/</guid><description>定義 1 状態空間 $X$ が与えられたとしよう。$N$ 個のノードを持つネットワーク $\Gamma$ の隣接行列を $A$、ノード $i \in V \left( \Gamma \right)$ の状態を $x_{i} \in X$ のように表す時</description></item><item><title>CYBOS Plusで空売りのトレンドを取得する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2174/</link><pubDate>Fri, 18 Mar 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2174/</guid><description>コード CpSysDib.CpSvr7238 は、銘柄別の空売り動向をリクエストし、受信する。株式会社シージェンの空売りデータを呼び出すpythonの例を使って、使い方を学んでみ</description></item><item><title>Juliaでグラフィックスの背景を透明にする方法</title><link>https://freshrimpsushi.github.io/jp/posts/2173/</link><pubDate>Wed, 16 Mar 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2173/</guid><description>コード 1 ブラウザがダークモードになっていれば、背景が透明になっているのをはっきりと確認できる。 background_color オプションに :transparent シンボルを入れればいいんだ。*</description></item><item><title>CYBOS Plusで機関及び外国人の取引量を取り込む方法</title><link>https://freshrimpsushi.github.io/jp/posts/2172/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2172/</guid><description>ガイド1 CpSysDib.CpSvr7254は、投資主体別現況を日別・期間別、純購入・売買比率、数量・金額を日付ごとに確認するために使われる</description></item><item><title>Allの後には、可算名詞の複数形または不可算名詞の単数形がくる</title><link>https://freshrimpsushi.github.io/jp/posts/2171/</link><pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2171/</guid><description>文法 Allの後にくる名詞をNとしよう。 Allの後にくるNは、可算名詞の複数形あるいは不可算名詞の単数形でなければならず、「All N」の数はN</description></item><item><title>CYBOS Plusで証券の株価を取得する方法 CpSysDib.StockChart</title><link>https://freshrimpsushi.github.io/jp/posts/2170/</link><pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2170/</guid><description>ガイド 1 CpSysDib.StockChartは、株式、業種、ELWのチャートデータを受信する。APIの使用に慣れていない場合、このシステム</description></item><item><title>"Every" と "Each" の後には必ず単数名詞が来る</title><link>https://freshrimpsushi.github.io/jp/posts/2169/</link><pubDate>Tue, 08 Mar 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2169/</guid><description>文法 EはEveryまたはEachを意味し、Eの後に来る名詞をNとしよう。 Eの後に来るNは単数形でなければならず、&amp;ldquo;E N&amp;quot</description></item><item><title>CYBOS Plusで銘柄コードを読み込む方法 CpUtil.CpStockCode</title><link>https://freshrimpsushi.github.io/jp/posts/2168/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2168/</guid><description>ガイド 1 CpUtil.CpStockCodeは株式コードに関連するメソッドを提供する。 NameToCode(): 株名を文字列で受け取り、コードを文字列で返す。 CodeToName(): コー</description></item><item><title>フラクタルブラウン運動</title><link>https://freshrimpsushi.github.io/jp/posts/2167/</link><pubDate>Fri, 04 Mar 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2167/</guid><description>定義 $E \left( X_{t} \right) = 0$ が $X_{t}$ であるガウス過程とし、$H \in (0, 1)$ とする。フラクショナルブラウニアンモーションは、以下の二つの方法で定義される。 共分散によ</description></item><item><title>CYBOS Plus インストールチュートリアル</title><link>https://freshrimpsushi.github.io/jp/posts/2166/</link><pubDate>Wed, 02 Mar 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2166/</guid><description>環境 OS: Windows IDE: VS code ガイド WindowsでCYBOS Plusをインストールし、Pythonで接続状態を確認するチュートリアルだ。Pythonのオブ</description></item><item><title>LaTeXで大きな括弧を片方にだけ置く方法</title><link>https://freshrimpsushi.github.io/jp/posts/2165/</link><pubDate>Mon, 28 Feb 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2165/</guid><description>コード $$ \left. \int {{ 1 } \over { g (u) }} du \right|\_{u = X\_{t}} $$ $$ \left. \int {{ 1 } \over { g (u) }} du \right|_{u = X_{t}} $$ 大きな括弧で、左右のどちらかが不要な場合、\left., \right. を使ってサイ</description></item><item><title>投資情報 Open API CYBOS Plus 紹介</title><link>https://freshrimpsushi.github.io/jp/posts/2164/</link><pubDate>Sat, 26 Feb 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2164/</guid><description>紹介 CYBOSは、大信証券で開発されたトレーディングシステムで、Open APIapplication Programming InterfaceとしてCYBOS Plusを通じて証券データを提</description></item><item><title>素数と合成数</title><link>https://freshrimpsushi.github.io/jp/posts/2163/</link><pubDate>Thu, 24 Feb 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2163/</guid><description>定義 1 $p \ge 2$の自然数が$1$と$p$だけを約数に持つ場合、素数prime numberと言う。 $m \ge 2$の自然数が素数ではない場合、合成数co</description></item><item><title>Kaggleの紹介</title><link>https://freshrimpsushi.github.io/jp/posts/2162/</link><pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2162/</guid><description>紹介 Kagglekaggleは、世界で最も有名なオープンデータハブで、数え切れないほど多様なデータを公開しており、多くの競技会も開催している</description></item><item><title>確率過程の自己相似性とハースト指数</title><link>https://freshrimpsushi.github.io/jp/posts/2161/</link><pubDate>Sun, 20 Feb 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2161/</guid><description>定義 1 2 確率過程 $\left\{ X_{t} \right\}$ が全ての $a &amp;gt; 0$ において次の式を満たす場合、$H$-自己相似$H$-self-similarと言われる。 $$ X_{at} \overset{D}{=} a^{H} X_{t} $$ ここ</description></item><item><title>Kaggle APIを使ってデータをダウンロードする方法、OSError: kaggle.jsonが見つかりませんでした。の解決方法</title><link>https://freshrimpsushi.github.io/jp/posts/2160/</link><pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2160/</guid><description>概要 例示データリンク Kaggleにあるデータは、容量が大きく、ウェブブラウザのダウンロード機能に任せるには少し不安がある。そのため、大容量デ</description></item><item><title>가우스 과정</title><link>https://freshrimpsushi.github.io/jp/posts/2159/</link><pubDate>Wed, 16 Feb 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2159/</guid><description>定義 1 確率過程 $\left\{ X_{t} \right\}$ のすべての有限 部分集合 $S = \left\{ X_{t_{k}} \right\}_{k=1}^{n} \subset \left\{ X_{t} \right\}$ について、$S$ の要素のすべての線形結合 $$ \sum_{k=1}^{n} a_{k} X_{t_{k}} \qquad , \left\{ a_{k} \right\}_{k=1}^{n} \subset \mathbb{R} $$ が多変量正規分布</description></item><item><title>AI Hub 紹介</title><link>https://freshrimpsushi.github.io/jp/posts/2158/</link><pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2158/</guid><description>はじめに 音声、自然言語、ビジョン、ヘルスケア、自動運転、安全、農水産、国土環境、教育などの分野で画像、ビデオ、テキスト、オーディオ、3D、セ</description></item><item><title>Juliaにおける==と===の違い</title><link>https://freshrimpsushi.github.io/jp/posts/2157/</link><pubDate>Sat, 12 Feb 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2157/</guid><description>コード 1 ==は値が同じかどうかを比較し、===は比較する値が可変mutableかどうかによって異なる動作をする。 Mutable: 二項が同じオブジェクトを参</description></item><item><title>ブラック-ショールズモデルの導出</title><link>https://freshrimpsushi.github.io/jp/posts/2156/</link><pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2156/</guid><description>モデル 1 $t$ 時点で $S_{t}$ を基礎資産 $1$単位の価格とし、$S_{t}$ が幾何ブラウン運動をすると仮定しよう。すなわち、標準ブラウン運動 $W_{t}$ とトレンド</description></item><item><title>Pythonパッケージ、ライブラリ、モジュールのバージョンを確認する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2155/</link><pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2155/</guid><description>ガイド コンソールで以下のコマンドを使うと、バージョンを確認できる。全体的に見るとlistの方が見やすいが、特定のパッケージのバージョンを確認</description></item><item><title>幾何ブラウン運動</title><link>https://freshrimpsushi.github.io/jp/posts/2154/</link><pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2154/</guid><description>定義 1 $\mu \in \mathbb{R}$と$\sigma^{2} &amp;gt; 0$によって与えられる確率微分方程式があるとしよう。 $$ d X_{t} = X_{t} \left( \mu dt + \sigma d B_{t} \right) $$ こ</description></item><item><title>ログ正規分布</title><link>https://freshrimpsushi.github.io/jp/posts/2153/</link><pubDate>Fri, 04 Feb 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2153/</guid><description>定義 1 $\mu \in \mathbb{R}$ と $\sigma^{2} &amp;gt; 0$ に対して、以下の確率密度関数を持つ連続確率分布 $\log N \left( \mu,\sigma^{2} \right)$ を対数正規分布normal distributionという。 $$ f(x) =</description></item><item><title>小路-尾崎 局所線形化メソッド</title><link>https://freshrimpsushi.github.io/jp/posts/2152/</link><pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2152/</guid><description>ビルドアップ1 $$ d X_{t} = f \left( t, X_{t} \right) dt + g \left( X_{t} \right) d W_{t} $$ 拡散$g$が$X_{t}$にのみ依存し、時間$t$には独立である確率微分方程式が与えられた</description></item><item><title>Python shutilモジュールの総まとめ</title><link>https://freshrimpsushi.github.io/jp/posts/2151/</link><pubDate>Mon, 31 Jan 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2151/</guid><description>概要 1 shutilは、ファイルやディレクトリに関する高レベル命令を集めた標準モジュールだ。Pythonを使う理由の一つは、プログラムを素早く</description></item><item><title>ランベルト変換</title><link>https://freshrimpsushi.github.io/jp/posts/2150/</link><pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2150/</guid><description>定義 1 $$ d X_{t} = f \left( t , X_{t} \right) dt + g \left( X_{t} \right) d W_{t} $$ 拡散$g$が$X_{t}$にのみ依存し、時間$t$には依存しない確率微分方程式が上記のように与え</description></item><item><title>Juliaでビット配列を反転させる方法</title><link>https://freshrimpsushi.github.io/jp/posts/2149/</link><pubDate>Thu, 27 Jan 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2149/</guid><description>コード 1 すごく簡単なんだけど、否定演算子の ! と ~ を単項演算子じゃなくて関数として見てしまって、!. や ~. を使う間違いをよくするよ。.! や .~ と書</description></item><item><title>ミルシュタイン法の導出</title><link>https://freshrimpsushi.github.io/jp/posts/2148/</link><pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2148/</guid><description>メソッド 1 $$ d X(t) = f \left( X_{t} \right) dt + g \left( X_{t} \right) d W_{t} \qquad , t \in [t_{0}, T] $$ イートプロセスが、上に記述された自律確率微分方程式の解であるとする。間隔が$h$で一</description></item><item><title>Python OSモジュールの総まとめ</title><link>https://freshrimpsushi.github.io/jp/posts/2147/</link><pubDate>Sun, 23 Jan 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2147/</guid><description>Overview 1 os is a base module that collects simple commands for operating system-dependent features. One of the reasons to use Python is that it is easy and quick to write programs, but it is very inconvenient that features that logically should be there are mixed with the shutil module. When handling the file system, you need to use both modules equally. It&amp;rsquo;s a summary, but it&amp;rsquo;s not just scraped</description></item><item><title>オイラー・マルヤマ法の導出</title><link>https://freshrimpsushi.github.io/jp/posts/2146/</link><pubDate>Fri, 21 Jan 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2146/</guid><description>メソッド 1 $$ d X(t) = f \left( X_{t} \right) dt + g \left( X_{t} \right) d W_{t} \qquad , t \in [t_{0}, T] $$ 伊藤過程が上に示された自律確率微分方程式のソリューションとして与えられているとしよう</description></item><item><title>Pythonでプログラムを一時停止する3つの方法</title><link>https://freshrimpsushi.github.io/jp/posts/2145/</link><pubDate>Wed, 19 Jan 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2145/</guid><description>コード 1 input() input() モジュールを呼び出す必要がなく、メッセージを表示しないので、最も便利でよく使われる方法だ。入力を待っている間、プログラムは停止さ</description></item><item><title>イート・テイラー展開導出</title><link>https://freshrimpsushi.github.io/jp/posts/2144/</link><pubDate>Mon, 17 Jan 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2144/</guid><description>定理1 $$ d X(t) = f \left( X_{t} \right) dt + g \left( X_{t} \right) d W_{t} \qquad , t \in [0, T] $$ イートー過程が上のような自律確率微分方程式の解として与えられているとしよう。$f,g : \mathbb{R}</description></item><item><title>Juliaでfile.choose()のようにダイアログボックスを開いてファイルを選択する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2143/</link><pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2143/</guid><description>コード 1 using Gtk file_name = open_dialog(&amp;#34;파일 열기&amp;#34;) 最初の引数として与えられる文字列は、ダイアログのタイトルだ。実行すると</description></item><item><title>SDEの数値解の強収束と弱収束</title><link>https://freshrimpsushi.github.io/jp/posts/2142/</link><pubDate>Thu, 13 Jan 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2142/</guid><description>ビルドアップ $$ d X_{t} = f \left( t, X_{t} \right) dt + g \left( t , X_{t} \right) d W_{t} \qquad , t \in \left[ t_{0} , T \right] $$ 確率微分方程式が上記のように与えられ、時間が$t_{0} &amp;lt; t_{1} &amp;lt; \cdots &amp;lt; t_</description></item><item><title>偶数の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2141/</link><pubDate>Tue, 11 Jan 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2141/</guid><description>定義 簡単な定義 $2$ で割った残りが $0$ の整数は、偶数と言われる。 難しい定義 $$ a = 2 \cdot k $$ 整数 $a$ に対して、上を満たす整数 $k$ が存在すれば、$a$ は偶数</description></item><item><title>CKLS平均回帰ガンマ確率微分方程式</title><link>https://freshrimpsushi.github.io/jp/posts/2140/</link><pubDate>Sun, 09 Jan 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2140/</guid><description>モデル 1 $$ d X_{t} = \left( \alpha - \beta X_{t} \right) dt + \sigma X_{t}^{\gamma} d W_{t} \qquad , X_{0} &amp;gt; 0 $$ $\alpha, \beta, \sigma, \gamma &amp;gt; 0$ とする。この確率微分方程式を CKLS 平均復帰ガンマ確率微分方程式と言う。 変数 $X_{t}$: 利息</description></item><item><title>商と余り</title><link>https://freshrimpsushi.github.io/jp/posts/2139/</link><pubDate>Fri, 07 Jan 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2139/</guid><description>定義 1 整数 $A$ と $B \ne 0$ があったとして、$B &amp;gt; R \ge 0$ と $$ A = Q \cdot B + R $$ を満たす整数 $Q$、$R$ が存在するとしよう。この場合、$Q$ を商quo</description></item><item><title>コックス・インガーソル・ロス モデル、CIR モデル</title><link>https://freshrimpsushi.github.io/jp/posts/2138/</link><pubDate>Wed, 05 Jan 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2138/</guid><description>モデル 1 $$ d X_{t} = \left( \alpha - \beta X_{t} \right) dt + \sigma \sqrt{X_{t}} d W_{t} \qquad , X_{0} &amp;gt; 0 $$ $\alpha, \beta, \sigma &amp;gt; 0$が$2 \alpha &amp;gt; \sigma^{2}$を満たすとする。上の確率微分方程式をCIRモ</description></item><item><title>最大公約数と互いに素</title><link>https://freshrimpsushi.github.io/jp/posts/2137/</link><pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2137/</guid><description>定義 1 二つの整数 $n$ と $m \ne 0$ について、次を満たす整数 $k$ が存在するなら、$n$ は $m$ で割り切れると言う。 $$ n = mk $$ この時、$n$ を $m$ の 倍数mult</description></item><item><title>オルンシュタイン＝ウーレンベック方程式</title><link>https://freshrimpsushi.github.io/jp/posts/2136/</link><pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2136/</guid><description>定義 1 $$ d X_{t} = a X_{t} dt + \sigma d W_{t} $$ $a , \sigma \in \mathbb{R}$ とする。上記した確率微分方程式を オルンスタイン・ウーレンベック方程式Ornstein-Uhlenbe</description></item><item><title>距離空間がコンパクトであることと、完備かつ完全有界であることの同値性</title><link>https://freshrimpsushi.github.io/jp/posts/2135/</link><pubDate>Thu, 30 Dec 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2135/</guid><description>定理 1 距離空間がコンパクトであることと、完備でかつ完全有界であることは同値である。 証明 $(\Rightarrow)$ 距離空間 $X$ がコンパクトだとしよう。 完備距離空間の性質</description></item><item><title>2021年読者専攻調査結果</title><link>https://freshrimpsushi.github.io/jp/posts/2351/</link><pubDate>Tue, 28 Dec 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2351/</guid><description>読者アンケート結果 生サーモン寿司店は、国内最大の形式科学ブログを目指しており、22年にはコミュニティと連携して小さなコンペティションなどのイ</description></item><item><title>ブラウンの橋</title><link>https://freshrimpsushi.github.io/jp/posts/2134/</link><pubDate>Tue, 28 Dec 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2134/</guid><description>定義 1 2 $$ d Y_{t} = {{ b - Y_{t} } \over { 1 - t }} dt + d W_{t} \qquad, t \in [0,1), Y_{0} = a $$ $a, b \in \mathbb{R}$ としよう。上の$1$次元の確率微分方程式の解である確率過程 $Y_{t}$ を（$a$</description></item><item><title>Juliaで小数点以下特定の桁で丸める方法</title><link>https://freshrimpsushi.github.io/jp/posts/2133/</link><pubDate>Sun, 26 Dec 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2133/</guid><description>コード 実のところ、Juliaは文字列のフォーマットなどが特に便利な言語ではない。コンソールに出力する際に文字列自体の機能を使う方法もあるが、</description></item><item><title>典型的な確率微分方程式の解</title><link>https://freshrimpsushi.github.io/jp/posts/2132/</link><pubDate>Fri, 24 Dec 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2132/</guid><description>方程式 1 (G) 一般形式: $$ d X_{t} = f \left( t , X_{t} \right) dt + g \left( t , X_{t} \right) d W_{t} $$ (L) 線形: $\begin{cases} f \left( t , X_{t} \right) = a_{t} + b_{t} X_{t} \\ g \left( t , X_{t} \right) = c_{t} + e_{t} X_{t} \end{cases}$ $$ d X_{t} = \left( a_{t} + b_{t} X_{t} \right)</description></item><item><title>グロンウォールの不等式の証明</title><link>https://freshrimpsushi.github.io/jp/posts/2131/</link><pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2131/</guid><description>定理 区間 最小値 $a \in \mathbb{R}$ を持つ 区間 $I \subset \mathbb{R}$ で二つの連続関数 $f,w : I \to \mathbb{R}$ が定義されているとする。$w$ が $\forall t \in I$ で $w(t) \ge 0$ であり、ある定数 $C \in \mathbb{R}$ に対して</description></item><item><title>線形、同次、自律確率微分方程式</title><link>https://freshrimpsushi.github.io/jp/posts/2130/</link><pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2130/</guid><description>定義 1 確率空間 $( \Omega , \mathcal{F} , P)$ と フィルタレーション $\left\{ \mathcal{F}_{t} \right\}_{t \ge 0}$ が与えられているとしよう。2つの関数 $f$, $g$ と $\mathcal{F}_{t}$-適応さ</description></item><item><title>フロベニウスノルム</title><link>https://freshrimpsushi.github.io/jp/posts/2129/</link><pubDate>Sat, 18 Dec 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2129/</guid><description>定義 1 行列 $A = \left( a_{ij} \right) \in \mathbb{C}^{m \times n}$ に対して 行列のノルム $\left\| \cdot \right\|_{F}$ を次のように定義し、フロベニウスノルムFrobenius normと呼ぶ。 $$ \left\| A \right\|_{F} = \sqrt{ \sum_{ij}</description></item><item><title>確率微分方程式の解の存在性と一意性、強い解と弱い解</title><link>https://freshrimpsushi.github.io/jp/posts/2128/</link><pubDate>Thu, 16 Dec 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2128/</guid><description>定義 1 確率空間 $( \Omega , \mathcal{F} , P)$ と フィルトレーション $\left\{ \mathcal{F}_{t} \right\}_{t \ge 0}$ が与えられているとする。 $$ \begin{align*} f &amp;amp;: [0,T] \times \mathbb{R}^{n} \to \mathbb{R}^{n} \\ g &amp;amp;: [0,T] \times \mathbb{R}^{n} \to \mathbb{R}^{n \times m} \end{align*} $$ 2つの関数 $f$、</description></item><item><title>D-データハブの紹介</title><link>https://freshrimpsushi.github.io/jp/posts/2127/</link><pubDate>Tue, 14 Dec 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2127/</guid><description>紹介 D-データハブは、大邱広域市を中心にした公共データポータルで、4,000以上のデータセットと13,000以上のサービスを提供している。地</description></item><item><title>Juliaでヒートマップの色範囲を指定する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2126/</link><pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2126/</guid><description>コード 1 ヒートマップを描く時、数値に応じて値のスケールが固定されないと困ることがある。基本のヒートマップ関数でclimオプションを通じて色の</description></item><item><title>確率微分方程式とは?</title><link>https://freshrimpsushi.github.io/jp/posts/2125/</link><pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2125/</guid><description>定義 1 $$ d X(t) = f \left( t, X(t) \right) dt + g \left( t, X(t) \right) d W_{t} \qquad , t \in \left[ t_{0} , T \right], T &amp;gt; 0 $$ 上記の形式の方程式は、確率微分方程式、略してSDEと呼ばれる。ここで、$</description></item><item><title>Juliaでzfill()を使う方法</title><link>https://freshrimpsushi.github.io/jp/posts/2124/</link><pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2124/</guid><description>概要 1 Pythonでは、zfill()は文字列クラスのメソッドとして、左側を0で埋める機能を持っている。しかし、Juliaではもっと汎用的で</description></item><item><title>伊藤の公式とマルチンゲール表現定理</title><link>https://freshrimpsushi.github.io/jp/posts/2123/</link><pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2123/</guid><description>定理 1 2 確率空間 $( \Omega , \mathcal{F} , P)$ と フィルトレーション $\left\{ \mathcal{F}_{t} \right\}_{t \ge 0}$ が与えられて、ウィーナー過程 $\left\{ W_{t} \right\}_{t \ge 0}$ が $\mathcal{F}_{t}$-適応さ</description></item><item><title>ネットワーク内の次数分布</title><link>https://freshrimpsushi.github.io/jp/posts/2122/</link><pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2122/</guid><description>例 次数の分布は、ネットワークの性質となることもあれば、そもそも定義されることもある。例えば、次数分布がパレート分布に従うネットワークで定義さ</description></item><item><title>伊藤の公式</title><link>https://freshrimpsushi.github.io/jp/posts/2121/</link><pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2121/</guid><description>定理 1 イットウ過程 $\left\{ X_{t} \right\}_{t \ge 0}$ が与えられているとする。 $$ d X_{t} = u dt + v d W_{t} $$ 関数 $V \left( t, X_{t} \right) = V \in C^{2} \left( [0,\infty) \times \mathbb{R} \right)$ に対して $Y_{t} := V \left( t, X_{t} \right)$ としよう。す</description></item><item><title>Juliaで構造体の属性を確認する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2120/</link><pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2120/</guid><description>コード propertynames() propertynames()関数で確認するといい1。Juliaにはクラスがなく、構造体だけが存在するから2、この関数で返されるすべ</description></item><item><title>伊藤過程</title><link>https://freshrimpsushi.github.io/jp/posts/2119/</link><pubDate>Sun, 28 Nov 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2119/</guid><description>定義 1 確率空間 $( \Omega , \mathcal{F} , P)$ と フィルトレーション $\left\{ \mathcal{F}_{t} \right\}_{t \ge 0}$ が与えられて、ウィーナープロセス $\left\{ W_{t} \right\}_{t \ge 0}$ が $\mathcal{F}_{t}$-適応</description></item><item><title>ギルバートモデル</title><link>https://freshrimpsushi.github.io/jp/posts/2118/</link><pubDate>Fri, 26 Nov 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2118/</guid><description>定義 1 2 簡単な定義 リンクがそれぞれ独立に確率 $p \in [0,1]$ に従って接続されるシンプルネットワークのランダムネットワークを、ギルバートモデルgilbe</description></item><item><title>部分積分(ぶぶんせきぶん)</title><link>https://freshrimpsushi.github.io/jp/posts/2117/</link><pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2117/</guid><description>定理 1 $[0,t]$でバウンドされた連続関数 $f(s,\omega) = f(s)$が$s$にのみ依存している場合、 $$ \int_{0}^{t} f(s) d W_{s} = f (t) W_{t} - \int_{0}^{t} W_{s} d f (s) $$ $W_{t}$はウ</description></item><item><title>エルデシュ＝レーニイモデル</title><link>https://freshrimpsushi.github.io/jp/posts/2116/</link><pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2116/</guid><description>ビルドアップ $n$個のラベル付けられた頂点と$m$個のエッジを持つシンプルグラフについて、プロパティ$\mathscr{G}_{n,m} \subset 2</description></item><item><title>伊藤乗算表</title><link>https://freshrimpsushi.github.io/jp/posts/2115/</link><pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2115/</guid><description>ビルドアップ $s&amp;lt; t &amp;lt; t+u$ と言うとき、次の条件を満たす確率過程 $\left\{ W_{t} \right\}$ をウィーナー過程と呼ぶ。 (i): $W_{0} = 0$ (ii): $\left( W_{t+u} - W_{t} \right) \perp W_{s}$ (iii): $\left( W_{t+u} - W_{t} \right) \sim N ( 0, u )$ (iv): $W_{t}$ の</description></item><item><title>ランダムグラフ</title><link>https://freshrimpsushi.github.io/jp/posts/2114/</link><pubDate>Thu, 18 Nov 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2114/</guid><description>定義 簡単な定義 非決定論的な手続きで作られるか、ある確率分布に従って表現されるグラフをランダムグラフrandom graphという。 難しい定義 確</description></item><item><title>伊藤等距離等式</title><link>https://freshrimpsushi.github.io/jp/posts/2113/</link><pubDate>Tue, 16 Nov 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2113/</guid><description>定理 1 すべての$f \in m^{2}[a,b]$に対して、次の等式が成り立つ。 $$ E \left[ \left( \int_{a}^{b} f d W_{t} \right)^{2} \right] = E \left[ \int_{a}^{b} f^{2} dt \right] $$ 説明 積分記号の外の二乗 $^{2}$ が渡るの</description></item><item><title>グラフのファミリーとプロパティ</title><link>https://freshrimpsushi.github.io/jp/posts/2112/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2112/</guid><description>ビルドアップ $n$個のラベリングされた頂点の集合$V = [n] = \left\{ 1 ,\cdots , n \right\}$を持つ単純グラフを考えてみよう。このグラフの辺は異なる</description></item><item><title>伊藤積分</title><link>https://freshrimpsushi.github.io/jp/posts/2111/</link><pubDate>Fri, 12 Nov 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2111/</guid><description>ビルドアップ 確率的積分を考える前に、非常に重要な確率過程である初等過程elementary processを定義したい。初等過程は測度論でルベ</description></item><item><title>平面と法線ベクトルの交点</title><link>https://freshrimpsushi.github.io/jp/posts/2110/</link><pubDate>Wed, 10 Nov 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2110/</guid><description>定義1 $2$次元のユークリッド空間の部分集合$U \subset \mathbb{R}^{2}$が座標$u_{1}$、$u_{2}$を持っているとしよう、$</description></item><item><title>m2 空間</title><link>https://freshrimpsushi.github.io/jp/posts/2109/</link><pubDate>Mon, 08 Nov 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2109/</guid><description>定義 1 2 確率空間 $( \Omega , \mathcal{F} , P)$ が与えられているとする。 $\mathcal{F}$ のサブシグマフィールドのシーケンス $\left\{ \mathcal{F}_{t} \right\}_{t \ge 0}$ が以下を満たすとき、フィルトレーションfi</description></item><item><title>曲面理論における座標変換</title><link>https://freshrimpsushi.github.io/jp/posts/2108/</link><pubDate>Sat, 06 Nov 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2108/</guid><description>定義 1 $2$次元のユークリッド空間の$U \subset \mathbb{R}^{2}$が集合だとしよう。$k \in \mathbb{N}$に対して、全単射関数$</description></item><item><title>ラオ・ブラックウェルの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/2107/</link><pubDate>Thu, 04 Nov 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2107/</guid><description>定理 1 2 パラメーター $\theta$ が与えられたとする。$T$ が $\theta$ の十分統計量で、$W$ が $\tau \left( \theta \right)$ の不偏推定量である場合、$\phi \left( T \right) := E \left( W | T \right)$ を</description></item><item><title>単純曲面、座標写像</title><link>https://freshrimpsushi.github.io/jp/posts/2106/</link><pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2106/</guid><description>定義1 1 座標 $u_{1}$、$u_{2}$ を持つ $2$次元 ユークリッド空間の部分集合 $U \subset \mathbb{R}^{2}$が 開集合だとしよう。す</description></item><item><title>力学系間の位相的同値性</title><link>https://freshrimpsushi.github.io/jp/posts/2105/</link><pubDate>Sun, 31 Oct 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2105/</guid><description>定義 1 $$ \left\{ T , \mathbb{R}^{n} , \varphi^{t} \right\} \\ \left\{ T , \mathbb{R}^{n} , \psi^{t} \right\} $$ 二つの動力学系が上のように与えられているとしよう。時間の方向を保ちながら、一つ目のシステムの各オービ</description></item><item><title>順列不等式の証明</title><link>https://freshrimpsushi.github.io/jp/posts/2104/</link><pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2104/</guid><description>定理 1 長さが$L$の平面の正規単純閉曲線$\alpha$が存在するとしよう。 $\alpha$に囲まれた内部の面積を$A$とすると、 $$ L^{2} \ge 4 \pi</description></item><item><title>確率微分方程式におけるホワイトノイズ</title><link>https://freshrimpsushi.github.io/jp/posts/2103/</link><pubDate>Wed, 27 Oct 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2103/</guid><description>モチーブ $$ \xi (t) \overset{?}{:=} \dot{W}(t) = {{d W (t)} \over {dt}} $$ 上で見せたようにウィーナー過程の導関数として定義された$\xi$を想像してみよう。ブラウン運動を考えると、こ</description></item><item><title>平面単純閉曲線に囲まれた領域の面積公式の導出</title><link>https://freshrimpsushi.github.io/jp/posts/2102/</link><pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2102/</guid><description>式 1 区域 $R$ を囲む平面上の単純で閉じた曲線 $\alpha$ が反時計回りに動くとすると、 $$ V (R) = \int_{\alpha} x dy = - \int_{\alpha} y dx $$ $V(R)$ は区域 $R$ の体積、つまり$R$ の面積を意味し</description></item><item><title>Juliaで特定の値で埋めた配列を作る方法</title><link>https://freshrimpsushi.github.io/jp/posts/2101/</link><pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2101/</guid><description>コード fill() 関数を使えばいい。Rの rep() 関数と似た機能をする。</description></item><item><title>回転数定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/2100/</link><pubDate>Thu, 21 Oct 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2100/</guid><description>定理 1 平面 単純 閉曲線の回転数は $i_{\alpha} = \pm 1$ だ。 説明 短いが、非常に直感的で重要な定理だ。証明はやや独特だ。 証明 $\alpha (s)$ が定理の条件を満たしつつ、長さが</description></item><item><title>WindowsでPythonを使ったTensorFlow GPUのインストール方法</title><link>https://freshrimpsushi.github.io/jp/posts/2099/</link><pubDate>Tue, 19 Oct 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2099/</guid><description>ガイド TensorFlow GPUのインストールは、通常のプログラムのようにインストーラー一つで簡単にできるわけではない。色々な問題があった場合、PCを一度初期</description></item><item><title>平面曲線の回転数</title><link>https://freshrimpsushi.github.io/jp/posts/2098/</link><pubDate>Sun, 17 Oct 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2098/</guid><description>ビルドアップ 平面曲線のタンジェントがどれだけ回転するかを議論する前に、適切な角度関数のようなものを先に考えたい。平面で、水平線(x軸)と点 $p$</description></item><item><title>JuliaでSHPファイルを読む方法</title><link>https://freshrimpsushi.github.io/jp/posts/2097/</link><pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2097/</guid><description>コード XsDB_주거인구_100M_TM.shpというshpファイルを読み込むコードは以下の通りだ。 using Shapefile cd(@__DIR__) path = &amp;#34;XsDB_주거인구_</description></item><item><title>閉曲線の回転数</title><link>https://freshrimpsushi.github.io/jp/posts/2096/</link><pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2096/</guid><description>ビルドアップ 平面曲線の接線がどれだけ回転するかを論じる前に、適切な角度関数のようなものを先に考えてみたい。平面で、点$p$から水平線(x軸)</description></item><item><title>Juliaで小数点以下を切り捨てて整数に変換する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2095/</link><pubDate>Mon, 11 Oct 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2095/</guid><description>概要 trunc関数を使うには、第一引数にIntを入れるだけだ。 コード julia&amp;gt; @time for t in 1:10^8 Int64(ceil(t/1000)) end 0.189653 seconds julia&amp;gt; @time for t in 1:10^8 trunc(Int64, ceil(t/1000)) end 0.128472 seconds 二つのループは全く同じ機能をす</description></item><item><title>単純曲線の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2094/</link><pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2094/</guid><description>定義 1 正則曲線 $\beta (t)$が単純simpleであるとは、$\beta$が単射関数であるか、あるいは何らかの整数$n \in \mathbb{Z}$に対</description></item><item><title>Juliaでデータフレームの列名を変更する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2093/</link><pubDate>Thu, 07 Oct 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2093/</guid><description>概要 rename!() 関数を使って変更するといい1。 文字列のリストを与えて一度に変更する方法もあるし、個別に変更する方法もある。 コード using DataFrames df = DataFrame(rand(1:9, 10, 3), :auto) rename!(df, [&amp;#34;X&amp;#34;, &amp;#34;Y&amp;#34;,</description></item><item><title>閉曲線の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2092/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2092/</guid><description>定義 1 正則曲線 $\beta (t)$ が閉曲線closed curveであることは、$\beta$ 周期関数であることと等価だ。 公式: 閉曲線の長さ $\alpha (s)$ が周期 $a&amp;gt;0$ の閉曲</description></item><item><title>逆三角関数</title><link>https://freshrimpsushi.github.io/jp/posts/2091/</link><pubDate>Sun, 03 Oct 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2091/</guid><description>定義1 三角関数の逆関数を逆三角関数と言って、三角関数の名前にarc-を付けて表記する。 $$ \begin{align*} \arcsin x &amp;amp;= \sin^{-1} x \qquad &amp;amp; \operatorname{arccsc} x &amp;amp;= \csc^{-1} x \\ \arccos x &amp;amp;= \cos^{-1} x \qquad &amp;amp; \operatorname{arcsec} x &amp;amp;= \sec^{-1} x</description></item><item><title>平面曲線の接線、法線、および曲率</title><link>https://freshrimpsushi.github.io/jp/posts/2090/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2090/</guid><description>定義 1 単位スピード平面曲線$\alpha : (a,b) \to \mathbb{R}^{2}$ が与えられたとしよう。 タンジェント（ベクトル場）を$t (s) := \alpha^{\prime} (s)$ のように定義する。 $\left\{ t(s), n(s) \ri</description></item><item><title>QGISでshpファイルを開く方法</title><link>https://freshrimpsushi.github.io/jp/posts/2089/</link><pubDate>Wed, 29 Sep 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2089/</guid><description>概要 shp 拡張子はShapefileを表します。多くの地理情報データが*.shp ファイルや *.dbf, *.sbn, *.sbx, *.shx などの形式で管理されています。データを受け取っ</description></item><item><title>JuliaでNearstNeighbors.jlを使用して距離を素早く計算する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2088/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2088/</guid><description>概要 $n$個の座標同士の距離を計算するにあたり、行列を作る必要はなく、単に距離を計算する場合、多次元検索に有利なデータ構造であるk-dツリー</description></item><item><title>曲線の基本定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/2087/</link><pubDate>Sat, 25 Sep 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2087/</guid><description>定理 1 $a,b$ が $0$ を含む区間としよう。そして次が成立するとしよう。 (i): $\overline{\kappa}(s) &amp;gt; 0$ が $(a,b)$ で $C^{1}$ (ii): $\overline{\tau}(s)$ が $(a,b)$ で連続 (iii): $\mathbf{x}_{0}$ が $\mathbb{R}^{3}$ の固定された一点 (iv): $\left\{ D,E,F \right\}$ が $\mathbb{R}^{3}$ の右手方向正規</description></item><item><title>Linuxでスワップメモリを初期化する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2086/</link><pubDate>Thu, 23 Sep 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2086/</guid><description>ガイド sudo swapoff -a sudo swapon -a メモリ不足の問題をスワップメモリで一時的に回避できるけど、関連する作業が終わった後にスワップメモリを空にしないと、とても遅</description></item><item><title>再パラメータ化とフレネ-セレの道具</title><link>https://freshrimpsushi.github.io/jp/posts/2085/</link><pubDate>Tue, 21 Sep 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2085/</guid><description>定義 $\beta : [a,b] \to \mathbb{R}^{3}$ を正則曲線と呼ぼう。弧の長さ再パラメータ化 $t = t(s)$ は $s(t) = \int_{a}^{t} \left| \beta^{\prime}(t) \right| dt$ を満たし、単位スピードカーブ $\alpha (s) := \beta \left( t (s) \right)$ のフレネ・セレ装置</description></item><item><title>ノイマン因数分解定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/2084/</link><pubDate>Sun, 19 Sep 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2084/</guid><description>定理 random sample $X_{1} , \cdots , X_{n}$ がパラメータ $\theta \in \Theta$ に対して同じ確率質量/密度関数$f \left( x ; \theta \right)$ を持つとしよう。統計量 $Y = u_{1} \left( X_{1} , \cdots , X_{n} \right)$ が $\theta$ の 十分統計量 で</description></item><item><title>球面上の曲線に関する公式</title><link>https://freshrimpsushi.github.io/jp/posts/2083/</link><pubDate>Fri, 17 Sep 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2083/</guid><description>数式 1 単位スピードカーブ$\alpha : I \to \mathbb{R}^{3}$が中心$m$で半径$r$の球面上に置かれているとしよう。すなわち、</description></item><item><title>複素関数の積分</title><link>https://freshrimpsushi.github.io/jp/posts/2082/</link><pubDate>Wed, 15 Sep 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2082/</guid><description>定義 1 $$ g(t) := p(t) + i q(t) \qquad , t \in [a,b] $$ 実関数 $p, q : [a,b] \to \mathbb{R}$ に対し、複素関数 $g : [a,b] \to \mathbb{C}$ が上記のように示されるとする。区間 $[a,b]$ から $g$ までの定積分は次のよう</description></item><item><title>接平面と法平面</title><link>https://freshrimpsushi.github.io/jp/posts/2081/</link><pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2081/</guid><description>定義 1 曲線 $\alpha$ が与えられているとする。 $B$ に垂直な平面 $\text{span} \left\{ T, N \right\}$ を接平面osculating Planeと言う。 $T$ に垂直な平面 $\text{span} \left\{ N, B \right\}$ を法平面n</description></item><item><title>複素解析における零点</title><link>https://freshrimpsushi.github.io/jp/posts/2080/</link><pubDate>Sat, 11 Sep 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2080/</guid><description>定義 1 $\alpha \in \mathbb{C}$が関数$f : \mathbb{C} \to \mathbb{C}$の**$n$次のゼロ**zero of Order $n$であることは、$\displ</description></item><item><title>ランチョスの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/2079/</link><pubDate>Thu, 09 Sep 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2079/</guid><description>定理 1 $\kappa \ne 0$ の単位スピード曲線 $\alpha$が螺旋であることは、ある定数 $c \in \mathbb{R}$に対して $\tau = c \kappa$となることと</description></item><item><title>調和関数</title><link>https://freshrimpsushi.github.io/jp/posts/2078/</link><pubDate>Tue, 07 Sep 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2078/</guid><description>定義 1 関数 $\phi (x,y)$ が領域 $\mathscr{R}$ で連続な二階微分を持ち、ラプラスの方程式の解であれば、ハーモニックであると言う。言い換えると、ハーモニック関数は次を満</description></item><item><title>一般的な螺旋の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2077/</link><pubDate>Sun, 05 Sep 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2077/</guid><description>定義 1 ある固定された単位ベクトル $\mathbf{u}$ に対して $\left&amp;lt; T, \mathbf{u} \right&amp;gt;$ が定数であるとき、正則曲線 $\alpha$ を ヘリックスhelixと呼び、$\mathbf{u}$ を 軸ax</description></item><item><title>複素関数の極限</title><link>https://freshrimpsushi.github.io/jp/posts/2076/</link><pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2076/</guid><description>定義 1 関数 $f : \mathbb{C} \to \mathbb{C}$ が開集合 $A \subset \mathbb{C}$ で定義された複素関数 $f : A \to \mathbb{C}$ であり、$\alpha \in \overline{A}$ とする。$f(z)$ が $z \to \alpha$ の時に 極限limit $l$</description></item><item><title>3次元ユークリッド空間における曲線が平面内に位置する同値条件</title><link>https://freshrimpsushi.github.io/jp/posts/2075/</link><pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2075/</guid><description>定理 1 単位スピード曲線$\kappa \ne 0$に対して、以下の3つは等価である。 (a): $\alpha$は平面にある。 (b): $B$は定数である。 (c): $\tau = 0$</description></item><item><title>ダイナミクスにおける軌道と位相ポートレート</title><link>https://freshrimpsushi.github.io/jp/posts/2074/</link><pubDate>Mon, 30 Aug 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2074/</guid><description>定義 1 $$ O \left( x_{0} \right) := \left\{ x \in X : x = \varphi^{t} x_{0} , \forall t \in T \right\} $$ $\left( T, X, \varphi^{t} \right)$ で表される動力学系で、$x_{0} \in X$の軌道orbitを上記のように示そう。軌</description></item><item><title>Juliaで2次元配列をCSVファイルに出力する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2073/</link><pubDate>Sat, 28 Aug 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2073/</guid><description>コード using CSV, DataFrames A = rand(1:10, 10) B = zeros(10) AB = DataFrame(hcat(A,B), [&amp;#34;A&amp;#34;, &amp;#34;B&amp;#34;]) CSV.write(&amp;#34;AB.csv&amp;#34;, AB) CSVパッケージのwrite関数を通じて簡単に2次元配列を出力できる。A, Bは1次元配列で、hcat</description></item><item><title>フレネ・セレの公式</title><link>https://freshrimpsushi.github.io/jp/posts/2072/</link><pubDate>Thu, 26 Aug 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2072/</guid><description>式 1 $\alpha$が$\kappa (s) \ne 0$の単位スピードカーブだとすると $$ \begin{align*} T^{\prime}(s) =&amp;amp; \kappa (s) N(s) \\ N^{\prime}(s) =&amp;amp; - \kappa (s) T(s) + \tau (s) B(s) \\ B^{\prime}(s) =&amp;amp; - \tau (s) N(s) \end{align*} $$ 説明 行列の形</description></item><item><title>力学系の厳密な定義</title><link>https://freshrimpsushi.github.io/jp/posts/2071/</link><pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2071/</guid><description>定義 1 空間$X$と時点$t \in T$におけるオペレーター$\varphi^{t}$をフローと呼ぶ。フローの集合$F := \left\{ \varphi^{t} \right\}_{t \in T}$が関数合成演算</description></item><item><title>フレネ-セレの公式: 曲率, 接線, 法線, 従法線, ねじれ</title><link>https://freshrimpsushi.github.io/jp/posts/2070/</link><pubDate>Sun, 22 Aug 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2070/</guid><description>定義 1 $\alpha$を単位速度カーブだとしよう。 接線 $T(s) = \alpha^{\prime} (s)$ のスピード$\kappa (s) := \left| T^{\prime}(s) \right|$ を$\alpha (s)$の曲率と言う。 $\a</description></item><item><title>弦の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2068/</link><pubDate>Wed, 18 Aug 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2068/</guid><description>定義 1 曲線 $\alpha : (c,d) \to \mathbb{R}^{3}$ が与えられたとする。$c &amp;lt; a &amp;lt; b &amp;lt; d$ ならば、全ての $t \in [a,b]$ について $\alpha (t) = \gamma (t)$ を満たす $\gamma : [a,b] \to \mathbb{R}^{3}$ を弦または曲線の断片と呼ぶ。</description></item><item><title>接線とタンジェントベクトル場</title><link>https://freshrimpsushi.github.io/jp/posts/2066/</link><pubDate>Sat, 14 Aug 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2066/</guid><description>定義 正則曲線 $\alpha (t)$ が与えられたとする。 ベクトル場 $\displaystyle T(t) := {{ d \alpha / d t } \over { \left| d \alpha / d t \right| }}$ を接線ベクトル場tangent vector fieldという。 次の</description></item><item><title>Julia変数名にグリーク文字と添え字を書く方法</title><link>https://freshrimpsushi.github.io/jp/posts/2065/</link><pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2065/</guid><description>概要 Juliaでは、変数名にユニコード(UTF-8)を許可している。だから、ギリシャ文字はもちろん、上付き文字、下付き文字、さらには韓国語や</description></item><item><title>再パラメータ化</title><link>https://freshrimpsushi.github.io/jp/posts/2064/</link><pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2064/</guid><description>定義 1 $k \in \mathbb{N}$と曲線$\alpha : (a,b) \to \mathbb{R}^{3}$が与えられているとする。全単射$g: (c,d) \to (a,b)$</description></item><item><title>対数関数の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2063/</link><pubDate>Sun, 08 Aug 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2063/</guid><description>定義 指数関数の逆関数をログ関数$\log : (0,\infty) \to \mathbb{R}$と定義する。すべての$x \in (0,\infty)$に対して$x = e^y$な</description></item><item><title>曲線の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2062/</link><pubDate>Fri, 06 Aug 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2062/</guid><description>定義 1 写像 $\alpha : (a,b) \to \mathbb{R}^{3}$ を曲線curveと呼ぶ。 $\alpha^{\prime} = \dfrac{d \alpha}{d t} = \mathbf{0}$ の時の点 $t = t_{0}$ を特異点singular pointと言う。 ある $k \in \mathbb{N}$ に対して、全ての</description></item><item><title>十分統計量</title><link>https://freshrimpsushi.github.io/jp/posts/2061/</link><pubDate>Wed, 04 Aug 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2061/</guid><description>定義 数式的な定義 1 パラメータ$\theta \in \Theta$に対するランダムサンプル$X_{1} , \cdots , X_{n}$の確率質量/密度関数を$f(</description></item><item><title>指数関数</title><link>https://freshrimpsushi.github.io/jp/posts/2060/</link><pubDate>Mon, 02 Aug 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2060/</guid><description>概要 指数関数exponential functionは、数学全般で一貫して現れる乗算の一般化です。元々の乗算では、底 $a &amp;gt; 0$ が必ずしも $a = e$ であ</description></item><item><title>効率的な推定量</title><link>https://freshrimpsushi.github.io/jp/posts/2059/</link><pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2059/</guid><description>定義 1 $Y$がパラメーター$\theta$に対する不偏推定量であるとしよう。 クラメール・ラオ下界 $\text{RC}$に対する推定量$Y$の</description></item><item><title>多項関数</title><link>https://freshrimpsushi.github.io/jp/posts/2058/</link><pubDate>Thu, 29 Jul 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2058/</guid><description>定義 1 $n \in \mathbb{N}_{0}$ と $\left\{ a_{k} \right\}_{k=0}^{n} \subset \mathbb{C}$ に対して、次のように定義される $P: \mathbb{C} \to \mathbb{C}$ を**$n$次の多項式関数**polynomial of degree $n$という。 $$ P(z) := a_{0} +</description></item><item><title>ラオ-ブラックウェル-コルモゴロフ定理</title><link>https://freshrimpsushi.github.io/jp/posts/2057/</link><pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2057/</guid><description>要旨 1 正則条件： (R0)：確率密度関数$f$は$\theta$に対して単射である。数式で表せば次を満たす。 $$ \theta \ne \theta ' \implies f \left( x_{k} ; \theta \right) \ne f \left( x_{k} ;</description></item><item><title>三角関数の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2056/</link><pubDate>Sun, 25 Jul 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2056/</guid><description>概要 三角関数は直角三角形の底角に三角比を対応させた関数だ。 定義 三角関数のサイン、コサイン$\sin, \cos : \mathbb{R} \to \mathbb{R}$は以下のよ</description></item><item><title>バートレットの同一性</title><link>https://freshrimpsushi.github.io/jp/posts/2055/</link><pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2055/</guid><description>定理 正則条件: (R0): 確率密度関数$f$は$\theta$に対して単射である。数式で示すと以下を満たす。 $$ \theta \ne \theta ' \implies f \left( x_{k} ; \theta \right) \ne f \left( x_{k} ; \theta ' \right) $$</description></item><item><title>数学における質量作用の法則</title><link>https://freshrimpsushi.github.io/jp/posts/2054/</link><pubDate>Wed, 21 Jul 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2054/</guid><description>説明 1 数理的モデリングでは、質量作用の法則は、名前が示す通り、日常的に使われる。たとえば、二つの物質$A$と$B$が反応して$k$の反応速度</description></item><item><title>生存関数</title><link>https://freshrimpsushi.github.io/jp/posts/2053/</link><pubDate>Mon, 19 Jul 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2053/</guid><description>定義 1 $S(0)=1$ であり、増加しない関数 $S : [0,\infty) \to [0,1]$ を 生存関数survival functionと定義する。 説明 簡単に言えば、生存関数とは時間 $t$ に生存して</description></item><item><title>エイズ伝播モデル</title><link>https://freshrimpsushi.github.io/jp/posts/2052/</link><pubDate>Sat, 17 Jul 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2052/</guid><description>概要 エイズAIDS、いわゆる後天性免疫不全症候群は、HIVというウイルスによって引き起こされる疾患で、何十年も人類を悩ませてきた感染症だ。エ</description></item><item><title>複素数の極座標表示</title><link>https://freshrimpsushi.github.io/jp/posts/2051/</link><pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2051/</guid><description>定義 1 複素数 $z \ne 0$ は、複素平面 上の点 $P(x,y)$ に対応していて、線分 $\overline{OP}$ の長さ $r := |z|$ と、$x$ 軸と線分 $\overline{OP}$ が作る反時計回りの角 $\theta$ を通じて、次のように極座標</description></item><item><title>周期関数</title><link>https://freshrimpsushi.github.io/jp/posts/2050/</link><pubDate>Tue, 13 Jul 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2050/</guid><description>定義 関数 $f : \mathbb{R} \to \mathbb{R}$ がある定数 $T \ne 0$ と全ての $t \in \mathbb{R}$ に対して以下を満たす時、$T$-周期関数$T$-periodic functionと言います。</description></item><item><title>ギブスの不等式</title><link>https://freshrimpsushi.github.io/jp/posts/2049/</link><pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2049/</guid><description>概要 ギブスの不等式gibbs Inequalityはシャノンエントロピーとクロスエントロピーとの関係を語り、クルバック・ライブラーの発散の下限</description></item><item><title>関数としての対角行列、対角成分</title><link>https://freshrimpsushi.github.io/jp/posts/2048/</link><pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2048/</guid><description>定義 対角成分 行列に対する$\text{diag} : \mathbb{R}^{n \times n} \to \mathbb{R}^{n}$は、以下のように行列の対角成分から成るベクトルを意味</description></item><item><title>相対エントロピー、クルバック・ライブラー・ダイバージェンス</title><link>https://freshrimpsushi.github.io/jp/posts/2047/</link><pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2047/</guid><description>ビルドアップ 二つの確率分布$P$と$Q$がある時、これらがどれほど異なるかを気にするシチュエーションは簡単に想像できる。 例えば、カメラに撮ら</description></item><item><title>複素数の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2046/</link><pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2046/</guid><description>定義 1 二次方程式$x^{2} +1 = 0$の解$x = \sqrt{-1}$を、虚数imaginary numberというんだ。 ２つの実数$x,y \in \m</description></item><item><title>クロスエントロピー</title><link>https://freshrimpsushi.github.io/jp/posts/2045/</link><pubDate>Sat, 03 Jul 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2045/</guid><description>概論 クロスエントロピーは、二つの確率分布を区別するために必要な平均ビット数であり、通常、真と仮定される（リファレンス）確率分布$p$と、これ</description></item><item><title>ポアンカレ写像</title><link>https://freshrimpsushi.github.io/jp/posts/2044/</link><pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2044/</guid><description>定義 1 ユークリッド空間 $\mathbb{R}^{n}$ と オープンセット $U \subset \mathbb{R}^{n}$ において 連続 な 関数 $f : U \to \mathbb{R}^{n}$ に対して、次のような ベクトル場 が 微分方程式 で与えられているとする。</description></item><item><title>条件付きエントロピー</title><link>https://freshrimpsushi.github.io/jp/posts/2043/</link><pubDate>Tue, 29 Jun 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2043/</guid><description>定義 1 確率変数 $X_{1}, \cdots , X_{n}$ の結合確率質量関数 $p$ または結合確率密度関数 $f$ が与えられているとする。$H \left( X_{1}, \cdots , X_{n} | X_{k} \right)$ を$X_{k}$ が与えられてい</description></item><item><title>一般的な直線、平面、球の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2042/</link><pubDate>Sun, 27 Jun 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2042/</guid><description>定義 1 ベクトル空間 $X$ が与えられているとする。 次の方程式を満たす点の集まり $L \subset X$ 又は $\alpha (t)$ 自体を点 $\mathbf{x}_{0} \in X$ を通り、ベクトル $\mathbf{v} \ne 0$ と平行な直線と定義</description></item><item><title>Juliaで変数の値を便利に出力する方法、補間</title><link>https://freshrimpsushi.github.io/jp/posts/2041/</link><pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2041/</guid><description>概要 Juliaの便利な機能である補間法interpolationについて説明する。インターポレーションをうまく利用すると、出力文を簡単かつき</description></item><item><title>ベクトル空間で定義される基底の方向</title><link>https://freshrimpsushi.github.io/jp/posts/2040/</link><pubDate>Wed, 23 Jun 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2040/</guid><description>定義 1 $$ U = \left\{ \mathbf{u}_{1}, \cdots, \mathbf{u}_{n} \right\} \\ V = \left\{ \mathbf{v}_{1}, \cdots, \mathbf{v}_{n} \right\} $$ 二つの順序のある集合$U,V$がベクトル空間$X$の基底だとして、行列$\left( a_{ij} \right) \in \mathbb{C}^{n \times n}$</description></item><item><title>天井関数と床関数</title><link>https://freshrimpsushi.github.io/jp/posts/2039/</link><pubDate>Mon, 21 Jun 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2039/</guid><description>定義 1 天井関数ceil $\lceil \cdot \rceil : \mathbb{R} \to \mathbb{Z}$ と 床関数floor $\lceil \cdot \rceil : \mathbb{R} \to \mathbb{Z}$ は、次のように定義される。 $$ \lceil x \rceil := \min \left\{ n \in \mathbb{Z} : x \le n \right\} \\ \lfloor x \rfloor := \max \left\{ n</description></item><item><title>一般的な角度と垂直の定義</title><link>https://freshrimpsushi.github.io/jp/posts/2038/</link><pubDate>Sat, 19 Jun 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2038/</guid><description>定義 1 $V$ をベクトル空間とする。二つのベクトル $\mathbf{u}, \mathbf{v} \in V$ に対して、以下を満たす $\theta$ を二つのベクトルの間の角度angleと定義する。 $$ \cos \theta = {{ \left&amp;lt; \mathbf{u}, \mathbf{v}</description></item><item><title>結合エントロピー</title><link>https://freshrimpsushi.github.io/jp/posts/2037/</link><pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2037/</guid><description>定義 確率変数 $X_{1}, \cdots , X_{n}$ の結合確率質量関数 $p$ または結合確率密度関数 $f$ が与えられているとする。 離散 $$ H \left( X_{1}, \cdots , X_{n} \right) := - \sum_{x_{1}} \cdots \sum_{x_{n}} p \left( x_{1} , \cdots , x_{n} \right) \log_{2} p \left(</description></item><item><title>WindowsのCMDとPowerShellでJuliaを使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2036/</link><pubDate>Tue, 15 Jun 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2036/</guid><description>ガイド ステップ0. julia 1.6 以上をインストール バージョン1.6からは、インストール過程で環境変数に追加できる。示されたオプションをチェックしてイン</description></item><item><title>シャノンエントロピー：確率変数によって定義されるエントロピー</title><link>https://freshrimpsushi.github.io/jp/posts/2035/</link><pubDate>Sun, 13 Jun 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2035/</guid><description>概要 シャノンエントロピーshannon Entropyまたは情報エントロピーは、確率変数によって定義される無秩序の尺度であり、確率分布上でどれ</description></item><item><title>フィッシャー情報</title><link>https://freshrimpsushi.github.io/jp/posts/2034/</link><pubDate>Fri, 11 Jun 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2034/</guid><description>ビルドアップ スコア関数 パラメータ $\theta \in \Theta$ に対する確率密度関数が $f \left( x ; \theta \right)$ である確率変数 $X$ を考えよう。対数尤度関数が最大になる推定量である最尤</description></item><item><title>シャノン情報：確率論によって定義される情報</title><link>https://freshrimpsushi.github.io/jp/posts/2033/</link><pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2033/</guid><description>ビルドアップ カード合わせゲーム ジョーカーを除いたトランプカード52枚のうち一枚を裏向きに引き、どのカードか当てる賭けをアリスとボブがしている</description></item><item><title>種間伝播モデル：3つの集団間の病気の伝播</title><link>https://freshrimpsushi.github.io/jp/posts/2032/</link><pubDate>Mon, 07 Jun 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2032/</guid><description>概要 種間障壁species Barrierとは、病原体がもとの宿主から他の種に感染するのが難しい現象を言う。この種間障壁を超えて病気が感染する</description></item><item><title>最適解：最大因数と最小因数</title><link>https://freshrimpsushi.github.io/jp/posts/2031/</link><pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2031/</guid><description>難しい定義 任意の集合$X$と全順序集合$\left( Y, \le \right)$が与えられているとしよう。 $X$の部分集合$S \subset X$について、関数$</description></item><item><title>性病モデル：2つの集団間の病気の伝播</title><link>https://freshrimpsushi.github.io/jp/posts/2030/</link><pubDate>Thu, 03 Jun 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2030/</guid><description>概要 クックcookeとヨークyorkeによって提案された性病の伝播の数学的モデルについて学ぶ。リファレンスでは性病の具体的な例として淋病go</description></item><item><title>数理統計学における正則性条件</title><link>https://freshrimpsushi.github.io/jp/posts/2029/</link><pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2029/</guid><description>概要 数学を使用する科目では、正則性regularity conditionsとは、一般的に応用の範囲が広く、理論的な展開を容易にする条件を指し</description></item><item><title>SISモデル：再感染と慢性病</title><link>https://freshrimpsushi.github.io/jp/posts/2028/</link><pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2028/</guid><description>概要 SISモデルは、感染や情報の拡散において免疫や無関心などを考慮しないモデルだ。主にエピデミックではなくエンデミック、例えば風邪、インフル</description></item><item><title>最適値：最大値と最小値</title><link>https://freshrimpsushi.github.io/jp/posts/2027/</link><pubDate>Fri, 28 May 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2027/</guid><description>簡単な定義 最大値maximumと最小値minimumを合わせて最適値optimumと言う。 集合$X$で最も大きい要素を最大値$\max X$、</description></item><item><title>最尤推定量</title><link>https://freshrimpsushi.github.io/jp/posts/2026/</link><pubDate>Wed, 26 May 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2026/</guid><description>ビルドアップ パラメータ$\theta \in \Theta$に対して、確率密度関数が$f \left( x ; \theta \right)$である確率変数$X$について考えよう</description></item><item><title>SIRモデル：最も基本的な拡散モデル</title><link>https://freshrimpsushi.github.io/jp/posts/2025/</link><pubDate>Mon, 24 May 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2025/</guid><description>概要 SIRモデルは、疾病や情報の拡散をシンプルかつ直感的によく説明する、最も単純で多くの変形を持つ力学的区画モデルのひとつだ。 モデル 1 $$ \begin{align*} {{d</description></item><item><title>Juliaのメタプログラミング</title><link>https://freshrimpsushi.github.io/jp/posts/2024/</link><pubDate>Sat, 22 May 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2024/</guid><description>コード 1 ジュリアではメタプログラミングを言語レベルでサポートしている。以下は文字列をコードそのものとして読み込み、実行した結果だ。 julia&amp;gt; text = &amp;#34;f(x) =</description></item><item><title>伝染病の拡散モデルにおける基本再生産数とは？</title><link>https://freshrimpsushi.github.io/jp/posts/2023/</link><pubDate>Thu, 20 May 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2023/</guid><description>定義 基礎感染再生産数basic Reproduction number $\mathcal{R}_{0}$ は、伝染病が広がる速度を示す値であり。基本的に一人の感染者が他の人をどれほど感染させるかについての期待値</description></item><item><title>Juliaで配列をフラット化する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2022/</link><pubDate>Tue, 18 May 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2022/</guid><description>コード vec() 関数を使えばいい。 julia&amp;gt; A = rand(0:9, 3,4) 3×4 Array{Int64,2}: 6 8 7 3 2 9 3 2 5 0 6 7 julia&amp;gt; vec(A) 12-element Array{Int64,1}: 6 2 5 8 9 0 7 3 6 3 2 7 人間の目には、1次元配列と同じように見え</description></item><item><title>一致推定量</title><link>https://freshrimpsushi.github.io/jp/posts/2021/</link><pubDate>Sun, 16 May 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2021/</guid><description>定義 1 確率変数$X$が累積分布関数$F ( x ; \theta), \theta \in \Theta$を持つとする。$X_{1} , \cdots , X_{n}$を$X$から抽出されたサンプルと</description></item><item><title>Juliaで距離行列計算を最適化する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2020/</link><pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2020/</guid><description>結論 $n$ 個の座標間の距離を計算しようとする。 全ての座標間を計算する必要がなければ、グループに分けて長方形の距離行列を作ればいい。 長方形の距離行</description></item><item><title>力学区画モデル</title><link>https://freshrimpsushi.github.io/jp/posts/2019/</link><pubDate>Wed, 12 May 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2019/</guid><description>概要 1 伝染病の区分モデルは伝染病の流行に関するモデルであり、人口動態に伝染病を加え、「人口」をいくつかの区分に分ける。 疫学は伝染病を扱う学問</description></item><item><title>Juliaで重み付けとランダムサンプリングをする方法</title><link>https://freshrimpsushi.github.io/jp/posts/2018/</link><pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2018/</guid><description>概要 Juliaで、Rのsample()やPythonパッケージnumpyのrandom.choice()と同じ役割をするsample()関数</description></item><item><title>スミス-ウォーターマン アラインメント：ローカル シーケンス アラインメント</title><link>https://freshrimpsushi.github.io/jp/posts/2017/</link><pubDate>Sat, 08 May 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2017/</guid><description>概要 二つの塩基配列から、最も似ている部分のアラインメントを見つけることを局所アラインメントlocal Alignmentと言い、その方法として</description></item><item><title>Juliaでの文字と整数の等価オペレータ==の速度比較</title><link>https://freshrimpsushi.github.io/jp/posts/2016/</link><pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2016/</guid><description>結論 配列の各要素をEqualオペレータ==で比較すると、整数よりもCharの方が早い。 速度比較 julia&amp;gt; integer = rand(1:5, N); print(typeof(integer)) Array{Int64,1} julia&amp;gt; character = rand([&amp;#39;S&amp;#39;,&amp;#39;E&amp;#39;,&amp;#39;I&amp;#39;,&amp;#39;R&amp;#39;,&amp;#39;D&amp;#39;], N); print(typeof(character)) Array{Char,1} julia&amp;gt; @time integer .== 1; 0.009222 seconds (6 allocations:</description></item><item><title>二項分布から近似される正規分布の分散安定化</title><link>https://freshrimpsushi.github.io/jp/posts/2015/</link><pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2015/</guid><description>例示 1 $Y = Y_{n}$が二項分布$\text{Bin} (n,p)$に従うとすれば、 $$ \arcsin \sqrt{ {{ Y } \over { n }} } \overset{D}{\to} N \left( \arcsin \sqrt{p} , n/4 \right) $$ $N \left( \mu , \sigma^{2} \rig</description></item><item><title>2次元配列の行優先と列優先</title><link>https://freshrimpsushi.github.io/jp/posts/2014/</link><pubDate>Sun, 02 May 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2014/</guid><description>概要 1 行列や2次元配列の行優先row-majorと列優先column-majorについて説明する。簡単に言えば、配列を参照しながらどの方向で</description></item><item><title>スチューデントのt検定の証明</title><link>https://freshrimpsushi.github.io/jp/posts/203/</link><pubDate>Fri, 30 Apr 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/203/</guid><description>定理 1 確率変数 $X_{1} , \cdots , X_{n}$ がiidで正規分布 $N\left( \mu,\sigma^{2} \right)$ に従うとすると (a): $$ \overline{X} \sim N\left( \mu , { {\sigma^2} \over {n} } \right) $$ (b): $$ \overline{X} \perp S^2 $$ (c): $$ (n-1) { {S^2} \over {\sigma^2} } \sim \chi^2 (n-1) $$ (d): $$ T = { {\overline{X} -</description></item><item><title>RGBカラーチートシート</title><link>https://freshrimpsushi.github.io/jp/posts/2013/</link><pubDate>Wed, 28 Apr 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2013/</guid><description>概要 よく使われるRGB色の商標だ。 コード</description></item><item><title>ニードルマン・ワンシュアルゴリズム：グローバルシークエンスアラインメント</title><link>https://freshrimpsushi.github.io/jp/posts/2012/</link><pubDate>Mon, 26 Apr 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2012/</guid><description>概要 二つの塩基配列の共通部分が最も多くなるように整列を見つけることをグローバルアライメントと呼び、その方法として最も広く使われているのがニー</description></item><item><title>疑似逆行列</title><link>https://freshrimpsushi.github.io/jp/posts/2011/</link><pubDate>Sat, 24 Apr 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2011/</guid><description>概観 擬逆行列pseudoinvers matrixは、行と列のサイズが同じでない、正方行列でない行列$A \in \mathbb{R}^{m \times n}$に対して、&amp;lsquo;実</description></item><item><title>一斉射撃戦闘モデル</title><link>https://freshrimpsushi.github.io/jp/posts/2010/</link><pubDate>Thu, 22 Apr 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2010/</guid><description>概要 ランチェスターの法則が近代戦と現代戦の様相を描写するモデルであれば、一斉射撃戦闘モデルは特にスケールの大きい艦隊戦を描写する。艦隊戦にお</description></item><item><title>多変量確率変数の分布収束</title><link>https://freshrimpsushi.github.io/jp/posts/2009/</link><pubDate>Tue, 20 Apr 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2009/</guid><description>定義1 $p$次元ランダムベクトル$\mathbf{X}$とランダムベクトルのシークエンス$\left\{ \mathbf{X}_{n} \right\}$が次の条件を満た</description></item><item><title>ランチェスターの法則</title><link>https://freshrimpsushi.github.io/jp/posts/2008/</link><pubDate>Sun, 18 Apr 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2008/</guid><description>法則 第一法則 近代戦または近接戦闘では、戦闘力は部隊の規模に比例する。 第二法則 現代戦または遠距離戦闘では、戦闘力は部隊の規模の二乗に比例する。</description></item><item><title>gitの警告への対処法：LFがCRLFに置換されます…</title><link>https://freshrimpsushi.github.io/jp/posts/2007/</link><pubDate>Fri, 16 Apr 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2007/</guid><description>コマンド git config --global core.safecrlf false これはLinuxとWindowsの違いによって出る警告だけど、無視しても大丈夫だ。上記の通りに入力すればいい。</description></item><item><title>メイ-レナード競争モデル</title><link>https://freshrimpsushi.github.io/jp/posts/2006/</link><pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2006/</guid><description>概要 メイ-レナード競争モデルは、3つのグループが含まれる競争状態における個体群動態モデルであり、各グループが互いに食べるという三角関係を描写</description></item><item><title>1+2+3+4+5+⋯=-1/12の解析的証明</title><link>https://freshrimpsushi.github.io/jp/posts/2005/</link><pubDate>Sat, 10 Apr 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2005/</guid><description>定理 $$ \begin{align*} &amp;amp; 1 + 2 + 3 + 4 + 5 + \cdots \\ =&amp;amp; \sum_{n \in \mathbb{N}} {{ 1 } \over { n^{-1} }} \\ =&amp;amp; \zeta (-1) \\ =&amp;amp; -{{ 1 } \over { 12 }} \end{align*} $$ 説明 正の数をずっと足していたら、どうして負の数が出るん</description></item><item><title>ロトカ＝ボルテラ競争モデル</title><link>https://freshrimpsushi.github.io/jp/posts/2004/</link><pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2004/</guid><description>概要 ロトカ・ヴォルテラの競争モデルは、二つの集団間の競争的排除の原理principle of Competitive Exclusionを説明するためのモデルであり、特</description></item><item><title>多変量t分布</title><link>https://freshrimpsushi.github.io/jp/posts/2003/</link><pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2003/</guid><description>定義 位置ベクトル$\mathbf{\mu} \in \mathbb{R}^{p}$と正の定符号を持つスケール行列$\Sigma \in \mathbb{R}^{p \times p}$に対して、</description></item><item><title>ロトカ＝ヴォルテラ 捕食者-被食者モデル</title><link>https://freshrimpsushi.github.io/jp/posts/2002/</link><pubDate>Wed, 31 Mar 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2002/</guid><description>概要 ロトカ-ボルテラの捕食者-被食者モデルは種間の相互作用をシステムとしてモデリングし、特に捕食者-被食者モデルは二種の捕食関係を示す。二種</description></item><item><title>Gitのパスワードを保存する方法</title><link>https://freshrimpsushi.github.io/jp/posts/2001/</link><pubDate>Mon, 29 Mar 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2001/</guid><description>コマンド git config credential.helper store 上のように入力すればいい。</description></item><item><title>Juliaパッケージのインストール時に\General\registry.toml: No such file or directoryというエラーを解決</title><link>https://freshrimpsushi.github.io/jp/posts/2069/</link><pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2069/</guid><description>エラー ERROR: SystemError: opening file &amp;quot;C:\\Users\\rmsms\\.julia\\registries\\General\\registry.toml&amp;quot;: No such file or directory 原因 人を本当にイライラさせるエラーだけど、言葉通りこのパスにRegistry.tomlファイルがなくて発生するエラ</description></item><item><title>WindowsでJuliaの最新バージョンをインストールする方法</title><link>https://freshrimpsushi.github.io/jp/posts/2067/</link><pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2067/</guid><description>ガイド ジュリア バージョン 1.10 以降 ターミナルで上記のように winget install julia -s msstore コマンドを入力すればいい。 ジュリア バージョン 1.10 未満 Step 1. ジュリアインストール ジ</description></item><item><title>固有値と固有ベクトル</title><link>https://freshrimpsushi.github.io/jp/posts/319/</link><pubDate>Wed, 10 Mar 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/319/</guid><description>定義1 $n\times n$ 行列 $A$が与えられたとしよう。$\mathbf{0}$でない$n\times 1$列ベクトル$\mathbf{x}$、そして定数$</description></item><item><title>政府号行列</title><link>https://freshrimpsushi.github.io/jp/posts/336/</link><pubDate>Sat, 06 Mar 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/336/</guid><description>定義1 正定値行列 二次形式$\mathbf{x}^{\ast} A \mathbf{x}$が すべての$\mathbf{x} \ne \mathbf{0}$</description></item><item><title>行列式</title><link>https://freshrimpsushi.github.io/jp/posts/252/</link><pubDate>Sat, 27 Feb 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/252/</guid><description>定義 $A$を次のような$2 \times 2$ 行列とする。 $$ A = \begin{bmatrix} a &amp;amp; b \\ c &amp;amp; d \end{bmatrix} $$ $A$の行列式determinantを次のように定義し、$\det(A)</description></item><item><title>エルミート行列の異なる固有値の固有ベクトルは互いに直交する。</title><link>https://freshrimpsushi.github.io/jp/posts/330/</link><pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/330/</guid><description>정리 $A$を大きさが$n \times n$のエルミート行列としよう。$A$の異なる二つの固有値$\lambda , \mu$に対する固有ベクトルを$\mat</description></item><item><title>エルミート行列の固有値は常に実数である</title><link>https://freshrimpsushi.github.io/jp/posts/310/</link><pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/310/</guid><description>定理 $A$を$n \times n$のサイズを持つエルミート行列としよう。そうすると、$A$の固有値は全て実数である。 説明 一般の行列において、固有値が実数</description></item><item><title>多変量正規分布</title><link>https://freshrimpsushi.github.io/jp/posts/1954/</link><pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1954/</guid><description>定義 母平均ベクトル $\mathbf{\mu} \in \mathbb{R}^{p}$ と共分散行列 $\Sigma \in \mathbb{R}^{p \times p}$ に対して、以下のような確率密度関数を持つ多変量分布 $N_{p} \left( \mu , \Sigma \right)$ を 多変量正規分布multivar</description></item><item><title>多変量確率変数の確率収束</title><link>https://freshrimpsushi.github.io/jp/posts/1952/</link><pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1952/</guid><description>定義 1 $p$次元のランダムベクトル$\mathbf{X}$とランダムベクトルのシーケンス$\left\{ \mathbf{X}_{n} \right\}$が下記を満たす時</description></item><item><title>1+1+1+1+1+⋯=-1/12 の解析的証明</title><link>https://freshrimpsushi.github.io/jp/posts/1944/</link><pubDate>Sat, 06 Feb 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1944/</guid><description>定理 $$ \begin{align*} &amp;amp; 1 + 1 + 1 + 1 + 1 + \cdots \\ =&amp;amp; \sum_{n \in \mathbb{N}} {{ 1 } \over { n^{0} }} \\ =&amp;amp; \zeta (0) \\ =&amp;amp; -{{ 1 } \over { 2 }} \end{align*} $$ 説明 正の数をずっと足していくのにどうして負の数が出るん</description></item><item><title>バス拡散モデル：革新と模倣</title><link>https://freshrimpsushi.github.io/jp/posts/1946/</link><pubDate>Sat, 06 Feb 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1946/</guid><description>モデル 1 2 $$ \dot{N} = \left( p + q {{ N } \over { K }} \right) \left( 1 - {{ N } \over { K }} \right) $$ 変数 $N(t)$: $t$時点での集団の個体数を示す。 パラメータ $K$: 環境容量carrying</description></item><item><title>共分散行列</title><link>https://freshrimpsushi.github.io/jp/posts/1950/</link><pubDate>Sat, 06 Feb 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1950/</guid><description>定義1 $p$次元ランダムベクトル$\mathbf{X} = \left( X_{1}, \cdots , X_{p} \right)$に対して、次のように定義された$\operatorname</description></item><item><title>ゴンペルツ成長モデル：時間に依存する成長の遅延</title><link>https://freshrimpsushi.github.io/jp/posts/1943/</link><pubDate>Fri, 05 Feb 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1943/</guid><description>モデル 1 $$ {{ d N } \over { dt }} = r e^{ - \alpha t} N \qquad, \alpha 0 $$ 変数 $N(t)$: $t$ 時点での個体数を表す。 パラメータ $r \in \mathbb{R}$: 固有の増加率intrinsic Rate of Increa</description></item><item><title>数理生物学におけるアリー効果</title><link>https://freshrimpsushi.github.io/jp/posts/1941/</link><pubDate>Thu, 04 Feb 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1941/</guid><description>アリー効果とは？ 1 個体群の密度が低い時に人口が減少する効果をアリー効果Allee effectという。数式的には次のようにモデルで$N$に対す</description></item><item><title>ラマヌジャンの和</title><link>https://freshrimpsushi.github.io/jp/posts/1936/</link><pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1936/</guid><description>定義 発散する級数に値を割り当てることをラマヌジャン和と呼び、シンボル$\re$を通じて表される。 定理 [1] グランディ級数 1: $$ 1-1+1-1+ \cdots = {{ 1 } \over { 2 }}</description></item><item><title>中心極限定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/43/</link><pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/43/</guid><description>定理 1 $\left\{ X_{k} \right\}_{k=1}^{n}$がiid確率変数で、確率分布$\left( \mu, \sigma^2 \right) $に従うとき、$n \to \infty$で $$ \sqrt{n} {{ \overline{X}_n</description></item><item><title>格子モデルシミュレーションにおける拡散</title><link>https://freshrimpsushi.github.io/jp/posts/1939/</link><pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1939/</guid><description>シミュレーション このポストでは、格子空間でのある成分の拡散現象を模倣しようとする。これは同時にSI病気の拡散モデルのシミュレーションでもあり</description></item><item><title>リーマンゼータ関数のローラン展開の導出</title><link>https://freshrimpsushi.github.io/jp/posts/1934/</link><pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1934/</guid><description>定理 リーマンのゼータ関数$\zeta$のローラン展開は以下の通りです。 $$ \zeta (s) = {{ 1 } \over { s-1 }} + \sum_{n=0}^{\infty} \gamma_{n} {{ (1-s)^{n} } \over { n! }} \qquad , s &amp;gt; 1 $$ ここで、$\ga</description></item><item><title>弱い大数の法則の証明</title><link>https://freshrimpsushi.github.io/jp/posts/32/</link><pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/32/</guid><description>法則 $\left\{ X_{k} \right\}_{k=1}^{n}$がiidの確率変数であり、分布 $\left( \mu, \sigma^2 \right) $に従うとき、$n \to \infty$であるならば $$ \overline{X}_n \overset{P}{\to} \mu $$</description></item><item><title>格子モデルシミュレーションの第一歩：ヒートマップで表現する</title><link>https://freshrimpsushi.github.io/jp/posts/1932/</link><pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1932/</guid><description>シミュレーション コードレビュー ステップ1．格子空間の生成 julia&amp;gt; colormap\_SI = [colorant&amp;#34;#EEEEEE&amp;#34;, colorant&amp;#34;#111111&amp;#34;] julia&amp;gt; row\_size = 5 5 julia&amp;gt; column\_size = 5 5 julia&amp;gt; Random.seed!(3); julia&amp;gt; stage\_lattice = rand([&amp;#39;S&amp;#39;], row\_size, column\_size) 5×5 Array{Char,2}: &amp;#39;S&amp;#39; &amp;#39;S&amp;#39; &amp;#39;S&amp;#39; &amp;#39;S&amp;#39; &amp;#39;S&amp;#39; &amp;#39;S&amp;#39; &amp;#39;S&amp;#39; &amp;#39;S&amp;#39; &amp;#39;S&amp;#39; &amp;#39;S&amp;#39; &amp;#39;S&amp;#39; &amp;#39;S&amp;#39; &amp;#39;S&amp;#39; &amp;#39;S&amp;#39; &amp;#39;S&amp;#39;</description></item><item><title>解析接続</title><link>https://freshrimpsushi.github.io/jp/posts/1931/</link><pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1931/</guid><description>定義 1 解析関数 $f_{1}: \mathscr{R}_{1} \to \mathbb{C}$ について、 $$ \mathscr{S} := \mathscr{R}_{1} \cap \mathscr{R}_{2} \ne \emptyset \\ f_{1} (z) = f_{2} (z) \qquad , z \in \mathscr{S} $$ を満たしつつ、$\mathscr{R}_{2} \subset \mathbb{C}$ で解析関数 $f_{2}: \mathscr{R}_{2} \to \mathbb{C}$</description></item><item><title>分布の収束は確率の境界を意味する</title><link>https://freshrimpsushi.github.io/jp/posts/176/</link><pubDate>Fri, 29 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/176/</guid><description>定理 確率変数のシーケンス $\left\{ X_{n} \right\}$ が分布収束する場合、確率的に有界である。 $\overset{D}{\to}$ は分布収束を意味する。 説明 ほぼ確実に収束するならば分布収束することを</description></item><item><title>解析関数</title><link>https://freshrimpsushi.github.io/jp/posts/1929/</link><pubDate>Fri, 29 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1929/</guid><description>定義 開集合$A \subset \mathbb{C}$と$f: A \to \mathbb{C}$が定義されていて、$\alpha \in A$としよう。 $\displaystyle \lim_{z \to \alpha } f(z) = f (\</description></item><item><title>確率収束は分布収束を意味する</title><link>https://freshrimpsushi.github.io/jp/posts/175/</link><pubDate>Thu, 28 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/175/</guid><description>定理1 確率変数 $X$ とその シーケンス $\left\{ X_{n} \right\}$ について $$ X_{n} \overset{P}{\to} X \implies X_{n} \overset{D}{\to} X $$ $\overset{P}{\to}$ は確率収束を意味する。 $\overset{D}{\to}$ は分布収束を意味する。 説明 もっと直感的に言い換える</description></item><item><title>数理統計学における確率の境界</title><link>https://freshrimpsushi.github.io/jp/posts/1922/</link><pubDate>Wed, 27 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1922/</guid><description>定義 1 ある確率変数のシークエンス $\left\{ X_{n} \right\}$ が与えられているとする。全ての $\varepsilon &amp;gt; 0$ に対して、次を満たす$N_{\varepsilon} \in \mathbb{N}$ および定数</description></item><item><title>Juliaで16進数RGBコード（HEX）を使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1921/</link><pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1921/</guid><description>コード Juliaで色を取り扱うために提供されるパッケージはColors.jlだ。可視化パッケージのPlots.jlを読み込めば、Colors</description></item><item><title>スチューデントのt分布の極限分布としての標準正規分布の導出</title><link>https://freshrimpsushi.github.io/jp/posts/195/</link><pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/195/</guid><description>定理 $T_n \sim t(n)$ ならば $$ T_n \ \overset{D}{\to} N(0,1) $$ $N \left( \mu , \sigma^{2} \right)$ は平均が $\mu$ で分散が $\sigma^{2}$ の正規分布だ。 $t(r)$ は自由度 $r$ のt-分布だ。 $\overset{D}{\to}$ はそれぞれ分布収束を意味する。 もともと</description></item><item><title>Juliaでのデータフレームと2次元配列間の変換方法</title><link>https://freshrimpsushi.github.io/jp/posts/1930/</link><pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1930/</guid><description>環境 OS: Windows11 バージョン: Julia 1.9.0, DataFrames v1.5.0</description></item><item><title>ポアソン分布の極限分布としての標準正規分布の導出</title><link>https://freshrimpsushi.github.io/jp/posts/197/</link><pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/197/</guid><description>定理 $X_{n} \sim \text{Poi} \left( n \right)$ かつ $\displaystyle Y_{n} := {{ X_{n} - n } \over { \sqrt{n} }}$ ならば $$ Y_{n} \overset{D}{\to} N(0,1) $$ $N \left( \mu , \sigma^{2} \right)$ は平均が $\mu$ で分散が $\sigma^{2}$ の正規分布だ。 $\text{Poi} (\lambda)$ は平均と分散が $\lambda$ のポアソン分布</description></item><item><title>Juliaで *.csvファイルを読み込む方法</title><link>https://freshrimpsushi.github.io/jp/posts/1923/</link><pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1923/</guid><description>ガイド 旧バージョン julia v1.5.0では、*.csvファイルを以下のように読み込んだ。 実際、Juliaはまだデータ入力に特別便利な言語ではない。</description></item><item><title>リーマン予想</title><link>https://freshrimpsushi.github.io/jp/posts/1920/</link><pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1920/</guid><description>推測 $\zeta (s) = 0$ を満たす全ての非自明な解 $s$ は $\displaystyle \operatorname{Re} (s) = {{ 1 } \over { 2 }}$ を満たすだろう。 $\zeta$ はリーマンのζ（ゼータ）関数だ。 $\re(z)$ は複素数 $z \in \mathbb{C}$ の実部を意味</description></item><item><title>WindowsでJuliaの並列計算に使用するスレッド数を変更する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1933/</link><pubDate>Sat, 23 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1933/</guid><description>ガイド Juliaでは並列計算が日常的に使用されるため、場合によってはコンピュータの全リソースを計算に集中させる必要がある。スレッド数を変更す</description></item><item><title>ロジスティック成長モデル：集団成長の限界</title><link>https://freshrimpsushi.github.io/jp/posts/1915/</link><pubDate>Sat, 23 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1915/</guid><description>モデル $$ \dot{N} = {{ r } \over { K }} N ( K - N) $$ 変数 $N(t)$：$t$時点での集団の個体数を表す。 パラメータ $r \in \mathbb{R}$：固有増加率i</description></item><item><title>Juliaで実行されるコードファイルの位置を確認する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1935/</link><pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1935/</guid><description>ガイド ジュリアを使っている人なら、サーバーを含む複数のオペレーティングシステムやコンピューターを使うことに慣れている可能性が高い。ファイル入</description></item><item><title>二項分布の極限分布としての標準正規分布の導出</title><link>https://freshrimpsushi.github.io/jp/posts/196/</link><pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/196/</guid><description>定理 ド・モアブル-ラプラス定理 $X_i \sim B(1,p)$ であり、かつ $Y_n = X_1 + X_2 + \cdots + X_n$ であれば、$Y_n \sim B(n,p)$ となり $$ { { Y_n - np } \over {\sqrt{ np(1-p) } } }\overset{D}{\to} N(0,1) $$ $N \left( \mu , \sigma^{2} \right)$ は平</description></item><item><title>Linux上のJuliaでの並列計算に使用するスレッド数の変更方法</title><link>https://freshrimpsushi.github.io/jp/posts/1937/</link><pubDate>Thu, 21 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1937/</guid><description>ガイド Juliaでは、並列計算を日常的に使用するため、場合によってはコンピューターの全てのリソースを計算に集中させる必要がある。スレッド数を</description></item><item><title>二項分布の極限分布としてのポアソン分布の導出</title><link>https://freshrimpsushi.github.io/jp/posts/198/</link><pubDate>Thu, 21 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/198/</guid><description>定理 $X_{n} \sim B(n,p)$としよう。 もし$\mu \approx np$ならば $$ X_{n} \overset{D}{\to} \text{Poi} (\mu) $$ $B(n,p)$は試行回数$n$、確率$p$の二項分布だ。 $\text{Poi} (\lam</description></item><item><title>Juliaで合成関数を使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1942/</link><pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1942/</guid><description>コード julia&amp;gt; f(x) = 2x + 1 f (generic function with 1 method) julia&amp;gt; g(x) = x^2 g (generic function with 1 method) julia&amp;gt; (g ∘ f)(3) 49 説明 Juliaでは、関数の合成はプログラミングでのパイプオペレーターに似ている。</description></item><item><title>数理統計学における分布収束</title><link>https://freshrimpsushi.github.io/jp/posts/1888/</link><pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1888/</guid><description>定義 1 確率変数 $X$ と確率変数のシーケンス $\left\{ X_{n} \right\}$ が次を満たす場合、$n \to \infty$ の時、$X_{n}$ へ分布収束convergence in distribu</description></item><item><title>エージェントベースモデルシミュレーションにおける死亡</title><link>https://freshrimpsushi.github.io/jp/posts/1884/</link><pubDate>Sat, 16 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1884/</guid><description>シミュレーション このポストでは、生成されたエージェントが死亡するアクションを与えることで、集団の逆成長をマクロの観点から模倣しようとしている</description></item><item><title>エージェントベースモデルシミュレーションにおける繁殖</title><link>https://freshrimpsushi.github.io/jp/posts/1880/</link><pubDate>Tue, 12 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1880/</guid><description>シミュレーション このポストでは、生成されたエージェントに自身を複製するアクションを与え、マクロレベルでの集団成長を模倣しようとする。このシミ</description></item><item><title>シーケンスアラインメントスコアとギャップペナルティ</title><link>https://freshrimpsushi.github.io/jp/posts/1878/</link><pubDate>Sun, 10 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1878/</guid><description>定義 参照配列とクエリ配列が与えられているとしよう。配列アラインメントスコアsequence Alignment Scoreとは、２つの配列を比較した時にどの程度</description></item><item><title>配列アラインメントでの置換行列</title><link>https://freshrimpsushi.github.io/jp/posts/1881/</link><pubDate>Sun, 10 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1881/</guid><description>定義 シーケンスアラインメントスコアを記録する時、マッチとミスマッチの基準となる行列を置換行列substitution matrixと呼ぶ。 例 using</description></item><item><title>エージェントベースシミュレーションの最初のステップ：散布図で表現하기</title><link>https://freshrimpsushi.github.io/jp/posts/1875/</link><pubDate>Fri, 08 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1875/</guid><description>シミュレーション コードレビュー ステップ1. パッケージのロード、初期値設定 code1 上記のコードはパッケージを読み込み、初期エージェントの数、各ターン</description></item><item><title>ベクトルの定義</title><link>https://freshrimpsushi.github.io/jp/posts/1947/</link><pubDate>Fri, 08 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1947/</guid><description>定義 数の並びをベクトルと言う。 説明 通常の教科書では、ベクトルは「大きさと方向を持つ幾何学的なオブジェクト」として学習される。物理学で最初に接</description></item><item><title>シーケンスアラインメントとは？</title><link>https://freshrimpsushi.github.io/jp/posts/1874/</link><pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1874/</guid><description>定義 塩基配列間の類似度に基づいて並べることをシーケンスアライメントsequence Alignmentという。 1 Description In bioinformatics, since genomes are extremely long, even digitalizing them is a huge task.</description></item><item><title>動的モデルシミュレーション</title><link>https://freshrimpsushi.github.io/jp/posts/1873/</link><pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1873/</guid><description>説明 上のGIFは、マルサス成長モデルをエージェントベースのシミュレーションで視覚化したものだ。 シミュレーションsimulationとは、現象</description></item><item><title>文字列の編集距離</title><link>https://freshrimpsushi.github.io/jp/posts/1872/</link><pubDate>Sat, 02 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1872/</guid><description>ビルドアップ 1 文字列には、次の四つの作用がある: 挿入: 文字列に新しい文字を挿入する。 削除: 文字列から文字一つを取り除く。 置換: 文字列内の文字</description></item><item><title>マルサス成長モデル：理想的な集団成長</title><link>https://freshrimpsushi.github.io/jp/posts/1871/</link><pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1871/</guid><description>モデル $$ \dot{N} = rN $$ 変数 $N(t)$: $t$ 時点での集団の個体数を示している。 パラメータ $r \in \mathbb{R}$ : 固有増加率intrinsic Rate of Increaseで、$0$ より大</description></item><item><title>バイオインフォマティクスにおけるゲノムと遺伝子</title><link>https://freshrimpsushi.github.io/jp/posts/1864/</link><pubDate>Tue, 29 Dec 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1864/</guid><description>定義 生物の全遺伝物質の集まりをゲノムgenomeという。 ゲノムの一部で、遺伝的特徴の単位となる区間を遺伝子geneという。特に真核生物では、</description></item><item><title>JuliaでGIFを作る方法</title><link>https://freshrimpsushi.github.io/jp/posts/1863/</link><pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1863/</guid><description>コード もともとさくらすし店では、もっと詳しい説明を加えることが多いが、ジュリアでアニメGIFを作るのがどれほど簡単かを強調するために、できる</description></item><item><title>バイオインフォマティクスにおけるイントロンとエクソン</title><link>https://freshrimpsushi.github.io/jp/posts/1862/</link><pubDate>Fri, 25 Dec 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1862/</guid><description>定義 真核生物のDNAで、実際にタンパク質の合成に関与する部分をエクソンexon、そうでない部分をイントロンintronという。 説明 原核生物と</description></item><item><title>Rファイルの読み取りやパス変更時に「Error: 'C:\U' used without hex digits in character string starting 'C:\U'」を解決する</title><link>https://freshrimpsushi.github.io/jp/posts/1860/</link><pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1860/</guid><description>もし解決策だけが欲しいなら、どう修正するかを見るだけでもいいけど、同じエラーにまた遭遇したくなければ、全てを読むのをおすすめするよ。 エラー 診</description></item><item><title>塩基配列の上流と下流</title><link>https://freshrimpsushi.github.io/jp/posts/1855/</link><pubDate>Mon, 21 Dec 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1855/</guid><description>ビルドアップ 1 塩基配列の方向は、上の図のように糖の炭素原子の位置に番号をつけることで表すことができる。RNAとDNAは具体的に、3番炭素$3</description></item><item><title>딥러닝의 수학적 근거, 시벤코 정리 증명</title><link>https://freshrimpsushi.github.io/jp/posts/1853/</link><pubDate>Sat, 19 Dec 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1853/</guid><description>定理 $\sigma$ が連続シグモイド関数だとすると $$ S := \left\{ G(x) = \sum_{k=1}^{N} \alpha_{k} \sigma \left( y_{k}^{T} x+ \theta_{k} \right) : y_{k} \in \mathbb{R}^{n} \land \alpha_{k} , \theta_{k} \in \mathbb{R} \land N \in \mathbb{N} \right\} $$ は $C\left( I_{n} \right)$ において均等密である。すなわち、すべ</description></item><item><title>バイオインフォマティクスにおけるコドンとアミノ酸の遺伝暗号</title><link>https://freshrimpsushi.github.io/jp/posts/1852/</link><pubDate>Thu, 17 Dec 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1852/</guid><description>定義 DNAの塩基3個を順序対としてまとめた単位をトリプレットコードtriplet Codeと呼ぶ。 セントラルドグマに従って転写されたmRNAの</description></item><item><title>シグモイド関数とは?</title><link>https://freshrimpsushi.github.io/jp/posts/1851/</link><pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1851/</guid><description>定義 次のを満たす関数$\sigma : \mathbb{R} \to \mathbb{R}$をシグモイダル関数sigmoidal functionと呼ぶ。 $$ \sigma (t) \to \begin{cases} 1 &amp;amp; \text{as }</description></item><item><title>分子生物学の中心原理</title><link>https://freshrimpsushi.github.io/jp/posts/1850/</link><pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1850/</guid><description>原理 分子生物学の中心原理 もしくは セントラルドグマcentral dogmaとは、遺伝情報がDNAからRNAへ、RNAからタンパク質へと伝達され</description></item><item><title>識別関数とは何か？</title><link>https://freshrimpsushi.github.io/jp/posts/1838/</link><pubDate>Fri, 11 Dec 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1838/</guid><description>定義 すべての$y \in \mathbb{R}^{n}$と$\theta \in \mathbb{R}$、そしてある$\mu \in M \left( I_{n} \right)$に対して</description></item><item><title>正則測度</title><link>https://freshrimpsushi.github.io/jp/posts/1834/</link><pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1834/</guid><description>定義：測度の正則性 1 $\mu$ が 測定可能空間 $(X, \Sigma)$ 上で定義された測度だとする。 測定可能な集合 $A \in \Sigma$ が下記を満たす場合、内部正則inner Regular</description></item><item><title>バイオインフォマティクスにおける主要な塩基と塩基対</title><link>https://freshrimpsushi.github.io/jp/posts/1832/</link><pubDate>Mon, 07 Dec 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1832/</guid><description>定義 次の五つの塩基を主要な塩基canonical Baseと呼ぶ。 プリン塩基: アデニンadenin $A$, グアニンguanine $G$ ピリミジン塩基: シ</description></item><item><title>ラサール不変原理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/1831/</link><pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1831/</guid><description>原理 ビルドアップ 空間 $X$ と関数 $f : X \to X$ に関して、以下のようなベクトル場が微分方程式として与えられているとする。 $$ \dot{x} = f(x) $$ フロー $\phi_t \left( \cdot \right)$ 下のコ</description></item><item><title>アトラクティングセットのベイスン</title><link>https://freshrimpsushi.github.io/jp/posts/978/</link><pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/978/</guid><description>定義 1 空間$X$と関数$f,g : X \to X$のベクトルフィールドとマップが以下のように表されるとしよう。 $$ \dot{x} = f(x) \\ x \mapsto g(x) $$ $\phi (t, \cdot)$をベ</description></item><item><title>生物情報学における塩基配列</title><link>https://freshrimpsushi.github.io/jp/posts/1828/</link><pubDate>Wed, 02 Dec 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1828/</guid><description>ビルドアップ 化学的合成によって単量体が繰り返し連結された高分子をポリマーpolymerと言う。 リン酸phosphoric Acidは無機酸素酸</description></item><item><title>力学系のアトラクタ</title><link>https://freshrimpsushi.github.io/jp/posts/1493/</link><pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1493/</guid><description>ビルドアップ 空間 $X$ と関数 $f,g : X \to X$ に対して、ベクトル場とマップは次のように表されるとしよう。 $$ \dot{x} = f(x) \\ x \mapsto g(x) $$ $\phi (t, \cdot)$ はベクトル場 $\dot{x} = f(x)$ のフロ</description></item><item><title>生命医療情報学におけるDNA、RNA、染色体</title><link>https://freshrimpsushi.github.io/jp/posts/1827/</link><pubDate>Sun, 29 Nov 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1827/</guid><description>ビルドアップ 化学的合成を通じたモノマーの連続した結合によってつくられる高分子をポリマーpolymerと言う。 リン酸phosphoric Aci</description></item><item><title>自律システムのオメガリミットセット</title><link>https://freshrimpsushi.github.io/jp/posts/1822/</link><pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1822/</guid><description>定義 距離空間 $X$ と関数 $f : X \to X$ について、次のようなベクトル場が微分方程式として与えられているとする。 $$ \dot{x} = f(x) $$ このシステムのフロー $\phi ( t, x )$</description></item><item><title>バイオインフォマティクスにおける原核生物と真核生物</title><link>https://freshrimpsushi.github.io/jp/posts/1810/</link><pubDate>Wed, 25 Nov 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1810/</guid><description>定義 核膜がない生物を原核生物prokaryotesという。 核膜がある核で構成される生物を真核生物eukaryotesという。 説明 真核生物では</description></item><item><title>Juliaで距離行列を計算する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1799/</link><pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1799/</guid><description>概要 距離行列distance matrixは、パーティクルダイナミクスparticle dynamicsやムービングエージェントmoving Ag</description></item><item><title>ポアンカレの再帰定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/1798/</link><pubDate>Sat, 21 Nov 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1798/</guid><description>定理 ユークリッド空間で定義された多次元マップ $g : \mathbb{R}^{n} \to \mathbb{R}^{n}$ が単射であり、かつ連続であり、$D \subset \mathbb{R}^{n}$ がコンパクト不変集合、言い換えれば $g(D) = D$ だとしよ</description></item><item><title>Juliaで空の配列を作成する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1797/</link><pubDate>Thu, 19 Nov 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1797/</guid><description>コード サイズ指定 julia&amp;gt; empty = Array{Float64, 2}(undef, 3, 4) 3×4 Array{Float64,2}: 3.39519e-313 3.18299e-313 4.66839e-313 1.061e-313 4.03179e-313 5.51719e-313 1.6976e-313 4.24399e-314 2.97079e-313 4.66839e-313 7.00259e-313 5.0e-324 上のコードを実行すると、空の配列が作成される。たまに1.76297e-315の</description></item><item><title>力学におけるリュービルの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/1792/</link><pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1792/</guid><description>定理 ユークリッド空間 $\mathbb{R}^{n}$ と関数 $f : \mathbb{R}^{n} \to \mathbb{R}^{n}$ について次のようなベクトル場が微分方程式で与えられているとする。 $$ \dot{x} = f(x) $$ このシステムのフロー $\phi_t ( \cdot )$</description></item><item><title>数理統計学における確率収束</title><link>https://freshrimpsushi.github.io/jp/posts/1789/</link><pubDate>Sun, 15 Nov 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1789/</guid><description>定義 1 確率変数 $X$ と確率変数のシーケンス $\left\{ X_{n} \right\}$ が次を満たすとき、$n \to \infty$ のとき $X$ に確率収束すると言い、$X_{n} \overset{P}{\to} X$ と示される。 $$ \forall \varepsilon &amp;gt; 0 ,</description></item><item><title>自律システムの保存量</title><link>https://freshrimpsushi.github.io/jp/posts/1770/</link><pubDate>Fri, 13 Nov 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1770/</guid><description>定義 空間 $X$ と関数 $f : X \to X$ に関連する次のようなベクターフィールドが微分方程式で与えられているとしよう。 $$ \dot{x} = f(x) $$ 与えられたシステムに依存する</description></item><item><title>連続写像定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/1787/</link><pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1787/</guid><description>統計 1 次は、連続写像定理の測度論的記述です。 距離空間 $\left( S , d \right)$ と $\left( S' , d&amp;rsquo; \right)$ について、$g : S \to S'$ が $C_{g} \subset S$ から連続だとしましょう。$S$ の確率</description></item><item><title>ベクトル場における発散</title><link>https://freshrimpsushi.github.io/jp/posts/1777/</link><pubDate>Mon, 09 Nov 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1777/</guid><description>定義 ユークリッド空間で定義されたベクトル場 $\textbf{f} : \mathbb{R}^{n} \to \mathbb{R}^{n}$ が $\textbf{f} = (f_{1} , \cdots , f_{n})$ のように示され、軸の方向を $u_{1} , \cdots , u_{n}$ とする場合、$\textbf{f}$</description></item><item><title>ロジスティック関数とは？</title><link>https://freshrimpsushi.github.io/jp/posts/1775/</link><pubDate>Sat, 07 Nov 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1775/</guid><description>定義 1 ロジスティック関数は、微分方程式の解として$y ' = y(1-y)$で求められるものである。 $$ y(t) = {{ 1 } \over { 1 + e^{-t} }} $$ 説明 もっと一般的な形</description></item><item><title>ベクトル場における体積</title><link>https://freshrimpsushi.github.io/jp/posts/1772/</link><pubDate>Thu, 05 Nov 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1772/</guid><description>定義 ユークリッド空間の部分空間$D \subset \mathbb{R}^{n}$の体積$V$は、直交座標$\textbf{u} = (u_{1}, u_{2}, \cdots , u_{n})$で表</description></item><item><title>プアンカレ-ベンディクソン定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/1788/</link><pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1788/</guid><description>정리 $2$次元の多様体 $\mathcal{P}$ と関数 $f,g \in C^{r} \left( \mathcal{P} \right)$ に対して、次のようなベクトル場が微分方程式として与えられているとする。 $$ \dot{x} = f(x,y) \\ \dot{y} = g(x,y) $$ $\mathcal{M}$ このベク</description></item><item><title>シグモイド関数とは?</title><link>https://freshrimpsushi.github.io/jp/posts/1769/</link><pubDate>Sun, 01 Nov 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1769/</guid><description>定義 1 すべての$x \in \mathbb{R}$で定義され$\sigma ' (x) \ge 0$であり、ただ一つの変曲点を持つ、有界で微分可能なスカラ関数$\s</description></item><item><title>2次元自律システムにおける周期軌道の不在</title><link>https://freshrimpsushi.github.io/jp/posts/1761/</link><pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1761/</guid><description>ピリオディックオービットに関する考察 通常、自律システムでピリオディックオービットが存在するかどうかに関する質問はかなり厄介だが、$1,2$次</description></item><item><title>順序統計量</title><link>https://freshrimpsushi.github.io/jp/posts/1757/</link><pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1757/</guid><description>定理1 ランダムサンプル $X_{1} , \cdots , X_{n}$ がサポート $\mathcal{S} =(a,b)$ を持つ確率密度関数 $f(x)$ を有し、連続確率分布に従うとしよう。これらを大きさ順に並べた確率変数を $Y_{1} &amp;lt;</description></item><item><title>ベンディクソンの判定法</title><link>https://freshrimpsushi.github.io/jp/posts/1751/</link><pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1751/</guid><description>ベンディクソンの判定法 空間$\mathbb{R}^{2}$と関数$f,g \in C^{1} \left( \mathbb{R}^{2} \right)$について、次のようなベクトル場が微分方程式と</description></item><item><title>標本分散をn-1で割る理由</title><link>https://freshrimpsushi.github.io/jp/posts/1747/</link><pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1747/</guid><description>なぜ n-1で割るのか? $X_{i} \sim \left( \mu , \sigma^{2} \right)$ とすると、標本分散 $S^{2}$ は次のようになる。 $$ S^{2} := {{1} \over {n-1}} \sum_{i=1}^{n} \left( X_{i} - \overline{X} \right)^{2} $$ ご存知の通り、標本平均と異なり、標本分散</description></item><item><title>不変多様体の安定性</title><link>https://freshrimpsushi.github.io/jp/posts/1746/</link><pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1746/</guid><description>定義 不変集合の安定性と不安定性 1 動力学系 $\left( T, X , \varphi^{t} \right)$ のある固定点 $\overline{x}$ に対して二つの不変集合を次のように定義する。 $$ \begin{align*} W^{s} \left( \overline{x} \right) :=&amp;amp; \left\{ x : \varphi^{t} x \to \overline{x} ,</description></item><item><title>不偏推定量</title><link>https://freshrimpsushi.github.io/jp/posts/1745/</link><pubDate>Tue, 20 Oct 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1745/</guid><description>定義 1 $\theta$ の推定量 $T$ が次を満たす場合、$T$ は $\theta$ の不偏推定量unbiased estimatorと呼ばれる。 $$ E T = \theta $$ 説明 特に、$\theta</description></item><item><title>力学における不変集合</title><link>https://freshrimpsushi.github.io/jp/posts/1079/</link><pubDate>Sun, 18 Oct 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1079/</guid><description>定義 厳密な定義 1 動力学系 $\left( T, X , \varphi^{t} \right)$ で 部分集合 $S \subset X$ が以下を満たす場合、$S$ を 不変集合invariant setという。 $$ x_{0} \in S \implies \varphi^{t} x_{0} \in S \qquad</description></item><item><title>便宜性-分散トレードオフ</title><link>https://freshrimpsushi.github.io/jp/posts/1739/</link><pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1739/</guid><description>定義 $$ \text{MSE} \left( \widehat{\theta} \right) = \Var \widehat{\theta} + \left( \text{Bias} \widehat{\theta} \right)^{2} $$ 説明 平均二乗誤差 $\text{MSE}$ は、統計モデルの評価や機械学習の損失関数としてよく使用される指標で、特にバイアスと分散のト</description></item><item><title>リャプノフ関数</title><link>https://freshrimpsushi.github.io/jp/posts/1738/</link><pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1738/</guid><description>定義1 空間 $X$ と関数 $f : X \to X$ に対して次のような ベクトルフィールド が 微分方程式 によって与えられているとする。 $$ \dot{x} = f(x) $$ 上記のような 自律システム</description></item><item><title>数理統計学における便宜</title><link>https://freshrimpsushi.github.io/jp/posts/1735/</link><pubDate>Mon, 12 Oct 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1735/</guid><description>定義 パラメーター$\theta$に対する推定量$\widehat{\theta}$について、以下のように定義された$\text{Bias}$</description></item><item><title>自律システムにおける固定点の分類</title><link>https://freshrimpsushi.github.io/jp/posts/1733/</link><pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1733/</guid><description>定義 空間 $X$ と関数 $f \in C^{1}(X,X)$ に対して、以下のようなベクトル場が微分方程式として与えられているとしよう。 $$ \dot{x} = f(x) $$ $\overline{x}$ がこの自律系の一つの固定点であり</description></item><item><title>信頼区間の簡単な定義</title><link>https://freshrimpsushi.github.io/jp/posts/1732/</link><pubDate>Thu, 08 Oct 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1732/</guid><description>定義 1 確率密度関数 $f (x; \theta)$ を持つ確率変数 $X$ のサンプル $X_{1} , \cdots , X_{n}$ と信頼係数confidence Coefficient $\alpha \in (0,1)$ が与えられているとしよう。 $$ L := L \left( X_{1} , \cdots</description></item><item><title>ファン・デル・ポール振動子</title><link>https://freshrimpsushi.github.io/jp/posts/1731/</link><pubDate>Tue, 06 Oct 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1731/</guid><description>ダフィング方程式1 $$ \ddot{x} + \delta \dot{x} + \alpha x + \beta x^{3} = \gamma \cos \left( \omega t \right) $$ 変数 $t$: 時間を表す。 $x$: (例えば、粒子の)位置を$1$次元空間で表す。 $\dot{x}$: (粒子の)速度を</description></item><item><title>数理統計学における統計量と推定量</title><link>https://freshrimpsushi.github.io/jp/posts/1730/</link><pubDate>Sun, 04 Oct 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1730/</guid><description>定義 1 2 確率変数 $X$ のサンプル $X_{1} , \cdots , X_{n}$ の関数 $T$ を統計量statisticと言う。 $$ T := T \left( X_{1} , \cdots , X_{n} \right) $$ $X$ の分布関数が $f(x; \theta)$ あるいは $p(x; \theta)$ のよう</description></item><item><title>リャプノフ安定性と軌道安定性</title><link>https://freshrimpsushi.github.io/jp/posts/1716/</link><pubDate>Fri, 02 Oct 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1716/</guid><description>定義 リアプノフ安定性 1 距離空間 $\left( X , \left\| \cdot \right\| \right)$ と関数 $f : X \to X$ について、以下のようなベクトル場が微分方程式として与えられているとする。 $$ \dot{x} = f(x)</description></item><item><title>数理統計学におけるランダムサンプリング</title><link>https://freshrimpsushi.github.io/jp/posts/1715/</link><pubDate>Wed, 30 Sep 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1715/</guid><description>定義 1 確率変数 $X$の実際に引き出された結果を実現realizationと言い、普通、小文字の$x$で表す。 確率変数$X$と同じ確率分布から</description></item><item><title>非線形システムの線形化</title><link>https://freshrimpsushi.github.io/jp/posts/1709/</link><pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1709/</guid><description>ビルドアップ 空間$\left( X, \left\| \cdot \right\| \right)$と関数$f : X \to X$に関して、以下のようなベクターフィールドが微分方程式として与えられ</description></item><item><title>コーシー分布：平均が存在しない分布</title><link>https://freshrimpsushi.github.io/jp/posts/147/</link><pubDate>Wed, 23 Sep 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/147/</guid><description>定義 以下の確率密度関数を持つ連続確率分布をコーシー分布と呼ぶ。 $C$ $$ f(x) = {1 \over \pi} {1 \over {x^2 + 1}} \qquad , x \in \mathbb{R} $$ 説明 全ての確率分布に平均や分散があると思わ</description></item><item><title>自律システムのオービットとリミットサイクル</title><link>https://freshrimpsushi.github.io/jp/posts/1693/</link><pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1693/</guid><description>定義 空間$X$と関数$f : X \to X$について、以下のようにベクトル場が微分方程式で与えられているとする。 $$ \dot{x} = f(x) $$ 初期時刻$t_{0}$と初期</description></item><item><title>t分布の平均と分散</title><link>https://freshrimpsushi.github.io/jp/posts/1669/</link><pubDate>Sun, 20 Sep 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1669/</guid><description>公式 $X \sim t (\nu)$ ならば $$ E(X) = 0 \qquad , \nu &amp;gt;1 \\ \Var(X) = {{ \nu } \over { \nu - 2 }} \qquad , \nu &amp;gt; 2 $$ 導出 戦略：カイ二乗分布と同様に、t分布にも既知の積率生成関数があるので</description></item><item><title>リーマン予想とリーマンゼータ関数の自明な根</title><link>https://freshrimpsushi.github.io/jp/posts/1668/</link><pubDate>Fri, 18 Sep 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1668/</guid><description>式 次をリーマンの関数方程式という。 $$ \zeta (s) = 2^{s} \pi^{s - 1} \sin \left( {{ \pi s } \over { 2 }} \right) \Gamma (1-s) \zeta (1-s) $$ $\Gamma$ はガンマ関数だ。 $\zeta$ はリーマンゼータ関数だ。 説明 リーマンの</description></item><item><title>t-分布</title><link>https://freshrimpsushi.github.io/jp/posts/1667/</link><pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1667/</guid><description>定義 1 自由度$\nu &amp;gt; 0$に対して、次の確率密度関数を持つ連続確率分布$t \left( \nu \right)$をt-分布という。 $$ f(x) = {{ \Gamma \left( {{ \nu + 1 } \over { 2</description></item><item><title>リーマン ゼータ関数</title><link>https://freshrimpsushi.github.io/jp/posts/1664/</link><pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1664/</guid><description>定義 次のように定義された関数 $\xi$ をリーマンのシー関数riemann xi functionと呼ぶ。 $$ \xi (s) := {{ 1 } \over { 2 }} s ( s-1) \pi^{-s/2} \zeta (s) \Gamma \left( {{ s } \over { 2</description></item><item><title>独立な正規分布およびカイ二乗分布からのスチューデントのt分布の導出</title><link>https://freshrimpsushi.github.io/jp/posts/204/</link><pubDate>Sun, 13 Sep 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/204/</guid><description>定理 二つの確率変数 $W,V$ が独立で、$W \sim N(0,1)$、$V \sim \chi^{2} (r)$ である場合、 $$ T = { {W} \over {\sqrt{V/r} } } \sim t(r) $$ $N \left( \mu , \sigma^{2} \right)$ は平均が $\mu$ で、分散が $\sigma^{2}$ の正規分</description></item><item><title>完全グラフ</title><link>https://freshrimpsushi.github.io/jp/posts/1662/</link><pubDate>Sat, 12 Sep 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1662/</guid><description>定義 グラフ $G$ の全ての 誘導された サブ グラフ $H$ が次を満たすとき、完全グラフという。 $$ \chi (H) = \omega (H) $$ $\chi (H)$ はグラフ $H$ の クロマチック数だ。 $\omega (H)$ はグラフ $H$</description></item><item><title>標準正規分布の二乗は、自由度1のカイ二乗分布に従うことを証明</title><link>https://freshrimpsushi.github.io/jp/posts/148/</link><pubDate>Fri, 11 Sep 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/148/</guid><description>定理 $X \sim N(\mu,\sigma ^2)$ならば $$ V=\left( { X - \mu \over \sigma} \right) ^2 \sim \chi ^2 (1) $$ $N \left( \mu , \sigma^{2} \right)$は平均が$\mu$で分散が$\sigma^{2}$の正規分布</description></item><item><title>正規分布の平均と分散</title><link>https://freshrimpsushi.github.io/jp/posts/1661/</link><pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1661/</guid><description>式 $X \sim N\left( \mu , \sigma^{2} \right)$ 平面 $$ E(X) = \mu \\ \Var (X) = \sigma^{2} $$ 導出 戦略：正規分布は、モーメント生成関数が微分しやすいから、直接導くんだ。 正規分布のモーメント生成関</description></item><item><title>LinuxでGCCコンパイラを使用してCコードをコンパイルする方法</title><link>https://freshrimpsushi.github.io/jp/posts/1653/</link><pubDate>Tue, 08 Sep 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1653/</guid><description>ガイド 普通、C/C++を使ったプログラム開発はウィンドウズでビジュアルスタジオを使うことが推奨されるが、簡単なテストや数値計算、シミュレーシ</description></item><item><title>正規分布</title><link>https://freshrimpsushi.github.io/jp/posts/1645/</link><pubDate>Sun, 06 Sep 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1645/</guid><description>定義 平均 $\mu \in \mathbb{R}$ と分散 $\sigma^{2} &amp;gt; 0$ に対して次のような確率密度関数を持つ 連続確率分布 $N \left( \mu,\sigma^{2} \right)$ を 正規分布normal distribution と呼ぶ。 $$ f(x) = {{ 1 } \over { \sqrt{2 \pi} \sigma }} \exp</description></item><item><title>ヤコビのセータ関数</title><link>https://freshrimpsushi.github.io/jp/posts/1644/</link><pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1644/</guid><description>定義 次のように定義された関数$\vartheta$をヤコビセータ関数jacobi theta functionと呼ぶ。 $$ \vartheta (\tau) := \sum_{n \in \mathbb{Z}} e^{-\pi n^{2} \tau } $$ 説明 ヤコビ</description></item><item><title>独立した二つのカイ二乗分布からF分布を導出する</title><link>https://freshrimpsushi.github.io/jp/posts/1643/</link><pubDate>Wed, 02 Sep 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1643/</guid><description>定理 二つの確率変数$U,V$が独立であり、$U \sim \chi^{2} ( r_{1})$、$V \sim \chi^{2} ( r_{2})$とするならば $$ {{ U / r_{1} } \over { V / r_{2} }} \sim F \left( r_{1} , r_{2}</description></item><item><title>ポアソン和公式の導出</title><link>https://freshrimpsushi.github.io/jp/posts/1642/</link><pubDate>Mon, 31 Aug 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1642/</guid><description>式 $f : \mathbb{R} \to \mathbb{C}$ をシュワルツ関数とする。すると、 $$ \sum_{n \in \mathbb{Z}} f(n) = \sum_{k \in \mathbb{Z}} \widehat{f}(k) $$ シュワルツ関数 $f \in C^{\infty}(\mathbb{R})$ は、$x \to \pm \infty$ の時、関数値の大きさ $\left| f (x) \right|$ が速く $0$ に収</description></item><item><title>ガンマ関数とリーマンゼータ関数及びディリクレイータ関数との関係</title><link>https://freshrimpsushi.github.io/jp/posts/1641/</link><pubDate>Sat, 29 Aug 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1641/</guid><description>정리 $\operatorname{Re} (s) &amp;gt; 1$ だったら $$ \zeta (s) \Gamma (s) = \mathcal{M} \left[ {{ 1 } \over { e^{x} - 1 }} \right] (s) = \int_{0}^{\infty} {{ x^{s-1} } \over { e^{x} - 1 }} dx \\ \eta (s) \Gamma (s) = \mathcal{M} \left[ {{ 1 } \over { e^{x} + 1 }} \right] (s) = \int_{0}^{\infty} {{ x^{s-1} } \over { e^{x} + 1</description></item><item><title>フーリエ変換としての作用素</title><link>https://freshrimpsushi.github.io/jp/posts/1640/</link><pubDate>Thu, 27 Aug 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1640/</guid><description>定義1 関数 $f$ のフーリエ変換 $$ \widehat{f} (\gamma ) := \int_{\mathbb{R}} f(x) e^{-2 \pi i x \gamma} dx, \quad \gamma \in \mathbb{R} $$ は、以下の作用素 $\mathcal{F}$ としても表される。 $$ (\mathcal{F} f) (\gamma ) := \widehat{f} ( \gamma ) $$ 説明 フーリエ変換は解</description></item><item><title>L2空間における変換、変調、および拡大の交換関係</title><link>https://freshrimpsushi.github.io/jp/posts/1639/</link><pubDate>Tue, 25 Aug 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1639/</guid><description>定理1 全ての $a, b \in \mathbb{R}$ と $c &amp;gt; 0$ に対して、$T_{a}, E_{b}, D_{c}$ は以下の関係を持つ。 $$ \begin{equation} (T_{a} E_{b} f ) (x) = e^{- 2 \pi i b a} (E_{b} T_{a} f ) (x) \end{equation} $$ $$ \begin{equation} (T_{a} D_{c} f ) (x) = (D_{c} T_{a/c} f</description></item><item><title>ボレル＝カンテリの補題</title><link>https://freshrimpsushi.github.io/jp/posts/1422/</link><pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1422/</guid><description>定理 距離空間 $(X, \rho)$ について、以下はすべて同等である。 (a) $X$ はコンパクト空間である。 (b) $X$ は順序的にコンパクトである。 (c) $X$ は完備空間であり、全有界空</description></item><item><title>完備距離空間の性質들</title><link>https://freshrimpsushi.github.io/jp/posts/1425/</link><pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1425/</guid><description>特性 $(X,d)$が距離空間で、$K \subset X$とする。 [1]: $K$は完備部分空間だ。$\iff$ $X$により、$K$は閉集合です。 [2]: $K$は、完全有</description></item><item><title>距離空間における連続性と一様連続性</title><link>https://freshrimpsushi.github.io/jp/posts/384/</link><pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/384/</guid><description>定義 二つの距離空間$\left( X , d_{X} \right)$、$\left( Y , d_{Y} \right)$と部分集合$E\subset X$に対して、関数$</description></item><item><title>ディリクレのエータ関数</title><link>https://freshrimpsushi.github.io/jp/posts/1635/</link><pubDate>Sun, 23 Aug 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1635/</guid><description>定義 次のように定義された関数 $\eta : \mathbb{C} \to \mathbb{C}$ をディリクレのエタ関数dirichlet eta functionと呼ぶ。 $$ \eta (s) := \sum_{n \in \mathbb{N}} (-1)^{n-1} n^{-s} $$ ディリクレのエタ</description></item><item><title>L2空間における平行移動、変調、および拡大の作用素</title><link>https://freshrimpsushi.github.io/jp/posts/1630/</link><pubDate>Fri, 21 Aug 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1630/</guid><description>定理1 $T_{a}, E_{b}, D_{c}$ はユニタリで、逆作用素は次の通りだ。 $$ T_{a}^{-1} = T_{-a} = \left( T_{a} \right)^{ \ast } $$ $$ E_{b}^{-1} = E_{-b} = \left( E_{b} \right)^{ \ast } $$ $$ D_{c}^{-1} = D_{1/c} = \left( D_{c} \right)^{ \ast } $$ ここで、$T_{a}, E_{b}, D_{c}$</description></item><item><title>ハイネ・ボレルの定理</title><link>https://freshrimpsushi.github.io/jp/posts/377/</link><pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/377/</guid><description>定理 定義 実数の部分集合 $E \subset \mathbb{R}$ に対して $\displaystyle E \subset \bigcup_{\alpha \in \forall} ( x_{\alpha} , y_{\alpha})$ を満たす開区間の集合 $\mathcal{O} = \left\{ ( x , y ) \ | \ x &amp;lt; y \right\}$ を $E$ のオープンカバーという。このよ</description></item><item><title>リーマンゼータ関数</title><link>https://freshrimpsushi.github.io/jp/posts/1626/</link><pubDate>Wed, 19 Aug 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1626/</guid><description>定義 次のように定義される関数 $\zeta : \mathbb{C} \setminus \left\{ 1 \right\} \to \mathbb{C}$ をリーマン ゼータ関数riemann zeta Function&amp;lt;/supという。 $$ \zeta (s) := \sum_{n \in \mathbb{N}} n^{-s} =</description></item><item><title>L2空間における変換：平行移動、変調、拡大</title><link>https://freshrimpsushi.github.io/jp/posts/1616/</link><pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1616/</guid><description>定義1 $a \in \mathbb{R}$に対して、以下のように定義される$T_{a} : L^{2} \to L^{2}$をトランスレーションtranslation, 平</description></item><item><title>指数補助補題の証明</title><link>https://freshrimpsushi.github.io/jp/posts/1708/</link><pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1708/</guid><description>定理 $n \in \mathbb{N}$、$x , y \in \mathbb{Z}$、素数 $p \ne 2$ が $$ \gcd (n,p) = 1 \\ p \mid (x - y) \\ p \nmid x \\ p \nmid y $$ を満たすとき $$ v_{p} \left( x^{n} -</description></item><item><title>数論におけるp-進数</title><link>https://freshrimpsushi.github.io/jp/posts/1707/</link><pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1707/</guid><description>定義 1 素数 $p$ と整数 $a \in \mathbb{Z}$ に対して次のように定義された $v_{p}$ を $a$ の $p$-進付値と言う。 $$ v_{p} (a) := \sup \left\{ e \in \mathbb{Z} : p^{e} \mid a \right\} $$ 定理 2 [0]: すべての素数 $p$ に対し</description></item><item><title>F分布の平均と分散</title><link>https://freshrimpsushi.github.io/jp/posts/1608/</link><pubDate>Sat, 15 Aug 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1608/</guid><description>公式 $X \sim F ( r_{1} , r_{2})$ 面積 $$ E(X) = {{ r_{2} } \over { r_{2} - 2 }} \qquad , r_{2} &amp;gt; 2 \\ \Var(X) = {{ 2 d_{2}^{2} (d_{1} + d_{2} - 2) } \over { d_{1} (d_{2} -2)^{2} (d_{2} - 4) }} \qquad , r_{2} &amp;gt; 4 $$ 導出 戦略：F-分布もまた、カイ</description></item><item><title>アンダーソン-リビングストン定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/20/</link><pubDate>Fri, 14 Aug 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/20/</guid><description>要旨 1 $R$ この可換環が単位元$1$を持ち、その零因子の集合を$Z(R)$とするなら、その零因子グラフ$\Gamma (R)$は連結グラフであり、</description></item><item><title>算術関数の部分和に対する一般化されたディリクレ積表現</title><link>https://freshrimpsushi.github.io/jp/posts/1607/</link><pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1607/</guid><description>定理 1 $h = f \ast g$ における算術関数 $f,g,h$ について、次のように定義しよう。 $$ F (x) := \sum_{n \le x} f(x) \\ G (x) := \sum_{n \le x} g(x) \\ H (x) := \sum_{n \le x} h(x) $$ すると、 $$ H = f \circ G = g</description></item><item><title>F分布</title><link>https://freshrimpsushi.github.io/jp/posts/1606/</link><pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1606/</guid><description>定義 1 自由度 $r_{1}, r_{2} &amp;gt; 0$ に対して以下の確率密度関数を持つ連続確率分布 $F \left( r_{1} , r_{2} \right)$ をF分布という。 $$ f(x) = {{ 1 } \over { B \left( r_{1}/2 , r_{2} / 2 \right) }} \left( {{ r_{1} } \over { r_{2}</description></item><item><title>エルデシュ・レーニグラフ</title><link>https://freshrimpsushi.github.io/jp/posts/1604/</link><pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1604/</guid><description>定義 可換環 $R$ が与えられたとしよう。$R$ のゼロ因子集合を $Z(R)$ とする時、以下で定義されたグラフ $\Gamma (R)$ を$R$ のゼロ因子グラフzero Divisor graphと</description></item><item><title>一般化されたディリクレ積</title><link>https://freshrimpsushi.github.io/jp/posts/1603/</link><pubDate>Fri, 07 Aug 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1603/</guid><description>定義 1 $F : \mathbb{R}^{+} \to \mathbb{C}$を$x \in (0,1)$であり、$F(x) = 0$とする関数としよう。任意の算術関数 $\alpha$に対する以</description></item><item><title>カイ二乗分布の平均と分散</title><link>https://freshrimpsushi.github.io/jp/posts/1601/</link><pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1601/</guid><description>公式 $X \sim \chi^{2} (r)$ だったら $$ E(X) = r \\ \Var (X) = 2r $$ 導出 戦略: 幸いにも、カイ二乗分布の積率生成関数は知られている。 カイ二乗分布の積率: $X \sim \chi^{2} (r)$ としよう。</description></item><item><title>カイ二乗分布</title><link>https://freshrimpsushi.github.io/jp/posts/1600/</link><pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1600/</guid><description>定義 1 自由度 $r &amp;gt; 0$に対して、以下のような確率密度関数を持つ連続確率分布 $\chi^{2} (r)$をカイ二乗分布chi-square distribution</description></item><item><title>二つの独立したガンマ分布からのベータ分布の導出</title><link>https://freshrimpsushi.github.io/jp/posts/1596/</link><pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1596/</guid><description>定理 二つの確率変数$X_{1},X_{2}$が独立であり、$X_{1} \sim \Gamma ( \alpha_{1} , 1)$、$X_{2} \sim \Gamma ( \alpha_{2} , 1)$とするならば、 $$ {{ X_{1} } \over</description></item><item><title>ヒルベルト空間のフレーム</title><link>https://freshrimpsushi.github.io/jp/posts/1595/</link><pubDate>Sun, 26 Jul 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1595/</guid><description>定義1 ヒルベルト空間 $H$のシーケンス $\left\{ \mathbf{v}_{k} \right\}_{k \in \mathbb{N}}$について、以下を満たす$A,B &amp;gt; 0$が存在する場合、$\left\{ \mathbf{v}_{k}</description></item><item><title>関数のサポートと連続関数空間のクラス</title><link>https://freshrimpsushi.github.io/jp/posts/1594/</link><pubDate>Fri, 24 Jul 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1594/</guid><description>定義 関数空間 $\mathbb{C}^{\mathbb{R}}$ の関数 $f : \mathbb{R} \to \mathbb{C}$ を考えてみよう。 関数 $f$ のサポートsupportは、関数値が $0$ ではない点の集合にクロージャを取ったクローズセット</description></item><item><title>ヒルベルト空間の正規直交基底とユニタリ作用素</title><link>https://freshrimpsushi.github.io/jp/posts/1593/</link><pubDate>Wed, 22 Jul 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1593/</guid><description>定義 ヒルベルト空間 $H$ の シャウダー基底 $\left\{ \mathbf{e}_{k} \right\}_{k \in \mathbb{N}}$ が 正規直交系 である場合、$\left\{ \mathbf{e}_{k} \right\}_{k \in \mathbb{N}}$ を $H$ の 正規直交基底orthonormal Basis と呼</description></item><item><title>四色地図問題</title><link>https://freshrimpsushi.github.io/jp/posts/1592/</link><pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1592/</guid><description>ビルドアップ 四色地図問題とは、隣接する領域が互いに区別できるように地図を色塗りするには4つの色が十分かという問題だ。地図が複雑になれば色も増</description></item><item><title>すべての可分ヒルベルト空間がl^2空間と等長同型であることの証明</title><link>https://freshrimpsushi.github.io/jp/posts/1591/</link><pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1591/</guid><description>定理1 全ての無限次元分割可能ヒルベルト空間$H$は、$\ell^{2}$と等距離同型である。 説明 分割可能なヒルベルト空間が$\ell^{2}</description></item><item><title>五色定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/1590/</link><pubDate>Thu, 16 Jul 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1590/</guid><description>証明 戦略：数学的帰納法を使用する。$n-1$個の頂点を持つシンプルな平面グラフが全て$5$-彩色可能だと仮定した場合、頂点がもう1つ多くても</description></item><item><title>可分ヒルベルト空間のグラム–シュミット直交化</title><link>https://freshrimpsushi.github.io/jp/posts/1589/</link><pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1589/</guid><description>定理1 すべての可分ヒルベルト空間は、正規直交基底を持つ。 証明 戦略：有限次元ベクトル空間でのグラム・シュミット正規直交化と本質的に同じ。一般の</description></item><item><title>グラフ理論における地図の定義</title><link>https://freshrimpsushi.github.io/jp/posts/1586/</link><pubDate>Sun, 12 Jul 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1586/</guid><description>定義 1 $3$-接続された平面グラフは地図と定義された。 同じエッジの間で隣接するフェイスが異なる色になるように、$k$個の色で塗ることができる</description></item><item><title>ベクトル空間の再構成</title><link>https://freshrimpsushi.github.io/jp/posts/1585/</link><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1585/</guid><description>定義 1 ベクトル空間 $V$のシーケンス $\left\{ \mathbf{v}_{k} \right\}_{k \in \mathbb{N}}$が与えられたとしよう。与えられた全単射 $\sigma : \mathbb{N} \to \mathbb{N}$に対</description></item><item><title>平面グラフの基本的性質</title><link>https://freshrimpsushi.github.io/jp/posts/1584/</link><pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1584/</guid><description>定理 1 $G$ が シンプル 平面グラフ だとしよう。 [1]: $G$ が 連結グラフ で、$n \ge 3$ 個の頂点と $m$ 個のエッジを持つ場合、$m \le 3n - 6$ [2]: すべてのシンプル平面グラ</description></item><item><title>無限次元ベクトル空間とシャウダー基底</title><link>https://freshrimpsushi.github.io/jp/posts/1583/</link><pubDate>Mon, 06 Jul 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1583/</guid><description>定義1 $(X, \left\| \cdot \right\|)$をノルム空間と呼ぶことにする。$X$のすべての元$\mathbf{x}\in X$に対して、以下を満たすスカラ</description></item><item><title>抽象的な双対グラフ</title><link>https://freshrimpsushi.github.io/jp/posts/1582/</link><pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1582/</guid><description>ビルドアップ 幾何的デュアルグラフの性質 [3]: 平面グラフ $G$ とその幾何的デュアルグラフ $G^{ \ast }$ において、$C \subset E(G)$ がサイクルの場合 $\iff$ $C^{ \ast } \subset E \left( G^{ \ast } \right)$</description></item><item><title>ヒルベルト空間における密な部分空間を持つベッセル列</title><link>https://freshrimpsushi.github.io/jp/posts/1581/</link><pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1581/</guid><description>定理1 ヒルベルト空間 $H$が与えられたとき、$\left\{ \mathbf{v}_{k} \right\}_{k \in \mathbb{N}} \subset H$と$\overline{V} = H$である$V \subset H$が次を満たすとす</description></item><item><title>幾何的デュアルグラフ</title><link>https://freshrimpsushi.github.io/jp/posts/1570/</link><pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1570/</guid><description>定義 1 与えられた平面グラフ $G$に対して、幾何学的双対グラフ $G^{ \ast }$は以下のように作られる。 ステップ 1. $G$の各フェース $f$に対応する頂点</description></item><item><title>ヒルベルト空間で一般化されたベッセルの不等式の証明</title><link>https://freshrimpsushi.github.io/jp/posts/1578/</link><pubDate>Sun, 28 Jun 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1578/</guid><description>定理1 $\left\{ \mathbf{v}_{k} \right\}_{k \in \mathbb{N}}$がヒルベルト空間$H$の正規直交集合だとすると、次が成り立つ。 (a) 全ての$\left\{ c_{k} \right\}_{k \in \mathbb{N}} \in \el</description></item><item><title>グラフのk-連結性とメンガーの定理</title><link>https://freshrimpsushi.github.io/jp/posts/1576/</link><pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1576/</guid><description>定義 与えられたグラフを $G$ とし、コンポーネントの数を $\text{comp} (G)$ と表す。 エッジ-連結性 次の条件を満たすエッジの集合$D \subset E(G)$を $G$ の断絶集合dis</description></item><item><title>ヒルベルト空間のベッセル列</title><link>https://freshrimpsushi.github.io/jp/posts/1569/</link><pubDate>Wed, 24 Jun 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1569/</guid><description>定義1 ヒルベルト空間 $H$のシーケンス $\left\{ \mathbf{v}_{k} \right\}_{k \in \mathbb{N}} \subset H$に対して、以下を満たす$B &amp;gt; 0$が存在した場合、$\left\{ \mathbf{v}_{k} \right\}_{k \in \mathbb{</description></item><item><title>オイラーの多面体定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/82/</link><pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/82/</guid><description>概要 オイラーの多面体定理は、グラフ理論では単にオイラーの公式とも呼ばれる。幾何学的には、空間図形の点、線、面が#点-#線+#面=2の関係に従</description></item><item><title>リース基底</title><link>https://freshrimpsushi.github.io/jp/posts/1568/</link><pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1568/</guid><description>定義1 ヒルベルト空間 $H$の正規直交基底 $\left\{ \mathbf{e}_{k} \right\}_{k \in \mathbb{N}}$が与えられているとしよう。全射 $U : H \to H$が線形かつ有界な作用素で全</description></item><item><title>ヒルベルト空間からL2空間への随伴作用素</title><link>https://freshrimpsushi.github.io/jp/posts/1566/</link><pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1566/</guid><description>定理1 $\left\{ \mathbf{v}_k \right\}_{k \in \mathbb{N}}$がヒルベルト空間$H$で定義された数列としよう。次のように定義された有界線形作用素$T : \ell^{2} \to H$がある</description></item><item><title>平面グラフとクラトフスキーの定理</title><link>https://freshrimpsushi.github.io/jp/posts/1565/</link><pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1565/</guid><description>定義 平面グラフ グラフを平面に描いた時、エッジが重ならずに描けるなら、そのグラフを平面グラフと言う。 説明 平面グラフが描かれると、平面上で区切ら</description></item><item><title>ヒルベルト空間における直交射影</title><link>https://freshrimpsushi.github.io/jp/posts/1564/</link><pubDate>Sun, 14 Jun 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1564/</guid><description>定義1 ヒルベルト空間 $H$ の閉じた部分空間 $V$ が与えられているとする。 $\mathbf{v} \in H$ が $\mathbf{v}_{1} \in V$ と $\mathbf{v}_{2} \in V^{\perp}$ に対して $\mathbf{v} = \mathbf{v}_{1} + \mathbf{v}_{2}$ として表されるとき、次を満たす 全射 $P</description></item><item><title>グラフのホモーモルフィズム</title><link>https://freshrimpsushi.github.io/jp/posts/1563/</link><pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1563/</guid><description>定義 1 二つのグラフ$G_{1}$と$G_{2}$が与えられたとする。$G_{1}$のある細分$G_{1} ' $と$G_{2}$のある細分$G_</description></item><item><title>ヒルベルト空間の共役作用素</title><link>https://freshrimpsushi.github.io/jp/posts/1562/</link><pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1562/</guid><description>ビルドアップ1 ヒルベルト空間 $\left( H, \left\langle \cdot , \cdot \right\rangle_{H} \right)$ と $\left( K, \left\langle \cdot , \cdot \right\rangle_{K} \right)$ において有界線形作用素 $T : K \to H$ が与えられているとしよう。すると、任意の固定さ</description></item><item><title>グラフ彩色とブルックスの定理</title><link>https://freshrimpsushi.github.io/jp/posts/1561/</link><pubDate>Mon, 08 Jun 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1561/</guid><description>定義 ループがないグラフ$G$に対して、次のような関数$f : V(G) \to [k]$を$G$の**$k$-カラーリングという。 $$ u \sim v \implies f(u) \ne f(v) $$ グラフ$G</description></item><item><title>ゼルバーグの恒等式の証明</title><link>https://freshrimpsushi.github.io/jp/posts/1560/</link><pubDate>Sat, 06 Jun 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1560/</guid><description>定理 1 $$ \Lambda (n) \log n + \sum_{d \mid n } \Lambda (d) \Lambda \left( {{ n } \over { d }} \right) = \sum_{d \mid n} \mu (d) \log^{2} {{ n } \over { d }} $$ 証明 ストラテジー：見た目ほど難しくない。算術関数の微分があれ</description></item><item><title>ハベル-ハキミ アルゴリズムの証明</title><link>https://freshrimpsushi.github.io/jp/posts/1559/</link><pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1559/</guid><description>定理 非増加シーケンス $D = (d_{1} , \cdots , d_{n})$ が与えられているとしよう。$D$ がグラフィックであれば、次の方法で $D$ の実現 $G$ を見つけることができる。 ステッ</description></item><item><title>算術関数の微分</title><link>https://freshrimpsushi.github.io/jp/posts/1558/</link><pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1558/</guid><description>定義 1 算術関数 $f$ の微分または導関数 $f '$ を次のように定義する。 $$ f ' (n) := f(n) \log n \qquad , n \in \mathbb{N} $$ 基本性質 [1] 和の微分法則: $(f+g)' = f '+g'$ [2] 積の微分法則: $\left( f</description></item><item><title>エルデシュ＝ガライの定理</title><link>https://freshrimpsushi.github.io/jp/posts/1557/</link><pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1557/</guid><description>ビルドアップ グラフ $G$ の次数を重複を含めて集めた集合をグラフスコアと言い、$G$ のグラフスコアを降順に並べたシーケンスを$G$のディグリーシー</description></item><item><title>算術関数のベル級数</title><link>https://freshrimpsushi.github.io/jp/posts/1556/</link><pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1556/</guid><description>[3] $f$ は完全乗法的なので、素数 $p$ に対して $f \left( p^{n} \right) = \left[ f(p) \right]^{n}$ となる。 $$ f_{p}(x) = \sum_{n=0}^{\infty} \left[ f(p) \right]^{n} x^{n} = {{ 1 } \over { 1 - f(p) x }} $$ ■</description></item><item><title>ラベルツリーとケイリーの定理</title><link>https://freshrimpsushi.github.io/jp/posts/1555/</link><pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1555/</guid><description>定義 各ベルテックスに異なる数が割り当てられたツリーをラベルツリーと言う。 説明 ラベルはベルテックスの集合において、実際に要素が同じか異なるかを</description></item><item><title>解析数論におけるリウヴィル関数</title><link>https://freshrimpsushi.github.io/jp/posts/1553/</link><pubDate>Sun, 24 May 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1553/</guid><description>定義 1 素数 $p_{1} , \cdots , p_{k}$ と 自然数 $n$ が $n = p_{1}^{a_{1}} \cdots p_{k}^{a_{k}}$ のように表されているとする。以下のように定義された算術関数 $\lambda$ をリウヴィル関数と呼ぶ。 $$ \lambda (n) = (-1)^{a_{1} + \cdots</description></item><item><title>ツリーグラフ</title><link>https://freshrimpsushi.github.io/jp/posts/1552/</link><pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1552/</guid><description>定義 1 サイクルが存在しない連結グラフを木という。 説明 木は、コンピュータ科学のデータ構造などでよく見られる概念で、少しでもコンピュータを扱う理</description></item><item><title>解析的整数論とマンゴルト函数</title><link>https://freshrimpsushi.github.io/jp/posts/1551/</link><pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1551/</guid><description>定義 1 次のように定義された算術関数 $\Lambda$ をマンゴルト関数と言う。 $$ \Lambda (n) := \begin{cases} \log p &amp;amp; n = p^{m} , p \text{ is prime}, m \in \mathbb{N} \\ 0 &amp;amp; \text{otherwise} \end{cases} $$ 基本性質 [1] マンゴルト級数：対数</description></item><item><title>グラフ理論におけるディラックの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/1550/</link><pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1550/</guid><description>定理 1 $G$が頂点が$n ( \ge 3)$個の単純グラフだとする。 [1] ディラックの定理：$G$のすべての頂点$v$に対して$\deg (v) \ge n / 2$が成り</description></item><item><title>メビウスの反転公式の導出</title><link>https://freshrimpsushi.github.io/jp/posts/1549/</link><pubDate>Sat, 16 May 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1549/</guid><description>公式 1 $f$ と $g$ は算術関数で、$\mu$ はメビウス関数だ。 $$ f(n) = \sum_{d \mid n} g(d) \iff g(n) = \sum_{d \mid n} f(d) \mu \left( {{ n } \over { d }} \right) $$ 説明 メビウス関数は、初めに見た時に不</description></item><item><title>ハミルトニアングラフ</title><link>https://freshrimpsushi.github.io/jp/posts/1548/</link><pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1548/</guid><description>定義 1 $G$ を連結グラフとする。 $G$の全てのヴァーテックスを含む閉じたパスが存在する場合、$G$をハミルトングラフと呼び、そのサイクルをハミル</description></item><item><title>解析的数論におけるユニット関数</title><link>https://freshrimpsushi.github.io/jp/posts/1547/</link><pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1547/</guid><description>定義 1 次のように定義された算術関数 $u$ をユニット関数という。 $$ u(n) := 1 $$ 基本性質 [1] ユニット級数：約数の数に等しい $\sigma_{0}$。つまり</description></item><item><title>フルーリーのアルゴリズムの証明</title><link>https://freshrimpsushi.github.io/jp/posts/1546/</link><pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1546/</guid><description>定義 1 $G$をオイラーグラフとしよう。すると次の方法でオイラートレイルを作ることができる。 任意の頂点$u$から始め、次の二つのルールに従って</description></item><item><title>ケーニヒスベルクの橋の問題とその解決</title><link>https://freshrimpsushi.github.io/jp/posts/1542/</link><pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1542/</guid><description>問題 1 ケーニヒスベルクの橋の問題は、この都市にかかっている7つの橋を一度だけ渡って、最初の位置に戻ることができるのかということだった。解法を</description></item><item><title>ベータ分布の平均と分散</title><link>https://freshrimpsushi.github.io/jp/posts/97/</link><pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/97/</guid><description>式 $X \sim \text{Beta}(\alpha,\beta)$ 面 $$ E(X)={\alpha \over {\alpha + \beta} } \\ \Var (X)={ { \alpha \beta } \over {(\alpha + \beta + 1) { ( \alpha + \beta ) }^2 } } $$ 導出 戦略: ベータ分布の定義とガンマ関数の基本的な性質を直接利用して導く</description></item><item><title>オイラーグラフ</title><link>https://freshrimpsushi.github.io/jp/posts/1541/</link><pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1541/</guid><description>定義 $G$を連結グラフとしよう。$G$の全てのエッジを含む閉じたトレイルが存在する場合、$G$をオイラーグラフと呼び、そのトレイルをオイラー</description></item><item><title>ベータ分布</title><link>https://freshrimpsushi.github.io/jp/posts/1540/</link><pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1540/</guid><description>定義 1 $\alpha , \beta &amp;gt; 0$について、次のような確率密度関数をもつ連続確率分布$\text{Beta}(\alpha,\beta)$をベータ分布bet</description></item><item><title>ケーニヒの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/1534/</link><pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1534/</guid><description>定理 1 $G$ を 局所的に有限な 連結グラフとする。すると、すべての $v \in V(G)$ に対して $v$ を始点とする片方向無限パスが存在する。 証明 $G$ は連結グラフであるため</description></item><item><title>解析的整数論におけるオイラーのトーシェント関数</title><link>https://freshrimpsushi.github.io/jp/posts/1533/</link><pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1533/</guid><description>定義 1 以下のように定義される算術関数 $\varphi$ をトーシェント関数という。 $$ \varphi (n) := \sum_{\gcd ( k , n ) = 1} 1 $$ 基本性質 [1] トーシェント級数: ノルム $N$ である。つま</description></item><item><title>グラフのオリエンテーション</title><link>https://freshrimpsushi.github.io/jp/posts/1532/</link><pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1532/</guid><description>Build-up Let&amp;rsquo;s assume a directed graph $D$ is given. A finite sequence of arcs is called a Directed Walk and is represented as follows: $$ v_{0} v_{1} , v_{1} v_{2} , \cdots , v_{m-1} v_{m} \\ v_{0} \rightarrow v_{1} \rightarrow v_{2} \rightarrow \cdots \rightarrow v_{m-1} \rightarrow v_{m} $$ In this case, $v_{0}$ is called the Initial Vertex, $v_{m}$ is called the Final Vertex, and $m$ is referred to as the</description></item><item><title>解析数論におけるメビウス関数</title><link>https://freshrimpsushi.github.io/jp/posts/1531/</link><pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1531/</guid><description>定義 1 素数 $p_{1} , \cdots , p_{k}$ に対して、自然数 $n$ を以下のように表すとしよう。このように定義された算術関数 $\mu$ をメビウス関数という。 $$ \mu (n) := \begin{cases} 1 &amp;amp;, n=1 \\ (-1)^{k} &amp;amp;,</description></item><item><title>グラフ内の距離、近傍、直径、周囲</title><link>https://freshrimpsushi.github.io/jp/posts/1530/</link><pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1530/</guid><description>定義 グラフ $G$ で、始点が$v \in V(G)$ で終点が$w \in V(G)$ のパスの集まりを$P(v,w)$ とし、$v \in V(G)$ を含むサイクルの集まりを$C(v)$ としよう。そ</description></item><item><title>解析的整数論におけるノルム</title><link>https://freshrimpsushi.github.io/jp/posts/1529/</link><pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1529/</guid><description>定義 1 以下のように定義された算術関数 $N$ をノルムと呼ぶ。 $$ N(n) := n $$ 基本性質 [1] ノルム級数: シグマ関数 $\sigma = \sigma_{1}$ である。つまり、 $$ \sum_{d \mid n } N(d) = \sigma_{1}(n) $$ [2] 完</description></item><item><title>グラフ理論における歩行、道、経路、サイクル</title><link>https://freshrimpsushi.github.io/jp/posts/1528/</link><pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1528/</guid><description>定義 1 グラフ $G$ が与えられたとする。 エッジの有限 シーケンスを ウォークと呼び、以下のように表す。 $$ v_{0} v_{1} , v_{1} v_{2} , \cdots , v_{m-1} v_{m} \\ v_{0} \rightarrow v_{1} \rightarrow v_{2} \rightarrow \cdots \rightarrow v_{m-1} \rightarrow v_{m} $$</description></item><item><title>解析的整数論における約数関数</title><link>https://freshrimpsushi.github.io/jp/posts/1527/</link><pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1527/</guid><description>定義 1 $\alpha \in \mathbb{C}$ に対して以下の $\sigma_{\alpha} : \mathbb{N} \to \mathbb{C}$ を約数関数と呼ぶ。 $$ \sigma_{\alpha} (n) := \sum_{d \mid n} d^{\alpha} $$ 基礎性質 [1] 乗法性: $\gcd (m,n) = 1$ を満たすすべての $m, n \in \mathbb{N}$ に対して、$\si</description></item><item><title>無限グラフ</title><link>https://freshrimpsushi.github.io/jp/posts/1526/</link><pubDate>Tue, 14 Apr 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1526/</guid><description>定義 1 グラフ $G$ の頂点集合 $V(G)$ や辺集合 $E(G)$ が無限集合である場合、$G$ を無限グラフという。 $V(G)$ と $E(G)$ が両方とも可算集合である無限グラフ $G$ を可算グラフと</description></item><item><title>乗法的関数のアーベル群</title><link>https://freshrimpsushi.github.io/jp/posts/1525/</link><pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1525/</guid><description>定理1 乗法的関数の集まり $M$と二項演算 $\ast$について $(M,*)$はアーベル群だ。 説明 算術関数の集合 $A$がコンボリューション $\ast$ とと</description></item><item><title>二部グラフ</title><link>https://freshrimpsushi.github.io/jp/posts/1524/</link><pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1524/</guid><description>定義 1 グラフ $G$ の頂点 $V(G)$ に対して パーティション $\left\{ A,B \right\}$ が存在し、すべての $xy \in E(G)$ に対して $x \in A, y \in B$ または $x \in B , y \in A$ であれば、$G$ を二部グラ</description></item><item><title>ディリクレ積と乗法的性質</title><link>https://freshrimpsushi.github.io/jp/posts/1523/</link><pubDate>Wed, 08 Apr 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1523/</guid><description>定理 1 [1]: $f$ と $g$ が乗法的関数ならば、$f \ast\ g$ も乗法的関数だ。 [2]: $g$ と $f \ast g$ が乗法的関数ならば、$f$ も乗法的関数だ。 説明 これらの性質は、乗法的関</description></item><item><title>ガンマ分布とカイ二乗分布の関係</title><link>https://freshrimpsushi.github.io/jp/posts/135/</link><pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/135/</guid><description>定理 $$ \Gamma \left( { r \over 2 } , 2 \right) \iff \chi ^2 (r) $$ 説明 ガンマ分布とカイ二乗分布は、上記のような性質を持っている。 証明 戦略：二つの分布のモーメント生成関数が</description></item><item><title>レギュラーグラフ</title><link>https://freshrimpsushi.github.io/jp/posts/1522/</link><pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1522/</guid><description>定義 1 全ての頂点の次数が同じであるグラフをレギュラーグラフregular graphと言う。特に、全ての頂点の次数が$r$の場合、$r$-レギ</description></item><item><title>ガンマ分布と指数分布の関係</title><link>https://freshrimpsushi.github.io/jp/posts/133/</link><pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/133/</guid><description>定理 $$ \Gamma \left(1, { 1 \over \lambda } \right) \iff \text{exp} (\lambda) $$ 説明 指数分布の直感的な定義を考えると、あるイベントが起きるまでの時間に関心があるということだ。離散確率分布で考</description></item><item><title>算術関数の乗法的性質</title><link>https://freshrimpsushi.github.io/jp/posts/1521/</link><pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1521/</guid><description>定義 1 $\forall n \in \mathbb{N}$について、$f(n) = 0$でない算術関数$f$が次を満たす場合、乗法的関数という。 $$ f(mn) = f(m) f(n) \qquad,\gcd(m,n)=1 $$ 乗法的関数</description></item><item><title>ガンマ分布とポアソン分布の関係</title><link>https://freshrimpsushi.github.io/jp/posts/98/</link><pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/98/</guid><description>定理 全ての自然数 $k$に対して、次が成り立つ。 $$ \int_{\mu}^{\infty} { { z^{k-1} e^{-z} } \over { \Gamma (k) } } dz = \sum_{x=0}^{k-1} { { {\mu}^{x} e^{-\mu} } \over {x!} } $$ $\Gamma$ はガンマ関数だ。 説明 $k, \theta &amp;gt; 0$ に関して、次の</description></item><item><title>ヌルグラフと完全グラフ</title><link>https://freshrimpsushi.github.io/jp/posts/1520/</link><pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1520/</guid><description>定義 1 単純グラフ $G$ が与えられたとする。 $E(G) = \emptyset$ ならば、$G$ をヌルグラフという。 $E \left( \overline{G} \right) = \emptyset$ ならば、$G$ を完全グラフという。 説明 ヌルグラフと</description></item><item><title>ガンマ分布の平均と分散</title><link>https://freshrimpsushi.github.io/jp/posts/132/</link><pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/132/</guid><description>公式 確率変数 $X$ が ガンマ分布 $\Gamma \left( k , \theta \right)$ に対して $X \sim \Gamma \left( k , \theta \right)$ だとする。 $$ E(X) = k \theta \\ \Var (X) = k \theta^{2} $$ 導出 戦略: ガンマ分布の定義とガンマ関数の基本</description></item><item><title>ガンマ分布</title><link>https://freshrimpsushi.github.io/jp/posts/1517/</link><pubDate>Tue, 31 Mar 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1517/</guid><description>定義 1 $k, \theta &amp;gt; 0$に対して、以下の確率密度関数を持つ連続確率分布$\Gamma ( k , \theta )$をガンマ分布gamma distributionと呼ぶ</description></item><item><title>グラフの補完</title><link>https://freshrimpsushi.github.io/jp/posts/1515/</link><pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1515/</guid><description>定義 1 シンプルグラフ $G$ について、以下の条件を満たすグラフ $\overline{G}$ を $G$ のコンプリメントという。 $$ V \left( \overline{G} \right) = V(G) \\ vw \in E \left( \overline{G} \right) \iff vw \notin E(G) $$ 説明 普通の数学で</description></item><item><title>算術関数のアーベル群</title><link>https://freshrimpsushi.github.io/jp/posts/1514/</link><pubDate>Fri, 27 Mar 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1514/</guid><description>定理 1 $f(1) \ne 0$ でない算術関数の集合 $A = \left\{ f : \mathbb{N} \to \mathbb{C} \mid f(1) \ne 0 \right\}$ と二項演算 $\ast$ について、$(A,*)$ はアーベル群である。 説明 厳密に言うと、全ての算</description></item><item><title>幾何分布の無記憶性</title><link>https://freshrimpsushi.github.io/jp/posts/217/</link><pubDate>Thu, 26 Mar 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/217/</guid><description>定理 $X \sim \text{Geo} ( m )$ ならば $P(X \ge s+ t ,|, X \ge s) = P(X \ge t)$ 説明 幾何分布は、ある事象が起こるまでの試行回数に関心を持つ離散確率分布だ。指数分布の離散化とし</description></item><item><title>サブグラフ</title><link>https://freshrimpsushi.github.io/jp/posts/1513/</link><pubDate>Wed, 25 Mar 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1513/</guid><description>定義 1 グラフ$G$について、グラフ$H$が$V(H) \subset V(G)$と$ E(H) \subset E(G)$を満たす場合、$H$を$G$のサブグラフと言う。 説明 注意す</description></item><item><title>指数分布の無記憶性</title><link>https://freshrimpsushi.github.io/jp/posts/216/</link><pubDate>Tue, 24 Mar 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/216/</guid><description>特質 $X \sim \exp{ ( \lambda ) }$ならば$P(X \ge s+ t ,|, X \ge s) = P(X \ge t)$ 説明 指数分布は、ある出来事が起こる期間に関心を持つ連続確率分布だ。深く考えなくても、</description></item><item><title>グラフの集合表記</title><link>https://freshrimpsushi.github.io/jp/posts/1512/</link><pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1512/</guid><description>定義 1 二つのグラフ $G_{1}$ と $G_{2}$ に対して $V(G_{1}) \cap V(G_{2}) = \emptyset$ としよう。 二つのグラフの ユニオンunion $G = G_{1} \cup G_{2}$ は、頂点セット $V(G_{1}) \cup V(G_{2})$ とエッジセット $E (G_{1}) \cup E ( G_{2}</description></item><item><title>指数分布とポアソン分布の関係</title><link>https://freshrimpsushi.github.io/jp/posts/296/</link><pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/296/</guid><description>説明 指数分布とポアソン分布の直感的な定義について考えてみよう。指数分布は、あるイベントが発生するまでにかかる時間に関心があり、ポアソン分布は</description></item><item><title>指数分布の平均と分散</title><link>https://freshrimpsushi.github.io/jp/posts/62/</link><pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/62/</guid><description>公式 $X \sim \exp ( \lambda)$ 面 $$ E(X) = {{ 1 } \over { \lambda }} \\ \Var (X) = {{ 1 } \over { \lambda^{2} }} $$ 証明 戦略: 指数分布の定義から直接推論する。 指数分布の定義: $\lambda &amp;gt; 0$に対する以下の</description></item><item><title>指数分布</title><link>https://freshrimpsushi.github.io/jp/posts/1510/</link><pubDate>Thu, 19 Mar 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1510/</guid><description>定義 1 $\lambda &amp;gt; 0$に対して、以下の確率密度関数を持つ連続確率分布$\exp ( \lambda)$を指数分布exponential distribut</description></item><item><title>ダルブーの中間値定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/1554/</link><pubDate>Wed, 18 Mar 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1554/</guid><description>位相数学での中間値定理</description></item><item><title>グラフの行列表現</title><link>https://freshrimpsushi.github.io/jp/posts/1499/</link><pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1499/</guid><description>定義 1 グラフ $G(V,E)$ が与えられたとしよう。 次数行列 各頂点 $v_{i}\in V$ の次数 $d(v_{i})$を簡単に $d_{i}$と表記しよう。次のような行列を $G$ の次数</description></item><item><title>自律システムのフローとタイム-Tマップ</title><link>https://freshrimpsushi.github.io/jp/posts/1507/</link><pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1507/</guid><description>定義 1 フロー 空間$X$と関数$f : X \to X$について、次のようなベクター場が微分方程式として与えられているとしよう。 $$ \dot{x} = f(x) $$ 時間変数$t$と</description></item><item><title>握手ジレンマの証明</title><link>https://freshrimpsushi.github.io/jp/posts/1506/</link><pubDate>Fri, 13 Mar 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1506/</guid><description>定理 1 任意の有向グラフにおいて、入次数の合計と出次数の合計は等しい。 説明 握手のジレンマは、有向グラフにおける握手の補題と言える。 証明 有向グラ</description></item><item><title>微分方程式で表される動力学系と平衡点</title><link>https://freshrimpsushi.github.io/jp/posts/1505/</link><pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1505/</guid><description>定義 1 空間 $V$ と関数 $f : V \to V$ に対し、次のようなベクトル場が微分方程式として与えられているとしよう。 $$ \dot{v} = f(v) $$ 変数 $t$ を含む微分方程式で、$t$</description></item><item><title>握手補題の証明</title><link>https://freshrimpsushi.github.io/jp/posts/1504/</link><pubDate>Mon, 09 Mar 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1504/</guid><description>概要 1 任意のグラフにおいて、全ての頂点の次数の合計は偶数である。 説明 名前の「握手」とは見ての通り、各頂点が隣接する頂点と握手をした場合、その</description></item><item><title>アトラクターのカオス</title><link>https://freshrimpsushi.github.io/jp/posts/1497/</link><pubDate>Sat, 07 Mar 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1497/</guid><description>定義 1 空間 $X = \left( \mathbb{R}^{n} , \left\| \cdot \right\| \right)$ と スムーズ な関数 $f,g : X \to X$ に対して、ベクトル場、マップが次のように表現されるとしよう。 $$ \dot{x} = f(x) \\ x \mapsto g(x) $$ $\phi (t, \cdot)$ は</description></item><item><title>グラフ理論における次数</title><link>https://freshrimpsushi.github.io/jp/posts/1496/</link><pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1496/</guid><description>定義 1 有向グラフ $G$が与えられているとしよう。 エッジ $vw$が存在する場合、エッジは$v$から出て$w$に入ると言われる。 頂点 $v$に入る</description></item><item><title>ディリクレ積の逆수</title><link>https://freshrimpsushi.github.io/jp/posts/1494/</link><pubDate>Tue, 03 Mar 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1494/</guid><description>定義 1 算術関数 $f$ に対して、以下を満たす算術関数 $f^{-1}$ が一意に存在する場合、$f^{-1}$ を $f$ の**(ディリクレ)逆**という。 $$ f \ast\ f^{-1} = f^{-1} \ast\ f</description></item><item><title>グラフの同型写像</title><link>https://freshrimpsushi.github.io/jp/posts/1492/</link><pubDate>Fri, 28 Feb 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1492/</guid><description>定義 1 二つのグラフ $G_{1}$ と $G_{2}$ が与えられているとする。$V(G_{1})$ と $V(G_{2})$ の間には全単射が存在し、$G_{1}$ の頂点間のエッジの数とそれに対</description></item><item><title>ポアソン分布の平均と分散</title><link>https://freshrimpsushi.github.io/jp/posts/61/</link><pubDate>Thu, 27 Feb 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/61/</guid><description>数式 $X \sim \text{Poi}(\lambda)$ 面 $$ E(X) = \lambda \\ \Var(X) = \lambda $$ 導出 戦略：ポアソン分布の定義から直接演繹する。階乗と級数を分けるトリックが重要だ。 ポアソン分布の定義: $\lambda &amp;gt; 0$ に</description></item><item><title>ポアソン分布</title><link>https://freshrimpsushi.github.io/jp/posts/1491/</link><pubDate>Wed, 26 Feb 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1491/</guid><description>定義 1 $\lambda &amp;gt; 0$に基づき、以下の確率質量関数を持つ離散確率分布$\text{Poi} ( \lambda )$をポアソン分布poisson distributio</description></item><item><title>ディリクレ積に関する恒等式</title><link>https://freshrimpsushi.github.io/jp/posts/1490/</link><pubDate>Mon, 24 Feb 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1490/</guid><description>定義 1 以下のように定義された算術関数 $I$ をアイデンティティ関数と言う。 $$ I(n) := \left[ {{ 1 } \over { n }} \right] $$ [1] アイデンティティ級数：単位関数 $u$ である。つま</description></item><item><title>負の二項分布の平均と分散</title><link>https://freshrimpsushi.github.io/jp/posts/94/</link><pubDate>Sun, 23 Feb 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/94/</guid><description>公式 $X \sim \text{NB}(r, p)$ 面 $$ E(X) = {{ r (1-p) } \over { p }} \\ \Var(X) = {{ r (1-p) } \over { p^{2} }} $$ 証明 戦略: 負の二項分布が幾何分布の一般化だという点を利用する。 [b] 幾何分布の一般化</description></item><item><title>負の二項分布</title><link>https://freshrimpsushi.github.io/jp/posts/1489/</link><pubDate>Sat, 22 Feb 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1489/</guid><description>定義 1 $r \in \mathbb{N}$ と $p \in (0,1]$ に基づいて、次の確率質量関数を持つ離散確率分布 $\text{NB}(r,p)$ を負の二項分布negative Binomial distributionっていう。 $$ p(x) =</description></item><item><title>算術関数のディリクレ積</title><link>https://freshrimpsushi.github.io/jp/posts/1488/</link><pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1488/</guid><description>定義 1 二つの算術関数$f$、$g$に対し、以下を満たす算術関数$h$を$f$と$g$のディリクレ積と呼ぶ。 $$ h(n) = \sum_{d \mid n} f(d) g \left( {{ n } \over { d }} \right)</description></item><item><title>幾何分布の二つの定義が持つ違い</title><link>https://freshrimpsushi.github.io/jp/posts/295/</link><pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/295/</guid><description>説明 幾何分布について勉強していると、教科書やブログ、ウィキで説明がちがっていることが最も困惑し、混乱する点だ。ある箇所では平均が$\disp</description></item><item><title>解析的整数論における算術関数</title><link>https://freshrimpsushi.github.io/jp/posts/1487/</link><pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1487/</guid><description>定義 1 定義域が自然数の集合$\mathbb{N}$であり、値域が実数の集合$\mathbb{R}$または複素数の集合$\mathbb{C}$</description></item><item><title>LinuxでJuliaの最新バージョンをインストールする方法</title><link>https://freshrimpsushi.github.io/jp/posts/1511/</link><pubDate>Mon, 17 Feb 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1511/</guid><description>ガイド ジュリア バージョン 1.10 以降 ターミナルで上記のように curl -fsSL https://install.julialang.org | sh コマンドを入力すればよい。 ジュリア バージョン 1.10 以前 ステップ 1. ジュリア ダウンロ</description></item><item><title>幾何分布の平均と分散</title><link>https://freshrimpsushi.github.io/jp/posts/63/</link><pubDate>Mon, 17 Feb 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/63/</guid><description>公式 $X \sim \text{Geo} (p)$ 面積 $$ E(X) = {{ 1 } \over { p }} \\ \Var(X) = {{ 1-p } \over { p^{2} }} $$ 導出 幾何分布の平均と分散は、思うほど簡単には求められない。このポストでは、有益なが</description></item><item><title>幾何分布</title><link>https://freshrimpsushi.github.io/jp/posts/1486/</link><pubDate>Sun, 16 Feb 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1486/</guid><description>定義 1 $p \in (0,1]$に対して、次のような確率質量関数を持つ離散確率分布 $\text{Geo}(p)$を幾何分布geometric distr</description></item><item><title>多次元マップのカオス</title><link>https://freshrimpsushi.github.io/jp/posts/1485/</link><pubDate>Fri, 14 Feb 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1485/</guid><description>定義1 マップ $f : \mathbb{R}^{m} \to \mathbb{R}^{m}$ のバウンデッドオービット $\left\{ \mathbf{v}_{0}, \mathbf{v}_{1}, \cdots \right\}$ が次を満たすとき、このオービットをケアリックchaoticという。 (i): 漸近的に周期的で</description></item><item><title>二項分布の平均と分散</title><link>https://freshrimpsushi.github.io/jp/posts/60/</link><pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/60/</guid><description>公式 $\displaystyle X \sim \text{Bin} (n,p)$ 面 $$ E(X)=np \\ \Var(X)=npq $$ ここで、$q : = 1-p$ です。 導出 戦略：組み合わせを直接解きます。式は少し汚いけど、高校レベルで十分に消化できる。一度は</description></item><item><title>二項分布</title><link>https://freshrimpsushi.github.io/jp/posts/1480/</link><pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1480/</guid><description>定義 1 $n \in \mathbb{N}$ と $p \in [0,1]$ に対して以下の確率質量関数を有する離散確率分布 $\text{Bin}(n,p)$ を 二項分布binomial distributionと呼ぶ。 $$ p(x) = \binom{n}{x} p^{x} (1-p)^{n-x} \qquad</description></item><item><title>1万番目までの素数点以下のリスト</title><link>https://freshrimpsushi.github.io/jp/posts/2339/</link><pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/2339/</guid><description>素数 1万番目までの素数のリストである。 ダウンロード 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197</description></item><item><title>確率変数の線形結合</title><link>https://freshrimpsushi.github.io/jp/posts/1479/</link><pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1479/</guid><description>一緒に見る 特定の分布に従う確率変数の加算</description></item><item><title>Juliaでの並列処理の方法</title><link>https://freshrimpsushi.github.io/jp/posts/1474/</link><pubDate>Sat, 08 Feb 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1474/</guid><description>コード 最初に、生えび寿司レストランには詳しい説明が含まれているが、ジュリアは並列処理をどれだけ容易にできるかを強調するために、わざと説明を省</description></item><item><title>多次元マップのリアプノフ数とその数値計算法</title><link>https://freshrimpsushi.github.io/jp/posts/1472/</link><pubDate>Thu, 06 Feb 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1472/</guid><description>定義 1 スムーズなマップ$\mathbf{f} : \mathbb{R}^{m} \to \mathbb{R}^{m}$と初期値$\mathbf{v}_{0} \in \mathbb{R}</description></item><item><title>二つの正規分布に従う確率変数が独立であることと共分散が0であることは等価である</title><link>https://freshrimpsushi.github.io/jp/posts/591/</link><pubDate>Wed, 05 Feb 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/591/</guid><description>요약 $$ X_{1} \sim N ( \mu_{1} , \sigma_{1} ) \\ X_{2} \sim N ( \mu_{2} , \sigma_{2} ) $$ 面 $$ X_{1} \perp X_{2} \iff \text{cov} (X_{1} , X_{2} ) = 0 $$ 설명 일반적으로 상관관계가 없다고 독립인 것은 아니야. 하지만 분포들이 정규분포</description></item><item><title>楕円の一般化：楕円体</title><link>https://freshrimpsushi.github.io/jp/posts/1471/</link><pubDate>Tue, 04 Feb 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1471/</guid><description>定義 線形変換$A \in \mathbb{R}^{m \times m}$について、$m$次元の単位球$N := \left\{ \mathbf{x} \in \mathbb{R}^{m} : \left\| \mathbf{x} \right\|_{2} = 1 \right\}$のイメージ$AN$を楕円体と言う。$A$</description></item><item><title>バーンスタイン分布：対の独立は相互独立を意味しない</title><link>https://freshrimpsushi.github.io/jp/posts/206/</link><pubDate>Mon, 03 Feb 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/206/</guid><description>定義 $(x,y,z) \in \left\{ (1,0,0), (0,1,0), (0,0,1), (1,1,1) \right\}$ に対して、以下の確率質量関数を持つ分布を バーンスタイン分布bernstein distributionという。 $$ p(x,y,z) = {{1} \over {4}</description></item><item><title>確率変数の独立性とiid</title><link>https://freshrimpsushi.github.io/jp/posts/1469/</link><pubDate>Sun, 02 Feb 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1469/</guid><description>定義1 確率変数$X_{1} , \cdots , X_{n}$が次を満たすとき、$X_{1} , \cdots , X_{n}$はペアワイズ独立と言われる。 $$ i \ne j \implies X_{i} \perp X_{j} $$ 連</description></item><item><title>確率的勾配降下法</title><link>https://freshrimpsushi.github.io/jp/posts/1464/</link><pubDate>Wed, 29 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1464/</guid><description>定義 目的関数 $Q$ とラーニングレート $\alpha &amp;gt; 0$、バッチサイズ $m$、そして$i$番目のデータに対して、 $$ \omega_{n+1} := \omega_{n} - \alpha {{ 1 } \over { n }} \sum_{i=1}^{m} \nabla Q_{i} ( \omega_{n} ) $$ を確</description></item><item><title>数理統計学における確率変数の独立</title><link>https://freshrimpsushi.github.io/jp/posts/1461/</link><pubDate>Mon, 27 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1461/</guid><description>定義 1 二つの確率変数 $X_{1}, X_{2}$ の結合確率密度関数 $f$ または確率質量関数 $p$ が、$X_{1}, X_{2}$ の確率密度関数 $f_{1}, f_{2}$ または確率質量関数 $p_{1}, p_{2}$ で以下を満たす場</description></item><item><title>数学における最適化技術</title><link>https://freshrimpsushi.github.io/jp/posts/1463/</link><pubDate>Sat, 25 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1463/</guid><description>定義 関数$f : \mathbb{R}^{n} \to \mathbb{R}$の関数値を最小にする$x^{ \ast } = \argmin_{x} f(x)$を見つける問題を最適化問題optimization Pr</description></item><item><title>数理統計学における条件付き確率分布</title><link>https://freshrimpsushi.github.io/jp/posts/1458/</link><pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1458/</guid><description>定義1 離散確率ベクトル $(X, Y)$に対して、$p_{X, Y}$を$(X, Y)$の結合確率質量関数とする。$p_{X}$を$X$の周辺確率質量関数</description></item><item><title>メタプログラミング</title><link>https://freshrimpsushi.github.io/jp/posts/1457/</link><pubDate>Tue, 21 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1457/</guid><description>メタプログラミングとは？ 簡単に言うと、プログラムがコードを修正するようにするプログラミングと考えることができる。特定の技術というよりは、その</description></item><item><title>SCPを使用してサーバーにファイルをアップロードし、サーバーからダウンロードする方法</title><link>https://freshrimpsushi.github.io/jp/posts/1456/</link><pubDate>Sun, 19 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1456/</guid><description>コマンド scpはおそらくserver copyの略で、sshサーバーを使う時にアップロードやダウンロードをするコマンドだ。 スペースと@と:の位</description></item><item><title>多変量確率変数の変換</title><link>https://freshrimpsushi.github.io/jp/posts/1455/</link><pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1455/</guid><description>公式 多変量確率変数 $X = ( X_{1} , \cdots , X_{n} )$ の結合確率密度関数 $f$ が次のように与えられているとする。 $$ y_{1} = u_{1} (x_{1} , \cdots , x_{n}) \\ \vdots \\ y_{n} = u_{n} (x_{1} , \cdots , x_{n}) $$ このよう</description></item><item><title>Juliaの強力な便利機能、マクロ</title><link>https://freshrimpsushi.github.io/jp/posts/1454/</link><pubDate>Wed, 15 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1454/</guid><description>概要 マクロは、Juliaでコーディングする時の便利機能であり、スコープの前に置いて実行される。例えば、自分のプログラムがどれくらいの時間を消</description></item><item><title>Rでフォルダ内のファイルリストを取得する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1451/</link><pubDate>Mon, 13 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1451/</guid><description>コード setwd(&amp;#34;F:\\dsr\\project&amp;#34;) getwd() list.files(getwd()) list.files(getwd(),pattern=&amp;#34;*.csv&amp;#34;) list.files()は、いくつかのファイルに分割されたデータを集約したり、メタプログラミングなどに便利な関数だ： path: 最初の引</description></item><item><title>Juliaでパイプオペレータを使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1450/</link><pubDate>Sat, 11 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1450/</guid><description>概要 ジュリアはデータを扱う上での強みを生かして、パイプラインオペレーターをサポートしている。 コード julia&amp;gt; (1:5) .|&amp;gt; (x -&amp;gt; sqrt(x+2)) .|&amp;gt; sin |&amp;gt; minimum 0.4757718381527513 julia&amp;gt; minimum(sin.((x -&amp;gt; sqrt(x+2)).(1:5))) 0.4757718381527513 上のサンプ</description></item><item><title>数理統計学における多変量確率分布</title><link>https://freshrimpsushi.github.io/jp/posts/1449/</link><pubDate>Thu, 09 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1449/</guid><description>定義 1 標本空間 $\Omega$で定義された$n$個の確率変数 $X_{i}$に対し$X = (X_{1} , \cdots , X_{n})$を$n$次元ランダムベクトルra</description></item><item><title>Juliaでのラムダ式</title><link>https://freshrimpsushi.github.io/jp/posts/1448/</link><pubDate>Tue, 07 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1448/</guid><description>概要 Juliaでは、ラムダ式は以下のように定義される。 (x -&amp;gt; 3x^2 - 2x + 3)(1) これは、匿名関数$\lambda : \mathbb{Z} \to \mathbb{Z}$を定義し、そ</description></item><item><title>ドンスカーの定理</title><link>https://freshrimpsushi.github.io/jp/posts/1447/</link><pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1447/</guid><description>定理 $\left\{ \xi_i \right\}_{i \in \mathbb{N}}$が$(0,1)$で定義された確率過程だとしよう。関数空間$C[0,1]$で確率関数$X_{n}$が以下の</description></item><item><title>イェンセンの不等式の期待値形の証明</title><link>https://freshrimpsushi.github.io/jp/posts/266/</link><pubDate>Sat, 04 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/266/</guid><description>定理 1 開区間$I$で関数$\phi$が凸であり二回微分可能で、確率変数$X$の期待値$\mu$が存在し、$X \subset I $のとき $$ \phi [ E(X) ] \le E [ \phi (X)]</description></item><item><title>Juliaで画像を読み込み、行列として保存する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1446/</link><pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1446/</guid><description>コード using Images cd(&amp;#34;C:/Users/rmsms/OneDrive/examples&amp;#34;) pwd() example = load(&amp;#34;example.jpg&amp;#34;) typeof(example) size(example) gray1 = Gray.(example) typeof(gray1) size(gray1) M = convert(Array{Float64},gray1) typeof(M) size(M) colorview(Gray, M.^(1/2)) save(&amp;#34;rgb.png&amp;#34;, colorview(RGB, example)) save(&amp;#34;gray1.png&amp;#34;, colorview(Gray, gray1)) save(&amp;#34;gray2.png&amp;#34;, colorview(Gray, transpose(gray1))) save(&amp;#34;gray3.png&amp;#34;, colorview(Gray, M.^(1/2))) 上から順にサンプルコードを簡単に理解してみよう: cd() : Change Directory, 作業ディレク</description></item><item><title>チェビシェフの不等式の証明</title><link>https://freshrimpsushi.github.io/jp/posts/34/</link><pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/34/</guid><description>定理 1 確率変数$X$の分散$\sigma^2 &amp;lt; \infty$が存在し、ある正数$k&amp;gt;0$に対して $$ P(|X-\mu| \ge k\sigma) \le {1 \over k^2} $$ 説明 形が比較的シンプ</description></item><item><title>WindowsでSSHサーバーを構築する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1445/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1445/</guid><description>概要 Windowsはバージョン10になってから、PowerShellを含め、Linux固有の便利な機能を多く提供するようになった。sshサー</description></item><item><title>Pythonにおけるisと==の違い</title><link>https://freshrimpsushi.github.io/jp/posts/1444/</link><pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1444/</guid><description>コード if type(150421) is int : print(&amp;#34;!&amp;#34;) else : print(&amp;#34;?&amp;#34;) x = [1,2] y = [1,2] x == y x is y 説明 GitHubでPythonのコードを見ていると、時々isが見えることがある。コードが文の</description></item><item><title>マルコフの不等式の証明</title><link>https://freshrimpsushi.github.io/jp/posts/33/</link><pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/33/</guid><description>定理 1 確率変数 $X$に対して関数 $u(X) \ge 0$を定義する。$E \left( u(X) \right)$が存在すれば、$c &amp;gt; 0$に対して $$ P(u(X) \ge c) \le {E \left( u(X) \right) \over c} $$ 説明 多く</description></item><item><title>n次のモーメントが存在する場合、nより小さい次数のモーメントも存在する</title><link>https://freshrimpsushi.github.io/jp/posts/247/</link><pubDate>Mon, 30 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/247/</guid><description>定理 確率変数 $X$ と自然数 $n$ に対して $E( X^n )$ が存在するなら、$E( X^m ), m=1,2,3,\cdots, n$ も存在する。 説明 ある次数の積率が存在するだけで、それより小さい次数の積率</description></item><item><title>タイト確率過程</title><link>https://freshrimpsushi.github.io/jp/posts/1443/</link><pubDate>Mon, 30 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1443/</guid><description>定義 確率空間 $( \Omega , \mathcal{F} , P)$で確率過程 $\left\{ X_n \right\}_{n \in \mathbb{N}}$が定義されているとしよう。全ての$\varepsilon &amp;gt; 0$に対して</description></item><item><title>Juliaでの集合データ型と演算子</title><link>https://freshrimpsushi.github.io/jp/posts/1442/</link><pubDate>Sun, 29 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1442/</guid><description>概要 Juliaでは、Pythonと同様にセットデータ型をサポートしています。元来のセットデータ型がそうであるように、使用する人にとっては非常</description></item><item><title>積率母関数とは何か？</title><link>https://freshrimpsushi.github.io/jp/posts/248/</link><pubDate>Sun, 29 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/248/</guid><description>定義 1 確率変数$X$とある正の数$h&amp;gt;0$に対して、$E(e^{tX})$が$-h&amp;lt; t &amp;lt; h$で存在するならば、$M(t) = E( e^{tX} )</description></item><item><title>Pythonで二つの変数の値を交換する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1441/</link><pubDate>Sat, 28 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1441/</guid><description>コード 変数同士のスワップは、一般的には一時変数を作って移動させる方法で簡単に実装できる。しかし、複数のプログラミング言語を扱う立場からすると</description></item><item><title>数理統計学における尖度</title><link>https://freshrimpsushi.github.io/jp/posts/1271/</link><pubDate>Sat, 28 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1271/</guid><description>尖度 確率変数 $X$ の平均が $\mu$、分散が $\sigma^2$の場合、以下のように定義される $X$の尖度kurtosisは、 $$ \gamma_{2} := {{ E \left( X - \mu</description></item><item><title>数理統計学における歪度</title><link>https://freshrimpsushi.github.io/jp/posts/1268/</link><pubDate>Fri, 27 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1268/</guid><description>定義 確率変数$X$の平均が$\mu$で、分散が$\sigma^2$だとする時、次のように定義された$\gamma_{1}$を$X$の歪度sk</description></item><item><title>Juliaにおける配列のスライシングとインデックス化</title><link>https://freshrimpsushi.github.io/jp/posts/1437/</link><pubDate>Thu, 26 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1437/</guid><description>概要 Juliaは、R、Python、マトラボの利点が混在する言語だ。配列はプログラミングの基本であり、その利用で複数の言語の痕跡が見られる。</description></item><item><title>ピアソン相関係数</title><link>https://freshrimpsushi.github.io/jp/posts/57/</link><pubDate>Thu, 26 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/57/</guid><description>定義 1 二つの確率変数 $X, Y$ に対して次のように定義される $\rho = \rho (X,Y)$ を ピアソン相関係数pearson Correlation と呼ぶ。 $$ \rho = { {\operatorname{Cov} (X,Y)} \over {\sigma_X \sigma_Y} } $$ $\sigma_{X}$, $\sigma_{Y}$ はそれぞれ $X$,</description></item><item><title>共分散の様々な性質</title><link>https://freshrimpsushi.github.io/jp/posts/425/</link><pubDate>Thu, 26 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/425/</guid><description>定義と性質 平均がそれぞれ$\mu_{X}$、$\mu_{Y}$である確率変数$X$と$Y$について、$\operatorname{Cov} (X</description></item><item><title>プリコンパクト確率過程</title><link>https://freshrimpsushi.github.io/jp/posts/1436/</link><pubDate>Wed, 25 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1436/</guid><description>定理 可測空間 $(S, \mathcal{S})$ から $(S ', \mathcal{S} ')$ へ行く連続関数たちを集めた関数空間を $\mathscr{H}:= C \left( S,S&amp;rsquo; \right)$と置いて、$\left\{ h^{-1}(A&amp;rsquo;): h \in \mathscr{H} , A ' \in \mathcal{S} ' \right\}$ が $(S</description></item><item><title>平均と分散の性質들</title><link>https://freshrimpsushi.github.io/jp/posts/424/</link><pubDate>Wed, 25 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/424/</guid><description>定理 平均 $E ( X ) = \mu_{X}$ と分散 $\Var (X) = E [ ( X - \mu_{X} )^2 ]$ は以下の性質を持っている。 [1]: $E(X + Y) = E(X) + E(Y)$ [2]: $E(aX + b) = a E(X) + b$ [3]: $\Var (X) \ge 0$ [4]: $\Var ( X ) = E(X^2) - \mu_{X}^2$ [5]: $\Var</description></item><item><title>代表値の数理的性質の証明</title><link>https://freshrimpsushi.github.io/jp/posts/49/</link><pubDate>Tue, 24 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/49/</guid><description>定理 データ $X = \left\{ x_{1} , \cdots , x_{n} \right\}$ が与えられているとしよう。 0: $\displaystyle h(\theta)=\sum_{i=1}^{n} {|x_i - \theta|}^{0}$ を最小にする $\theta$ は $$ \argmin_{\theta} h \left( \theta \right) = \text{mode}(X) $$ 1: $\displaystyle h(\theta)=\sum_{i=1}^{n} {|x_i - \theta|}^{1}$ を最小にする $\theta$ は $$ \argmin_{\theta} h \left( \theta \right)</description></item><item><title>グリーディアルゴリズム</title><link>https://freshrimpsushi.github.io/jp/posts/1434/</link><pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1434/</guid><description>定義 グリーディアルゴリズムは、その瞬間のみを考慮して最も良い選択をする方法だ。 説明 グリードアルゴリズムは、名前が示す通り、長期的な視点を持た</description></item><item><title>数理統計学における期待値、平均、分散、モーメントの定義</title><link>https://freshrimpsushi.github.io/jp/posts/246/</link><pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/246/</guid><description>定義: 期待値、平均、分散 確率変数 $X$ が与えられたとする。 連続確率変数$X$ の確率密度関数$f(x)$ が $\displaystyle \int_{-\infty}^{\infty} |x| f(x) dx &amp;lt; \infty$ を満たす場合、以下のように</description></item><item><title>数理統計学における確率変数と確率分布</title><link>https://freshrimpsushi.github.io/jp/posts/1433/</link><pubDate>Sun, 22 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1433/</guid><description>定義 1 標本空間 $\Omega$ で 確率 $P$ が定義されているとする。 定義域が標本空間の関数 $X : \Omega \to \mathbb{R}$ を 確率変数random variableと呼ぶ。確率変数の値域</description></item><item><title>測度論によって定義される分布の収束</title><link>https://freshrimpsushi.github.io/jp/posts/1432/</link><pubDate>Sat, 21 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1432/</guid><description>定義 距離空間 $S$ の ボレルシグマ場 $\mathcal{S}:= \mathcal{B}(S)$ に関して 可測空間 $(S,\mathcal{S})$ を定義しよう。 確率空間 $(\Omega, \mathcal{F}, P)$ で定義された 確率変数 $X$ と 確率過程 $\left\{ X_{n} \right\}_{n \in \mathbb{N}}$ が $n \to \infty$ のとき、す</description></item><item><title>数理統計学における確率と確率の加法定理</title><link>https://freshrimpsushi.github.io/jp/posts/1431/</link><pubDate>Fri, 20 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1431/</guid><description>定義 1 同じ条件下で繰り返しできる試行を無作為試行random experimentと呼ぶ。 無作為試行で得られる全ての結果outcomeを集めた</description></item><item><title>確率論の混合定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/1430/</link><pubDate>Thu, 19 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1430/</guid><description>定理 空間$S$が距離空間$( S , \rho)$であり、かつ可測空間$(S,\mathcal{B}(S))$だとしよう。 以下は全て同値である。 (1):</description></item><item><title>確率過程における射影マッピング</title><link>https://freshrimpsushi.github.io/jp/posts/1429/</link><pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1429/</guid><description>定義 空間$S$が距離空間(../381)$( S , \rho)$でありながら可測空間(../490)$(S,\mathcal{B}(S))$でも</description></item><item><title>ポーランド空間で定義される確率尺度はタイトである</title><link>https://freshrimpsushi.github.io/jp/posts/1428/</link><pubDate>Tue, 17 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1428/</guid><description>定理 距離空間 $(S,\rho)$ が ポーランド空間 だとしよう。$S$ で定義された全ての確率測度は タイト である。 解説 ポーランド空間とは、可分 完備 な 距離空間 のことを</description></item><item><title>ポーランド空間</title><link>https://freshrimpsushi.github.io/jp/posts/1427/</link><pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1427/</guid><description>定義 次の条件を満たす位相空間 $X$ をポーランド空間と呼ぶ。 (i): $X$ は距離化可能空間だ。 (ii): $X$ は可分空間だ。 (iii): $X$ は完備空間だ。 説明 原語がPolish Sp</description></item><item><title>連続体仮説</title><link>https://freshrimpsushi.github.io/jp/posts/1426/</link><pubDate>Sun, 15 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1426/</guid><description>推測 連続体仮説：$\aleph_{0} = |\mathbb{N}|$ に対して$\aleph_{0} &amp;lt; x &amp;lt; 2^{\aleph_{0}}$ を満たす基数$x$ は存在しない。 一般連続体仮説：無限基数$a</description></item><item><title>ラッセルの逆理</title><link>https://freshrimpsushi.github.io/jp/posts/1423/</link><pubDate>Fri, 13 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1423/</guid><description>逆説 1 もし全ての集合の集合 $\mathscr{U}$ が存在すれば、ある集合 $R$ が $\mathscr{U}$ の要素でありながら自分自身の要素ではない。 説明 紀元前6世紀、クレタ出身の哲学者 エピメ</description></item><item><title>부분순서 집합</title><link>https://freshrimpsushi.github.io/jp/posts/1421/</link><pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1421/</guid><description>定義 1 集合 $A$ においての 関係 $\le$ が反射的、推移的、反対称的であるならば、$\le$ を 部分順序partial order とし、$(A,\le)$ を 部分順序集</description></item><item><title>完全有界空間</title><link>https://freshrimpsushi.github.io/jp/posts/1420/</link><pubDate>Tue, 10 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1420/</guid><description>定義 1 距離空間 $(X,d)$ と $\varepsilon&amp;gt;0$ が与えられたとする。 全ての $x \in X$ に対して $B_{d}(x,\varepsilon) \cap A_{\varepsilon} \ne \emptyset$ を満たす有限集合 $A_{\varepsilon} \subset X$ を$X$ の**$\varepsilon$-ネット</description></item><item><title>タイト確率測度</title><link>https://freshrimpsushi.github.io/jp/posts/1417/</link><pubDate>Mon, 09 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1417/</guid><description>定義 空間$S$が距離空間$( S , \rho)$であり、かつ可測空間$(S,\mathcal{B}(S))$であるとする。 $P$が$S$で定義さ</description></item><item><title>Juliaでパッケージをインストールして使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1416/</link><pubDate>Sun, 08 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1416/</guid><description>方法1 using LinearAlgebra using Pkg Pkg.add(&amp;#34;Plots&amp;#34;) Pkg.add(&amp;#34;Distributions&amp;#34;) using Plots 上のコードは、LinearAlgebraパッケージとPkgパッケージを読み込むこと、そして.add()関数を使ってPl</description></item><item><title>実数の濃度と有理数の濃度の比較</title><link>https://freshrimpsushi.github.io/jp/posts/110/</link><pubDate>Sun, 08 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/110/</guid><description>概要 1 $\operatorname{card}(\mathbb{Q})={{ \aleph }_{ 0 }}, \operatorname{card}(\mathbb{R})=c$について $$ { 2 }^{ {{ \aleph }_{ 0 }} } =c \\ {{ \aleph }_{ 0 }}&amp;lt;c $$ 説明 カントー</description></item><item><title>二つの確率尺度が一致する条件</title><link>https://freshrimpsushi.github.io/jp/posts/1415/</link><pubDate>Sat, 07 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1415/</guid><description>定理 空間 $S$ が距離空間$( S , \rho)$ であり、かつ可測空間$(S,\mathcal{B}(S))$ だとしよう。 $\mathcal{O}$ はすべての開集合の集合、$\math</description></item><item><title>Rパッケージのインストール時の「Warning in install.packages lib = C:\Program Files\R\R-3.6.1\library is not writable」の解決方法</title><link>https://freshrimpsushi.github.io/jp/posts/1414/</link><pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1414/</guid><description>概要 これは、プログラミングどころか、パソコンにさえ慣れていないが、急にRを使う必要があるユーザー向けに、かなり詳細に説明しているため、細かす</description></item><item><title>カントールの定理証明</title><link>https://freshrimpsushi.github.io/jp/posts/108/</link><pubDate>Thu, 05 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/108/</guid><description>証明 もし$X=\emptyset$ならば、 $$ \operatorname{card}(X)=0 \\ \operatorname{card}(\mathscr{P} (X))=1 $$ 従って$\operatorname{card}(X)&amp;lt;\operatorname</description></item><item><title>確率論における分離クラス</title><link>https://freshrimpsushi.github.io/jp/posts/1413/</link><pubDate>Thu, 05 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1413/</guid><description>定理 測度空間 $(S, \mathcal{B}(S))$で定義された二つの確率 $P$、$Q$について、以下を満たす$\mathcal{C}$をセパレー</description></item><item><title>カントール-ベルンシュタインの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/1412/</link><pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1412/</guid><description>定理 1 集合$A$、$B$について、$A$が$B$の部分集合と同値で、$B$が$A$の部分集合と同値であれば、$A$と$B$は同値である。 二つ</description></item><item><title>測度の弱収束</title><link>https://freshrimpsushi.github.io/jp/posts/1410/</link><pubDate>Tue, 03 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1410/</guid><description>定義 空間 $S$ が距離空間 $( S , \rho)$ であり、かつ可測空間 $(S,\mathcal{B}(S))$ であるとする。 測度論 $S$ 上で定義される測度 $\mu$ とその測度の列 $\left\{ \mu_n \right\}_{n \in \mathbb{N}}$ が $n \to \infty$ のとき、全ての $f</description></item><item><title>Pythonのnumpy arrayで行の結合と列の結合の方法</title><link>https://freshrimpsushi.github.io/jp/posts/1409/</link><pubDate>Mon, 02 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1409/</guid><description>コード import numpy as np a = np.array([[1,2,3]]) b = np.array([[4,5,6]]) print(a) print(b) print(np.c_[a,b]) print(np.r_[a,b]) Pythonのnumpyパッケージは、非常に便利な機能を多く提供する。以下のスクリーンショットで見るように</description></item><item><title>確率論におけるレヴィの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/1406/</link><pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1406/</guid><description>Theorem 確率空間 $( \Omega , \mathcal{F} , P)$ が与えられたとする。 $\eta$ が 可積分な確率変数であり、$\left\{ \mathcal{F}_{n} \right\}_{n \in \mathbb{N}}$ が $\mathcal{F}_{n} \subset \mathcal{F}_{n+1}$ を満たすシグマ場のシーケンスである場合</description></item><item><title>ディンキンのパイ-ラムダ定理</title><link>https://freshrimpsushi.github.io/jp/posts/1405/</link><pubDate>Sat, 30 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1405/</guid><description>定理 パイシステム$\mathcal{P}$がラムダシステム$\mathcal{L}$の部分集合である場合、$\mathcal{P} \subset \sigma ( \mathcal{P} )</description></item><item><title>Pythonで大きなCSVファイルを一度に読む方法</title><link>https://freshrimpsushi.github.io/jp/posts/1403/</link><pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1403/</guid><description>コード y_test=[] y_csv = open(&amp;#39;y_test.csv&amp;#39;, &amp;#39;r&amp;#39;, encoding=&amp;#39;utf-8&amp;#39;) rdr = csv.reader(y_csv) for line in rdr: y_test.append(line[0]) y_csv.close() 普通、csvファイルを読み込む時は、上のようにPythonの組み込み関数openを使って一行ずつ処理する</description></item><item><title>πシステムとλシステム</title><link>https://freshrimpsushi.github.io/jp/posts/1402/</link><pubDate>Thu, 28 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1402/</guid><description>定義 $\mathcal{P}$を満たすものを**$\pi$-システム**って言うんだ。 $$ A, B \in \mathcal{P} \implies A \cap B \in \mathcal{P} $$ 下記の条件を満たす$\math</description></item><item><title>L1が収束するなら、マルチンゲールは閉じることができる</title><link>https://freshrimpsushi.github.io/jp/posts/1401/</link><pubDate>Wed, 27 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1401/</guid><description>定理 確率空間 $( \Omega , \mathcal{F} , P)$ とマルティンゲール $\left\{ ( X_{n} , \mathcal{F}_{n} ) \right\}$ が与えられたとき、確率過程 $\left\{ ( X_{n} , \mathcal{F}_{n} ) \right\}$ が確率変数 $Y$ へ$\mathcal{L}_{1</description></item><item><title>Pythonでpipを使用してcv2とPILパッケージをインストールする方法</title><link>https://freshrimpsushi.github.io/jp/posts/1400/</link><pubDate>Tue, 26 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1400/</guid><description>ガイド openCVパッケージとPILパッケージは、画像処理に便利なパッケージだ。問題は、例のコードでこれらのパッケージを呼び出す時にcv2、</description></item><item><title>一様に可積分なマルチンゲールはL1収束マルチンゲールである</title><link>https://freshrimpsushi.github.io/jp/posts/1399/</link><pubDate>Mon, 25 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1399/</guid><description>定義 確率空間 $( \Omega , \mathcal{F} , P)$ が与えられているとしよう。確率過程 $\left\{ X_{n} \right\}$ が何らかの確率変数 $X_{\infty}$ に対して次を満たす場合、$\left\{ X_{n} \right\}$ は $X_{\infty}$ に $\mathcal{L}_{p}$ 収束</description></item><item><title>ヴィタリ収束定理</title><link>https://freshrimpsushi.github.io/jp/posts/1398/</link><pubDate>Sun, 24 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1398/</guid><description>定理 1 測度空間 $( X , \mathcal{E} , \mu)$ が与えられているとしよう。 $1 \le p &amp;lt; \infty$ とするとき、関数の シーケンス $\left\{ f_{n} \right\}_{n \in \mathbb{N}} \subset \mathcal{L}^{p}$ が $f$ に $\mathcal{L}_{p}$ で収束することは、以下の三つ</description></item><item><title>測度論によって定義される確率の収束</title><link>https://freshrimpsushi.github.io/jp/posts/1397/</link><pubDate>Sat, 23 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1397/</guid><description>確率収束の難しい定義 確率空間 $( \Omega , \mathcal{F} , P)$ が与えられたとしよう。 確率変数のシーケンス $\left\{ X_{n} \right\}_{n \in \mathbb{N}}$ が確率変数 $X$ へ測度収束するならば、確率収束すると</description></item><item><title>測度収束</title><link>https://freshrimpsushi.github.io/jp/posts/1396/</link><pubDate>Fri, 22 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1396/</guid><description>定義 1 測度空間 $( X , \mathcal{E} , \mu)$ が与えられているとしよう。 可測関数のシーケンス $\left\{ f_{n} : X \to \mathbb{R} \right\}_{n \in \mathbb{N}}$ がある可測関数 $f : X \to \mathbb{R}$ と全ての $M &amp;gt;0$ に対して次を満</description></item><item><title>集合の濃度</title><link>https://freshrimpsushi.github.io/jp/posts/1395/</link><pubDate>Thu, 21 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1395/</guid><description>定義 1 任意の集合 $X$ に対して、次の性質を持つ $\operatorname{card} X$ を $X$ の濃度cardinalityと定義する。 (i): $X = \emptyset \iff \operatorname{card} X = 0$ (ii): $A \sim B \iff \operatorname{card} A = \operatorname{card} B$ (iii): 何らかの自</description></item><item><title>それがレギュラーマルチンゲールであれば、それは一様に可積分なマルチンゲールである</title><link>https://freshrimpsushi.github.io/jp/posts/1393/</link><pubDate>Wed, 20 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1393/</guid><description>定義 確率空間 $( \Omega , \mathcal{F} , P)$ が与えられているとしよう。確率変数の集合 $\Phi$ が与えられた場合、全ての $\varepsilon&amp;gt;0$ に対して $$ \sup_{ X \in \Phi } \int_{ \left( \left| X \right| \ge k \right) } \left| X \right| dP &amp;lt;</description></item><item><title>一様可積分性</title><link>https://freshrimpsushi.github.io/jp/posts/1392/</link><pubDate>Tue, 19 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1392/</guid><description>定義 測度空間 $( X , \mathcal{E} , \mu)$が与えられたとする。 ルベーグ積分可能な関数の集合 $\Phi \subset \mathcal{L}^{1}$が与えられた時、全ての $\varepsilon&amp;gt;0$</description></item><item><title>カントールの対角線論法</title><link>https://freshrimpsushi.github.io/jp/posts/109/</link><pubDate>Mon, 18 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/109/</guid><description>定理 1 開区間 $(0,1)$ は非可算集合だ。 証明 実数集合 $\mathbb{R}$ は可算集合ではなく、これは実数集合と任意の可算集合の間に「一対一の対応」が存在しないことから示さ</description></item><item><title>レギュラーマルチンゲールとクローズ可能なマルチンゲール</title><link>https://freshrimpsushi.github.io/jp/posts/1384/</link><pubDate>Mon, 18 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1384/</guid><description>定義 確率空間 $( \Omega , \mathcal{F} , P)$ と マルチンゲール $\left\{ ( X_{n} , \mathcal{F}_{n} ) \right\}$ が与えられたとする。 ある可積分な確率変数 $\eta$ に対し $X_{n} = E ( \eta | \mathcal{F}_{n} )$ が成り立つなら、$\l</description></item><item><title>可算集合と不可算集合</title><link>https://freshrimpsushi.github.io/jp/posts/1383/</link><pubDate>Sun, 17 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1383/</guid><description>定義 1 集合 $X$ が有限集合あるいは $X \sim \mathbb{N}$ の場合、可算集合と呼ぶ。 可算集合でない集合を非可算集合と呼ぶ。 $\mathbb{N}$ は自然数の集合だ。 $X \sim Y$ の $\sim$ は集合の等価</description></item><item><title>劣マルチンゲール収束定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/1382/</link><pubDate>Sat, 16 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1382/</guid><description>概要 確率空間 $( \Omega , \mathcal{F} , P)$ と サブマルチンゲール $\left\{ ( X_{n} , \mathcal{F}_{n} ) \right\}$ が与えられたとする。 $\displaystyle \sup_{n \in \mathbb{N}} E X_{n}^{+} &amp;lt; \infty$ とすると、$X_{n}$ はある 確率変数 $X_{\infty}: \Omega \to \mathbb{R}$</description></item><item><title>集合論により厳格に定義される有限集合と無限集合</title><link>https://freshrimpsushi.github.io/jp/posts/1381/</link><pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1381/</guid><description>定義 1 二つの集合 $X,Y$ に対して全単射 $f : X \to Y$ が存在する場合、$X$ と $Y$ が 等势equipotentであるといい、$X \sim Y$ と表示される。 空集合では</description></item><item><title>共振とは何か?</title><link>https://freshrimpsushi.github.io/jp/posts/399/</link><pubDate>Thu, 14 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/399/</guid><description>定理 任意の命題 $p$、矛盾 $c$、そして $A_{\alpha} \subset X$ について、以下が成立します。 [1] 空虚真理: $c \implies p$ [2] 和集合: $\displaystyle \bigcup_{\alpha \in \emptyset} A_{\alpha} = \emptyset$ [3] 共通集合: $\displaystyle \bigcap_{\alpha \in \emptyset} A_{\alpha} =</description></item><item><title>確率過程における交差点</title><link>https://freshrimpsushi.github.io/jp/posts/1380/</link><pubDate>Thu, 14 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1380/</guid><description>定義 確率空間 $( \Omega , \mathcal{F} , P)$とサブマルチンゲール $\left\{ ( X_{n} , \mathcal{F}_{n} ) \right\}$が与えられているとする。閉区間$[a,b]$に対して、$X_{</description></item><item><title>줄리아의 타입과 애노테이션</title><link>https://freshrimpsushi.github.io/jp/posts/1379/</link><pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1379/</guid><description>コード julia&amp;gt; typeof(0) Int64 julia&amp;gt; typeof(0.0) Float64 julia&amp;gt; typeof(0 == 0.0) Bool julia&amp;gt; typeof(Bool) DataType julia&amp;gt; typeof(NaN) Float64 julia&amp;gt; typeof(Inf) Float64 julia&amp;gt; typeof(&amp;#39;O&amp;#39;) Char julia&amp;gt; typeof(&amp;#34;Ohmygirl&amp;#34;) String julia&amp;gt; typeof(&amp;#34;O&amp;#34;) String Juliaには様々なタイプが実装されている。$0$と$0.0$は同じ$0$だ</description></item><item><title>ドブの最大不等式証明</title><link>https://freshrimpsushi.github.io/jp/posts/1375/</link><pubDate>Tue, 12 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1375/</guid><description>定理 確率空間 $( \Omega , \mathcal{F} , P)$ と サブマーチンゲール $\left\{ ( X_{n} , \mathcal{F}_{n} ) \right\}$ が与えられたとする。 ある $N \in \mathbb{N}$ と $p&amp;gt;1$ に対して $X_{n} \ge 0 (n \le N)$, $E X_{N}^{p} &amp;lt; \infty$ ならば $$ E \left( \max_{n \le N} X_{n}^{p}</description></item><item><title>単射, 全射, 全単射, 逆関数</title><link>https://freshrimpsushi.github.io/jp/posts/471/</link><pubDate>Tue, 12 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/471/</guid><description>定義 1 $x \in X$ と $y \in Y$ と $f: X \to Y$が関数だとしよう。 あらゆる $x_{1}, x_{2} \in X$ に対して $x_{1} \ne x_{2} \implies f(x_{1}) \ne f(x_{2})$ ならば $f$ を単射injectiveという。 $f(X) = Y$ ならば</description></item><item><title>Juliaプログラミング言語</title><link>https://freshrimpsushi.github.io/jp/posts/1374/</link><pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1374/</guid><description>概要 ジュリアはMITで開発され、2012年に公開されたプログラミング言語で、高い生産性と速度を目指している。Cやフォートランと同等の速度を実</description></item><item><title>関数の原像</title><link>https://freshrimpsushi.github.io/jp/posts/472/</link><pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/472/</guid><description>定義 1 関数 $f: X \to Y$ と $B \subset Y$ について、$f^{-1}(B): = \left\{ x \in X \ | \ f(x) \in B \right\}$ を $f$ による $B$ の原像または逆像という。 解説 表記は似ているが、</description></item><item><title>マルチンゲールの不等式たち</title><link>https://freshrimpsushi.github.io/jp/posts/1370/</link><pubDate>Sun, 10 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1370/</guid><description>定理 $\left\{ (X_{n} , \mathcal{F}_{n}) \right\}$ を スーパーマルチンゲール とする。 [1]: 全ての $\lambda &amp;gt; 0$ に対して $$ \begin{align*} \lambda P \left( \max_{n \le N} X_{n} \ge \lambda \right) \le &amp;amp; E X_{1} - \int_{(\max_{n \le N} X_{n} &amp;lt; \lambda)} X_{N} dP \\ \le &amp;amp; E X_{1} + E X_{N}^{-} \text{ a.s.} \end{align*}</description></item><item><title>集合論によって厳密に定義される関数と写像、数列</title><link>https://freshrimpsushi.github.io/jp/posts/470/</link><pubDate>Sun, 10 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/470/</guid><description>定義 1 空集合じゃない二つの集合 $X$、$Y$ が与えられたとする。 二項関係 $f \subset (X,Y)$ が次を満たすとき、関数と呼び、$f : X \to Y$ と表す。 $$ (x ,y_{1}) \in f \land</description></item><item><title>プログラミングにおけるファーストクラスオブジェクト</title><link>https://freshrimpsushi.github.io/jp/posts/1368/</link><pubDate>Sat, 09 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1368/</guid><description>定義 プログラミングにおいて、ファーストクラスオブジェクトは、次の条件を満たす要素をいう。 (i) 関数の実際の引数となり得る。 (ii) 関数の戻り値となり得</description></item><item><title>同値関係による集合の分割</title><link>https://freshrimpsushi.github.io/jp/posts/1051/</link><pubDate>Sat, 09 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1051/</guid><description>定理 1 集合$X$上の同値関係 $R$に関する$X / R$は$X$の分割だ。 説明 この定理は些細なものに見えるかもしれないが、位相数学、抽象代数学な</description></item><item><title>k-平均クラスタリング</title><link>https://freshrimpsushi.github.io/jp/posts/1365/</link><pubDate>Fri, 08 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1365/</guid><description>アルゴリズム 入力 $p$次元のデータ$N$個と、自然数$k$が与えられているとする。 ステップ 1. 初期化 $k$個の点$\mu_{1} , \cdots , \mu_</description></item><item><title>同相型</title><link>https://freshrimpsushi.github.io/jp/posts/1050/</link><pubDate>Fri, 08 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1050/</guid><description>定義 1 集合 $X$ 上で同値関係 $R$ が定義されているとしよう。$x \in X$ に対して、$x / R := \left\{ y \in X : y R x \right\}$ を$x$ の同値類と呼ぶ。与えられた$X$ の</description></item><item><title>プログラミングにおけるタイプ</title><link>https://freshrimpsushi.github.io/jp/posts/1364/</link><pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1364/</guid><description>タイプの誕生 変数を宣言する際にタイプを指定しなければならない言語を使った経験があるなら、ほぼ確実に少しの不快感も感じたことだろう。何か言語は</description></item><item><title>レーベンシュタインアルゴリズム</title><link>https://freshrimpsushi.github.io/jp/posts/510/</link><pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/510/</guid><description>アルゴリズム Input 文字列 $A,B$を $A=[a_{i}]=(a_{1}, a_{2} , \cdots, a_{n})$と $B=[b_{j}]=(b_{1}, b_{2} , \cdots, b_{m})$に表す。 Step 1. 初期化 行列 $M_{(n+1) \times (m+1)} = [m_{x y }]$を作り、$M_{11}</description></item><item><title>集合の分割</title><link>https://freshrimpsushi.github.io/jp/posts/1049/</link><pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1049/</guid><description>定義 1 集合 $X$ の全ての部分集合 $A,B,C$ について、次の条件を満たす $\mathscr{P} \subset 2^{X}$ を $X$ の分割と言う。 (i): $$A,B \in \mathscr{P} \land A \ne B \implies A \cap B = \emptyset$$ (ii): $$\bigcup_{C \in \mathscr{P} } C = X$$ 説明 数式で表すと</description></item><item><title>基数ソート</title><link>https://freshrimpsushi.github.io/jp/posts/1363/</link><pubDate>Wed, 06 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1363/</guid><description>アルゴリズム 桁数が$k$に限られた$n$個の自然数のデータが与えられているとする。すると、データは以下のアルゴリズムに従ってソートされ、その</description></item><item><title>数学における同値関係</title><link>https://freshrimpsushi.github.io/jp/posts/1033/</link><pubDate>Wed, 06 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1033/</guid><description>定義 1 反射的であり、対称的であり、推移的な２項関係を同値関係と呼ぶ。 説明 同値関係を数学的でない言葉で言うなら、「それがそれ」ということだ。 数</description></item><item><title>プログラミングパラダイム</title><link>https://freshrimpsushi.github.io/jp/posts/1361/</link><pubDate>Tue, 05 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1361/</guid><description>定義 プログラミングパラダイムとは、与えられた問題を解決するプログラムを書くときの見解や方法論を指す。特定のパラダイムに適したプログラミング言</description></item><item><title>数学における二項関係</title><link>https://freshrimpsushi.github.io/jp/posts/960/</link><pubDate>Tue, 05 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/960/</guid><description>定義 1 二つの集合$X,Y$に対して、 $$ R := \left\{ (x,y): x \in X , y \in Y \right\} \subset X \times Y $$ を (二項) 関係と定義し、次のように表す。 $$ (x,y) \in R \iff x R y $$ $x R y \iff y</description></item><item><title>集合のデカルト積</title><link>https://freshrimpsushi.github.io/jp/posts/1360/</link><pubDate>Mon, 04 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1360/</guid><description>定義 1 任意の二つの対象 $a$、$b$ に対して、$(a,b)$ を順序対と言う。 任意の二つの集合 $A$、$B$ について、$a \in A$、$b \in B$ の順</description></item><item><title>比較ソートアルゴリズムの時間計算量の下限</title><link>https://freshrimpsushi.github.io/jp/posts/1359/</link><pubDate>Sun, 03 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1359/</guid><description>定理 比較ソートアルゴリズムの時間複雑度は、せいぜい$\Omega ( n \log n )$である。 説明 アルゴリズムは元から不思議なものだけど、挿入ソートの</description></item><item><title>集合族と添字</title><link>https://freshrimpsushi.github.io/jp/posts/1358/</link><pubDate>Sat, 02 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1358/</guid><description>定義 要素が集合である集合をファミリーfamilyという。 ファミリーの要素をメンバーmemberという。 一つの集合$\Gamma$の各$\ga</description></item><item><title>比較ソートアルゴリズムの時間複雑度</title><link>https://freshrimpsushi.github.io/jp/posts/1357/</link><pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1357/</guid><description>定理 $n$個のデータが与えられたとき、比較ソートアルゴリズムの時間計算量は以下の通りです。 [1] バブルソート： $$ \Theta ( n^2 ) \\ O ( n^2 ) $$ [2] 選択ソート</description></item><item><title>選択公理が加わったツェルメロ-フレンケル集合論</title><link>https://freshrimpsushi.github.io/jp/posts/1356/</link><pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1356/</guid><description>ツェルメロの公理系 [1] 外延公理: $$ \forall A \forall B ( \forall x ( x \in A \iff x \in B) ) $$ 任意の二つの集合 $A$、$B$が同じ要素を持つ場合、二つの集合は等しいと言</description></item><item><title>選択的サンプリング定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/1355/</link><pubDate>Wed, 30 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1355/</guid><description>定理 確率空間 $( \Omega , \mathcal{F} , P)$ と スーパーマルチンゲール $\left\{ ( X_{n} , \mathcal{F}_{n} ) \right\}$ が与えられたとしよう。 $\tau$ と $\sigma$ が $\sigma \le \tau$ と $\mathcal{F}_{n}$ に関してバウンドした停止時刻である場合</description></item><item><title>選択公理</title><link>https://freshrimpsushi.github.io/jp/posts/1354/</link><pubDate>Tue, 29 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1354/</guid><description>公理 1 $$ \forall U \left( \emptyset \notin U \implies \exists f : U \to \bigcup_{X \in U \\ f(X) \in X } U \right) $$ 空でない集合の集合 $U$ に対して、$U$ の各元から一つずつ要素を選ぶ選択関数 $f$ が存在する。</description></item><item><title>停止時間の性質</title><link>https://freshrimpsushi.github.io/jp/posts/1353/</link><pubDate>Mon, 28 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1353/</guid><description>整理 確率空間 $( \Omega , \mathcal{F} , P)$ と マルチンゲール $\left\{ ( X_{n} , \mathcal{F}_{n} ) \right\}$ が与えられているとする。停止時刻 $\tau$ について、$\mathcal{F}_{\tau}:=</description></item><item><title>置換公理形</title><link>https://freshrimpsushi.github.io/jp/posts/1352/</link><pubDate>Sun, 27 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1352/</guid><description>公理 $$ \forall X \left( \forall x \in X \exists ! y \left( p(x,y) \right) \implies \exists Y \forall x \in X \exists y \in Y \left( p(x,y) \right) \right) $$ すべての関数に対する値域が存在する。 記号 $\exists !$ は一意性を意味する。 ここでは、$</description></item><item><title>確率過程における停止時間</title><link>https://freshrimpsushi.github.io/jp/posts/1351/</link><pubDate>Sat, 26 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1351/</guid><description>定義 確率空間 $( \Omega , \mathcal{F} , P)$が与えられているとしよう。フィルトレーション $\left\{ \mathcal{F}_{n} \right\}$に関して$0$以上の整数値を持ち、全ての$n \in</description></item><item><title>正則性の公理</title><link>https://freshrimpsushi.github.io/jp/posts/1350/</link><pubDate>Fri, 25 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1350/</guid><description>説明 $X = \left\{ X \right\}$ は存在しない 正則性の公理によると、自分自身を要素として含む再帰的集合、例えば$X = \left\{ X \right\}$ のような集合は存在できない。自分自身と</description></item><item><title>Lp 収束</title><link>https://freshrimpsushi.github.io/jp/posts/1394/</link><pubDate>Thu, 24 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1394/</guid><description>定義 1 関数のシーケンス $\left\{ f_{n} \right\}_{n \in \mathbb{N}}$ がある関数 $f$ に対して次を満たす場合、$\left\{ f_{n} \right\}$ が$f$ に**$L^{p}$ 収束する**と言う。 $$ \lim_{n</description></item><item><title>マルチンゲールの定義</title><link>https://freshrimpsushi.github.io/jp/posts/1349/</link><pubDate>Thu, 24 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1349/</guid><description>定義 確率空間 $( \Omega , \mathcal{F} , P)$ が与えられたとする。 $\mathcal{F}$ のサブσフィールドのシーケンス $\left\{ \mathcal{F}_{n} \right\}_{n \in \mathbb{N}}$ が以下を満たす場合、フィルトレーションfiltrati</description></item><item><title>無限公理</title><link>https://freshrimpsushi.github.io/jp/posts/1348/</link><pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1348/</guid><description>公理 $$ \exists U \left( \emptyset \in U \land \forall X ( X \in U \implies S(X) \in U) \right) $$ 空集合と$X$を要素として持ち、$S(X)$も要素として持つ集合$U$が存在する。 集合$X$に対</description></item><item><title>条件付きイェンセンの不等式の証明</title><link>https://freshrimpsushi.github.io/jp/posts/1347/</link><pubDate>Tue, 22 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1347/</guid><description>定理 確率空間 $( \Omega , \mathcal{F} , P)$ とサブシグマフィールド $\mathcal{G} \subset \mathcal{F}$ が与えられているとし、$X$ が確率変数であるとする。 凸関数 $\phi : \mathbb{R} \to \mathbb{R}$ と $\phi (X) \in \mathcal{L}^{1} ( \Omega ) $に</description></item><item><title>冪集合公理</title><link>https://freshrimpsushi.github.io/jp/posts/1346/</link><pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1346/</guid><description>公理 1 $$ \forall X \exists P \forall A ( A \subset X \implies A \in P) $$ 任意の集合 $X$ に対し、$X$ のすべての部分集合を元に持つ集合 $P$ が存在する。 説明 $X$ の冪集合は一般的に $\mathcal{P} (X)$ と</description></item><item><title>和集合の公理</title><link>https://freshrimpsushi.github.io/jp/posts/1344/</link><pubDate>Sat, 19 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1344/</guid><description>公理 $$ \forall X \left( \exists U \left( \forall a \left( a \in x \land x \in X \implies a \in U \right) \right) \right) $$ 任意の集合$X$に対して、$X$の全ての要素の要素を含む集合$U$が存在する。 和集合の</description></item><item><title>測度論で定義される条件付き分散</title><link>https://freshrimpsushi.github.io/jp/posts/1343/</link><pubDate>Fri, 18 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1343/</guid><description>定義 確率空間 $( \Omega , \mathcal{F} , P)$ とサブシグマフィールド $\mathcal{G} \subset \mathcal{F}$ が与えられているとし、$X$ と $Y$ が確率変数だとする。 以下の定義された $\Var$ を $\mathcal{G}$ が与えられた時</description></item><item><title>分類 公理形</title><link>https://freshrimpsushi.github.io/jp/posts/1341/</link><pubDate>Thu, 17 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1341/</guid><description>公理 1 $$ \forall X \exists A \forall a \left( a \in A \iff ( a \in X \land p(a)) \right) $$ 任意の集合 $X$ に対して、性質 $p$ を持つ要素で構成された部分集合 $A$ が存在する。 $p(x)$ は $X$ 内の命題関数だ。</description></item><item><title>条件付き期待値の平滑化特性</title><link>https://freshrimpsushi.github.io/jp/posts/1340/</link><pubDate>Wed, 16 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1340/</guid><description>定理 与えられた確率空間 $( \Omega , \mathcal{F} , P)$ とサブ・シグマフィールド $\mathcal{G}, \mathcal{G} ' \subset \mathcal{F}$に、$X$ と$Y$が確率変数だとしよう。 $$ E(XY | \mathcal{G}) =</description></item><item><title>対の公理</title><link>https://freshrimpsushi.github.io/jp/posts/1339/</link><pubDate>Tue, 15 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1339/</guid><description>公理 $$ \forall A \forall B \exists U ( A \in U \land B \in U ) $$ 任意の二つの集合 $A$ と $B$ について、$A$ と $B$ を要素として持つ集合 $U$ が存在する。 説明 最初に対の公理に出会っ</description></item><item><title>条件付き確率の性質들</title><link>https://freshrimpsushi.github.io/jp/posts/1338/</link><pubDate>Mon, 14 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1338/</guid><description>定理 確率空間 $( \Omega , \mathcal{F} , P)$ とサブシグマフィールド $\mathcal{G} \subset \mathcal{F}$ が与えられているとする。 [1] すべての $B \in \mathcal{G}$ に対して、$0 \le P(B | \mathcal{G}) \le 1$ がある。 [2] 確率の連続性</description></item><item><title>空集合の公理</title><link>https://freshrimpsushi.github.io/jp/posts/1337/</link><pubDate>Sun, 13 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1337/</guid><description>公理 1 $$ \exists X \forall x \left( \lnot \left( x \in X \right) \right) $$ 何の要素も持たない集合 $X$ が存在し、この集合 $X$ を空集合と定義する。 説明 空集合は一般に $\emptyset$ のように表記される。一</description></item><item><title>支配収束定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/1336/</link><pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1336/</guid><description>概要 確率空間 $( \Omega , \mathcal{F} , P)$ が与えられたとしよう。 確率変数のシーケンス $\left\{ X_{n} \right\}_{n \in \mathbb{N}}$ が、全ての$n \in \mathbb{N}$とある$Y \in \mathcal{L}^{1} (\Omeg</description></item><item><title>外延性公理</title><link>https://freshrimpsushi.github.io/jp/posts/1335/</link><pubDate>Fri, 11 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1335/</guid><description>公理 1 $$ \forall A \forall B ( \forall x ( x \in A \iff x \in B) ) $$ 任意の二つの集合 $A$、$B$ に属する要素が同一である場合、二つの集合は等しいとし、$A = B$ のよう</description></item><item><title>条件付き単調収束定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/1331/</link><pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1331/</guid><description>定理 確率空間 $( \Omega , \mathcal{F} , P)$ が与えられているとする。 確率変数のシーケンス $\left\{ X_{n} \right\}_{n \in \mathbb{N}}$ と$X \in \mathcal{L}^{1} (\Omega)$について $$ X_{1} \le X_{2} \le \cdots \le X \\ X_{n} \to X \text{</description></item><item><title>集合の包含関係</title><link>https://freshrimpsushi.github.io/jp/posts/1329/</link><pubDate>Wed, 09 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1329/</guid><description>定義 1 $$ A \subset B \iff \forall x (x\in A \implies x \in B) $$ 任意の集合 $A$、 $B$ について、$A$ の全ての要素が $B$ の要素である場合、$A$ は $B$ の部分集合subset、 $B$</description></item><item><title>任意の関数の絶対値を二つの非負の関数として表現する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1325/</link><pubDate>Tue, 08 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1325/</guid><description>定理 基本 関数 $f : X \to \mathbb{R}$ の絶対値 $|f|$ は $f$ の正の部分 $f^{+}$ と負の部分 $f^{-}$ に関して以下のように表される。 $$ |f| = f^{+} + f^{-} $$ 高度 関数 $g : X \to \mathbb{R}$ はほぼどこでも $g \ge</description></item><item><title>条件付き期待値の性質</title><link>https://freshrimpsushi.github.io/jp/posts/1322/</link><pubDate>Mon, 07 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1322/</guid><description>定理 確率空間 $( \Omega , \mathcal{F} , P)$ が与えられているとする。 [1] 測度論での定理: 可測関数 $f$, $g$ が $\mathcal{F}$-可測であれば、$g = h (f)$ を満たす</description></item><item><title>命題関数の限量記号規則</title><link>https://freshrimpsushi.github.io/jp/posts/1321/</link><pubDate>Sun, 06 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1321/</guid><description>定義 1 全体集合 $U$ の命題関数 $P(x)$ が与えられているとする。 Universal Quantifier: &amp;lsquo;すべての $x \in U$ に対して&amp;rsquo;として$\forall x$ と書き、全</description></item><item><title>ダイナミックプログラミング</title><link>https://freshrimpsushi.github.io/jp/posts/1262/</link><pubDate>Sat, 05 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1262/</guid><description>ビルドアップ 問題を解く時、大きな問題の解答がそれより小さい問題の解答を含んでいれば、最適部分構造optimal substructureを持つ</description></item><item><title>測度論で定義される確率変数の条件付き確率</title><link>https://freshrimpsushi.github.io/jp/posts/1320/</link><pubDate>Sat, 05 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1320/</guid><description>定義 確率空間 $( \Omega , \mathcal{F} , P)$ が与えられているとする。 $\mathcal{G}$ が $\mathcal{F}$ のサブシグマフィールドである場合、事象 $F \in \mathcal{F}$ に対して $$ P(F | \mathcal{G}) := E ( \mathbb{1}_{F} | \mathcal{G}) $$ を $\mathcal{G}$ について</description></item><item><title>集合と命題関数の定義</title><link>https://freshrimpsushi.github.io/jp/posts/1316/</link><pubDate>Fri, 04 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1316/</guid><description>定義 1 集合: 我々の直感や思考の対象として互いに明確に区別される対象の集まりを集合という。 要素: 集合に含まれる対象を要素という。 命題関数: 集合</description></item><item><title>測度論で定義される確率変数の条件付き期待値</title><link>https://freshrimpsushi.github.io/jp/posts/1315/</link><pubDate>Thu, 03 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1315/</guid><description>定義 確率空間 $( \Omega , \mathcal{F} , P)$ が与えられているとしよう。 $\mathcal{G}$ が$\mathcal{F}$ の部分シグマ場であり、確率変数 $X \in \mathcal{L}^{1} ( \Omega )$ が可積分であるとす</description></item><item><title>ラドン-ニコディムの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/1312/</link><pubDate>Wed, 02 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1312/</guid><description>定理 1 可測空間 $( \Omega , \mathcal{F} )$の２つのシグマ有限測度 $\nu$と$\mu$が$\nu \ll \mu$を満たす場合、全ての$A \in \mathcal{F}$</description></item><item><title>ラドン-ニコディム微分</title><link>https://freshrimpsushi.github.io/jp/posts/1307/</link><pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1307/</guid><description>定理 1 可測空間 $( \Omega , \mathcal{F} )$ が与えられているとしよう。測度 $\mu$、$\nu$が$\mu ( \Omega ) = 1$および全ての$F \in \mathcal{F}$</description></item><item><title>再帰関数を使用する際に注意すべき理由</title><link>https://freshrimpsushi.github.io/jp/posts/1254/</link><pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1254/</guid><description>注意 プログラミングを初めて学ぶ際、どんな言語でも「再帰関数は慎重に使うべきだ」という警告が付く。実際再帰関数はそれほど頻繁に使われるテクニッ</description></item><item><title>有限シグマ測度</title><link>https://freshrimpsushi.github.io/jp/posts/1314/</link><pubDate>Mon, 30 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1314/</guid><description>定義 1 可測空間 $( X , \mathcal{E} )$が与えられたとする。 $\mu (X) &amp;lt; \infty$のとき、$\mu$を有限測度と呼ぶ。 $$\displaystyle X = \bigcup_{i=1}^{\infty} E_{i} \qquad , E_{i} \in \mathcal{E}$$ となる全ての$i \in</description></item><item><title>三段論法の数理論理的証明</title><link>https://freshrimpsushi.github.io/jp/posts/191/</link><pubDate>Sun, 29 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/191/</guid><description>法則 1 次の仮説命題を三段論法syllogismと言う。 $$ ( p \to q ) \land ( q \to r ) \implies p \to r $$ 説明 三段論法を知らない人はいないし、わざわざ説明する</description></item><item><title>数学的帰納法</title><link>https://freshrimpsushi.github.io/jp/posts/118/</link><pubDate>Sun, 29 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/118/</guid><description>定理 1 $$ \left[ p(1) \land \left( p(n) \implies p(n+1) \right) \right] \implies \forall n \in \mathbb{N} : p(n) $$ 命題 $p(n) (n=1,2,3, \cdots )$ について、$p(1)$ が真であり、$p(n)$ を仮定した時、$p(n+1)$ が成り立て</description></item><item><title>測度の絶対連続</title><link>https://freshrimpsushi.github.io/jp/posts/1309/</link><pubDate>Sat, 28 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1309/</guid><description>定義 1 可測空間$( \Omega , \mathcal{F} )$が与えられているとする。測度$\nu$、$\mu$がすべての$A \in \mathcal{F}$に対して $$ \mu (A) = 0 \implies \nu</description></item><item><title>背理法の数理論理的証明</title><link>https://freshrimpsushi.github.io/jp/posts/117/</link><pubDate>Sat, 28 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/117/</guid><description>法則 1 $$ (p \land \lnot q) \to c \iff p \to q $$ $c$ は矛盾を意味する。 説明 背理法 あるいは 帰謬法 は、数学全般で本当によく使われる証明法だ。しかし、初めて背理法に接</description></item><item><title>可測空間の分割と細分化</title><link>https://freshrimpsushi.github.io/jp/posts/1313/</link><pubDate>Fri, 27 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1313/</guid><description>定義 可算空間 $( \Omega , \mathcal{F} )$ が与えられたとする。 $( \Omega , \mathcal{F} )$ に対して $\displaystyle \bigsqcup_{i=1}^{k} A_{i} = \Omega$ を満たす$$\mathcal{P} : = \left\{ A_{i} \in \mathcal{F} : i_{1} \ne i_{2} \implies A_{i_{1}} \cap A_{i_{2}} = \emptyset \right\}_{i=1}^{k}$$ そ</description></item><item><title>逆説の数理論理的証明</title><link>https://freshrimpsushi.github.io/jp/posts/116/</link><pubDate>Fri, 27 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/116/</guid><description>法則 1 $$ p \to q \iff \lnot q \to \lnot p $$ 説明 ある命題が真であれば、その対偶も真である。ある命題が偽であれば、その対偶も偽である。もちろん、逆conver</description></item><item><title>ド・モルガンの法則の証明</title><link>https://freshrimpsushi.github.io/jp/posts/1306/</link><pubDate>Thu, 26 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1306/</guid><description>定理 1 [1] ド・モルガンの法則: $$ \lnot (p \land q) \iff \lnot p \lor \lnot q \\ \lnot(p \lor q) \iff \lnot p \land \lnot q $$ [2] ド・モルガンの定理: $$ (A \cup B)^{c} = A^{c} \cap B^{c} \\ (A \cap B)^{c} = A^{c} \cup B^{c} $$ 説明 ド・モル</description></item><item><title>測度論によって定義されるジョイント分布とマージナル分布</title><link>https://freshrimpsushi.github.io/jp/posts/1305/</link><pubDate>Wed, 25 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1305/</guid><description>定義 1 確率空間 $( \Omega , \mathcal{F} , P)$が与えられているとしよう。 合同分布: $( \Omega , \mathcal{F} , P)$で定義された二つの確率変数$X$と$Y$がある場合、ランダ</description></item><item><title>逆対偶命題と逆命題</title><link>https://freshrimpsushi.github.io/jp/posts/1304/</link><pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1304/</guid><description>定義 1 全ての論理的可能性に対して真である命題を恒真命題tautologyという。全ての論理的可能性に対して偽である命題を矛盾命題contra</description></item><item><title/><link>https://freshrimpsushi.github.io/jp/posts/1300/</link><pubDate>Mon, 23 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1300/</guid><description>定義 1 確率空間 $( \Omega , \mathcal{F} , P)$ が与えられているとしよう。確率変数 $X$ と $t \in \mathbb{R}$ について次のように定義された $\varphi_{X} (t)$ を $X$ の特性関数characterist</description></item><item><title>命題と論理結合子、真理値表</title><link>https://freshrimpsushi.github.io/jp/posts/1299/</link><pubDate>Sun, 22 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1299/</guid><description>定義 1 真か偽かの二つのうちの一つである陳述を 命題 だと言う。命題は真か偽の二つのうちの一つの 真理値truth valueを持つ。二つの命題 $p$</description></item><item><title>測度論で定義される期待値</title><link>https://freshrimpsushi.github.io/jp/posts/1294/</link><pubDate>Sat, 21 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1294/</guid><description>定義 1 確率空間 $( \Omega , \mathcal{F} , P)$ が与えられているとする。確率変数 $X$ に対して次のように定義される $E(X)$ を**$X$ の（数理的）期待値**という。 $$ E(X) := \int_{\Omega}</description></item><item><title>測度論で定義されるディラック測度と離散確率分布</title><link>https://freshrimpsushi.github.io/jp/posts/879/</link><pubDate>Fri, 20 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/879/</guid><description>概要 基本的な確率論では、確率分布は離散か連続のどちらかであり、その説明には直感に頼るしかなかった。しかし、測度論を導入することで、数学的な不</description></item><item><title>アイゼンシュタイン素数定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/1293/</link><pubDate>Thu, 19 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1293/</guid><description>定理 アイゼンシュタイン環の既約元をアイゼンシュタイン素数と呼ぶ。アイゼンシュタイン整数 $\pi \in \mathbb{Z}[ \omega ]$ が以下のいずれかの条件を満たすとき、アイゼン</description></item><item><title>測度論によって定義された確率変数の密度と累積分布関数</title><link>https://freshrimpsushi.github.io/jp/posts/1292/</link><pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1292/</guid><description>定義 1 確率空間 $( \Omega , \mathcal{F} , P)$ が与えられて、$m$ が測度だとしよう。 測度$P : \mathcal{F} \to \mathbb{R}$が積分可能な$f \ge 0$に対して $$ A \mapsto P(A) =</description></item><item><title>アイゼンシュタイン環のノルム</title><link>https://freshrimpsushi.github.io/jp/posts/1291/</link><pubDate>Tue, 17 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1291/</guid><description>定理 アイゼンシュタイン環における$\mathbb{Z}[ \omega ]$について、関数$N : \mathbb{Z}[\omega] \to \mathbb{Z}$を考えてみよう。 [1]: $N(x + \omega y) := x^2 -</description></item><item><title>測度論で定義される確率変数の独立</title><link>https://freshrimpsushi.github.io/jp/posts/1290/</link><pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1290/</guid><description>定義 1 確率空間 $( \Omega , \mathcal{F} , P)$ が与えられているとする。 全てのボレル集合 $B_{1} , B_{2} \in \mathcal{B} ( \mathbb{R} )$ に対して次が成り立つならば、確率変数 $X$、$Y$ は独立で</description></item><item><title>アイゼンシュタイン整数</title><link>https://freshrimpsushi.github.io/jp/posts/1289/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1289/</guid><description>定義 $\mathbb{Z} [ \omega ] := \left\{ a + \omega b : a, b \in \mathbb{Z} \right\}$ をアイゼンシュタイン環eisenstein ringと呼び、その要素をアイゼンシュタイン整数という。 定理 [1]:</description></item><item><title>測度論で定義される確率変数と確率分布</title><link>https://freshrimpsushi.github.io/jp/posts/1288/</link><pubDate>Sat, 14 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1288/</guid><description>定義 1 確率空間 $( \Omega , \mathcal{F} , P)$ が与えられたとしよう。 すべてのボレル集合 $B \in \mathcal{B} (\mathbb{R})$ に対して $X^{-1} (B) \in \mathcal{F}$ を満たす関数 $X : \Omega \to \mathbb{R}$ を 確率変数random var</description></item><item><title>ガウス素数定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/1285/</link><pubDate>Fri, 13 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1285/</guid><description>定理 1 ガウス整数 の 既約元 をガウス素数と呼ぶ。ガウス整数 $\pi \in \mathbb{Z}[i]$ が次の条件のどれか一つを満たす場合、ガウス素数である。 (i): $\pi = 1 + i$ (ii): 素数 $p \in \mathbb{Z}$ に</description></item><item><title>シュトラッセンのアルゴリズムの証明</title><link>https://freshrimpsushi.github.io/jp/posts/1284/</link><pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1284/</guid><description>アルゴリズム $k \in \mathbb{N}$について$n=2^{k}$としよう。$A, B \in \mathbb{R}^{n \times n}$に対してジョルダンブロックの行列表現を使って、</description></item><item><title>時間計算量と空間計算量</title><link>https://freshrimpsushi.github.io/jp/posts/1283/</link><pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1283/</guid><description>定義 与えられた問題を解く時の時間を時間複雑度time complexity、メモリの要求を空間複雑度space complexityと言う。 例 漸</description></item><item><title>Rで価値モデルを使って時系列分析をする方法</title><link>https://freshrimpsushi.github.io/jp/posts/1282/</link><pubDate>Tue, 10 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1282/</guid><description>実習 バリューモデルはアーチタイプを説明するのに役立つ手段であり、分析手順自体はARMAモデルに似ている。 上のグラフはEuStockMarke</description></item><item><title>アルゴリズムのコストに関する漸近記法</title><link>https://freshrimpsushi.github.io/jp/posts/1281/</link><pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1281/</guid><description>定義 大きさが$n$のデータに対するアルゴリズムのコストを次のように表示する。 $O$表記: $$ O(g(n)) := \left\{ f(n) \ | \ \exists c &amp;gt; 0, n_{0} \in \mathbb{N} : \forall n \ge n_{0} \implies f(n) \le c g(n) \right\}</description></item><item><title>時系列分析における価値モデル</title><link>https://freshrimpsushi.github.io/jp/posts/1280/</link><pubDate>Sun, 08 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1280/</guid><description>モデル 1 価値モデルは、ARCHモデルを一般化したもので、時系列分析法で異分散を検知するために用いられる。 $$ (1 - \beta{1} B - \cdots - \beta_{p} B^p) \sigma_{t | t-1}^2 = \omega + (\alpha_{1} B</description></item><item><title>マクリオド-リーテスト</title><link>https://freshrimpsushi.github.io/jp/posts/1279/</link><pubDate>Sat, 07 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1279/</guid><description>仮説検証 時系列データのリターン $\left\{ r_{t} \right\}$ が与えられているとする。 $H_{0}$: データにはラグ $k$ のARCH効果は存在しない。 $H_{1}$: データにはラグ $k$ のARCH効果が</description></item><item><title>アーチ効果</title><link>https://freshrimpsushi.github.io/jp/posts/1278/</link><pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1278/</guid><description>定義 1 アーチ効果とは、そのAutoRegressive Conditional Heteroscedasticity、つまり「自己回帰条件付き分散不均一効果」という</description></item><item><title>ガウス環のノルム</title><link>https://freshrimpsushi.github.io/jp/posts/1277/</link><pubDate>Thu, 05 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1277/</guid><description>定理 1 ガウシアン環 $\mathbb{Z}[i]$について、$N : \mathbb{Z}[i] \to \mathbb{Z}$という関数を考えよう。 [1]: $N(x + iy) := x^2 + y^2$と定義</description></item><item><title>時系列分析における異質スケダスティシティとボラティリティクラスタリング</title><link>https://freshrimpsushi.github.io/jp/posts/1272/</link><pubDate>Wed, 04 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1272/</guid><description>定義 1 与えられた時系列データ$\left\{ p_{t} \right\}$。 $\left\{ p_{t} \right\}$の分散が$t$に依存しているとき、$\left\{ p_{t}</description></item><item><title>Rでデータファイルを素早く読む</title><link>https://freshrimpsushi.github.io/jp/posts/1270/</link><pubDate>Mon, 02 Sep 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1270/</guid><description>概要 Rは基本的にcsvデータを読む関数としてread.csv()を提供しているけど、ただ便利に使っている程度ではなく、実際の分析をしているな</description></item><item><title>ガウス整数</title><link>https://freshrimpsushi.github.io/jp/posts/1267/</link><pubDate>Sat, 31 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1267/</guid><description>定義 1 $\mathbb{Z} [i] := \left\{ a + i b : a, b \in \mathbb{Z} \right\}$をガウス環と言い、その要素をガウス整数という。 定理 [1]: $\overline{i} = i^{3}$ [2]: $( a \pm ib ) + ( c \pm id) = (a \pm c) +</description></item><item><title>Rでの並列処理の方法</title><link>https://freshrimpsushi.github.io/jp/posts/1266/</link><pubDate>Fri, 30 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1266/</guid><description>概要 Rを速度のために使う言語ではないが、速さが必要な時も確かにある。コードをきれいによく書いても、あまりにも時間がかかるなら、普通は並列処理</description></item><item><title>動的回帰モデル</title><link>https://freshrimpsushi.github.io/jp/posts/1265/</link><pubDate>Thu, 29 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1265/</guid><description>モデル 動的回帰モデルとは、簡単に言えば、アリマモデルと回帰モデルを組み合わせたモデルのことだ。 説明 アリマ以外の独立変数 $X$ を加えるという意味で</description></item><item><title>時系列分析と革新的な外れ値</title><link>https://freshrimpsushi.github.io/jp/posts/1260/</link><pubDate>Tue, 27 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1260/</guid><description>ビルドアップ 上のグラフでは、2001年9月に非常に大きな外れ値を見つけることができる。しかし、加算的外れ値と違ってその後もずっと影響を及ぼし</description></item><item><title>積分領域のノルム</title><link>https://freshrimpsushi.github.io/jp/posts/1259/</link><pubDate>Mon, 26 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1259/</guid><description>定義 1 整域 $D$において、全ての$\alpha , \beta \in D$に対して以下の条件を満たす関数$N : D \to \mathbb{Z}$を乗法的ノルム乗法的ノ</description></item><item><title>時系列分析の加法的アウトライアー</title><link>https://freshrimpsushi.github.io/jp/posts/1258/</link><pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1258/</guid><description>ビルドアップ 上のグラフで一番目立つ点は、2015年2月の近くにある巨大な外れ値だ。このような極端な値が分析に悪影響を及ぼす可能性がある。幸い</description></item><item><title>ステップ関数とパルス関数</title><link>https://freshrimpsushi.github.io/jp/posts/1248/</link><pubDate>Fri, 23 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1248/</guid><description>定義 1 以下のように定義された$S_{t}^{(T)}$をステップ関数という。 $$ S_{t}^{(T)} := \begin{cases} 1 &amp;amp; , t \le T \\ 0 &amp;amp; , \text{otherwise} \end{cases} $$ 以下のように定義された$P_{</description></item><item><title>Rでのコード実行時間の測定とベンチマーク方法</title><link>https://freshrimpsushi.github.io/jp/posts/1246/</link><pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1246/</guid><description>概要 MatlabRは明らかに統計分析に特化しているプログラミング言語だけど、全ての言語と同じように速度に無関心ではない。速度が強みではないと</description></item><item><title>介入分析</title><link>https://freshrimpsushi.github.io/jp/posts/1243/</link><pubDate>Wed, 21 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1243/</guid><description>ビルドアップ 上のグラフは、実際に2015年のソウルの微細粉塵濃度を示した時系列データだ。誰が見ても最初に目立つのは、50番目くらい、つまり2</description></item><item><title>R の ts 関数と window 関数の start、end オプションの違い</title><link>https://freshrimpsushi.github.io/jp/posts/1242/</link><pubDate>Tue, 20 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1242/</guid><description>説明 R에서 時系列データを扱う際、ts()関数とwindow()関数をよく使用する。ts()はRが受け入れることができるように時系列データを作</description></item><item><title>時系列回帰分析における偽の相関関係</title><link>https://freshrimpsushi.github.io/jp/posts/1238/</link><pubDate>Mon, 19 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1238/</guid><description>実践 1 以下の例を見てみよう。 上に示されたように、2つの時系列データが与えられたとしよう。一見、時間が経つにつれて徐々に増加するトレンドを含め</description></item><item><title>Rで色付き境界のある点をプロットする方法</title><link>https://freshrimpsushi.github.io/jp/posts/1237/</link><pubDate>Sun, 18 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1237/</guid><description>コード 点の図で境界の色を変更したり内部を塗りたい場合は、次のオプションを変更するといい: pch: シンボルを変えて色を塗る。 21から25までを使えば</description></item><item><title>百科事典</title><link>https://freshrimpsushi.github.io/jp/posts/1236/</link><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1236/</guid><description>定義 プリホワイトニングprewhiteningとは、CCFを計算する際に時系列データを白色ノイズに変換し、二つのデータ間の相関関係をより正確</description></item><item><title>Rでパイプオペレーター %>% を使用する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1235/</link><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1235/</guid><description>概要 R では、%&amp;gt;% は パイプ演算子pipe Operater として知られており、他の演算子と同じように二項演算を行う。名前の通り、パイプ演算子は値がパイ</description></item><item><title>ディリクレ境界条件が与えられた熱方程式の初期値問題に対する数値解析的解法</title><link>https://freshrimpsushi.github.io/jp/posts/790/</link><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/790/</guid><description>##例 $$ \begin{cases} u_{t} = \gamma u_{xx} \\ u(t,0) = u(t,l) = 0 \\ u(0,x) = f(x) \end{cases} $$ 与えられた問題には代数的解があるほど簡単で、しかし、微分方程式を解くための数値解析法をなぜ学ぶのか</description></item><item><title>四次のルンゲ＝クッタ法</title><link>https://freshrimpsushi.github.io/jp/posts/796/</link><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/796/</guid><description>メソッド 1 $D \subset \mathbb{R}^2$ で定義された連続関数 $f$ に対する初期値問題 $\begin{cases} y ' = f(x,y) \\ y( x_{0} ) = Y_{0} \end{cases}$ が与えられている。区間 $(a,b)$ を $a \le x_{0} &amp;lt; x_{1} &amp;lt; \cdots &amp;lt; x_{n} &amp;lt; \cdots x_{N} \le b$ のよう</description></item><item><title>A-ステイブル</title><link>https://freshrimpsushi.github.io/jp/posts/774/</link><pubDate>Thu, 15 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/774/</guid><description>ビルドアップ ミッドポイントメソッドなどのマルチステップメソッドは、$h$が十分に小さくない場合、パラサイティックソリューションが存在する可能</description></item><item><title>相互相関関数</title><link>https://freshrimpsushi.github.io/jp/posts/1227/</link><pubDate>Thu, 15 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1227/</guid><description>定義 1 $\left\{ X_{t} \right\}_{t=1}^{n}$、$\left\{ Y_{t} \right\}_{t=1}^{n}$を確率過程としよう。 次のように定義</description></item><item><title>Rでオペレーター%%を定義する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1224/</link><pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1224/</guid><description>概要 Rでは、関数を定義する際に、二項演算子として定義することができる。Rで基本的に定義された割り算の余り%%、商%/%、内積%*%、%o%や</description></item><item><title>一貫性を持つマルチステップ法の収束性とルート条件</title><link>https://freshrimpsushi.github.io/jp/posts/754/</link><pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/754/</guid><description>定理 もしマルチステップメソッドが一貫性を持つならば、メソッドは収束性を持つ $\iff$ メソッドはルート条件を満たす 説明 閉区間 $[x_{0} , b]$ に対して $h$ を単位とし</description></item><item><title>時系列回帰分析</title><link>https://freshrimpsushi.github.io/jp/posts/1223/</link><pubDate>Tue, 13 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1223/</guid><description>定義 時系列回帰分析とは、文字どおり時系列データを使って回帰分析する技術のことを言う。本来、回帰分析が時系列データを扱うには適していないのは事</description></item><item><title>ラン-テスト</title><link>https://freshrimpsushi.github.io/jp/posts/1219/</link><pubDate>Mon, 12 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1219/</guid><description>仮説検定 時系列分析で得たARMAモデル $ARMA(p,q)$ を $M$ としよう。 $H_{0}$: $M$ は適合する。 $H_{1}$: $M$ は適合しない。 解説 リュング＝ボックステストは、LBQ とも略され、A</description></item><item><title>ARIMAモデルの残差分析</title><link>https://freshrimpsushi.github.io/jp/posts/1218/</link><pubDate>Sun, 11 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1218/</guid><description>説明 回帰分析と同様に、時系列分析も残差分析を行う。アリマモデルの仮定によると、残差はすべてホワイトノイズなので、線形性、等分散性、独立性、正</description></item><item><title>ダービン・ワトソン検定</title><link>https://freshrimpsushi.github.io/jp/posts/1217/</link><pubDate>Sat, 10 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1217/</guid><description>仮説検定 回帰分析を行った後、残差 $\left\{ e_{t} \right\}_{t=1}^{n}$ が与えられたとし、これを $e_{t} := \rho e_{t-1} + \nu_{t}$ の形で表す。 $H_{0}$: $\rho = 0$ つまり、残差の間に自己相関性はない。 $H_{1}$: $\rho \ne 0$ つ</description></item><item><title>RにおけるEACFを利用したARMAモデルの選択法</title><link>https://freshrimpsushi.github.io/jp/posts/1216/</link><pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1216/</guid><description>実習 1 PACFは、$AR(p)$の次数を決めるのに、ACFは、$MA(q)$の次数を決めるのに大いに役立つ。 直接その例を見てみよう。ma1.</description></item><item><title>一貫性を持つ多段階法の安定性とルート条件</title><link>https://freshrimpsushi.github.io/jp/posts/734/</link><pubDate>Thu, 08 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/734/</guid><description>定理 もしマルチステップメソッドが一貫性を持つならば、メソッドは安定性を持つ$\iff$メソッドはルート条件を満たす 説明 閉区間$[x_{0} ,</description></item><item><title>マルチステップ法の根の条件</title><link>https://freshrimpsushi.github.io/jp/posts/732/</link><pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/732/</guid><description>定義 1 マルチステップ法: $D \subset \mathbb{R}^2$ で定義された連続関数と初期値問題 $\begin{cases} y ' = f(x,y) \\ ( y( x_{0} ) , \cdots , y(x_{p}) ) = (Y_{0}, \cdots , Y_{p} ) \end{cases}$ が区間 $(a,b)$ 上で与えられている。区間を</description></item><item><title>拡張自己相関関数</title><link>https://freshrimpsushi.github.io/jp/posts/1213/</link><pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1213/</guid><description>ビルドアップ PACFは$AR(p)$の次数を、ACFは$MA(q)$の次数を決める時に大きな助けとなる。しかし、$ARMA(p,q)$モデル</description></item><item><title>アダムス法</title><link>https://freshrimpsushi.github.io/jp/posts/724/</link><pubDate>Tue, 06 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/724/</guid><description>定義 1 マルチステップメソッド：$D \subset \mathbb{R}^2$ で定義された連続関数に対して、初期値問題 $\begin{cases} y ' = f(x,y) \\ ( y( x_{0} ) , \cdots , y(x_{p}) ) = (Y_{0}, \cdots , Y_{p} ) \end{cases}$ が与えられていると</description></item><item><title>自己相関関数</title><link>https://freshrimpsushi.github.io/jp/posts/1211/</link><pubDate>Tue, 06 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1211/</guid><description>定義 1 $\left\{ Y_{t} \right\}_{t=1}^{n}$ を確率過程で、時差$k$に対して$Y_{t-1}, \cdots , Y_{t-(k-1)}$によって$Y_{t}$を回帰分析した残差を$\wi</description></item><item><title>リチャードソン誤差推定</title><link>https://freshrimpsushi.github.io/jp/posts/706/</link><pubDate>Mon, 05 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/706/</guid><description>ビルドアップ 微分方程式を解くメソッドのパフォーマンスを確認する方法として、真値と比較するのが最も良いが、すぐに真値を求めるのが面倒な場合から</description></item><item><title>実数空間で定義された関数の微分</title><link>https://freshrimpsushi.github.io/jp/posts/1210/</link><pubDate>Mon, 05 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1210/</guid><description>定義1 $a$を含むある$E$で$f$が定義されていて、限界 $$ f^{\prime} (a) := \lim_{h \to 0} {{ f (a + h ) - f(a) } \over { h }}=\lim \limits_{x\rightarrow a}\frac{f(x)-f(a)}{x-a} $$ が存在するならば、$f$は$a$で微</description></item><item><title>距離空間における位相同型</title><link>https://freshrimpsushi.github.io/jp/posts/385/</link><pubDate>Mon, 05 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/385/</guid><description>定義 二つの距離空間 $\left( X, d_{1} \right)$ と $\left( Y, d_{2} \right)$ に対して、全単射 $f : X \to Y$ が存在し、$f$ とその逆関数 $f^{-1}$ が両方とも連続関数ならば、$f$を位相同型写像と</description></item><item><title>台形法</title><link>https://freshrimpsushi.github.io/jp/posts/704/</link><pubDate>Sun, 04 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/704/</guid><description>定義 1 $D \subset \mathbb{R}^2$で定義された連続関数に対する初期値問題$\begin{cases} y ' = f(x,y) \\ y( x_{0} ) = Y_{0} \end{case</description></item><item><title>自己相関関数</title><link>https://freshrimpsushi.github.io/jp/posts/1209/</link><pubDate>Sun, 04 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1209/</guid><description>定義 1 $\left\{ Y_{t} \right\}_{t=1}^{n}$ を確率過程とする。 $\mu_{t} := E ( Y_{t} )$ を平均関数という。 次のように定義された $\gamma_{ t , s }$ を自己共分散関数という。 $$ \gamma_{t , s} : = \text{cov} ( Y_{t} , Y_{s} ) =</description></item><item><title>関数の一様連続</title><link>https://freshrimpsushi.github.io/jp/posts/1207/</link><pubDate>Sat, 03 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1207/</guid><description>定義1 空集合じゃない$E \subset \mathbb{R}$に対して$f : E \to \mathbb{R}$とする。全ての$\varepsilon &amp;gt; 0$に対して</description></item><item><title>ARMAモデルの可逆性</title><link>https://freshrimpsushi.github.io/jp/posts/1208/</link><pubDate>Fri, 02 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1208/</guid><description>定義 1 ARMAモデルでの 可逆性 とは、$AR(p)$ と $MA(q)$ が互いに表現できることを意味する。 例 一般的な $ARMA ( p , q)$ に対する式の展開ではないが、$A</description></item><item><title>パラサイティック・ソリューション</title><link>https://freshrimpsushi.github.io/jp/posts/701/</link><pubDate>Fri, 02 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/701/</guid><description>定義 1 パラサイティックソリューションparasitic solutionとは、方法が進むにつれてその大きさが大きくなり、符号が変わるような項の</description></item><item><title>ミッドポイントメソッド</title><link>https://freshrimpsushi.github.io/jp/posts/700/</link><pubDate>Thu, 01 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/700/</guid><description>メソッド $D \subset \mathbb{R}^2$で定義された連続関数に対し、初期値問題$\begin{cases} y ' = f(x,y) \\ ( y( x_{0} ), y (x_{1}) ) = ( Y_{0} , Y_{1} )</description></item><item><title>大学数学で新しく定義される連続関数</title><link>https://freshrimpsushi.github.io/jp/posts/1206/</link><pubDate>Thu, 01 Aug 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1206/</guid><description>定義 空集合じゃない$E \subset \mathbb{R}$に対して$f : E \to \mathbb{R}$としよう。全ての$\varepsilon &amp;gt; 0$に対して</description></item><item><title>RでARIMAモデルを使った予測方法</title><link>https://freshrimpsushi.github.io/jp/posts/1205/</link><pubDate>Wed, 31 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1205/</guid><description>実習 Rの内蔵データUKDriverDeathsは、1969年から1984年までのイギリスの月別運転手死亡者数に関するデータだ。一見すると季節</description></item><item><title>マルチステップ法の収束性と誤差</title><link>https://freshrimpsushi.github.io/jp/posts/698/</link><pubDate>Wed, 31 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/698/</guid><description>定理 初期値問題 $\begin{cases} y ' = f(x,y) \\ ( y( x_{0} ) , \cdots , y(x_{p}) )= ( Y_{0} , \cdots , Y_{p} ) \end{cases}$ に対して、マルチステップ法 $$ \displaystyle y_{n+1} = \sum_{j=0}^{p} a_{j} y_{n-j} + h \sum_{j = -1}^{p} b_{j} f (x_{n-j} , y_{n-j} ) $$ が一貫性があり、</description></item><item><title>イプシロン-デルタ論法</title><link>https://freshrimpsushi.github.io/jp/posts/1204/</link><pubDate>Tue, 30 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1204/</guid><description>定義[^1] $I$が$a \in \mathbb{R}$を含む区間であり、$f$は$I \setminus \left\{ a \right\}$で定義された関数だとしよう。全ての$\</description></item><item><title>RでARIMAモデルを用いた時系列分析結果の見方</title><link>https://freshrimpsushi.github.io/jp/posts/1200/</link><pubDate>Mon, 29 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1200/</guid><description>実習 Rの内蔵データ AirPassengerは、1949年から1960年までの月別の航空機の乗客数のデータです。 (1) モデル：実際、係数を正確に識</description></item><item><title>マルチステップ法の一貫性と収束次数</title><link>https://freshrimpsushi.github.io/jp/posts/694/</link><pubDate>Mon, 29 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/694/</guid><description>定理 初期値問題 $\begin{cases} y ' = f(x,y) \\ ( y( x_{0} ) , \cdots , y(x_{p}) )= ( Y_{0} , \cdots , Y_{p} ) \end{cases}$ に対して マルチステップメソッドが $$ \displaystyle y_{n+1} = \sum_{j=0}^{p} a_{j} y_{n-j} + h \sum_{j = -1}^{p} b_{j} f (x_{n-j} , y_{n-j} ) $$ 一貫性を持</description></item><item><title>リミット・スプレムとリミット・インフィマム</title><link>https://freshrimpsushi.github.io/jp/posts/1198/</link><pubDate>Sat, 27 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1198/</guid><description>定義 $\left\{ x_{n} \right\}_{n \in \mathbb{N}}$、$\left\{ y_{n} \right\}_{n \in \mathbb{N}}$が実数列だとしよう。 $\displaystyle \limsup_{n \to \infty} x_{n} := \lim_{n \to \infty} \left( \sup_{k \ge n} x_{k} \rig</description></item><item><title>RでARIMAモデルを使用して時系列分析をする方法</title><link>https://freshrimpsushi.github.io/jp/posts/1197/</link><pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1197/</guid><description>実習 Rで組み込まれたデータWWWusageを読み込んでグラフを描いてみよう。 WWWusageは、昔のインターネットにアクセスしていたユーザー</description></item><item><title>マルチステップ法</title><link>https://freshrimpsushi.github.io/jp/posts/693/</link><pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/693/</guid><description>定義 1 $D \subset \mathbb{R}^2$で定義された連続関数に対して、初期値問題$\begin{cases} y ' = f(x,y) \\ ( y( x_{0} ) , \cdots , y(x_{p}) ) = (Y_{0}, \cdots ,</description></item><item><title>コーシー数列</title><link>https://freshrimpsushi.github.io/jp/posts/1190/</link><pubDate>Thu, 25 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1190/</guid><description>定義 全ての$\varepsilon &amp;gt; 0$に対して、$n , m \ge N \implies | x_{n} - x_{m} | &amp;lt; \varepsilon$を満たす$N \in \mathbb{N}$が存</description></item><item><title>初期値が少し異なるときのオイラーメソッドの誤差</title><link>https://freshrimpsushi.github.io/jp/posts/692/</link><pubDate>Thu, 25 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/692/</guid><description>定理 $[x_{0} , b] \times \mathbb{R}$ で定義された $f$ に対する初期値問題 $\begin{cases} y ' = f(x,y) \\ y( x_{0} ) = Y_{0} \end{cases}$ の解 $Y(x)$ が $Y \in C^{3} [ x_{0} , b ]$ であり、$\displaystyle f_{y} (x,y) = {{ \partial</description></item><item><title>半素数の素因数分解が容易に解ける条件</title><link>https://freshrimpsushi.github.io/jp/posts/1189/</link><pubDate>Wed, 24 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1189/</guid><description>要旨 1 準素数の素因数分解問題 $N = pq$ は、次の条件下では比較的簡単に解ける。 (i): $p$ がスムーズな素数である。 (ii): $p \approx q$ 説明 条件 (ii) の意味は、$p$ と $q$ の</description></item><item><title>強いリプシッツ条件とオイラーメソッドの誤差</title><link>https://freshrimpsushi.github.io/jp/posts/689/</link><pubDate>Wed, 24 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/689/</guid><description>定理 $[x_{0} , b] \times \mathbb{R}$ で定義された$f$ に関して、初期値問題 $\begin{cases} y ' = f(x,y) \\ y( x_{0} ) = Y_{0} \end{cases}$ の解 $Y(x)$ が $[x_{0} , b]$ で二回微分可能だとする。$f$ が全ての $x_{0} \le x \le b$ と</description></item><item><title>ポラードのp-1素因数分解アルゴリズムの証明</title><link>https://freshrimpsushi.github.io/jp/posts/1187/</link><pubDate>Tue, 23 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1187/</guid><description>アルゴリズム 1 準素数 $N$ が与えられたとする。$p$ が スムーズ 素数であれば、$N$ の素因数分解 $N = pq$ は次のように求めることができる。 ステップ 1. $a</description></item><item><title>ボルツァーノ＝ワイエルシュトラスの定理</title><link>https://freshrimpsushi.github.io/jp/posts/380/</link><pubDate>Tue, 23 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/380/</guid><description>定理 無限集合 $E \subset \mathbb{R}$ が 有界ならば、$E$ の 集積点 $p \in \mathbb{R}$ が存在する。 説明 または、「有界数列は収束する部分数列を持つ」と言ってもいい。条件で$E$</description></item><item><title>数値解析におけるオイラー法</title><link>https://freshrimpsushi.github.io/jp/posts/687/</link><pubDate>Tue, 23 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/687/</guid><description>メソッド 1 $D \subset \mathbb{R}^2$ で定義された連続関数について、初期値問題が$\begin{cases} y ' = f(x,y) \\ y( x_{0} ) = Y_{0} \end{cases}$で与えられ</description></item><item><title>カントールの交差定理</title><link>https://freshrimpsushi.github.io/jp/posts/376/</link><pubDate>Mon, 22 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/376/</guid><description>定義1 集合の数列 $\left\{ S_{n} \right\}_{n=1}^{\infty}$ が全ての自然数 $n$ に対して $S_{n+1} \subset S_{n}$ が成り立つなら、ネステッドnestedされていると言う。 説明 ネステッドの訳はあまりスムー</description></item><item><title>ゴールドワッサー-ミカリ確率的鍵暗号システムの証明</title><link>https://freshrimpsushi.github.io/jp/posts/1185/</link><pubDate>Sun, 21 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1185/</guid><description>ビルドアップ 左から順に アリス、ボブ、イブとしよう。アリスとボブはメッセージを交換する当事者で、イブはメッセージに関心がある受動的な攻撃者だ。</description></item><item><title>大学数学における数列の収束を複雑に定義する理由</title><link>https://freshrimpsushi.github.io/jp/posts/1186/</link><pubDate>Sun, 21 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1186/</guid><description>定義 $\left\{ x_{n } \right\}_{n = 1}^{\infty}$ を実数の数列とする。全ての $\varepsilon &amp;gt; 0$ に対して、$n \ge N \implies | x_{n} - a | &amp;lt; \varepsilon$ を満たす $N \in \mathbb{N}$ が存在するならば、$\left\{ x_{n } \right\}$ が $a</description></item><item><title>大学数学における数列の極限を新たに定義する理由</title><link>https://freshrimpsushi.github.io/jp/posts/1184/</link><pubDate>Sat, 20 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1184/</guid><description>定義1 2 $\mathbb{N}$ は自然数の集合を、$\mathbb{R}$ は実数の集合を意味する。 定義域が $\mathbb{N}$ である関数を数列と言う。 自然数の数列 $\left\{ n_{k} \right\}_{ k \in \mathbb{N}}$ に対し</description></item><item><title>RSA公開鍵暗号方式の証明</title><link>https://freshrimpsushi.github.io/jp/posts/1173/</link><pubDate>Fri, 19 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1173/</guid><description>ビルドアップ 左から順に アリス、ボブ、イブとしよう。アリスとボブはメッセージを交換する当事者で、イブはメッセージに興味がある受動的攻撃者だ。オ</description></item><item><title>素因数分解</title><link>https://freshrimpsushi.github.io/jp/posts/775/</link><pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/775/</guid><description>コード R 次に、Rコードで実装されたエラトステネスの篩である。自然数$n$が与えられると、エラトステネスの篩と同じ方法で素数かどうかを判断して</description></item><item><title>リプシッツ条件</title><link>https://freshrimpsushi.github.io/jp/posts/684/</link><pubDate>Tue, 16 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/684/</guid><description>定義 1次微分方程式の存在性・一意性定理のステートメントで、リプシッツ条件lipschitz conditionが見られる。 $D \subset \mathbb{</description></item><item><title>連続だが微分不可能な関数：ワイエルシュトラス関数</title><link>https://freshrimpsushi.github.io/jp/posts/1169/</link><pubDate>Tue, 16 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1169/</guid><description>定理 どこでも微分できない連続関数が存在する。 証明 戦略： 連続関数$g_{1} (x) := | x - 1 |$と$g_{2} (x) := | x - 2 |$を考える。$g_{1</description></item><item><title>数値的に不適切積分を計算するためのガウス求積法</title><link>https://freshrimpsushi.github.io/jp/posts/1161/</link><pubDate>Mon, 15 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1161/</guid><description>定義 1 ガウス・チェビシェフ求積法 $$ \int_{-1}^{1} {{ 1 } \over { \sqrt{1 - x^2 } }} f(x) dx \approx \sum_{i=1}^{n} w_{i} f( x_{i} ) $$ $$ w_{i} = {{ \pi } \over { n }} $$ ここで、$x_{i}$ は $T_{n}(x) = 0$ を満たすチェビ</description></item><item><title>関数の級数</title><link>https://freshrimpsushi.github.io/jp/posts/1160/</link><pubDate>Sun, 14 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1160/</guid><description>定義 関数列$\left\{ f_{n} : E \to \mathbb{R} \right\}_{n=1}^{\infty}$を定めよう。 (1) $\displaystyle \sum_{k=1}^{n} f_{k} (X)$が$n \to \infty$の時、</description></item><item><title>エルミート多項式</title><link>https://freshrimpsushi.github.io/jp/posts/1159/</link><pubDate>Sat, 13 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1159/</guid><description>定義 確率論者のエルミート多項式 $$ H_{e_{n}} := (-1)^{n} e^{{x^2} \over {2}} {{d^{n}} \over {dx^{n}}} e^{- {{x^2} \over {2}}} $$ 物理学者のエルミート多項式 $$ H_{n} := (-1)^{n} e^{x^2} {{d^{n}} \over {dx^{n}}} e^{-x^2} $$ 基本的な性質 エルミート多項式は二つ</description></item><item><title>関数の点収束と一様収束の違い</title><link>https://freshrimpsushi.github.io/jp/posts/1158/</link><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1158/</guid><description>$\mathbb{R}$ の部分集合 $E \ne \emptyset$ に対して、関数 $f : E \to \mathbb{R}$ と関数列 $\left\{ f_{n} : E \to \mathbb{R} \right\}_{n=1}^{\infty}$ を定義しよう。 点収束 全ての $\varepsilon &amp;gt; 0$ 及び $x \in E$ に対して $n \ge N \implies | f_{n} (x) - f(x) | &amp;lt; \varepsilon$ を</description></item><item><title>ラゲール多項式</title><link>https://freshrimpsushi.github.io/jp/posts/1156/</link><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1156/</guid><description>定義 $\displaystyle L_{n} := {{ e^{x} } \over { n! }} {{ d^{n} } \over { dx^{n} }} \left( e^{-x} x^{n} \right)$ を ラゲール多項式laguerre Polynomialという。 基本性質 再帰公式 [0]: $$L_{n+1} (x) = {{ 1 } \over {</description></item><item><title>実数の集合と空集合は開いていると同時に閉じている。</title><link>https://freshrimpsushi.github.io/jp/posts/378/</link><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/378/</guid><description>定理 $\mathbb{R}$ と $\emptyset$ は開かれていると同時に閉じている。 説明 実数 $\mathbb{R}$ 上で、複数の区間の合併を開集合という。例えば、$(-1,0) \cup (2,3)$ は明らかに開集合で、$</description></item><item><title>実数集合における集積点</title><link>https://freshrimpsushi.github.io/jp/posts/379/</link><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/379/</guid><description>定義 実数上のある点$x \in \mathbb{R}$と部分集合$A \subset \mathbb{R}$に対して、$x$を含む任意の開集合$O$に対して$O \cap (</description></item><item><title>距離空間における内部閉包境界</title><link>https://freshrimpsushi.github.io/jp/posts/383/</link><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/383/</guid><description>定義 距離空間 $\left( X, d \right)$ について、$A \subset X$ とする。 $x \in O \subset A$ を満たす開集合 $O$ が存在する時、$x$ を $A$ の内点という。 $A$ の内点の集合 $A^{\circ}$ を $A$ の内部とい</description></item><item><title>関数列の一様収束</title><link>https://freshrimpsushi.github.io/jp/posts/1154/</link><pubDate>Tue, 09 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1154/</guid><description>定義 $\mathbb{R}$ の部分集合 $E \ne \emptyset$、関数 $f : E \to \mathbb{R}$ および関数列 $\left\{ f_{n} : E \to \mathbb{R} \right\}_{n=1}^{\infty}$ を定義しよう。全ての $\varepsilon &amp;gt; 0$ に対し、$n \ge N \implies | f_{n} (x) - f(x) | &amp;lt;</description></item><item><title>関数列の各点収束</title><link>https://freshrimpsushi.github.io/jp/posts/1148/</link><pubDate>Sun, 07 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1148/</guid><description>定義 $\mathbb{R}$ の部分集合 $E \ne \emptyset$ に対して関数 $f : E \to \mathbb{R}$ を定義しよう。関数列 $\left\{ f_{n} : E \to \mathbb{R} \right\}_{n=1}^{\infty}$ が各 $x \in E$ について $f(x) = \lim \limits_{n \to \infty} f_{n} (X)$ を満たす場合、$E$ で $f_{n}$ に 逐</description></item><item><title>数値的に広義積分を計算するための変数置換のコツ</title><link>https://freshrimpsushi.github.io/jp/posts/1147/</link><pubDate>Sat, 06 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1147/</guid><description>定理 1 $0 &amp;lt; a &amp;lt; b &amp;lt; \infty$ としよう。 [1]: $ 0 &amp;lt; p &amp;lt; 1$ ならば $$\int_{0}^{b} {{ f(x) } \over {x^{p} }} dx = \int_{0}^{{{ 1 } \over { 1-p }} b^{1-p} } f \left( \left[ ( 1- p ) m \right]^{{{ 1 } \over { 1-p }}} \right) dm$$ [2]: $ 1 &amp;lt; p$ ならば $$\int_{a}^{ \infty</description></item><item><title>閉区間で積分できない関数：ディリクレ関数</title><link>https://freshrimpsushi.github.io/jp/posts/1146/</link><pubDate>Fri, 05 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1146/</guid><description>定義 次のように定義される$f$をディリクレ関数という。 説明 ディリクレ関数はリーマン積分ができない代表的な関数で、おそらく解析学以上の勉強をし</description></item><item><title>ガウス求積法</title><link>https://freshrimpsushi.github.io/jp/posts/1144/</link><pubDate>Thu, 04 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1144/</guid><description>定義 1 $f : [a,b] \to \mathbb{R}$が$[a,b]$で積分可能であり、$[a,b]$を$a = x_{1} &amp;lt; \cdots &amp;lt; x_{n} = b$のようなノードポイントで分割した</description></item><item><title>負の二項係数</title><link>https://freshrimpsushi.github.io/jp/posts/1143/</link><pubDate>Wed, 03 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1143/</guid><description>定義 $r,k \in \mathbb{N}$ について $\displaystyle \binom{-r}{k}$ を 負の二項係数negative Binomial Coefficientと言う。 説明 名前から予想できるように、負の二項係数は二項係数を負</description></item><item><title>オイラー定数eは無理数である</title><link>https://freshrimpsushi.github.io/jp/posts/1141/</link><pubDate>Tue, 02 Jul 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1141/</guid><description>定理 $\mathbb{Q}$ は有理数の集合を表す。 証明 マクローリン展開を使用して1 戦略: マクローリン展開を使って$e^{-1}$を二つの部分に分け、矛盾を導出する</description></item><item><title>円周率が無理数であることの証明</title><link>https://freshrimpsushi.github.io/jp/posts/1139/</link><pubDate>Sun, 30 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1139/</guid><description>定理 $$\pi \notin \mathbb{Q}$$ $\mathbb{Q}$ は有理数の集合を表す。 証明 ストラテジー: 整数が密集していないという事実を利用する。関数 $f$、$F$ を非常に巧妙に定義して、色々</description></item><item><title>ニュートン＝コーツの積分公式</title><link>https://freshrimpsushi.github.io/jp/posts/1138/</link><pubDate>Sat, 29 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1138/</guid><description>定義 1 $f : [a,b] \to \mathbb{R}$が$[a,b]$で積分可能であり、$[a,b]$を間隔が$\displaystyle h:= {{b-a} \over {n}}$の一</description></item><item><title>ルート2が無理数であることの証明</title><link>https://freshrimpsushi.github.io/jp/posts/1137/</link><pubDate>Fri, 28 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1137/</guid><description>定理 $\sqrt{2}$ は無理数だ。 証明 戦略: $\sqrt{2}$ が最低項の分数として表せると仮定して、矛盾を導く。この方法は全ての完全平方でない $n$ に対して $\sqrt{n}$ が無理数であること</description></item><item><title>シンプソンの公式</title><link>https://freshrimpsushi.github.io/jp/posts/1132/</link><pubDate>Wed, 26 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1132/</guid><description>定義 $f : [a,b] \to \mathbb{R}$が$[a,b]$で積分可能で、$[a,b]$を$\displaystyle h:= {{b-a} \over {n}}$の間隔で等しく分</description></item><item><title>Rでのログログスケールプロットの描き方</title><link>https://freshrimpsushi.github.io/jp/posts/1131/</link><pubDate>Tue, 25 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1131/</guid><description>良くない方法 win.graph(7,4); par(mfrow=c(1,2)) plot(pressure,main=&amp;#39;Pressure\&amp;#39;) y&amp;lt;-pressure[-1,]$pressure; logtemp&amp;lt;-log(y) x&amp;lt;-pressure[-1,]$temperature; logpress&amp;lt;-log(x) plot(logpress,logtemp,main=&amp;#39;log scale\&amp;#39;) ログログスケールで図を描く一番簡単な方法は、データ自体にログを取ることだ。ログログプロットを初めて描くなら、こ</description></item><item><title>台形則</title><link>https://freshrimpsushi.github.io/jp/posts/1130/</link><pubDate>Mon, 24 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1130/</guid><description>定義 $f : [a,b] \to \mathbb{R}$が$[a,b]$で積分可能であり、$[a,b]$を$\displaystyle h:= {{b-a} \over {n}}$の間隔で$a</description></item><item><title>Rで凡例を挿入する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1129/</link><pubDate>Sun, 23 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1129/</guid><description>コード データを解析することは、それを表現することと同じくらい重要だ。図が複雑になるほど、細かい注釈ときれいな凡例がデータを理解するのに大きな</description></item><item><title>数値積分</title><link>https://freshrimpsushi.github.io/jp/posts/1128/</link><pubDate>Sat, 22 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1128/</guid><description>定義 1 $f : [a,b] \to \mathbb{R}$が$[a,b]$で積分可能であり、$[a,b]$を$a = x_{0} &amp;lt; \cdots &amp;lt; x_{n} = b$のようなノードポイントで分割した</description></item><item><title>Rでのメタデータとattrの参照方法</title><link>https://freshrimpsushi.github.io/jp/posts/1127/</link><pubDate>Fri, 21 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1127/</guid><description>概要 R で関数を使うとき、時々 attr(,&amp;quot;something&amp;quot;) のようなデータに遭遇することがある。属性 は文字通り プロパティ を意味するが、Pythonのような言語とは異なり、</description></item><item><title>ベルヌーイの不等式の証明</title><link>https://freshrimpsushi.github.io/jp/posts/1126/</link><pubDate>Wed, 19 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1126/</guid><description>要旨 $\alpha &amp;gt; 0$ とすると、すべての $x \in [ - 1, \infty )$ に対して、次の二つの不等式が成り立つ。 [1]: $\alpha \in (0, 1] \implies (1 + x )^{\alpha } \le 1 + \alpha x $ [2] $\alpha \in (1, \infty] \implies (1 + x )^{\alpha } \ge 1</description></item><item><title>Rで文字列のベクトルを1つの文字列に結合する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1125/</link><pubDate>Tue, 18 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1125/</guid><description>概要 Rはデータを扱うのに非常に便利な言語だが、他のプログラミング言語にも慣れている人だと、Rの文字列処理は少し馴染みにくいかもしれない。Cや</description></item><item><title>チェビシェフ・ノード</title><link>https://freshrimpsushi.github.io/jp/posts/1124/</link><pubDate>Mon, 17 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1124/</guid><description>定義 $[-1,1]$から$\displaystyle x_{k} = \cos \left( {{2k-1} \over {2n}} \pi \right)$、$k=1, \cdots , n$をチェビシェフ・ノードという。 説明 チ</description></item><item><title>Rでリストを参照するさまざまな方法</title><link>https://freshrimpsushi.github.io/jp/posts/1123/</link><pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1123/</guid><description>概要 R はデータを扱うために多くの優れた機能を提供し、その中でもリストは R を使用する最大の理由の一つだ。Pythonをはじめとする他の言語にも</description></item><item><title>チェビシェフ展開</title><link>https://freshrimpsushi.github.io/jp/posts/1122/</link><pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1122/</guid><description>ビルドアップ 1 チェビシェフ展開を理解するためには、チェビシェフ展開がどのように導出されるのかをまず知る必要がある。最小化問題を解く代わりに最</description></item><item><title>R での最大値と最小値の位置を見つける</title><link>https://freshrimpsushi.github.io/jp/posts/1120/</link><pubDate>Fri, 14 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1120/</guid><description>コード set.seed(150421) x&amp;lt;-sample(100,10); x which.max(x) which.min(x) 統計を目的としてデータを見るとき、最大値と最小値が何であるか知るだけでなく、それが何番目の値であるかを把握することも多くの場</description></item><item><title>ストーン-ワイエルシュトラスの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/1117/</link><pubDate>Thu, 13 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1117/</guid><description>整理[^1] 補助定義 $X$に対して、$A \subset C(X)$としよう。 異なる$x_{1}, x_{2} \in X$について、常に$f \in A$が存在して$f(x_{1}</description></item><item><title>数値解析における最小最大近似と最小二乗近似</title><link>https://freshrimpsushi.github.io/jp/posts/1116/</link><pubDate>Wed, 12 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1116/</guid><description>ビルドアップ 1 与えられた関数$f : [a,b] \to \mathbb{R}$を近似する問題が与えられているとしよう。計算はコンピュータの仕事なので、多項式$</description></item><item><title>連続関数空間の代数</title><link>https://freshrimpsushi.github.io/jp/posts/1113/</link><pubDate>Tue, 11 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1113/</guid><description>定義1 以下の3つの条件を満たす集合$A$を$C(X)$の代数algebraという。 (i): $\emptyset \ne A \subset C(X)$ (ii): $f,g \in A \implies (f+g) , fg \in A$ (iii): $f \in A , c \in \mathbb{R} \implies cf \in A$ 距</description></item><item><title>数値解析における関数の近似</title><link>https://freshrimpsushi.github.io/jp/posts/1107/</link><pubDate>Mon, 10 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1107/</guid><description>ビルドアップ 数値計算を行う際、コンピュータが人間よりも圧倒的に速いのは事実だけれど、それが超越関数や無理数を理解しているからではない。例えば</description></item><item><title>二項級数の導出</title><link>https://freshrimpsushi.github.io/jp/posts/1103/</link><pubDate>Sun, 09 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1103/</guid><description>公式 $|x| &amp;lt; 1$ が $\alpha \in \mathbb{C}$ に対して $$ \begin{align*} (1 + x )^{\alpha} =&amp;amp; \sum_{k=0}^{\infty} \binom{\alpha}{k} x^{k} \\ =&amp;amp; 1 + \alpha x + \dfrac{\alpha (\alpha-1)}{2!}x^{2} + \dfrac{\alpha (\alpha-1)(\alpha-2)}{3!}x^{3} + \cdots \end{align*} $$ 負の項級数 $$ \begin{align*} (1 - x)^{-\alpha} &amp;amp;= \sum\limits_{k=0}^{\infty} \binom{\alpha + k - 1}{k} x^{k} \\ &amp;amp;= 1 + \alpha x + \dfrac{\alpha(\alpha+1)}{2!} x^{2} + \dfrac{\alpha(\alpha+1)(\alpha+2)}{3!} x^{3} +</description></item><item><title>加法性を持つ連続関数の性質</title><link>https://freshrimpsushi.github.io/jp/posts/1102/</link><pubDate>Sat, 08 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1102/</guid><description>定理 [1] 連続関数 $f : \mathbb{R} \to \mathbb{R}$ が全ての $x, y \in \mathbb{R}$ に対して $f(x + y) = f(x) + f(y)$ を満たす場合 $$ f(x) = f(1) x $$ [2] 連続関数 $g : \mathbb{R} \to ( 0 , \infty )$ が全ての $x, y \in \mathbb{R}$ に対して $g(x</description></item><item><title>複素数に対する一般化された二項係数</title><link>https://freshrimpsushi.github.io/jp/posts/1100/</link><pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1100/</guid><description>定義 複素数 $\alpha \in \mathbb{C}$ に関して、以下を 二項係数binomial Coefficientという。 $$ \binom{\alpha}{k} := \begin{cases} \displaystyle {{ \alpha ( \alpha - 1 ) \cdots ( \alpha - k + 1 ) } \over { k! }} &amp;amp; ,</description></item><item><title>コーシー積：収束する二つの冪級数の積</title><link>https://freshrimpsushi.github.io/jp/posts/1099/</link><pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1099/</guid><description>定理 1 $f(x) : = \sum _{k=0}^{\infty} a_{k} x^{k}$ と $g(x) : = \sum_{k=0}^{\infty} b_{k} x^{k}$ の収束区間が $(-r,r)$ で、$c_{k} := \sum_{j=0}^{k} a_{j} b_{k-j}$ とするなら、$\sum_{k=0}^{\infty} c_{k} x^{k}$ は収束区間 $(-r,r)$</description></item><item><title>累乗級数</title><link>https://freshrimpsushi.github.io/jp/posts/1090/</link><pubDate>Tue, 04 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1090/</guid><description>定義 $S(x) : = \sum \limits_{k=0}^{\infty} a_{k} ( x - x_{0} )^{k}$ を冪級数と言い、$S(x)$ の中心centerを $x_{0}$ とする。 $S(x)$ が $|x - x_{0}| &amp;lt; R$ に対して絶対収束し、$|x - x_{0}| &amp;gt; R$ に対して</description></item><item><title>Rでベクトルの内積を計算する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1089/</link><pubDate>Mon, 03 Jun 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1089/</guid><description>コード x&amp;lt;-1:10; x y&amp;lt;-(-1)^(1:10); y sum(x*y) x %*% y x %o% y Rで分析やシミュレーションをするとき、重み付けされた期待値を計算することがよくある。もちろん数式的に$\disp</description></item><item><title>ARIMAモデルにおけるドリフト</title><link>https://freshrimpsushi.github.io/jp/posts/1115/</link><pubDate>Thu, 30 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1115/</guid><description>説明 時系列分析をしていると、ドリフトdriftという係数をよく見かける。 もちろん、上の場合、標準誤差に比べて係数の大きさがとても小さいから、</description></item><item><title>Windowsでコマンドプロンプトからファイルリストを取得する方法</title><link>https://freshrimpsushi.github.io/jp/posts/1072/</link><pubDate>Thu, 30 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1072/</guid><description>概要 複数のデータを集めるプログラムを作成する際に、ファイルが多すぎて問題になることがある。もちろん、どのプログラミング言語にもそれを解決する</description></item><item><title>季節性ARIMAモデル</title><link>https://freshrimpsushi.github.io/jp/posts/1067/</link><pubDate>Wed, 29 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1067/</guid><description>モデル 1 $\nabla_{s} Y_{t} := Y_{t} - Y_{t-s}$ として定義されたオペレーター$\nabla_{s}$ をシーズナル差分seasonal Differenceと言う。 $W_{t} := \nabla^{d} \nabla_{s}^{D}</description></item><item><title>ボックス-コックス変換</title><link>https://freshrimpsushi.github.io/jp/posts/1065/</link><pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1065/</guid><description>ビルドアップ $x &amp;gt; 0$に対する$g(x) := \begin{cases} \displaystyle {{ x^{\lambda} - 1 } \over { \lambda }} &amp;amp; , \lambda \ne 0 \\ \log x &amp;amp; , \lambda = 0 \end{cases}$のボックス-コックス変換と言</description></item><item><title>多次元非線形マップ</title><link>https://freshrimpsushi.github.io/jp/posts/1052/</link><pubDate>Fri, 24 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1052/</guid><description>非線形マップの定義 マップ $\mathbf{f} : \mathbb{R}^{m} \to \mathbb{R}^{m}$ が線形でない場合、非線形と言われる。 ビルドアップ 1 あるマップが線形であることを示すのは難しいが、非線形であ</description></item><item><title>多次元線形写像</title><link>https://freshrimpsushi.github.io/jp/posts/1048/</link><pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1048/</guid><description>定義 1 マップ $T_{A} : \mathbb{R}^{m} \to \mathbb{R}^{m}$ が全ての $a,b \in \mathbb{R}$ と $\mathbf{x}, \mathbf{y} \in \mathbb{R}^{m}$ に対して $$ T_{A} ( a \mathbf{x} + b \mathbf{y} ) = a T_{A} ( \mathbf{x} ) + b T_{A} ( \mathbf{y} ) $$ を満たすならば、$T_{A}$ は 線形lin</description></item><item><title>数値解析におけるB-スプライン</title><link>https://freshrimpsushi.github.io/jp/posts/1045/</link><pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1045/</guid><description>テキストと数式を読むのが嫌なら、図を見て理解しても全く問題ない。 定義 1 区間 $[a,b]$ を$a \le x_{0} &amp;lt; x_{1} &amp;lt; \cdots &amp;lt; x_{n} &amp;lt; \cdots x_{N} \le b$のようなノードポイントで分割し</description></item><item><title>Rでのデータフレームの列に基づく並べ替え方</title><link>https://freshrimpsushi.github.io/jp/posts/1043/</link><pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1043/</guid><description>概要 Rでデータをソートするのにsort()関数を使えば簡単だが、デフォルトではsort()関数はベクターのみをソートする。しかし実際は、デー</description></item><item><title>数値解析におけるスプライン</title><link>https://freshrimpsushi.github.io/jp/posts/1036/</link><pubDate>Thu, 16 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1036/</guid><description>ビルドアップ インターポレーションってのは、正確な関数を復元するのではなく、似ているけど扱いやすい関数を求めることが目的だ。もちろん、エクスプ</description></item><item><title>Rでヒストグラムをより詳細に見る方法</title><link>https://freshrimpsushi.github.io/jp/posts/1035/</link><pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1035/</guid><description>コード Rでは、hist()関数を使って、ヒストグラムを簡単に描ける。この時、階級のサイズはRが勝手に判断して決めるが、もっと細かく見たい場合</description></item><item><title>エルミート補間</title><link>https://freshrimpsushi.github.io/jp/posts/1034/</link><pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1034/</guid><description>定義 1 違う$x_{1} , \cdots , x_{n}$のデータ$(x_{1}, y_{1} , y&amp;rsquo;_{1}) , \cdots , (x_{n} , y_{n}, y&amp;rsquo;_{n})$に対して$\begin{cas</description></item><item><title>エルミート-ジェノッキ公式</title><link>https://freshrimpsushi.github.io/jp/posts/1031/</link><pubDate>Sun, 12 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1031/</guid><description>公式 異なる$x_{0}, \cdots , x_{n}$に対して$f \in C^{n} \left( \mathscr{H} \left\{ x_{0}, \cdots , x_{n} \right\} \right)$としよう。すると、標準シンプレックスにおいて $$ \tau_{n} := \left\{</description></item><item><title>Rにおけるデータの標準化：標準化された残差の表示</title><link>https://freshrimpsushi.github.io/jp/posts/1026/</link><pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1026/</guid><description>コード Rは統計に特化した言語だけあって、Z-score $\displaystyle z:= {{x - \mu} \over {\sigma}}$ を計算する必要がある場合が多い。この時、組み込みの scale() 関数を使うと便利だ。</description></item><item><title>ニュートンの前進差分公式の導出</title><link>https://freshrimpsushi.github.io/jp/posts/1025/</link><pubDate>Fri, 10 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1025/</guid><description>式 異なる$x_{0} , \cdots , x_{n}$のデータ$(x_{0}, f(x_{0} )) , \cdots , (x_{n} , f( x_{n} ) )$について $$ p_{n} (x) =\sum_{i=0}^{n} f [ x_{0} , \cdots , x_{i} ] \prod_{j=0}^{i-1} (x - x_{j} ) $$ 説明 複雑に</description></item><item><title>ラグランジュの公式の導出</title><link>https://freshrimpsushi.github.io/jp/posts/1023/</link><pubDate>Wed, 08 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1023/</guid><description>公式 1 異なる$x_{0} , \cdots , x_{n}$のデータ$(x_{0}, y_{0}) , \cdots , (x_{n} , y_{n})$について$\displaystyle l_{i} (x) := \prod_{i \ne j}</description></item><item><title>多項式補間</title><link>https://freshrimpsushi.github.io/jp/posts/1021/</link><pubDate>Mon, 06 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1021/</guid><description>定義 1 異なる$x_{0} , \cdots , x_{n}$のデータ$(x_{0}, y_{0}) , \cdots , (x_{n} , y_{n})$について、$p (x_{i} ) = y_{i}$と$\deg p \le</description></item><item><title>Rでの現在の日付と時刻の確認</title><link>https://freshrimpsushi.github.io/jp/posts/1020/</link><pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1020/</guid><description>コード Rだけでなく、プログラミング言語を使って多くの作業をする際、ログを記録し、その時刻の情報が必要だ。Rでは、Sys.Date() 関数を通</description></item><item><title>数値解析における補間</title><link>https://freshrimpsushi.github.io/jp/posts/1016/</link><pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1016/</guid><description>定義 1 与えられた$(n+1)$ペアのデータ$(x_{0}, y_{0}) , \cdots , (x_{n} , y_{n})$に対して、$f (x_{i} ) = y_{i}$を満たしつつある特定の性</description></item><item><title>カオス遷移</title><link>https://freshrimpsushi.github.io/jp/posts/1014/</link><pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1014/</guid><description>定義 パラメータの変化に応じてシステムがカオスになったりならなかったりする現象をカオス遷移という。 例 例として、ロジスティックファミリーを考えて</description></item><item><title>ディッキー-フラー検定</title><link>https://freshrimpsushi.github.io/jp/posts/921/</link><pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/921/</guid><description>仮設検定 時系列データ $\left\{ y_{t} \right\}$ が与えられているとしよう。 $H_{0}$: データ $\left\{ y_{t} \right\}$ は定常性を持たない。 $H_{1}$: データ $\left\{ y_{t} \right\}$ は定常性を持つ。 説明 ディッキー-フラー検</description></item><item><title>教師あり学習と教師なし学習</title><link>https://freshrimpsushi.github.io/jp/posts/1013/</link><pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1013/</guid><description>定義 機械学習では、従属変数が決まっている場合を教師あり学習、そうでない場合を教師なし学習という。 例 教師あり学習と教師なし学習の違いを簡単に言</description></item><item><title>数学における勾配降下法</title><link>https://freshrimpsushi.github.io/jp/posts/1012/</link><pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1012/</guid><description>定義 1 スカラー関数 $\varphi : \mathbb{R}^{n} \to \mathbb{R}$ をコスト関数と言う。コスト関数 $ \varphi ( \mathbf{x} )$ の極小値を求めるために、$\mathbf{x} = \mathbf{x}_{</description></item><item><title>ナチュラル不変測度</title><link>https://freshrimpsushi.github.io/jp/posts/1011/</link><pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1011/</guid><description>例 1 例として、ロジスティックマップ $g_{4} (x) = 4 x (1 -x)$ を考えると、カオティックなシステムであるため、初期値 $x_{0} \in [0,1]$ だけで、十分に大きな $N$ に対して $x_{N} =</description></item><item><title>スカラーフィールドの勾配</title><link>https://freshrimpsushi.github.io/jp/posts/1010/</link><pubDate>Sun, 28 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1010/</guid><description>定義 スカラー場 $f : \mathbb{R}^{n} \to \mathbb{R}$の全微分を特にグラジエントgradient, 傾きと呼び、$\nabla f$と表記する。 $$ \begin{align*} \nabla f :=</description></item><item><title>分岐図</title><link>https://freshrimpsushi.github.io/jp/posts/1006/</link><pubDate>Sat, 27 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1006/</guid><description>定義 動力学系でパラメーターの変化によって生じる変化、バイファーケーションを表した図をバイファーケーション・ダイアグラムbifurcation</description></item><item><title>非線形システムを解くためのニュートン法</title><link>https://freshrimpsushi.github.io/jp/posts/1005/</link><pubDate>Fri, 26 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1005/</guid><description>メソッド 1 $\mathbf{f} ( \mathbf{x} ) := \begin{bmatrix} f_{1}( \mathbf{x} ) \\ \vdots \\ f_{N} ( \mathbf{x} ) \end{bmatrix}$のような多変数関数 $\mathbf{f} : \mathbb{R}^{N} \to \mathbb{R}^{N}$が $\mathbf{f} \in C^{2} \left( N (</description></item><item><title>ディープラーニングにおけるドロップアウト</title><link>https://freshrimpsushi.github.io/jp/posts/1004/</link><pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1004/</guid><description>定義 ドロップアウトdropoutは、人工ニューラルネットワークのニューロンを確率的に使用しないことで過学習を防ぐ技術だ。 説明 一見するとちょっ</description></item><item><title>Rでヤコビ行列とヘシアン行列を計算する方法</title><link>https://freshrimpsushi.github.io/jp/posts/994/</link><pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/994/</guid><description>コード Rでヤコビ行列とヘッセ行列を計算するためには、numDerivパッケージのjacobian()関数とhessian()関数を使う。 install.packages(&amp;#34;numDeriv&amp;#34;) library(numDeriv)</description></item><item><title>ディープラーニングにおけるソフトマックス関数</title><link>https://freshrimpsushi.github.io/jp/posts/993/</link><pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/993/</guid><description>定義 $\mathbf{x} := (x_{1} , \cdots , x_{n}) \in \mathbb{R}^{n}$ としよう。 $\displaystyle \sigma_{j} ( \mathbf{x} ) = {{ e^{x_{j}} } \over {\sum_{i=1}^{n} e^{x_{i}} }}$ に対して、$\sigma ( \mathbf{x} ) := \left( \sigma_{1} (\mathbf{x}) , \cdots , \sigma_{n} (\mathbf{x} ) \right)$のように定義され</description></item><item><title>ヘシアン行列とは何か？</title><link>https://freshrimpsushi.github.io/jp/posts/992/</link><pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/992/</guid><description>定義 $D \subset \mathbb{R}^{n}$ で定義された多変数スカラ関数 $f : D \to \mathbb{R}$ に対して、次のような行列 $H \in \mathbb{R}^{n \times n}$ を $f$ のヘッセ行列と呼ぶ。 $$ H := \begin{bmatrix} {{\partial^2 f } \over {\partial x_{1}^2 }} &amp;amp; \cdots &amp;amp; {{\partial^2 f }</description></item><item><title>ディープラーニングにおける活性化関数</title><link>https://freshrimpsushi.github.io/jp/posts/991/</link><pubDate>Fri, 19 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/991/</guid><description>定義 実際の生物の閾値を模倣した非線形関数を活性化関数activation functionと言う。 数学的定義 ディープラーニングでは非線形スカラ</description></item><item><title>ディープラーニングとは？</title><link>https://freshrimpsushi.github.io/jp/posts/996/</link><pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/996/</guid><description>定義 ディープラーニングは、人工神経網を使用した機械学習の一種で、特に人工神経網を構成する際に複数のレイヤーを使用する技術を言います。 モチベー</description></item><item><title>ヤコビ行列あるいはジャコビ行列とは</title><link>https://freshrimpsushi.github.io/jp/posts/989/</link><pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/989/</guid><description>定義 $D \subset \mathbb{R}^{n}$で定義された多変数ベクトル関数 $\mathbf{f} : D \to \mathbb{R}^{m}$が各スカラー関数 $f_{1} , \cdots , f_{m} : D \to \</description></item><item><title>シュワルツシルトの微分</title><link>https://freshrimpsushi.github.io/jp/posts/1047/</link><pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1047/</guid><description>定義1 $p$を滑らかなマップ$f : \mathbb{R} \to \mathbb{R}$の固定点または周期点とする。 $f ' (c) = 0$である$c$を$f$のクリティカルポイン</description></item><item><title>機械学習における勾配降下法と確率的勾配降下法</title><link>https://freshrimpsushi.github.io/jp/posts/987/</link><pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/987/</guid><description>概要 損失関数の勾配を利用して損失関数の極小値を見つけるアルゴリズムの中でもっとも単純な方法として 勾配降下法gradient Descent Algorith</description></item><item><title>Rでの複素数の使い方</title><link>https://freshrimpsushi.github.io/jp/posts/981/</link><pubDate>Tue, 16 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/981/</guid><description>概要 Rには複素数データ型が実装されている。わざわざ自分で実装する必要はなく、そのまま使えばいい。四則演算はもちろん、複素数を扱う上で欠かせな</description></item><item><title>Rでの定積分の計算方法</title><link>https://freshrimpsushi.github.io/jp/posts/977/</link><pubDate>Sun, 14 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/977/</guid><description>概要 Rで定積分を求めるには、integrate()関数を使える。例えば、 コード $\displaystyle \int_{0}^{3} \left( x^2 + 4x + 1 \right) dx$ と $\displaystyle \int_{0}^{\infty} e^{-x} dx$ は以下のように求めることができる</description></item><item><title>ミューラー法</title><link>https://freshrimpsushi.github.io/jp/posts/976/</link><pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/976/</guid><description>メソッド $f (\alpha) = 0$ としよう。初期値 $x_{0} , x_{1} , x_{2}$ と $$ w_{n} := f [x_{n} , x_{n-1} ] + f [ x_{n} , x_{n-2} ] - f [ x_{n-2} , x_{n-1} ] $$ によって、 $$ x_{n+1} : = x_{n} - {{ 2 f ( x_{n} ) } \over { w_{n} \pm \sqrt{ w_{n}^{2} -</description></item><item><title>Rで微分係数を計算する方法</title><link>https://freshrimpsushi.github.io/jp/posts/971/</link><pubDate>Fri, 12 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/971/</guid><description>概要 Rで微分係数を求めるためには、numDerivパッケージのgrad()関数を使用できる。 コード 例えば、$f(x) = x^2 + 4x + 1$と$g(x</description></item><item><title>スカラー関数とベクトル値関数</title><link>https://freshrimpsushi.github.io/jp/posts/970/</link><pubDate>Thu, 11 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/970/</guid><description>定義 集合 $D$ を $n$次元のユークリッド空間の部分集合 $D\subset \mathbb{R}^{n}$ とする。 $D$ を定義域とする関数を多変数関数function of several variablesと呼ぶ。</description></item><item><title>カオス理論における共役マップ</title><link>https://freshrimpsushi.github.io/jp/posts/968/</link><pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/968/</guid><description>概要 カオス理論では、マップの共役は一種のアイソメトリ、アイソモルフィズムと似ており、実際にはもっと一般的な動的な文脈でホメオモルフィズムその</description></item><item><title>機械学習における損失関数</title><link>https://freshrimpsushi.github.io/jp/posts/967/</link><pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/967/</guid><description>定義 データ$Y = \begin{bmatrix} y_{1} \\ \vdots \\ y_{n} \end{bmatrix}$の推定値が$\widehat{Y} = \begin{bmatrix} \widehat{ y_{1} } \\ \vdots \\ \widehat{y_{n}} \end{bmatrix}$とし</description></item><item><title>ロジスティックファミリー</title><link>https://freshrimpsushi.github.io/jp/posts/860/</link><pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/860/</guid><description>定義 1 $a \ge 0$に関して、$g_{a} (x) = a x ( 1 - x )$をロジスティックマップlogistic Mapと呼び、$\left\{ g_{a} \mid a &amp;gt; 0 \ri</description></item><item><title>数学におけるグラフとネットワーク</title><link>https://freshrimpsushi.github.io/jp/posts/966/</link><pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/966/</guid><description>定義1 頂点とそれらを結ぶ線から成る集合をグラフまたはネットワークと呼ぶ。頂点の集合を$V$、線の集合を$E$としよう。 $V(G) := V$の要素を$G$</description></item><item><title>인공 신경망이란?</title><link>https://freshrimpsushi.github.io/jp/posts/962/</link><pubDate>Sat, 06 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/962/</guid><description>定義 現実の生物の神経系を模倣したネットワークを人工ニューラルネットワークartificial neural network (ANN)と呼ぶ。 数学的定義 スカラー関数 $\sigma :</description></item><item><title>シャルコフスキーの定理</title><link>https://freshrimpsushi.github.io/jp/posts/1022/</link><pubDate>Sat, 06 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1022/</guid><description>定理 1 $$ 3 \prec 5 \prec 7 \prec 9 \prec \cdots \prec \\ 2\cdot 3 \prec 2 \cdot 5 \prec \cdots \prec \\ 2^2 3 \prec 2^2 5 \prec \cdots \prec \\ 2^3 3 \prec 2^3 5^2 \prec \cdots \prec \\ 2^3 \prec 2^2 \prec 2^1 \prec 2^0 $$ 推移的関係 $\prec$ に対して上記のような順序を</description></item><item><title>李-楊の定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/1017/</link><pubDate>Fri, 05 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/1017/</guid><description>定理 連続マップ $f: [a,b] \to [a,b]$ の周期-$3$ 軌道が存在する場合、$f$ はカオティックであることになる。 説明 リ-ヨーク定理li-Yorke theore</description></item><item><title>1次元マップのカオス</title><link>https://freshrimpsushi.github.io/jp/posts/864/</link><pubDate>Thu, 04 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/864/</guid><description>定義 カオティック・オービット1 マップ $f : \mathbb{R} \to \mathbb{R}$ のバウンデッド・オービットが以下の条件を満たす場合、このオービットはカオティックと言われる。 (i)</description></item><item><title>WindowsでPythonのTensorFlowをインストールする方法</title><link>https://freshrimpsushi.github.io/jp/posts/958/</link><pubDate>Thu, 04 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/958/</guid><description>ガイド TensorFlowをインストールする際に問題が発生する場合は、通常Pythonが正しくインストールされていないためです。開始する前に</description></item><item><title>ウィーナープロセス</title><link>https://freshrimpsushi.github.io/jp/posts/957/</link><pubDate>Wed, 03 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/957/</guid><description>定義 $s&amp;lt; t &amp;lt; t+u$ とした時、以下の条件を満たす確率過程 $\left\{ W_{t} \right\}$ をウィーナー過程と呼ぶ。 (i): $W_{0} = 0$ (ii): $\left( W_{t+u} - W_{t} \right) \perp W_{s}$ (iii): $\left( W_{t+u} - W_{t} \right) \sim N ( 0, u )$ (iv): $W_{t}$ のサンプル</description></item><item><title>一次元マップのリアプノフ指数</title><link>https://freshrimpsushi.github.io/jp/posts/862/</link><pubDate>Wed, 03 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/862/</guid><description>定義1 スムースな$1$次元マップ$f : \mathbb{R} \to \mathbb{R}$の一つのオービット$\left\{ x_{1} , x_{2} , x_{3} , \cdots \right\}$が与えられ</description></item><item><title>セミプライム</title><link>https://freshrimpsushi.github.io/jp/posts/950/</link><pubDate>Tue, 02 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/950/</guid><description>定義 二つの素数の積を半素数semiprimeと呼ぶ。 説明 半素数の例として$4 = 2 \cdot 2$や$21 = 3 \cdot 7$、$673703 = 719 \cdot 937$などが</description></item><item><title>マップシステムのオービット</title><link>https://freshrimpsushi.github.io/jp/posts/858/</link><pubDate>Tue, 02 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/858/</guid><description>定義1 マップ $f : X \to X$ と $p \in X$ に対して $f^{k} (p) = p$ を満たす最小の自然数を $k \in \mathbb{N}$ としよう。 マップ $f : X \to X$ と点 $x \in X$ に対して、$f$ の下での集合 $\left\{</description></item><item><title>1次元マップのシンクとソースの同定法</title><link>https://freshrimpsushi.github.io/jp/posts/999/</link><pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/999/</guid><description>定理1 スムーズなマップ $f : \mathbb{R} \to \mathbb{R}$ に対して、ある $p \in \mathbb{R}$ が 固定点 だとしよう。 [1] $| f ' (p) | &amp;lt; 1$ の場合、$p$ はシンクだ。 [2] $| f ' (p) | &amp;gt; 1$ の場合、$</description></item><item><title>ハルケ・ベラ検定</title><link>https://freshrimpsushi.github.io/jp/posts/949/</link><pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/949/</guid><description>仮説検定 量的データ $\left\{ x_{i} \right\}_{i = 1}^{n}$ が与えられたとする。 $H_{0}$: データ$\left\{ x_{i} \right\}_{i = 1}^{n}$は正規分布に従う。 $H_{1}$: データ$\left\{ x_{i} \right\}_{i =</description></item><item><title>バナッハの不動点定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/948/</link><pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/948/</guid><description>定義 $(X, \left\| \cdot \right\|)$をバナッハ空間としよう。全ての$x, \tilde{x} \in X$と$0 \le r &amp;lt; 1$に対して$\| T(x) - T ( \tilde{x} ) \| \le r \| x - \tilde{x} \|$を満</description></item><item><title>Rで現在のOS情報を確認する方法</title><link>https://freshrimpsushi.github.io/jp/posts/947/</link><pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/947/</guid><description>概要 Rは色々な理由でLinuxでもよく使われている。特にビッグデータを扱うためにハドゥープを使う場合などがある。 当然、WindowsでもLi</description></item><item><title>対数の底の変換公式の導出</title><link>https://freshrimpsushi.github.io/jp/posts/944/</link><pubDate>Thu, 28 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/944/</guid><description>公式 任意の正数 $c&amp;gt;0$ に対して、 $$ \log_{a} b = {{ \log_{c} b } \over { \log_{c} a }} $$ 説明 現代において、公式自体の意味はなくなったが、入試ではまだ重要な公式である。簡単な性</description></item><item><title>確率過程のインクリメント</title><link>https://freshrimpsushi.github.io/jp/posts/943/</link><pubDate>Wed, 27 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/943/</guid><description>定義 確率過程 $\xi (t)$ が時間 $T$ で定義されて、$t_{0} &amp;lt; t_{1} &amp;lt; \cdots &amp;lt; t_{n} \in T$ としよう。 $\xi ( t ) - \xi ( s )$ をインクリメントという。 すべての $i=1, \cdots , n$ に対し</description></item><item><title>離散対数問題が容易に解決される条件</title><link>https://freshrimpsushi.github.io/jp/posts/942/</link><pubDate>Tue, 26 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/942/</guid><description>要旨 1 グループ $G = F_{p}$ の要素 $g$ がオーダー $N$ であるとしよう。すると、離散対数問題 $g^{x} = h$ は、次の条件下では比較的簡単に解かれることになる。 (i): $p$ がス</description></item><item><title>アリマモデル</title><link>https://freshrimpsushi.github.io/jp/posts/941/</link><pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/941/</guid><description>モデル 1 白色雑音 $\left\{ e_{t} \right\}_{t \in \mathbb{N}}$ について、 $$ \nabla^{d} Y_{t} := \sum_{i = 1}^{p} \phi_{i} \nabla^{d} Y_{t-i} + e_{t} - \sum_{i = 1}^{q} \theta_{i} e_{t-i} $$ のように定義された $\left\{ Y_{t} \right\}_{ t \in \mathbb{N} }$ を $(p,d,q)$次のアリマ過程</description></item><item><title>セカント法</title><link>https://freshrimpsushi.github.io/jp/posts/682/</link><pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/682/</guid><description>メソッド $f,f&amp;rsquo;,f&amp;rsquo;&amp;rsquo;$ が $\alpha$ の近傍で連続であり、$f(\alpha) = 0, f '(\alpha) \ne 0$ とする。 $\alpha$ に十分近い初期値 $x_{0} , x_{1}$ に対して $$ x_{n+1} := x_{n} - f ( x_{n} ) {{ x_{n} - x_{n-1} } \over { f</description></item><item><title>ポラード・ロー アルゴリズムの証明</title><link>https://freshrimpsushi.github.io/jp/posts/940/</link><pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/940/</guid><description>アルゴリズム 群 $G$ の元 $g$ がオーダー $N = q_{1}^{r_{1}} q_{2}^{r_{2}} \cdots q_{t}^{r_{t}}$ だとしよう。そうすると、離散対数問題 $g^{x} = h$ は、以下のアルゴリズムに従って、多くても $\displaystyle O \left( \sum_{i=1}^{t} S_{q_{i}^{r_{i}}} + \log</description></item><item><title>数値解析学における階差段</title><link>https://freshrimpsushi.github.io/jp/posts/969/</link><pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/969/</guid><description>定義 関数 $f : \mathbb{R} \to \mathbb{R}$ に対して異なる $x_{1} , \cdots , x_{n}$ における 区分差分divided Differenceは以下のように定義される。 $$ \begin{align*} f[x_{0}] :=&amp;amp; f( x_{0} ) \\ f [ x_{0}</description></item><item><title>シャピロ-ウィルク検定</title><link>https://freshrimpsushi.github.io/jp/posts/939/</link><pubDate>Sat, 23 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/939/</guid><description>仮説検定 定量データ$\left\{ x_{i} \right\}_{i = 1}^{n}$が与えられているとする。 $H_{0}$: データ$\left\{ x_{i} \right\}_{i = 1}^{n}$は正規分布に従う。</description></item><item><title>ニュートン-ラプソン法</title><link>https://freshrimpsushi.github.io/jp/posts/678/</link><pubDate>Sat, 23 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/678/</guid><description>メソッド 1 $f,f&amp;rsquo;,f&amp;rsquo;&amp;rsquo;$が$\alpha$の近くで連続であり、$f(\alpha) = 0, f '(\alpha) \ne 0$と</description></item><item><title>二分法</title><link>https://freshrimpsushi.github.io/jp/posts/676/</link><pubDate>Fri, 22 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/676/</guid><description>メソッド 1 閉区間$[a,b]$で定義された連続関数 $f$ が $f(a) f(b) &amp;lt; 0$ と等しいとする。許容誤差は $\varepsilon$ である。$f(c) = 0$ を満たす $c \in [a,b]$ は以下のように</description></item><item><title>時系列分析における変換</title><link>https://freshrimpsushi.github.io/jp/posts/938/</link><pubDate>Fri, 22 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/938/</guid><description>ビルドアップ 時系列では、時間が経つにつれて分散が大きくなる場合、それに伴う「ペナルティ」を与えて分散を一定にし、定常性を得るために変換が必要</description></item><item><title>スムーズ素数</title><link>https://freshrimpsushi.github.io/jp/posts/927/</link><pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/927/</guid><description>定義 素数$p$が多くの約数を持っている場合、$(p-1)$であれば$p$をスムースな素数と言う。 $B$以下の素数の積で表される数を**$B$</description></item><item><title>数値解析における収束率</title><link>https://freshrimpsushi.github.io/jp/posts/674/</link><pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/674/</guid><description>定義 1 数列 $\left\{ x_{n} \right\}$ が $\alpha$ に収束し、$p \ge 1$ の次数orderに対して $$ | \alpha - x_{n+1} | \le c | \alpha - x_{n} | ^{p} $$ を満たす $c \ge 0$ が存在する場合、$\left\{ x_{n}</description></item><item><title>ショアのアルゴリズムの証明</title><link>https://freshrimpsushi.github.io/jp/posts/917/</link><pubDate>Tue, 19 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/917/</guid><description>アルゴリズム 1 単位元が$e$であるグループ$G$の元$g$が、オーダー$N$とする。それならば、離散対数問題$g^{x} = h$は次のアルゴリ</description></item><item><title>時系列分析における差分</title><link>https://freshrimpsushi.github.io/jp/posts/916/</link><pubDate>Mon, 18 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/916/</guid><description>定義 1 オペレーター $B$ を $B Y_{t} = Y_{t-1}$ のように定義し、バックシフトと呼ぶ。 オペレーター $\nabla$ を $\nabla := 1 - B$ および $\nabla^{r+1} = \nabla \left( \nabla^{r} Y_{t} \right)$ のように定義し、差分と呼ぶ。</description></item><item><title>エルガマル公開鍵暗号方式の証明</title><link>https://freshrimpsushi.github.io/jp/posts/915/</link><pubDate>Sun, 17 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/915/</guid><description>ビルドアップ 左から順に、アリス、ボブ、イブとしよう。アリスとボブはメッセージを交換する当事者で、イブはメッセージに興味を持つ消極的な攻撃者だ</description></item><item><title>自己回帰移動平均モデル</title><link>https://freshrimpsushi.github.io/jp/posts/914/</link><pubDate>Sat, 16 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/914/</guid><description>モデル 1 白色雑音 $\left\{ e_{t} \right\}_{t \in \mathbb{N}}$ について $$ Y_{t} := \phi_{1} Y_{t-1} + \phi_{2} Y_{t-2} + \cdots + \phi_{p} Y_{t-p} +e_{t} - \theta_{1} e_{t-1} - \theta_{2} e_{t-2} - \cdots - \theta_{q} e_{t-q} $$ として定義される、$(p,q)$次の自己回帰移動平均過</description></item><item><title>ディフィー・ヘルマン鍵交換アルゴリズムの証明</title><link>https://freshrimpsushi.github.io/jp/posts/912/</link><pubDate>Fri, 15 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/912/</guid><description>ビルドアップ 左から順に、アリス、ボブ、イヴと呼ぼう。アリスとボブはメッセージを送受信する当事者で、イヴはメッセージに関心がある受動的攻撃者だ</description></item><item><title>UbuntuでRをインストールする方法</title><link>https://freshrimpsushi.github.io/jp/posts/946/</link><pubDate>Thu, 14 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/946/</guid><description>ガイド ステップ 1. Ctrl+Alt+T を押してコンソール窓を開く。 ステップ 2. コンソール窓に以下のように入力する。 sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 管理者権限が必要であるため、ユーザ</description></item><item><title>自己回帰過程</title><link>https://freshrimpsushi.github.io/jp/posts/910/</link><pubDate>Thu, 14 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/910/</guid><description>モデル 1 白色雑音 $\left\{ e_{t} \right\}_{t \in \mathbb{N}}$ について、$Y_{t} := \phi_{1} Y_{t-1} + \phi_{2} Y_{t-2} + \cdots + \phi_{p} Y_{t-p} + e_{t}$ として定義される $\left\{ Y_{t} \right\}_{ t \in \mathbb{N} }$ を $p$次の自己回帰過程 $AR(p)$ と呼ぶ。 (1):</description></item><item><title>離散対数</title><link>https://freshrimpsushi.github.io/jp/posts/911/</link><pubDate>Wed, 13 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/911/</guid><description>定義 1 素数 $p$ について、ガロア体 $\mathbb{F}_{p} := \mathbb{Z} / p \mathbb{Z}$ の恒等元が $0$ だとしよう。 $\mathbb{F}_{p}$ の原始根 $g \ne 0$ に関して、巡回群 $\mathbb{F}_{p} ^{ \ast } := \mathbb{F}_{p} \setminus \left\{ 0 \right\} = \left&amp;lt; g \right&amp;gt;$ 上で定義された</description></item><item><title>移動平均過程</title><link>https://freshrimpsushi.github.io/jp/posts/909/</link><pubDate>Tue, 12 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/909/</guid><description>モデル 1 白色雑音 $\left\{ e_{t} \right\}_{t \in \mathbb{N}}$ について$Y_{t} := e_{t} - \theta_{1} e_{t-1} - \theta_{2} e_{t-2} - \cdots - \theta_{q} e_{t-q}$と同様に定義された$\left\{ Y_{t} \right\}_{ t \in \mathbb{N} }$を**</description></item><item><title>暗号理論における暗号化と復号화</title><link>https://freshrimpsushi.github.io/jp/posts/908/</link><pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/908/</guid><description>ビルドアップ アリスがボブに伝えたいメッセージがあるとしよう。この世に二人しかいなければ、このメッセージは二人だけのもので、隠す必要はない。[</description></item><item><title>時系列分析における安定性</title><link>https://freshrimpsushi.github.io/jp/posts/907/</link><pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/907/</guid><description>定義 1 時系列データの平均と分散が時間に関して一定の時、定常性stationarityを持つと言われる。 説明 普通の正常ではなく、定常性定常だ。</description></item><item><title>Rでグラフの軸ラベルに下付き文字を追加する</title><link>https://freshrimpsushi.github.io/jp/posts/905/</link><pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/905/</guid><description>コード Rでは、変数名にアンダースコア _を入れることが許可されているが、グラフにそのように表示すると、可読性が大きく落ちる。expressio</description></item><item><title>時系列分析におけるホワイトノイズ</title><link>https://freshrimpsushi.github.io/jp/posts/904/</link><pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/904/</guid><description>定義 1 iid (同一分布による独立変数)の確率変数 $e_{t}$ の数列 $\left\{ e_{t} \right\}_{t = 1}^{\infty}$ を ホワイトノイズwhite noiseと呼ぶ。 iidは、independent identically</description></item><item><title>指数分布によるポアソン過程の定義</title><link>https://freshrimpsushi.github.io/jp/posts/903/</link><pubDate>Thu, 07 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/903/</guid><description>定義 $\tau_{1} , \tau_{2} , \cdots \sim \text{exp} ( \lambda )$ と定義しよう。 $\lambda$ を 強度と呼ぶ。 2. $\displaystyle s_{n}:= \sum_{k=1}^{n} \tau_{k}$ を 到達時間という。 3. $N_{t}:= \begin{cases} 0 , &amp;amp; 0 \le t &amp;lt; s_{1} \\ k , &amp;amp; s_{k} \le t &amp;lt; s_{k+1} \end{cases}$ のように定義され</description></item><item><title>ヒドゥン・マルコフ連鎖</title><link>https://freshrimpsushi.github.io/jp/posts/901/</link><pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/901/</guid><description>ビルドアップ 上の図のように、一定の時間ごとに何かを生産する機械を想像してみよう。緑が正常な良品$1$で、赤が廃棄すべき不良品$0$であるとす</description></item><item><title>時系列分析</title><link>https://freshrimpsushi.github.io/jp/posts/900/</link><pubDate>Mon, 04 Mar 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/900/</guid><description>説明 時系列time series とは、簡単に言うと、実際のデータから得られる確率過程と見ることができる。株価指数は時間が経つにつれて不確実性を持ち、その</description></item><item><title>ギャンブラーの破産問題</title><link>https://freshrimpsushi.github.io/jp/posts/893/</link><pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/893/</guid><description>問題 ギャンブラーの破産問題は、二人のプレイヤーが限られたお金を賭け、どちらかが破産するまで繰り返されるゲームを想定したランダムウォークの一種</description></item><item><title>ガロア理論</title><link>https://freshrimpsushi.github.io/jp/posts/891/</link><pubDate>Wed, 27 Feb 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/891/</guid><description>定理 1 $K$ を $F$ のガロア拡大体で、群は $F \le E \le K$ だとする。$E$ を固定する $G ( K / F )$ の部分群を $\lambda (E)$ と表記しよう。すると、写像 $\lambda$ は、$F$ と $K$ の</description></item><item><title>ROC曲線のAUCを利用してモデルを比較する方法</title><link>https://freshrimpsushi.github.io/jp/posts/887/</link><pubDate>Tue, 26 Feb 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/887/</guid><description>概要 ROC曲線は基本的に四角形$[0,1]^2$をいっぱいにするほどよく、曲線の左上の折れる点が$(0,1)$に近いほどよい。 説明 上の二つの</description></item><item><title>ペル方程式</title><link>https://freshrimpsushi.github.io/jp/posts/885/</link><pubDate>Mon, 25 Feb 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/885/</guid><description>ビルドアップ $a_{n} : = n^2$を正方形の数square numberと言う。 $\displaystyle b_{m} : = {{ m ( m + 1 ) } \over {2}}$を三角数triangular num</description></item><item><title>ROCカーブを使用して最適なカットオフを見つける方法</title><link>https://freshrimpsushi.github.io/jp/posts/877/</link><pubDate>Sun, 24 Feb 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/877/</guid><description>概要 ROC曲線を描くことで、トレーニングデータを使って得たモデルがテストデータをどれだけよく説明しているか一目で把握できるため、非常に有用だ</description></item><item><title>根を含む分数の有理化を素早くする方法</title><link>https://freshrimpsushi.github.io/jp/posts/874/</link><pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/874/</guid><description>数式 $$ {{ x } \over { \sqrt{a} \pm \sqrt{b} }} = {{ x \left( \sqrt{a} \mp \sqrt{b} \right) } \over { a - b }} $$ 説明 分数の有理化は概念的には簡単だが、分子と分母に複雑な項を掛けて整理するところで計</description></item><item><title>一般化されたランダムウォーク</title><link>https://freshrimpsushi.github.io/jp/posts/870/</link><pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/870/</guid><description>定義 確率過程 $\left\{ X_{n} \right\}$ の状態空間が整数の集合 $\left\{ \cdots , -2 , -1, 0 , 1 , 2 , \cdots \right\}$ で、状態 $0$ から始まるとする。次のステップで $1$ だけ減少する確率が$p$、$</description></item><item><title>RでROC曲線を描く方法</title><link>https://freshrimpsushi.github.io/jp/posts/868/</link><pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/868/</guid><description>定義 エラーマトリックスのFalse Positive RateとTrue Positive Rateをそれぞれ軸にとって描かれた図をROC曲線Receiver Operating Characteristic curveとい</description></item><item><title>ローレンツ・アトラクター</title><link>https://freshrimpsushi.github.io/jp/posts/867/</link><pubDate>Tue, 19 Feb 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/867/</guid><description>概要 ローレンツ方程式lorenz equationとは、大気の対流を連立常微分方程式によって表現する数学的モデルである。 システム $$ \begin{align*} {{dx} \over {dt}} =&amp;amp; -</description></item><item><title>交差検証</title><link>https://freshrimpsushi.github.io/jp/posts/866/</link><pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/866/</guid><description>モデル検証 データ分析から得られたモデルが適切なパフォーマンスを有しているかを確認する過程が必要だ。与えられたデータだけをうまく説明して、実際</description></item><item><title>ガロア体</title><link>https://freshrimpsushi.github.io/jp/posts/820/</link><pubDate>Sat, 16 Feb 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/820/</guid><description>定理 1 素数 $p$ と 自然数 $n$ に対して、基数が $p^{n}$ の 有限 体有限体を $p^{n}$ 次のガロア体ガロア体と定義し、$\text{GF} \left( p^{n} \right)$ のように表す。有限体はガロ</description></item><item><title>遷移確率の極限</title><link>https://freshrimpsushi.github.io/jp/posts/863/</link><pubDate>Sat, 16 Feb 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/863/</guid><description>定義 現在の状態が$i$の時、$k$ステップを経て$j$に行く遷移確率を$p_{ij}^{(k)}$とする時、無限のステップ後の遷移確率を以下</description></item><item><title>スケーラブルな分割可能体</title><link>https://freshrimpsushi.github.io/jp/posts/890/</link><pubDate>Thu, 14 Feb 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/890/</guid><description>定義 1 $E$を$F$の拡張体とする。 $E$から部分体$\overline{F}$への同型写像の中で、定まった$F$を保つ同型写像の数を$F$</description></item><item><title>確率過程における状態の種類</title><link>https://freshrimpsushi.github.io/jp/posts/861/</link><pubDate>Thu, 14 Feb 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/861/</guid><description>定義 状態空間が可算集合である確率過程 $\left\{ X_{t} \right\}$ が与えられているとする。$i,j$ をステート、$p_{ij}$を遷移確率と呼ぶ。 $p_{ij}^{ ( n ) } &amp;gt; 0$ を満</description></item><item><title>チャップマン-コルモゴロフ方程式の導出</title><link>https://freshrimpsushi.github.io/jp/posts/47/</link><pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/47/</guid><description>要点 確率過程の遷移確率 $p_{ij}^{(n)}$, $p_{ij}(t)$と遷移確率行列 $P^{(n)}$, $P(t)$について、以下の方程式が成り立つ。 離散確率過程 $$ \begin{align*} p_{ ij }^{ (n+m) } =&amp;amp; \sum _{</description></item><item><title>一階常微分方程式の初期値問題に対する解の存在性と一意性</title><link>https://freshrimpsushi.github.io/jp/posts/892/</link><pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/892/</guid><description>定理1 $E$が$\mathbb{R}^{n}$で開集合であり、$f \in C^{1} (E)$と$\phi_{0} \in E$に関する以下のような初期値問題が与え</description></item><item><title>ピカールの方法</title><link>https://freshrimpsushi.github.io/jp/posts/881/</link><pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/881/</guid><description>定理1 $E$が$\mathbb{R}^{n}$でオープンであり、$f \in C^{1} (E)$に関して以下のような初期値問題が与えられているとしよう。 $$ \begin{cases}</description></item><item><title>局所リプシッツ条件</title><link>https://freshrimpsushi.github.io/jp/posts/875/</link><pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/875/</guid><description>定義 $E$が$\mathbb{R}^{n}$でオープンであり、$\mathbf{f} : E \to \mathbb{R}^{n}$としよう。全ての$\</description></item><item><title>離散マルコフ連鎖</title><link>https://freshrimpsushi.github.io/jp/posts/859/</link><pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/859/</guid><description>定義 状態空間が可算集合で、次を満たす離散的確率過程 $\left\{ X_{n} \right\}$ を 離散マルコフ連鎖dTMC または簡単に マルコフ連鎖markov Chain, MCと言う。 $$ p \left( X_{n+1}</description></item><item><title>確率過程とは何か？</title><link>https://freshrimpsushi.github.io/jp/posts/857/</link><pubDate>Sun, 10 Feb 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/857/</guid><description>定義 確率変数 $X: \Omega \to E$ の値域を状態空間という。 確率変数の集合 $\left\{ X_{t} \mid t \in [ 0 , \infty ) \right\}$ を連続的確率過程という。 確率変数の数列 $\left\{ X_{n} \mid n = 0, 1, 2, \cdots \right\}$ を</description></item><item><title>地図で表される動力学系と不動点</title><link>https://freshrimpsushi.github.io/jp/posts/856/</link><pubDate>Sat, 09 Feb 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/856/</guid><description>定義1 定義域と値域が同じ関数$f : X \to X$をマップと言う。$f$を$k$回合成したマップを$f^{k}$と表す。 $f(p) = p$を満たす$p \in X$を</description></item><item><title>ホスマー・レメショー適合度検定</title><link>https://freshrimpsushi.github.io/jp/posts/852/</link><pubDate>Fri, 08 Feb 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/852/</guid><description>仮設検定 ロジスティック回帰分析で得られたモデルを$M$としよう。 $H_{0}$：$M$は適切だ。 $H_{1}$：$M$は適切ではない。 説明 ホ</description></item><item><title>最小分割体</title><link>https://freshrimpsushi.github.io/jp/posts/851/</link><pubDate>Thu, 07 Feb 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/851/</guid><description>定義 1 $F \le E$としよう。 $f(x) \in F [ x ]$が$E [ x ]$の一次項に因数分解される場合、$f(x)$が$E$で分割されるという。 $\left\{ f_{i} (x) \mid i \in I \right\} \subset</description></item><item><title>Rでのロジスティック回帰分析結果の見方</title><link>https://freshrimpsushi.github.io/jp/posts/850/</link><pubDate>Wed, 06 Feb 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/850/</guid><description>実践 内蔵データ turnoutデータを読み込んでみよう。 turnoutは1992年のアメリカ総選挙に関するデータで、race（人種）、age（</description></item><item><title>体の自己同型写像</title><link>https://freshrimpsushi.github.io/jp/posts/843/</link><pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/843/</guid><description>定義 1 $E$ を $F$ の拡大体とする。 体 $E$ に対する同型写像 $\sigma : E \to E$ を自己同型automorphismと呼び、$E$ の自己同型の集合を $\text{Auto} (E)$ と表す。 $\sigma \in</description></item><item><title>Rで2つの配列の要素を比較하기</title><link>https://freshrimpsushi.github.io/jp/posts/842/</link><pubDate>Mon, 04 Feb 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/842/</guid><description>概要 Rはデータの形や構造よりも内容に興味が強い分野でよく使われるため、その比較も便利だ。 包含関係 (全く重要ではないが、例でAは三角数$\di</description></item><item><title>共軛同型写像定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/841/</link><pubDate>Sun, 03 Feb 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/841/</guid><description>定義 1 体 $F$ 上で$\alpha$が代数的だとしよう。 最大項の係数が$1$で$p( \alpha ) = 0$を満たす$p(x) \in F [ x ]$を**$F$上での$\</description></item><item><title>Rでのデータフレームの列と行の名前の変更</title><link>https://freshrimpsushi.github.io/jp/posts/840/</link><pubDate>Sat, 02 Feb 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/840/</guid><description>概要 Rでデータフレームを使って複雑なコードを書いていると、デフォルトで決まった列の名前がわかりにくくなって変えなければならない状況がある。 names()</description></item><item><title>ユークリッド幾何学</title><link>https://freshrimpsushi.github.io/jp/posts/838/</link><pubDate>Fri, 01 Feb 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/838/</guid><description>定義 1 整域 $D$ において次の二つの条件を満たすユークリッドノルムeuclidean Norm $\nu : D \setminus \left\{ 0 \right\} \to \mathbb{N}_{0}$ が存在すれば、$D$ をユークリッド整域とい</description></item><item><title>ロジスティック回帰分析</title><link>https://freshrimpsushi.github.io/jp/posts/832/</link><pubDate>Thu, 31 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/832/</guid><description>ビルドアップ $Y \gets X_{1} , \cdots, X_{p}$ をやってみようと思う。ここで、$Y$ は質的変数で、中でもクラスが2つしかない場合がある。例えば、男性と女性、成功と失</description></item><item><title>一意因数分解整域</title><link>https://freshrimpsushi.github.io/jp/posts/827/</link><pubDate>Wed, 30 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/827/</guid><description>定義 1 整域 $D$ の$0$でもなく単元もない全ての要素に対して有限素因数分解が一意に存在する場合、$D$を一意素因数分解整域uFDという。 一意素因</description></item><item><title>統計分析における変数選択基準</title><link>https://freshrimpsushi.github.io/jp/posts/826/</link><pubDate>Tue, 29 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/826/</guid><description>概要 変数を選択する問題は、必然的に分析者の主観が介入するが、できる限り客観的な結論を導けるよう数値的指標が必要だった。そのような値を計算でき</description></item><item><title>主イデアル整域</title><link>https://freshrimpsushi.github.io/jp/posts/825/</link><pubDate>Mon, 28 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/825/</guid><description>定義 1 整域 $D$ の $p \ne 0$ が 単元 ではないとする。 PID $D$ のすべての イデアルが 主イデアル である場合、$D$ を principal ideal domainpID という。 副定義 可換環 $R$ が 単位元 $1$ を持つ</description></item><item><title>3で割ったときの余りが1になる素数の必要十分条件</title><link>https://freshrimpsushi.github.io/jp/posts/824/</link><pubDate>Sun, 27 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/824/</guid><description>定理 $p \ne 3$ が素数だとしよう。 $p \equiv 1 \pmod{3}$ $\iff$ ある$a,b \in \mathbb{Z}$に対して $p = a^2 - ab + b^2$ 説明 $p=3$は除外されているけど、実際には</description></item><item><title>脳の脳室拡大</title><link>https://freshrimpsushi.github.io/jp/posts/823/</link><pubDate>Sat, 26 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/823/</guid><description>定義 $N$ を環としよう。 $N$ のイデアルたちが $S_{1} \le S_{2} \le \cdots$ を満たすとき、これを昇鎖ascending Chainという。 昇鎖 $\left\{ S_{i} \right\}_{i \in \mathbb{N} }$ に対して $S_{n} = S_{n+1} =</description></item><item><title>4で割ったときに余りが1になる素数の必要十分条件</title><link>https://freshrimpsushi.github.io/jp/posts/822/</link><pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/822/</guid><description>定理 $p \ne 2$ を 素数 だとしよう。 ある $a,b \in \mathbb{Z}$ について $p \equiv 1 \pmod{4}$ $\iff$ $p = a^2 + b^2$ 説明 $p=2$ は省いたが、実際には $ 2= 1^2 + 1^2$ だから、定理に含まれても問題ない。 例え</description></item><item><title>統計分析における変数選択手順</title><link>https://freshrimpsushi.github.io/jp/posts/821/</link><pubDate>Thu, 24 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/821/</guid><description>ビルドアップ 多重回帰分析 $Y \gets X_{1} , \cdots, X_{p}$ を行うとしよう。ここで、独立変数は $p$ 個で、回帰分析の様々な前提をよく満たしていて、多重共線性がなく、説明</description></item><item><title>LinuxでFortranをコンパイルした後のa.outの実行方法</title><link>https://freshrimpsushi.github.io/jp/posts/865/</link><pubDate>Wed, 23 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/865/</guid><description>ガイド 拡張子が .f90 のファイル example.f90 をコンパイルするには、コンソール画面で gfortran example.f90 と入力すればいい。コンパイル後、同じディレクトリに a.out というファイルが生</description></item><item><title>Rで主成分回帰分析を行う方法</title><link>https://freshrimpsushi.github.io/jp/posts/814/</link><pubDate>Tue, 22 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/814/</guid><description>概要 主成分回帰分析pCR は、主成分分析と多重回帰分析を組み合わせたもので、主成分分析によって得られた主成分を新しい独立変数として設定した回帰</description></item><item><title>固体物理학</title><link>https://freshrimpsushi.github.io/jp/posts/795/</link><pubDate>Tue, 22 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/795/</guid><description>ビルドアップ 環 $R$ のすべての要素 $r$ について $n \cdot r = 0$ を満たす最小の自然数 $n$ を $R$ の標数characteristicと定義する。そのような自然数が</description></item><item><title>古代の三大作図不可能問題の証明</title><link>https://freshrimpsushi.github.io/jp/posts/813/</link><pubDate>Mon, 21 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/813/</guid><description>定理 1 以下の3つの作図は不可能である。 [1] 円を正方形にする: 与えられた正方形と同じ面積の円を作図せよ。 [2] 立方体を倍にする: 与えられた立方体の体</description></item><item><title>統計学における主成分分析</title><link>https://freshrimpsushi.github.io/jp/posts/812/</link><pubDate>Sun, 20 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/812/</guid><description>概要 多重回帰分析 $Y \gets X_{1} , \cdots, X_{p}$ を行うとしよう。主成分分析、英語では PCA は、簡単に言えば量的変数が きちんと独立しているように 「再構成」して分析する</description></item><item><title>作図可能数</title><link>https://freshrimpsushi.github.io/jp/posts/811/</link><pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/811/</guid><description>定義 $1$を含む有限回の加法、減法、乗法、除法、および平方根を取る操作によって得られる数を作図可能constructibleという。 説明 作図</description></item><item><title>分散膨張因子 VIF</title><link>https://freshrimpsushi.github.io/jp/posts/810/</link><pubDate>Fri, 18 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/810/</guid><description>定義 1 多重回帰分析 $Y \gets X_{1} , \cdots, X_{p}$ を行うとき、$i$ 番目の独立変数に対する多重回帰係数を $R_{i}^2$ としよう。以下を$X_{i}$の分散膨張因子varia</description></item><item><title>抽象代数で表された代数学の基本定理</title><link>https://freshrimpsushi.github.io/jp/posts/809/</link><pubDate>Thu, 17 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/809/</guid><description>定義 1 体 $F$ の拡散体を$E$ としよう。 $F [ x ]$ の全ての多項式が$F$ でゼロを持つなら、$F$は 代数的に閉じているalgebraically Cl</description></item><item><title>ガウスの二次互逆法則の証明</title><link>https://freshrimpsushi.github.io/jp/posts/395/</link><pubDate>Wed, 16 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/395/</guid><description>統括 1 異なる２つの奇数素数 $p , q$ に対し、次が成り立つ。 (1): $$ \left( {{ q } \over { p }} \right) = \begin{cases} \left( {{ p } \over { q }} \right) &amp;amp; p \equiv 1 \pmod{4} \lor q \equiv 1 \pmod{4} \\ - \left( {{ p } \over { q }} \right)</description></item><item><title>多重共線性</title><link>https://freshrimpsushi.github.io/jp/posts/808/</link><pubDate>Wed, 16 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/808/</guid><description>定義 1 多重回帰分析 $Y \gets X_{1} , \cdots, X_{p}$ をするとしよう。このとき、独立変数 $ X_{1} , \cdots, X_{p}$ の中で独立変数同士が強い相関関係を持っている場合、多重共線性mul</description></item><item><title>オイラーの基準</title><link>https://freshrimpsushi.github.io/jp/posts/188/</link><pubDate>Tue, 15 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/188/</guid><description>定理 1 素数について $p \ne 2$ $$ a^{{p-1} \over {2}} \equiv \left( {a \over p} \right) \pmod{p} $$ 説明 これによると、$a$ が二次剰余か非二次剰余かを見たい場合は、ただ計算すればいい。もちろん</description></item><item><title>代数的拡大体</title><link>https://freshrimpsushi.github.io/jp/posts/807/</link><pubDate>Tue, 15 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/807/</guid><description>定義 1 $E$を$F$の拡大体とし、これを$n \in \mathbb{N}$とする。 $E$の全ての元が$F$上で代数的数であれば、$E$を$F$の代</description></item><item><title>ルジャンドル記号の乗法的性質の証明</title><link>https://freshrimpsushi.github.io/jp/posts/136/</link><pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/136/</guid><description>定義 QRとNRはそれぞれ二次剰余と二次非剰余を意味する。ルジャンドル記号legendre Symbolは、$p$より小さい自然数$a$に対し、</description></item><item><title>抽象代数学におけるベクトル空間</title><link>https://freshrimpsushi.github.io/jp/posts/806/</link><pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/806/</guid><description>定義 1 体 $F$ と アーベル群 $V$ のすべての $\alpha , \beta \in F$ と $x, y \in V$ が次の条件を満たすとき、$V$ を $F$ 上の ベクトル空間vector spaceと言う。$F$</description></item><item><title>二次剰余と非二次剰余</title><link>https://freshrimpsushi.github.io/jp/posts/137/</link><pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/137/</guid><description>定義 1 素数$p \ne 2$ および $a &amp;lt; p$ に関して、合同方程式 $x^{2} \equiv a \pmod{p}$ の解が存在すれば、$a$ を $p$ の二次剰余 QRと呼ぶ。$a$ が二次剰余でない場合は、非</description></item><item><title>非線形回帰分析：回帰分析における変数変換</title><link>https://freshrimpsushi.github.io/jp/posts/805/</link><pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/805/</guid><description>概要 1 回帰分析は基本的には変数間の線形関係を明らかにする方法だけど、必要ならデータを線形に「伸ばして」分析できる。これは本質的に従属変数を独</description></item><item><title>ミラー-ラビン素数判定法</title><link>https://freshrimpsushi.github.io/jp/posts/804/</link><pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/804/</guid><description>定理 1 奇数 $n,q$ を $n-1 = 2^{k} q$ のように表しよう。 $$ a \nmid n \\ a^{q} \not\equiv 1 \pmod{n} $$ そして全ての $i = 0, 1, \cdots , (k-1)$ に対して、 $$ a^{2^{i} q} \not\equiv -1 \pmod{n} $$ $ a$ が存在して上記を満たすなら</description></item><item><title>実数体から複素数体を作り出す代数的方法</title><link>https://freshrimpsushi.github.io/jp/posts/803/</link><pubDate>Fri, 11 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/803/</guid><description>定理 1 $$ \mathbb{R} [x ] / \left&amp;lt; x^2 + 1 \right&amp;gt; \simeq \mathbb{C} $$ 説明 事実だけを見れば明らかで、実数体から複素数体を作り出す過程は非常に美しい。 $\mathbb{R} [x ]$ を $\left&amp;lt; x^2 \right&amp;gt;$ に切るか $\left&amp;lt; x^2 + x</description></item><item><title>コセット判定法</title><link>https://freshrimpsushi.github.io/jp/posts/802/</link><pubDate>Thu, 10 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/802/</guid><description>概要 カーマイケル数であるかを判断する方法として、必要十分条件である点がまた役立つ定理だ。 定理 1 奇数の合成数を$n$とする。 $n$は、全ての素</description></item><item><title>シンプル拡大体</title><link>https://freshrimpsushi.github.io/jp/posts/801/</link><pubDate>Wed, 09 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/801/</guid><description>定義 1 $F$ の 拡大体 $E$ がある $\alpha \in E$ に対して $E = F( \alpha )$ ならば $E$ を $F$ の単純拡大体simple Extensionと呼ぶ。 説明 簡単に言えば、$F ( \alpha )$ は</description></item><item><title>原始元定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/800/</link><pubDate>Tue, 08 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/800/</guid><description>定義 1 $1 \le a \le p$が$\text{ord}_{p} (a) = p-1$を満たす場合、法$p$の原始根と定義される。 位数$\text{ord}_{p}</description></item><item><title>代数的な数と超越数</title><link>https://freshrimpsushi.github.io/jp/posts/799/</link><pubDate>Mon, 07 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/799/</guid><description>定義 1 体 $F$ の拡張体を $E$ としよう。定数関数ではない $f(x) \in F [ x ]$ について、$\alpha \in E$ が $f( \alpha ) = 0$ を満たす時、$F$ 上で代数的algebr</description></item><item><title>数論における位数</title><link>https://freshrimpsushi.github.io/jp/posts/798/</link><pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/798/</guid><description>定義 1 定理 $a^{n} \equiv 1 \pmod{p}$ とすると、$\text{ord}_{p} (a) \mid n$ である。 説明 例えば、$p=7$ を考える。 $$ \begin{align*} 1^{1} \equiv &amp;amp; 1 \pmod{ 7 } \\ 2^{3} \equiv &amp;amp; 1 \pmod{ 7 } \\</description></item><item><title>拡大体の定義とクロネッカーの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/797/</link><pubDate>Sat, 05 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/797/</guid><description>拡大体の定義 1 体 $F$ にたいして $F \le E$ が存在する場合、$E$ を $F$ の拡大体extension fieldという。 クロネッカーの定理 $f(x) \in F [ x ]$ が定数</description></item><item><title>カーマイケル数</title><link>https://freshrimpsushi.github.io/jp/posts/794/</link><pubDate>Wed, 02 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/794/</guid><description>定義 1 整数 $n$ が全ての $1 \le a \le n$ に対して $a^{n} \equiv a \pmod{n}$ を満たす場合、カーマイケル数と呼ばれる。 定理 全てのカーマイケル数は$2$ を除く異なる素数の積で</description></item><item><title>メインイデアル</title><link>https://freshrimpsushi.github.io/jp/posts/793/</link><pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/793/</guid><description>定義 1 単位元を持つ可換環 $R$ の元 $a$ によって生成される $\left&amp;lt; a \right&amp;gt;$ を、$a$ によって生成される主イデアルprincipal Idealという。 乗算に対す</description></item><item><title>合同方程式の根</title><link>https://freshrimpsushi.github.io/jp/posts/792/</link><pubDate>Mon, 31 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/792/</guid><description>アルゴリズム 1 自然数$b,k,m$が$\gcd (b , m) = \gcd ( k , \phi (m) ) = 1$を満たす場合、合同方程式$x^{k} \equiv b \pmod{ m }$の解$x$は以下の</description></item><item><title>共変イデアル</title><link>https://freshrimpsushi.github.io/jp/posts/791/</link><pubDate>Sun, 30 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/791/</guid><description>定義 1 可換環 $R$のイデアル $P \ne R$が、$a, b \in R$および$ab \in P$に対して、$a \in P$または$b \in P$のとき、$P$を$R$の素イデア</description></item><item><title>極大イデアル</title><link>https://freshrimpsushi.github.io/jp/posts/789/</link><pubDate>Fri, 28 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/789/</guid><description>定義 1 環 $R$ の イデアル 中 $R$ 以外のどんなイデアル $N \ne R$ にも含まれないイデアル $M \ne R$ を $R$ の 極大イデアルmaximal Idealという。また、 $M \subsetneq R$</description></item><item><title>ヒルベルト空間は反射的であることの証明</title><link>https://freshrimpsushi.github.io/jp/posts/788/</link><pubDate>Thu, 27 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/788/</guid><description>要旨 ヒルベルト空間 $H$ は リフレクシブである： $$ H^{\ast \ast} \approx H $$ $X^{\ast}$ は$X$ の双対空間で、$X^{\ast \ast}$ はダブル双対を表す。 $X \approx Y$ は$X$ と$Y$ が</description></item><item><title>三重対角行列の行列式導出</title><link>https://freshrimpsushi.github.io/jp/posts/787/</link><pubDate>Wed, 26 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/787/</guid><description>公式 $$ X_{n} := \begin{bmatrix} x &amp;amp; 1 &amp;amp; 0 &amp;amp; \cdots &amp;amp; 0 &amp;amp; 0 \\ 1 &amp;amp; x &amp;amp; 1 &amp;amp; \cdots &amp;amp; 0 &amp;amp; 0 \\ 0 &amp;amp; 1 &amp;amp; x &amp;amp; \cdots &amp;amp; 0 &amp;amp; 0 \\ \vdots &amp;amp; \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots &amp;amp; \vdots \\ 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; \cdots &amp;amp; x &amp;amp; 1 \\ 0 &amp;amp; 0 &amp;amp;</description></item><item><title>リウヴィルの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/786/</link><pubDate>Tue, 25 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/786/</guid><description>証明 $f = 0$とする。$f ( \cdot ) = \left\langle \cdot , \mathbf{0} \right\rangle$と$\| f \| = 0$を満たす$\mathbf{y} = \mathbf{0}$</description></item><item><title>理想を持つ単元</title><link>https://freshrimpsushi.github.io/jp/posts/785/</link><pubDate>Mon, 24 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/785/</guid><description>定理 1 [1]: 単位元$1$を持つ環$R$のイデアル$I$が単元を持つなら$I = R$ [2]: 体$F$は$\left\{ 0 \right\}$であり、$F$以外</description></item><item><title>直交分解定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/784/</link><pubDate>Sun, 23 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/784/</guid><description>定理1 $\left( H, \left\langle \cdot,\cdot \right\rangle \right)$をヒルベルト空間としよう。それならば$H$の閉じた部分空間である$M$に対して、 $$ H = M \oplus M^{\perp} $$ 結論 $$ \left( M^{\perp} \right)^{\perp} =</description></item><item><title>ベイズ因子を通じた仮説検定</title><link>https://freshrimpsushi.github.io/jp/posts/782/</link><pubDate>Fri, 21 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/782/</guid><description>ビルドアップ 古典的な仮説検定を使うためには、棄却域、有意確率などの概念に対する数学的な理解から、それらを直観的に受け入れられるだけの統計学的</description></item><item><title>ヴァンデルモンド行列の行列式の導出</title><link>https://freshrimpsushi.github.io/jp/posts/736/</link><pubDate>Thu, 20 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/736/</guid><description>定義 異なる $1, x_{1} , x_{2 } , \cdots , x_{n}$ に対して、次のように定義された行列 $V_{n}$ をヴァンデルモンド行列vandermonde matrixという。 $$ V_{n} := \begin{bmatrix} 1 &amp;amp;</description></item><item><title>クラメールの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/783/</link><pubDate>Wed, 19 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/783/</guid><description>概要 クラメルの公式cramer ruleは、連立方程式を解く上で効率的だとは言えないが、$A_{j}$が可逆行列であったり、$A$そのものが行</description></item><item><title>第一種および第二種チェビシェフ多項式の関係</title><link>https://freshrimpsushi.github.io/jp/posts/780/</link><pubDate>Wed, 19 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/780/</guid><description>定理 第1種チェビシェフ多項式 $T_{n} (x) = \cos \left( n \cos^{-1} x \right)$ と 第2種チェビシェフ多項式 $\displaystyle U_{n} (x) = {{1} \over {n+1} } T_{n+1} &amp;rsquo; (X)$ は、次の関係を持っている。 [1]: $$U_{n} (x) - U_{n-2} (x) = 2 T_{n} (X)$$</description></item><item><title>第二種チェビシェフ多項式</title><link>https://freshrimpsushi.github.io/jp/posts/779/</link><pubDate>Tue, 18 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/779/</guid><description>定義 $$U_{n} (x) := {{1} \over {n+1} } T_{n+1} &amp;rsquo; (x) = {{\sin \left( ( n +1 ) \theta \right)} \over { \sin \theta }} $$を第2種チェビシェフ多項式と言うんだ。 基本性質 再帰公式 [0]: $$U_{n+1} (x) = 2x U_{n} (x) - U_{n-1} (X)$$ 直交集合 [1]</description></item><item><title>最短ベクトル定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/778/</link><pubDate>Mon, 17 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/778/</guid><description>定理1 $\left( H, \left\langle \cdot,\cdot \right\rangle \right)$をヒルベルト空間としよう。$M \lneq H$を空集合ではなく閉じた凸部分集合としよう。すると$\mathbf{x} \in</description></item><item><title>第一種チェビシェフ多項式</title><link>https://freshrimpsushi.github.io/jp/posts/777/</link><pubDate>Sun, 16 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/777/</guid><description>定義 1 $T_{n} (x) = \cos \left( n \cos^{-1} x \right)$ を第1種チェビシェフ多項式という。 基本性質 再帰公式 [0]: $$T_{n+1} (x) = 2x T_{n} (x) - T_{n-1} (X)$$ 直交集合 [1] 関数の内積: 重み$w$ を$\disp</description></item><item><title>関数解析学におけるヒルベルト空間</title><link>https://freshrimpsushi.github.io/jp/posts/776/</link><pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/776/</guid><description>定義1 完備 内積空間をヒルベルト空間hilbert spaceと言う。ヒルベルトの名前から、主に$H$と表記される。 説明 完備空間とは、すべてのコ</description></item><item><title>ベクトル空間のリフレクシブ</title><link>https://freshrimpsushi.github.io/jp/posts/770/</link><pubDate>Thu, 13 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/770/</guid><description>定義 1 $X$をベクトル空間、$X^{\ast \ast}$をバイデュアルとする。$X^{\ast \ast} \approx X$ならば、$X$はリフレクシブrefle</description></item><item><title>最高事後密度信頼区間</title><link>https://freshrimpsushi.github.io/jp/posts/769/</link><pubDate>Wed, 12 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/769/</guid><description>定義 1 パラメータ空間$\Theta$の部分集合$C \subset \Theta$が、データ$y$が与えられたときの有意水準$\alpha$における$100</description></item><item><title>等距離写像</title><link>https://freshrimpsushi.github.io/jp/posts/756/</link><pubDate>Tue, 11 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/756/</guid><description>定義 二つの距離空間 $(X,\ d_X), (Y,\ d_Y)$に対して、下の条件を満たす写像 $f : X \to Y$が存在するなら、$X$と$Y$が等距離isometricだと言い</description></item><item><title>複素数の符号</title><link>https://freshrimpsushi.github.io/jp/posts/755/</link><pubDate>Mon, 10 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/755/</guid><description>定義 1 2 複素数 $\lambda \in \mathbb{C}$ に対する符号signは、以下のように定義される。 $$ \operatorname{sign} ( \lambda ) = \begin{cases} \displaystyle {{ \lambda } \over { \left| \lambda \right| }} &amp;amp;, \lambda \ne 0 \\ 0 &amp;amp;, \lambda = 0 \end{cases} $$ 説明 簡単にチェ</description></item><item><title>双対空間</title><link>https://freshrimpsushi.github.io/jp/posts/753/</link><pubDate>Sat, 08 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/753/</guid><description>双対空間 定義11 ベクトル空間 $X$ の全ての連続する線形汎関数の集合を $X^{ \ast }$ と標記し、これを $X$ の双対空間dual space、簡単に $X$ のデュアルと呼</description></item><item><title>信用区間と信頼区間の違い</title><link>https://freshrimpsushi.github.io/jp/posts/752/</link><pubDate>Fri, 07 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/752/</guid><description>定理 信用区間と信頼区間の違いは、本質的にベイジアンとフリークエンティストの違いとみなせる。 信頼区間(フリークエンティスト): パラメーターは固</description></item><item><title>線形汎関数が線形独立結合で表されるための必要十分条件</title><link>https://freshrimpsushi.github.io/jp/posts/748/</link><pubDate>Thu, 06 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/748/</guid><description>定理 $f, f_{1} , \cdots , f_{n}$ を定義域が $X$ の線形汎関数とする。 (a) $c_{1} , \cdots , c_{n} \in \mathbb{C}$ について $\displaystyle f = \sum_{i=1}^{n} c_{i} f_{i}$ $\iff$ $\displaystyle \bigcap_{i=1}^{n} \ker ( f_{i} ) \subset \ker (f)$ (b) $f_{1} , \cdots , f_{n}$ が線形独立を満たす $f_{j} (x_{i} )</description></item><item><title>回帰分析における交互作用</title><link>https://freshrimpsushi.github.io/jp/posts/696/</link><pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/696/</guid><description>ビルドアップ まず、質的変数を含む回帰分析について読むことをおすすめする。 今年の就職者全体の、大学入学試験のスコア$X_{1}$、年齢$X_{</description></item><item><title>抽象代数学における根基と零根基</title><link>https://freshrimpsushi.github.io/jp/posts/744/</link><pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/744/</guid><description>定義 1 $N$ を $R$ のイデアルとする。 $\text{rad} N := \left\{ a \in R \ | \ a^n \in N \right\}$ を $N$ のラディカルradicalと言う。 $a^{n} = 0$ を満たす $n \in \mathbb{N}$ が存在する場合、$a$ を</description></item><item><title>線形汎関数が連続であるための必要十分条件</title><link>https://freshrimpsushi.github.io/jp/posts/742/</link><pubDate>Tue, 04 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/742/</guid><description>Theorem1 The linear functional $f$ is continuous. $\iff$ $\ker(f)$ is a closed set in $X$. Here, $\mathcal{N} (f) = \ker (f) = \left\{ x \in X \ | \ f(x) = 0 \right\}$ is the kernel of the linear transformation $f$. Proof Strategy: $(\implies)$ Direct deduction by the definition of the kernel. $(\impliedby)$ The necessary and sufficient condition for the continuity of a linear operator is boundedness. Showing that $f$</description></item><item><title>質的変数を含む回帰分析</title><link>https://freshrimpsushi.github.io/jp/posts/686/</link><pubDate>Tue, 04 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/686/</guid><description>概要 回帰分析を行う際に、常に量的変数が独立変数として入ってくるとは限らない。性別が何か、どの企業に属しているか、どのような色か、金属かどうか</description></item><item><title>モデル診断による残差の正規性の確認</title><link>https://freshrimpsushi.github.io/jp/posts/683/</link><pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/683/</guid><description>診断法 標準化残差図 を使って、回帰分析が正しく行われたか確認できる。 正規性については、残差の散らばりよりも、ヒストグラムで確認したり、正規性検</description></item><item><title>信頼区間</title><link>https://freshrimpsushi.github.io/jp/posts/741/</link><pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/741/</guid><description>定義 1 パラメータ空間 $\Theta$ の部分集合 $C \subset \Theta$ が、有意水準 $\alpha$ に対して $P ( \theta \in C | y ) \ge 1 - \alpha$ を満たすとき、$C$ をデータ$y$が与えられた時の$\t</description></item><item><title>モデル診断による残差の独立性の確認</title><link>https://freshrimpsushi.github.io/jp/posts/679/</link><pubDate>Sun, 02 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/679/</guid><description>診断法 直感的パターン認識 標準化残差図を使って回帰分析が正しく行われたかを確認できる。独立性を確かめるためには、残差図にはっきりした傾向が現れ</description></item><item><title>統計学の三つの代表値：最頻値、中央値、平均</title><link>https://freshrimpsushi.github.io/jp/posts/740/</link><pubDate>Sun, 02 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/740/</guid><description>概要 代表値とは、データを説明する代表的な値のことだ。何千何万というデータがあっても、一つ一つ詳しく見るわけにはいかない場合、結局重要なのはデ</description></item><item><title>抽象代数学におけるイデアル</title><link>https://freshrimpsushi.github.io/jp/posts/739/</link><pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/739/</guid><description>定義 1 環 $(R , + , \cdot )$ の全ての $a,b \in R$ に対して $a I \subset I$ と $I b \subset I$ を満たす部分群 $(I, +)$ をアイディアルidealと呼ぶ。 説明 簡単な例として、$n \mathbb{Z}$ は $\mathbb{Z}$</description></item><item><title>有界線形作用素の二乗のノルム</title><link>https://freshrimpsushi.github.io/jp/posts/738/</link><pubDate>Fri, 30 Nov 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/738/</guid><description>用語 1 自然言語を使ってプラットフォームに依存せずに詳細なコードについて説明したものを疑似コードpseudo codeという。 説明 疑似コードは文</description></item><item><title>アイゼンシュタインの判定法</title><link>https://freshrimpsushi.github.io/jp/posts/737/</link><pubDate>Thu, 29 Nov 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/737/</guid><description>定理 1 $f(x) = a_{n} x^{n} + \cdots + a_{0 } \in \mathbb{Z} [ x ]$が、素数$p \in \mathbb{Z}$と$k = 0,1,2, \cdots , n-1$に対して以下の条件を満たす場合、$f(x)$は</description></item><item><title>ラプラス展開</title><link>https://freshrimpsushi.github.io/jp/posts/781/</link><pubDate>Wed, 28 Nov 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/781/</guid><description>整理 正方行列 $A_{n \times n} = (a_{ij})$ が与えられているとしよう。 [1]: 選択された $i$ 行について $$ \det A = \sum_{j=1}^{n} a_{ij} C_{ij} $$ [2]: 選択された $j$ 列について $$ \det A = \sum_{i=1}^{n} a_{ij} C_{ij} $$ 正方行列 $A_{n \times</description></item><item><title>多項式の既約元</title><link>https://freshrimpsushi.github.io/jp/posts/735/</link><pubDate>Tue, 27 Nov 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/735/</guid><description>定義 1 定数関数ではない$f(x) \in F [ x ]$が$f(x)$より次数が低い何らかの$g(x) , h(x) \in F [ x ]$の積$f(x) = g(x) h(x)$として</description></item><item><title>因数定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/733/</link><pubDate>Sun, 25 Nov 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/733/</guid><description>定理 1 $f(x) \in F [ x ]$ としよう。 $$ f(a) = 0 \iff f(x) = (x-a) q(x) $$ 説明 これは、中学校からずっとやってきた因数分解の存在を保証する定理だ。重要なことは、除算定理</description></item><item><title>除法定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/729/</link><pubDate>Fri, 23 Nov 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/729/</guid><description>定理 1 $a_{n} \ne 0$と$b_{m} \ne 0$、そして$n &amp;gt; m &amp;gt; 0$について、$F [ x ]$の二つの要素を $$ f(x) = a_{n} x^{n} + \cdots + a_{1} x + a_{0} \\ g(x) = b_{m} x^{m} + \cdots + b_{1} x + b_{0}</description></item><item><title>線形作用素の性質</title><link>https://freshrimpsushi.github.io/jp/posts/730/</link><pubDate>Thu, 22 Nov 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/730/</guid><description>【要約】1 $T : (X , \left\| \cdot \right\|_{X}) \to ( Y , \left\| \cdot \right\|_{Y} )$を線形作用素と呼ぼう。 (a) $T$が有界ならば、すべての$x \in X$に対して$\left\| T(x) \right\|_{Y} \le \left\| T \right\|</description></item><item><title>多項式の零点</title><link>https://freshrimpsushi.github.io/jp/posts/723/</link><pubDate>Wed, 21 Nov 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/723/</guid><description>定義 1 $$ f(x) : = \sum_{k=0}^{n} a_{k} x^{k} = a_{0} + a_{1} x + \cdots + a_{n} x^{n} $$ 多項式関数 $f \in F [x]$と体 $F \le E$において、$\alpha \in E$の評価関数evaluation $\phi_{\alpha}</description></item><item><title>関数解析学における作用素</title><link>https://freshrimpsushi.github.io/jp/posts/728/</link><pubDate>Tue, 20 Nov 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/728/</guid><description>定義1 $(X, \left\| \cdot \right\|_{X}), (Y, \left\| \cdot \right\|_{Y})$をノルム空間と呼ぶ。 ノルム空間からノルム空間への写像を作用素と呼ぶ。 $x,x_{1},x_{2}\in X$に対して、$T : X</description></item><item><title>分母にビッグオー記法がある場合の分子への移動方法</title><link>https://freshrimpsushi.github.io/jp/posts/727/</link><pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/727/</guid><description>定理 $a \ne 0$ と $p&amp;gt;0$、$n \in \mathbb{N}$ について、以下が成立する。 $$ {{1} \over { \sqrt[p]{a + O ( h^n ) } }} = {{1} \over { \sqrt[p]{a } }}+ O(h^n) $$ 説明 複雑に見える分母をきれいな形に</description></item><item><title>レフシェッツの不動点定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/725/</link><pubDate>Sat, 17 Nov 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/725/</guid><description>定理 1 ノルム空間の$(X , \left\| \cdot \right\|)$のスカラー場を$\mathbb{C}$としよう。すると $X$は有限次元だ。$\iff$ $\overline{ B</description></item><item><title>多項式環</title><link>https://freshrimpsushi.github.io/jp/posts/721/</link><pubDate>Thu, 15 Nov 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/721/</guid><description>定義 1 $$ f(x) : = \sum_{k=0}^{n} a_{k} x^{k} = a_{0} + a_{1} x + \cdots + a_{n} x^{n} $$ 環 $R$ 上の多項式polynomial $f(x)$ を上記のように定義する。 $a_{i} \in R$ を$f(x)$ の係数coeffi</description></item><item><title>数値解析における差分</title><link>https://freshrimpsushi.github.io/jp/posts/722/</link><pubDate>Wed, 14 Nov 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/722/</guid><description>定義 1 前方差分： $$ \begin{align*} \Delta f(x) =&amp;amp; f(x+h) - f(x) \\ \Delta^{r+1} f(x) =&amp;amp; \Delta^{r} f(x+h) - \Delta^{r} f(x) \end{align*} $$ 後方差分： $$ \begin{align*} \nabla f(x) =&amp;amp; f(x) - f(x- h) \\ \nabla^{r+1} f(x) =&amp;amp; \nabla^{r} f(x) - \nabla^{r} f(x- h) \end{align*} $$ 説明 一般的に差分は数列全体で使われ</description></item><item><title>環の単位元が冪等元であれば、直和として表すことができる</title><link>https://freshrimpsushi.github.io/jp/posts/731/</link><pubDate>Tue, 13 Nov 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/731/</guid><description>定理 単位元 $1$ を持つ環 $R$ が零因子 $a$ で $a^2 = a$ を満たす時、すなわち冪等元であるならば、$R$ は $aR$ と $(1-a)R$ の唯一の直積として表されます。 $$ R = a R \times (1-a)R $$</description></item><item><title>Rでのデータ構造の解析方法</title><link>https://freshrimpsushi.github.io/jp/posts/720/</link><pubDate>Mon, 12 Nov 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/720/</guid><description>概要 Rで様々な関数を使っていると、以下のように親切に結果が出力される場合がよくある。問題は、この結果をただ見るだけでなく、アウトプットとして</description></item><item><title>反射と屈折</title><link>https://freshrimpsushi.github.io/jp/posts/719/</link><pubDate>Sun, 11 Nov 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/719/</guid><description>定義 1 環$R$において、$ab = 0$を満たす$0$ではない$a,b \in R$を零因子zero Divisorと呼ぶ。 単位元$1 \ne 0$を持つ$D$が</description></item><item><title>ブーリアン環</title><link>https://freshrimpsushi.github.io/jp/posts/717/</link><pubDate>Fri, 09 Nov 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/717/</guid><description>定義 1 $R$ を環としよう。 $r \in R$ が $r^2 = r$ を満たすなら、$r$ を冪等元idempotent elementという。 $R$ の全ての元が冪元なら、$R$ をブ</description></item><item><title>ジェフリーズ事前分布</title><link>https://freshrimpsushi.github.io/jp/posts/716/</link><pubDate>Thu, 08 Nov 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/716/</guid><description>定義 1 データの分布$p( y | \theta)$について、$\pi ( \theta ) \propto I^{1/2} ( \theta )$をジェフリーズ事前分布jeffreys priorと言う。 $I</description></item><item><title>抽象代数学における体</title><link>https://freshrimpsushi.github.io/jp/posts/715/</link><pubDate>Wed, 07 Nov 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/715/</guid><description>定義 1 環 $(R , + , \cdot)$ が乗法 $\cdot$ に対する単位元 $1 \in R$ を持つとき、$1$ を 単位元unity と呼ぶ。 単位元を持つ環 $R$ において乗法に対する逆元が存在する</description></item><item><title>ラプラス事前分布</title><link>https://freshrimpsushi.github.io/jp/posts/714/</link><pubDate>Tue, 06 Nov 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/714/</guid><description>ビルドアップ パラメータについてほぼ情報がなければ、わざわざ複雑な事前分布を考える必要はない： 例1：来年のある大学の統計学部の新入生の性比を推</description></item><item><title>ミンコフスキー不等式</title><link>https://freshrimpsushi.github.io/jp/posts/288/</link><pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/288/</guid><description>定理 ベクトル$\mathbf{x}= (x_{1} , x_{2} , \dots , x_{n} )$、$\mathbf{y} = (y_{1} , y_{2} , \dots , y_{n} )$と$1$より大きい実数$p$に対し、次の式</description></item><item><title>リサジューの補助定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/713/</link><pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/713/</guid><description>定理 1 ノルム空間 $(X , \| \cdot \| )$ の部分空間 $Y \subsetneq X$ について、$Y$ が閉集合だとする。全ての $\theta \in (0,1)$ と $y \in Y$ に対して、$\| x_{ \theta } \| = 1$ と $\| x_{ \theta } - y</description></item><item><title>共役事前分布</title><link>https://freshrimpsushi.github.io/jp/posts/712/</link><pubDate>Sun, 04 Nov 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/712/</guid><description>定義 1 事前分布と事後分布が同じ分布族に属している場合、事前分布を共役事前分布conjugate priorと呼ぶ。 説明 ベイズ推定は本来、事前分</description></item><item><title>有限次元ノルム空間の完備性の証明</title><link>https://freshrimpsushi.github.io/jp/posts/711/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/711/</guid><description>定理 1 有限次元のノルム空間は完備性を持つ。 説明 それにより、有限次元のベクトル空間はノルムが定義されるだけでバナッハ空間になる。特に、$\ma</description></item><item><title>ラプラスの後継法則</title><link>https://freshrimpsushi.github.io/jp/posts/710/</link><pubDate>Fri, 02 Nov 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/710/</guid><description>定理 1 二項モデル $\displaystyle p(y | \theta) = \binom{ n }{ y} \theta^{y} (1- \theta)^{n-y}$ の事前分布が一様分布 $U (0,1)$ に従い、事後分布がベータ分布 $\beta (y+1 , n-y+1)$ に従うとするとき、$p( \theta | y ) \sim \theta^{y} (1- \theta)^{n-y}$</description></item><item><title>有限次元ベクトル空間上で定義された全てのノルムは同値であることの証明</title><link>https://freshrimpsushi.github.io/jp/posts/709/</link><pubDate>Thu, 01 Nov 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/709/</guid><description>定理 1 有限次元ベクトル空間上で定義されるすべてのノルムは等価である。 説明 ユークリッド空間で定義されるすべてのノルムが等価であるという事実は、</description></item><item><title>有限次元のノルム空間には基底が存在することの証明</title><link>https://freshrimpsushi.github.io/jp/posts/707/</link><pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/707/</guid><description>定理 1 全ての有限次元ノルム空間は基底を持つ。 説明 特定の条件を満たす基底ではなく、基底の存在を明らかにすることに不慣れかもしれないが、実際に基</description></item><item><title>ノルムの同値関係</title><link>https://freshrimpsushi.github.io/jp/posts/274/</link><pubDate>Sun, 28 Oct 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/274/</guid><description>定義 ベクトル空間 $V$ 上で定義された二つの ノルム $\left\| \cdot \right\|_{\alpha}, \left\| \cdot \right\|_{\beta}$ と任意のベクター $\mathbf{v} \in V$ に対して $$ c \left\| \mathbf{v} \right\|_{\alpha} \le \left\| \mathbf{v} \right\|_{\beta} \le C \left\| \mathbf{v} \right\|_{\alpha} $$ を満たす 定数 $c , C &amp;gt;0$ が存</description></item><item><title>有限次元ベクトル空間のハメル基底</title><link>https://freshrimpsushi.github.io/jp/posts/705/</link><pubDate>Sat, 27 Oct 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/705/</guid><description>定義 1 ベクトル空間$X$が与えられているとする。 $X$のベクトル$x_{1} , \dots , x_{n}$とスカラー$\alpha_{1} , \dots , \alp</description></item><item><title>部分空間の直交補空間</title><link>https://freshrimpsushi.github.io/jp/posts/273/</link><pubDate>Sat, 27 Oct 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/273/</guid><description>定義1 ベクトル空間 $V$ の部分空間 $W$ に対する集合 $$ W^{\perp} = \left\{ \mathbf{v} \in V \ : \left\langle \mathbf{v} , \mathbf{w} \right\rangle = 0,\quad \forall \mathbf{w} \in W \right\} $$ を $W$ の直交補空間orthogonal compleme</description></item><item><title>バナッハ空間</title><link>https://freshrimpsushi.github.io/jp/posts/703/</link><pubDate>Thu, 25 Oct 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/703/</guid><description>定義1 完備なノルム空間をバナッハ空間banach spaceと言う。 説明 完備空間とは、すべてのコーシー列が収束する空間のことを言う。 バナッハ空</description></item><item><title>ヘルダーの不等式</title><link>https://freshrimpsushi.github.io/jp/posts/258/</link><pubDate>Thu, 25 Oct 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/258/</guid><description>定義 $\dfrac{1}{p} + \dfrac{1}{q} = 1$ を満たして1より大きい二つの定数 $p, q$ と $\mathbf{u}, \mathbf{v} \in \mathbb{C}^n$ について、次の不等式が成り立つ。 $$ | \left\langle \mathbf{u}, \mathbf{v} \right\rangle | = |\mathbf{u} ^{\ast} \mathbf{v}| \le ||\mathbf{u}||_{p} ||\mathbf{v}||_{q} $$ これをヘルダーの不</description></item><item><title>ベイジアン・パラダイム</title><link>https://freshrimpsushi.github.io/jp/posts/702/</link><pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/702/</guid><description>ビルドアップ 統計学とは、「母数を把握する方法を研究する学問」と言える。物理量を測定するように、公式や法則を通じて正確に母数を推定できれば言う</description></item><item><title>ヤングの不等式の証明</title><link>https://freshrimpsushi.github.io/jp/posts/267/</link><pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/267/</guid><description>定理 $\displaystyle {{1} \over {p}} + {{1} \over {q}} = 1$を満たし、1より大きい二つの定数$p,q$と二つの正数$a,b$について $$ ab \le { {a^{p}} \over {p} } + {{b^{q}} \over {q}} $$ 説明 代数的に形が</description></item><item><title>p=∞ のときにp-ノルムが最大ノルムになることの証明</title><link>https://freshrimpsushi.github.io/jp/posts/699/</link><pubDate>Sun, 21 Oct 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/699/</guid><description>定理 数列の空間 $l^{p}$ そして $1 &amp;lt; p_{0} &amp;lt; \infty$ に対して $\left\{ x_{n} \right\}_{n \in \mathbb{N} } \in \mathcal{l}^{p_{0}}$ としよう。 $$ \lim_{p \to \infty} \left( \sum_{n \in \mathbb{N} } | x_{n} |^{p} \right)^{ {{1} \over {p}} } = \sup_{n \in \mathbb{N}} | x_{ n } | $$ 説明 解析学や線形代数</description></item><item><title>ベイズの定理を通して見るモンティ・ホールのジレンマ</title><link>https://freshrimpsushi.github.io/jp/posts/697/</link><pubDate>Mon, 08 Oct 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/697/</guid><description>説明 周知の通り、モンティ・ホール問題では実際に賞品がどこにあっても選択を変える方が有利になる。これを事実として受け入れるかどうかとは別に、モ</description></item><item><title>ヤンセンの不等式の有限形の証明</title><link>https://freshrimpsushi.github.io/jp/posts/264/</link><pubDate>Mon, 08 Oct 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/264/</guid><description>要旨 $I \subset \mathbb{R}$ で、凸関数 $f : I \to \mathbb{R}$ と $\displaystyle \sum_{k=1}^{n} \lambda_{k} = 1, \lambda_{k}&amp;gt;0$ について $$ \begin{align*} f( \lambda_{1} x_{1} + \lambda_{2} x_{2} + \cdots + \lambda_{n} x_{n} ) &amp;amp; \le \lambda_{1} f( x_{1}) + \lambda_{2} f( x_{2}) + \cdots + \lambda_{n} f( x_{n} ) \\ f\left( \sum\limits_{k=1}^{n}\lambda_{k}x_{k} \right) &amp;amp;\le \sum\limits_{k=1}^{n} \lambda_{k} f(x_{k}) \end{align*} $$ $f$ が凹関</description></item><item><title>線形代数学においてノルムとは何か？</title><link>https://freshrimpsushi.github.io/jp/posts/257/</link><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/257/</guid><description>定義 $V$上のベクトル空間として$\mathbb{F}$を定義しよう。 $\left\| \cdot \right\| : V \to \mathbb{F}$が$\mathbf{u}, \mathbf{v} \in V$と</description></item><item><title>数列空間（ℓp 空間）</title><link>https://freshrimpsushi.github.io/jp/posts/695/</link><pubDate>Tue, 02 Oct 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/695/</guid><description>定義 1 $1 \le p &amp;lt; \infty$に対して、距離空間$( \ell^{p} , d^{p} )$は次のように定義される。 (i) 収束する数列の集合: $$ \ell^{p} := \left\{ \left\{ x_{n} \right\}_{n \in \mathbb{N}} \subset \mathbb{C} \left| \left( \sum_{i=1}^{\infty} | x_{i} |^{p}</description></item><item><title>Rでのリストの解体、重複要素の削除</title><link>https://freshrimpsushi.github.io/jp/posts/688/</link><pubDate>Sun, 23 Sep 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/688/</guid><description>概要 いろんな未加工のデータを扱うことが多いRでは、リスト型がデータを整理するのに特に便利です。しかし、その反面、データにアクセスすることが少</description></item><item><title>多様体とは何か</title><link>https://freshrimpsushi.github.io/jp/posts/673/</link><pubDate>Thu, 20 Sep 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/673/</guid><description>定義 1 位相空間 $X$が次の三つの条件を満たす時、$X$を**$n$次元多様体**manifoldと言う。 (i): 第二可算である。 (ii): ハウスドルフであ</description></item><item><title>モデル診断により確認される残差の等分散性</title><link>https://freshrimpsushi.github.io/jp/posts/681/</link><pubDate>Sun, 16 Sep 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/681/</guid><description>診断法 1 標準化残差グラフを使って回帰分析が正しく行われているか確認できる。等分散性を確認するためには、残差の散らばりが全体的に均一かを確認す</description></item><item><title>フィボナッチ数列の一般項の導出</title><link>https://freshrimpsushi.github.io/jp/posts/680/</link><pubDate>Sat, 15 Sep 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/680/</guid><description>定理 シーケンス $\left\{ F_{n} \right\}_{n=0}^{\infty}$が$F_{n+1} := F_{n} + F_{n-1}$として定義されるとしよう。$F_{</description></item><item><title>モデル診断によって確認される残差の線形性</title><link>https://freshrimpsushi.github.io/jp/posts/677/</link><pubDate>Wed, 12 Sep 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/677/</guid><description>診断法 1 標準化残差グラフを通じて、回帰分析が適切に行われたかを確認できる。 線形性があるか確認するには、$0$ を中心に残差が対称的になっている</description></item><item><title>回帰分析のモデル診断</title><link>https://freshrimpsushi.github.io/jp/posts/675/</link><pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/675/</guid><description>必要性 単純回帰分析の場合は、独立変数と従属変数を考慮しても$2$の次元であるため、分析が適切に行われたか一目で確認することができる。しかし、</description></item><item><title>파푸스-굴딘 정리 증명</title><link>https://freshrimpsushi.github.io/jp/posts/685/</link><pubDate>Sat, 08 Sep 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/685/</guid><description>定理 $yz$-平面上の図形 $F$ の面積を $A$ とし、$F$ を $z$-軸で回転させて得られた回転体 $W$ の体積を $V$ とする。$z$-軸と $F$ の重心の間の距離を</description></item><item><title>パップス-グルディンの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/685/</link><pubDate>Sat, 08 Sep 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/685/</guid><description>定理 平面上の図形 $F$ の面積を $A$ とし、$F$ を $z$ 軸で回転して得られた回転体 $W$ の体積を $V$ とする。$z$ 軸と $F$ の重心間の距離を $r$ とすると $$ V = 2 \pi r</description></item><item><title>回帰係数のF検定</title><link>https://freshrimpsushi.github.io/jp/posts/672/</link><pubDate>Fri, 07 Sep 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/672/</guid><description>仮説検定 線形多重回帰モデルのモデル診断で、残差が線形性、等分散性、独立性、正規性を満たすとする。 $n$ 個の観測値と $p$ 個の独立変数を対象とした多重</description></item><item><title>Rでの多重回帰分析結果の見方</title><link>https://freshrimpsushi.github.io/jp/posts/670/</link><pubDate>Wed, 05 Sep 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/670/</guid><description>データ探索 tail(attitude) Rで、組み込みデータattitudeを読み込んで、tail()関数で確認してみよう。このデータで重回帰分析を行うつもりだ。 rat</description></item><item><title>R でグラフを描く際に使用されるシンボル들</title><link>https://freshrimpsushi.github.io/jp/posts/669/</link><pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/669/</guid><description>コード 様々なグラフ関連関数で点の形状を変えるときは、pch オプションを使用する。上の画像は特によく使用されるシンボルを一目で見られるように表</description></item><item><title>シロフの定理</title><link>https://freshrimpsushi.github.io/jp/posts/668/</link><pubDate>Mon, 03 Sep 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/668/</guid><description>定理 1 ある自然数 $m$ に対して、素数 $p$ と $\gcd (p, m) = 1$ を満たす有限群 $G$ が $|G| = p^{n} m$ だとしよう。$G$ の$p$-部分群で、他の $p$-部分群に含まれない</description></item><item><title>Rでプロットに文字列を印刷する方法</title><link>https://freshrimpsushi.github.io/jp/posts/667/</link><pubDate>Sun, 02 Sep 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/667/</guid><description>コード text() 関数を使って、グラフに文字列を表示させることができる。 一つ目のオプションは$x$軸の座標のベクトル、二つ目のオプションは$y$軸の座</description></item><item><title>多重回帰分析</title><link>https://freshrimpsushi.github.io/jp/posts/666/</link><pubDate>Sat, 01 Sep 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/666/</guid><description>概要 回帰分析とは、変数間の関係を解明する方法であり、特に線形関係を明らかにするのに役立つ。多重線形回帰分析multiple Linear regressi</description></item><item><title>商空間</title><link>https://freshrimpsushi.github.io/jp/posts/665/</link><pubDate>Fri, 31 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/665/</guid><description>定義 1 位相空間 $(X, \mathscr{T} )$ と 同値関係 $\sim$ についての 同値類を $[x] = \left\{ y \in X \ | \ x \sim y \right\}$ としよう。 $X / \sim$ を商集合と定義する。 $q : X \to X / \sim$ を $q(x) = [ x ]$ と</description></item><item><title>Rで水平線と垂直線を描く方法</title><link>https://freshrimpsushi.github.io/jp/posts/664/</link><pubDate>Thu, 30 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/664/</guid><description>例 1. abline(h=0) 水平線を引く。 2. abline(v=0) 垂直線を引く。 3. abline(0,3/4) $y$ での切片と$0$ の傾きを持つ直線を引く。 もともと abline() 関数自体が $3/4$ の係数、つまり $y=a+bx$ から名前が来ている</description></item><item><title>群論におけるコーシーの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/663/</link><pubDate>Wed, 29 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/663/</guid><description>定理 1 有限群 $G$ について、もし素数 $p$ が $|G|$ の約数ならば、$|H| = p$ を満たす部分群 $H \leqslant G$ が存在する。 解説 普通、コーシーの定理と言った場合、この定</description></item><item><title>Rでグラフを描く</title><link>https://freshrimpsushi.github.io/jp/posts/662/</link><pubDate>Tue, 28 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/662/</guid><description>概要 Rは他の言語に比べてグラフの表現がとても簡単なのが長所だ。 他の統計パッケージと比べると、簡単な図はパッケージが早くても、詳細な表現が増え</description></item><item><title>抽象代数学におけるp-群</title><link>https://freshrimpsushi.github.io/jp/posts/660/</link><pubDate>Mon, 27 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/660/</guid><description>定義 1 有限群 $G$ の単位元が $e$ だとするとき、$g \in G$ が $g^{n} = e$ を満たす最小の $n \in \mathbb{N}$ について、$|g| = n$ と表される。すべての $g \in G$ と与えられた素数</description></item><item><title>Rで条件付きでデータをフィルタリングする方法</title><link>https://freshrimpsushi.github.io/jp/posts/659/</link><pubDate>Sun, 26 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/659/</guid><description>概要 Rは主に統計学で使われるためか、必要なデータを選んで編集する機能は他の追従を許さない。このようなデータのハンドリングに慣れることは少し難</description></item><item><title>ウィルティンガーの不等式とチーチェの拡張定理</title><link>https://freshrimpsushi.github.io/jp/posts/658/</link><pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/658/</guid><description>定理 ウリソンの補題 1 $X$ が正規空間であれば、全ての閉集合 $A \cap B = \emptyset$ と $A, B \subset X$ に対して、$f(A) = \left\{ 0 \right\}$ と $f(B) = \left\{ 1 \right\}$ を満たす連続関数 $f:X \to [0,1]$ が存</description></item><item><title>エンタルピー、ヘルムホルツの自由エネルギー、ギブスの自由エネルギー</title><link>https://freshrimpsushi.github.io/jp/posts/657/</link><pubDate>Fri, 24 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/657/</guid><description>定義 エンタルピーenthalpy$H$は以下のように定義される。 $$ H := U + PV $$ ヘルムホルツの関数helmholtz function$F$は以</description></item><item><title>Rでの条件付き合計と条件付き平均の計算</title><link>https://freshrimpsushi.github.io/jp/posts/656/</link><pubDate>Thu, 23 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/656/</guid><description>概要 エクセルで言えば、sumif()やaverageif()のような関数がたまに必要になる。Rではそうした単純な関数はないが、apply系列</description></item><item><title>ギブスのエントロピー表現</title><link>https://freshrimpsushi.github.io/jp/posts/655/</link><pubDate>Wed, 22 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/655/</guid><description>公式 与えられた系のマクロ状態が$i$番目の状態である確率を$P_{i}$としよう。この系で測定されるエントロピー$S$は、以下のように表すこ</description></item><item><title>回帰係数のt検定</title><link>https://freshrimpsushi.github.io/jp/posts/654/</link><pubDate>Tue, 21 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/654/</guid><description>仮説検定 $$ \begin{bmatrix} y_{1} \\ y_{2} \\ \vdots \\ y_{n} \end{bmatrix} = \begin{bmatrix} 1 &amp;amp; x_{11} &amp;amp; \cdots &amp;amp; x_{p1} \\ 1 &amp;amp; x_{12} &amp;amp; \cdots &amp;amp; x_{p2} \\ \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \\ 1 &amp;amp; x_{1n} &amp;amp; \cdots &amp;amp; x_{pn} \end{bmatrix} \begin{bmatrix} \beta_{0} \\ \beta_{1} \\ \vdots \\ \beta_{p} \end{bmatrix} + \begin{bmatrix} \varepsilon_{1} \\ \varepsilon_{2} \\ \vdots \\ \varepsilon_{n} \end{bmatrix} $$ 独立</description></item><item><title>宇宙のエントロピーは減少しない</title><link>https://freshrimpsushi.github.io/jp/posts/653/</link><pubDate>Mon, 20 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/653/</guid><description>定理 宇宙のエントロピーは減少しない。 説明 上記の命題を見た最初に分かる事実は、「何かかっこいい」という点だ。しかし、本当にかっこいいのはこれを</description></item><item><title>Rでの単純回帰分析結果の見方</title><link>https://freshrimpsushi.github.io/jp/posts/652/</link><pubDate>Sun, 19 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/652/</guid><description>実習 回帰分析のやり方 head(faithful) Rで組み込みデータのfaithfulを読み込んでhead()関数で確認しよう。 データだけ見ても二変数間の線形関係がある</description></item><item><title>熱力学におけるエントロピーとは何か</title><link>https://freshrimpsushi.github.io/jp/posts/651/</link><pubDate>Sat, 18 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/651/</guid><description>定義 次の式を満たす$S$をエントロピーentropyと定義する。 $$ dS = {{ \delta Q_{\text{rev} } } \over { T }} $$ 説明 エントロピーは「無秩序さ」を示す物理量で、数式</description></item><item><title>単純回帰分析</title><link>https://freshrimpsushi.github.io/jp/posts/648/</link><pubDate>Fri, 17 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/648/</guid><description>概要 回帰分析は、変数間の関係を見つける方法であって、特に線形関係を明らかにするのに便利だ。単純回帰分析simple Linear regressionは、</description></item><item><title>クラウジウスの不等式</title><link>https://freshrimpsushi.github.io/jp/posts/649/</link><pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/649/</guid><description>定理 循環プロセスでは、以下の式が成立する。 $$ \oint {{\delta Q} \over {T}} \le 0 $$ 特に、プロセスが可逆であれば、以下が真となる。 $$ \oint {{\delta Q_{\text{rev}}} \over {T}} = 0 $$ 説明 循環プロセス</description></item><item><title>適合値、予測値、残差、誤差</title><link>https://freshrimpsushi.github.io/jp/posts/650/</link><pubDate>Wed, 15 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/650/</guid><description>定義 1 回帰分析 $Y \gets X_{1} + X_{2} + \cdots + X_{n}$ で得た回帰式を $y = \beta_{0} + \beta_{1} x_{1} + \beta_{2} x_{2} + \cdots + \beta_{n} x_{n}$ とし、$i$番目のデータを $(y_{i} , x_{i1} , x_{i2} , \cdots , x_{in})$ と表すことにしよう。 平</description></item><item><title>カルノーの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/647/</link><pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/647/</guid><description>定理 カルノー機関よりも効率が高い機関は存在しない。 説明 カルノー機関を実際に実現することはできないけど、理論的な限界を意味する点で非常に意義が</description></item><item><title>位相数学における関数空間</title><link>https://freshrimpsushi.github.io/jp/posts/646/</link><pubDate>Mon, 13 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/646/</guid><description>定義 1 位相空間 $X$ と $Y$ に対して次のように定義された積空間 $Y^{X}$を関数空間という。 $$ Y^{X} : = \prod_{x \in X} Y = \left\{ f \ | \ f : X \to Y \text{ is a function} \right\} $$ 関数</description></item><item><title>カルノーエンジン</title><link>https://freshrimpsushi.github.io/jp/posts/645/</link><pubDate>Sun, 12 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/645/</guid><description>定義 以下の四つのプロセスを順番に実行する機関をカルノー機関Carnot engineという。 Step 1. 等温膨張 プロセス $A \to B$: 温度が$T_{h}$に保</description></item><item><title>第三同型定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/644/</link><pubDate>Sat, 11 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/644/</guid><description>定理 1 $G,G'$を群としよう。 第一同型定理: 準同型写像 $\phi : G \to G'$が存在する場合 $$ G / \ker ( \phi ) \simeq \phi (G) $$ 第二同型定理: $H \le G$ そして $N \triangleleft G$ の</description></item><item><title>熱力学の第二法則</title><link>https://freshrimpsushi.github.io/jp/posts/643/</link><pubDate>Fri, 10 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/643/</guid><description>法則 クラウジウス: 自分で冷たい方から熱い方へ熱を送る過程は存在しない。 ケルビン: 熱を完全に仕事に変える過程は存在しない。 解説 ドイツの物理学者</description></item><item><title>第2同型定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/642/</link><pubDate>Thu, 09 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/642/</guid><description>サマリー 1 第一同型定理：準同型写像$\phi : G \to G'$が存在すれば $$ G / \ker ( \phi ) \simeq \phi (G) $$ 第二同型定理：$H \le G$かつ$N \triangleleft G$ならば $$ (HN) /</description></item><item><title>熱絶縁係数の熱力学的導出</title><link>https://freshrimpsushi.github.io/jp/posts/638/</link><pubDate>Wed, 08 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/638/</guid><description>式 $m$を気体分子の質量、$h$を高さ、$T$を温度とすると、次の式が成り立つ。 $$ \dfrac{dT}{dh} = - {{ \gamma -1} \over { \gamma }} \dfrac{ mg }{k_{B}} $$ このとき、$\gamma = \d</description></item><item><title>第一同型定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/637/</link><pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/637/</guid><description>定理 1 $G,G'$ が群だとしよう。 第一同型定理: 準同型写像 $\phi : G \to G'$ が存在するならば $$ G / \ker ( \phi ) \simeq \phi (G) $$ 第二同型定理: $H \le G$ かつ $N \triangleleft G$ の場合 $$ (HN) / N</description></item><item><title>理想気体の断熱膨張</title><link>https://freshrimpsushi.github.io/jp/posts/636/</link><pubDate>Mon, 06 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/636/</guid><description>定理 物質量が$1$で、圧力が$p$、体積が$V$である断熱膨張をする理想気体の系では、$p V^{\gamma}$は定数である。 この時、$\g</description></item><item><title>バーンサイドの公式の導出</title><link>https://freshrimpsushi.github.io/jp/posts/634/</link><pubDate>Sun, 05 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/634/</guid><description>概要 Burnsideの公式は、群の作用と等方部分群に対する代表的な応用で、組み合わせ論を始めとする分野で直ちに使用できる。 公式 1 有限群$G$</description></item><item><title>理想気体の等温膨張</title><link>https://freshrimpsushi.github.io/jp/posts/633/</link><pubDate>Sat, 04 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/633/</guid><description>公式 モル数が$1$で等温膨張する理想気体の系では、熱エネルギーが$Q$、温度が$T$、膨張前の体積を$V_{1}$、膨張後の体積を$V_{2</description></item><item><title>등방部分群</title><link>https://freshrimpsushi.github.io/jp/posts/632/</link><pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/632/</guid><description>定義 1 群 $G$ に対して $X$ を$G$-集合と呼ぼう。$x \in X$ と $g \in G$ に対して $X_{g} := \left\{ x \in X \ | \ gx = x \right\}$ そして $G_{x} := \left\{ g \in G \ | \ gx = x \right\}$ とする。$G_</description></item><item><title>定積比熱及び等圧比熱</title><link>https://freshrimpsushi.github.io/jp/posts/631/</link><pubDate>Thu, 02 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/631/</guid><description>方程式 モル数が$1$の理想気体の系において、定容比熱$C_{V}$と定圧比熱$C_{p}$に関する次の式が成り立つ。 $$ C_{p} = C_{V} + R = {{5} \over {2}} R $$</description></item><item><title>群の作用</title><link>https://freshrimpsushi.github.io/jp/posts/630/</link><pubDate>Wed, 01 Aug 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/630/</guid><description>定義 1 単位元が$e$の群$G$と集合$X$に対し、以下の二つの条件を満たす二項演算$\ast : G \times X \to X$を$X$上での$G$の作用acti</description></item><item><title>熱力学の第一法則</title><link>https://freshrimpsushi.github.io/jp/posts/629/</link><pubDate>Tue, 31 Jul 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/629/</guid><description>法則 熱エネルギーが$Q$の系に対して働ける仕事が$W$の時、内部エネルギー$U$に対して次の式が成り立つ。 $$ d U = \delta Q + \delta W $$ $\delta</description></item><item><title>抽象代数学における剰余群</title><link>https://freshrimpsushi.github.io/jp/posts/628/</link><pubDate>Mon, 30 Jul 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/628/</guid><description>定義 1 $H \subset G$のすべての剰余類の集合を$G / H$としよう。$(aH) \ast\ (bH) = (ab) H$としてよく定義された二項演算$\ast$が存在する場合、$\</description></item><item><title>熱容量</title><link>https://freshrimpsushi.github.io/jp/posts/627/</link><pubDate>Sun, 29 Jul 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/627/</guid><description>定義1 物体の温度を$dT$だけ上げるのに必要な熱$dQ$を物体の熱容量heat capacityと呼び、capacityのCに因んで次のように</description></item><item><title>チホノフの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/626/</link><pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/626/</guid><description>概要 インデックス集合 $\mathscr{A}$ が与えられているとする。 $\left\{ X_{\alpha} \ | \ \alpha \in \mathscr{A} \right\}$ が コンパクト 空間の集合であれば、$\displaystyle X : = \prod_{\alpha \in \mathscr{A}} X_{ \alpha}$</description></item><item><title>気体分子の平均運動エネルギー</title><link>https://freshrimpsushi.github.io/jp/posts/625/</link><pubDate>Fri, 27 Jul 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/625/</guid><description>式1 温度が$T$の系での気体分子の平均運動エネルギーは次の通りだ。 $$ \left\langle E_{K} \right\rangle = {{3} \over {2}} k_{B} T $$ 説明 気体分子一つ一つの運動エネルギーを計算して平均を</description></item><item><title>アレクサンダー部分基底定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/624/</link><pubDate>Thu, 26 Jul 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/624/</guid><description>定理 $X$を位相空間とする。 $X$はコンパクトである。$X$のすべての開被覆が有限部分被覆を持つようにする、$X$のメンバーで構成されたある</description></item><item><title>マクスウェル分布</title><link>https://freshrimpsushi.github.io/jp/posts/623/</link><pubDate>Wed, 25 Jul 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/623/</guid><description>定理1 気体分子の速度を表す確率変数 $V$ は、以下の確率密度関数で説明される マクスウェル分布maxwell distributionに従う。 $$ f(v) = \dfrac{4}{\sqrt{</description></item><item><title>抽象代数学における核、カーネル</title><link>https://freshrimpsushi.github.io/jp/posts/622/</link><pubDate>Tue, 24 Jul 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/622/</guid><description>定義 $G, G'$の単位元$e, e'$と準同型写像$\phi : G \to G'$に対して$\left\{ e' \right\}$の原像$ \phi^{-1} [ \left\{ e' \right\} ]$を$\p</description></item><item><title>連続二乗法の証明</title><link>https://freshrimpsushi.github.io/jp/posts/621/</link><pubDate>Mon, 23 Jul 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/621/</guid><description>アルゴリズム 自然数 $a,k,m$ に対して $b \equiv a^{k} \pmod{m}$ を次のように計算できる。 ステップ 1. $k$ の2進展開 $u_{i} = 0$ 又は $u_{i} = 1$ に対して次のように表す。 $$ k = \sum_{i=0}^{r} u_{i} 2^{i} = u_{0} +</description></item><item><title>位相空間のデカルト積</title><link>https://freshrimpsushi.github.io/jp/posts/620/</link><pubDate>Sun, 22 Jul 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/620/</guid><description>定義 1 インデックス集合 $\mathscr{A}$ に対して、$\left\{ X_{\alpha} \ | \ \alpha \in \mathscr{A} \right\}$ を位相空間の集合とし、$O_{\alpha}$ を $X_{\alpha}$ での開集合とする。 デカル</description></item><item><title>群のデカルト積</title><link>https://freshrimpsushi.github.io/jp/posts/619/</link><pubDate>Sat, 21 Jul 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/619/</guid><description>定義 1 2 群 $G_{1} , \cdots , G_{n}$ の直積とその要素 $\displaystyle (a_{1},\cdots , a_{n}), (b_{1} , \cdots , b_{n} ) \in \prod_{i=1}^{n} G_{i}$ について $$ (a_{1},\cdots , a_{n}) (b_{1} , \cdots , b_{n} ) = (a_{1} b_{1},\cdots , a_{n} b_{n}) $$ これを$G_{1} , \cdots , G_{n}$</description></item><item><title>等温大気中の高さに応じた気体分子数の公式</title><link>https://freshrimpsushi.github.io/jp/posts/618/</link><pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/618/</guid><description>式1 温度 $T$が一定だとするとき、高さ $h$での単位体積 $V=1$当たりの気体分子の数を $N(h)$としよう。気体分子の質量が $m$で、重力</description></item><item><title>スターリングの近似公式の厳密な証明</title><link>https://freshrimpsushi.github.io/jp/posts/616/</link><pubDate>Wed, 18 Jul 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/616/</guid><description>概要 $$ \lim_{n \to \infty} {{n!} \over {e^{n \ln n - n} \sqrt{ 2 \pi n} }} = 1 $$ 説明 スターリング近似あるいはスターリングの公式stirling formulaは、統計学や物理学など</description></item><item><title>ボルツマン分布</title><link>https://freshrimpsushi.github.io/jp/posts/615/</link><pubDate>Tue, 17 Jul 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/615/</guid><description>定理1 温度が$T$の系のエネルギーが$\varepsilon$である確率は、以下の通りである。 $$ P(\varepsilon) \propto e^{ - \frac{\varepsilon}{k_{B} T} } $$ この分布をボルツマン分布とい</description></item><item><title>ルベーグ空間におけるミンコフスキーの不等式の証明</title><link>https://freshrimpsushi.github.io/jp/posts/614/</link><pubDate>Mon, 16 Jul 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/614/</guid><description>証明 $p=1$の場合は、積分の性質によって自明に成立する。 $$ \int_{\Omega} \left| u(x) + v(x) \right| dx \le \int_{\Omega} \left| u(x) \right| dx + \int_{\Omega} \left| v(x) \right| dx $$ $1 \lt p \lt \infty$とする。$w$を$</description></item><item><title>物理学における温度の定義</title><link>https://freshrimpsushi.github.io/jp/posts/613/</link><pubDate>Sun, 15 Jul 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/613/</guid><description>定義1 2 エネルギーが$E$の系があるとしよう。$E$に関する微視状態の数を$\Omega (E) = \Omega$とするとき、 $$ \dfrac{1}{k_{B} T} := \dfrac{d \ln ( \Omega )}{d E }</description></item><item><title>熱力学の第零法則</title><link>https://freshrimpsushi.github.io/jp/posts/612/</link><pubDate>Sat, 14 Jul 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/612/</guid><description>法則1 系 $A,B,C$が$A$と$B$と熱力学的平衡を成していて、$B$が$C$と熱力学的平衡を成しているならば、$A$と$C$も熱力学的平</description></item><item><title>ルベーグ空間におけるヘルダーの不等式の証明</title><link>https://freshrimpsushi.github.io/jp/posts/609/</link><pubDate>Thu, 12 Jul 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/609/</guid><description>定理1 $\Omega \subset \mathbb{R}^{n}$を開集合としよう。次の式を満たす二つの定数$1 \lt p \lt \infty, 1 \lt p^{\prime} \lt \infty$が与えられたとする。 $$ \dfrac{1}{p}+\dfrac{1}{p^{\prime}}</description></item><item><title>スターリングの公式の簡単な導出</title><link>https://freshrimpsushi.github.io/jp/posts/608/</link><pubDate>Wed, 11 Jul 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/608/</guid><description>数式 以下の方程式を スターリングの公式stirling's formulaと呼ぶ。 $$ \lim_{n \to \infty} {{n!} \over {e^{n \ln n - n} \sqrt{ 2 \pi n} }} = 1 $$ 説明1 この近似は、大きな</description></item><item><title>カントール集合</title><link>https://freshrimpsushi.github.io/jp/posts/607/</link><pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/607/</guid><description>定義 $$ \begin{align*} I =&amp;amp; \left[ 0, 1 \right] \\ C_{1} =&amp;amp; \left[ 0, {{1} \over {3}} \right] \cup \left[ {{2} \over {3}} , 1 \right] \\ C_{2} =&amp;amp; \left[ 0, {{1} \over {3^2}} \right] \cup \left[ {{2} \over {3^2}}, {{3} \over {3^2}} \right] \cup \left[ {{6} \over {3^2}}, {{7} \over {3^2}} \right] \cup \left[ {{8} \over {3^2}} , 1 \right] \\ &amp;amp;\vdots \\ C_{n} =&amp;amp; \left[ 0, {{1}</description></item><item><title>Lp空間、ルベーグ空間</title><link>https://freshrimpsushi.github.io/jp/posts/605/</link><pubDate>Sun, 08 Jul 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/605/</guid><description>定義1 2 3 $\Omega \subset \mathbb{R}^{n}$を開集合、$p$を正の実数としよう。 $\Omega$上で定義された全ての可測関数 $f$に対して、</description></item><item><title>ベールの範疇定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/604/</link><pubDate>Sat, 07 Jul 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/604/</guid><description>説明 ベールの範疇定理は、ある集合の濃度を知ることや、関数解析などで補題として役立つ。</description></item><item><title>並列回路の合成抵抗を簡単に求める方法</title><link>https://freshrimpsushi.github.io/jp/posts/603/</link><pubDate>Fri, 06 Jul 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/603/</guid><description>ビルドアップ 上のような回路の合成抵抗を求めてみるとしよう。もちろん、下のように並列回路に変えれば、公式を通じて答えを求めることができる。 抵抗</description></item><item><title>理想気体の方程式</title><link>https://freshrimpsushi.github.io/jp/posts/602/</link><pubDate>Thu, 05 Jul 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/602/</guid><description>式1 気体の分子数を$N$、体積を$V$、圧力を$p$、絶対温度を$T$とする。すると、次の式が成立し、これを理想気体方程式ideal gas equ</description></item><item><title>ウォリス積</title><link>https://freshrimpsushi.github.io/jp/posts/601/</link><pubDate>Wed, 04 Jul 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/601/</guid><description>定理 $$ \prod_{n=1}^{\infty} {{4n^2} \over {4n^2 - 1}} = \lim_{n \to \infty} {{2 \cdot 2 } \over { 1 \cdot 3 } } \cdot {{4 \cdot 4 } \over { 3 \cdot 5 } } \cdot \cdots \cdot {{2n \cdot 2n } \over { (2n-1) \cdot (2n+1) } } = {{ \pi } \over {2}} $$ 説明 級数だけではなく、積で</description></item><item><title>オイラーの完全数定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/600/</link><pubDate>Tue, 03 Jul 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/600/</guid><description>定理 1 偶数 $n = 2^{p-1} (2^p - 1)$ が完全数ならば、$2^{p}-1$ はメルセンヌ素数だ。 説明 一見すると、ユークリッドの完全数公式の逆のように思えるが、偶</description></item><item><title>関数の内積を定積分で定義する理由</title><link>https://freshrimpsushi.github.io/jp/posts/599/</link><pubDate>Mon, 02 Jul 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/599/</guid><description>ビルドアップ 内積の一般的な定義は次のようである。 $H$をベクトル空間とする。$x,y,z \in H$と$\alpha, \beta \in \mathbb{C}$に</description></item><item><title>点のコンパクト化</title><link>https://freshrimpsushi.github.io/jp/posts/598/</link><pubDate>Sun, 01 Jul 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/598/</guid><description>定義 1 位相空間 $(X , \mathscr{T})$ に対して $\infty \notin X$ とする。$X_{\infty} := X \cup \left\{ \infty \right\}$ に対して、下記の二つの条件を満たす位相 $\mathscr{T}_{\infty}$ を定義した $(X_{\infty } , \mathscr{T}_{\infty} )$ を$</description></item><item><title>ラグランジュの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/597/</link><pubDate>Sat, 30 Jun 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/597/</guid><description>定理 1 $H$が有限群$G$の部分群であれば、$|H|$は$|G|$の約数である。 証明 少し考えれば、常識的に成立するし、証明もそれに相応しく簡</description></item><item><title>ルベーグ空間におけるコーシー・シュワルツの不等式</title><link>https://freshrimpsushi.github.io/jp/posts/596/</link><pubDate>Fri, 29 Jun 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/596/</guid><description>概要1 $f,g \in L^{2} (E)$ の場合 $fg \in L^{1}(E)$ が成り立ち、以下が当てはまる。 $$ \left| \int_{E} f \overline{g} dm \right| \le \left\| f g \right\|_{1} \le \left\| f \right\|_{2} \left\| g \right\|_{2} $$ ここで、$\| \cdot \|_{2}$は$L^{2}</description></item><item><title>L2空間</title><link>https://freshrimpsushi.github.io/jp/posts/594/</link><pubDate>Wed, 27 Jun 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/594/</guid><description>定義 1 関数空間 $L^{2}$ を次のように定義する。 $$ L^{2} (E) := \left\{ f : \left( \int_{E} | f |^2 dm \right)^{{1} \over {2}} &amp;lt; \infty \right\} $$ 性質 $L^{2}$は距離空間である。距離は次のように定義される</description></item><item><title>ユークリッドの完全数公式の導出</title><link>https://freshrimpsushi.github.io/jp/posts/593/</link><pubDate>Tue, 26 Jun 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/593/</guid><description>公式 1 $2^{p}-1$が素数ならば、$2^{p-1}(2^{p} - 1)$は完全数だ。 説明 全ての完全数がその形をしているかは確かではないが、</description></item><item><title>L1空間</title><link>https://freshrimpsushi.github.io/jp/posts/592/</link><pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/592/</guid><description>定義1 次のように関数空間$L^{1}$を定義する。 $$ L^{1} (E) := \left\{ f : E \to \mathbb{R} \Big \vert \int_{E} | f | dm \lt \infty \right\} $$ 性質 $L^{1}$はベクトル空間だ。 $L^{1}</description></item><item><title>ペアノの空間充填定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/586/</link><pubDate>Sat, 23 Jun 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/586/</guid><description>定理 1 $I = [0,1]$に対して、全射連続関数$f : I \to I \times I$が存在する。 説明 これは短いながらも非常に衝撃的な定理だ。この定理が真であれば、</description></item><item><title>ループの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/585/</link><pubDate>Fri, 22 Jun 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/585/</guid><description>定義 $\mathscr{O}$ を距離空間 $(X,d)$ の開集合カバーとする。 全ての部分集合 $A \subset X$ が $\sup \left\{ d(a,b) \ | \ a,b \in A \right\} &amp;lt; \varepsilon$ を満たし、ある $O \in \mathscr{O}$ に対して $A \subset O$ を満たす場合、$\v</description></item><item><title>ディリクレ境界条件が与えられた波動方程式の初期値問題の解</title><link>https://freshrimpsushi.github.io/jp/posts/583/</link><pubDate>Wed, 20 Jun 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/583/</guid><description>説明 $$ \begin{cases} u_{tt} = c^2 u_{xx} \\ u(0,x) = f(x) \\ u_{t}(0,x) = g(x) \\ \end{cases} $$ この方程式は、波動方程式から長さが$l$の$1$次元空間上のディリクレ境界条件である。 $$ \begin{cases} u(t,0) = \alpha (t) \\ u(t,l)</description></item><item><title>波動方程式に対するコーシー問題の解</title><link>https://freshrimpsushi.github.io/jp/posts/582/</link><pubDate>Tue, 19 Jun 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/582/</guid><description>説明 $$ \begin{cases} u_{tt} = c^2 u_{xx} \\ u(0,x) = f(x) \\ u_{t}(0,x) = g(x) \end{cases} $$ この式は、次の波動方程式で、密度density$\rho (x) &amp;gt; 0$と剛性stiffness$\kappa (x)</description></item><item><title>ディリクレ境界条件が与えられた熱方程式の初期値問題の解</title><link>https://freshrimpsushi.github.io/jp/posts/581/</link><pubDate>Mon, 18 Jun 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/581/</guid><description>説明 $$ \begin{cases} u_{t} = \gamma u_{xx} \\ u(t,0) = u(t,l) = 0 \\ u(0,x) = f(x) \end{cases} $$ この方程式は、長さが$l$である$1$次元空間でのディリクレ境界条件の熱方程式から来ています。 $$ \begin{cases} u(t,0)</description></item><item><title>熱方程式の解法</title><link>https://freshrimpsushi.github.io/jp/posts/580/</link><pubDate>Sun, 17 Jun 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/580/</guid><description>説明 $$ u_{t} = \gamma u_{xx} $$ 上の式は、一般化された熱方程式 $$ {{\partial} \over {\partial t}} \left( \sigma (x) u \right) = {{\partial} \over {\partial x }} \left( \kappa (x) {{\partial u} \over {\partial x}} \right) $$ で熱伝導率thermal conductivity $\kappa (x) &amp;gt; 0$ と熱容量</description></item><item><title>フーリエ級数を用いた偏微分方程式の解法</title><link>https://freshrimpsushi.github.io/jp/posts/579/</link><pubDate>Sat, 16 Jun 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/579/</guid><description>定義 ヒルベルト空間の関数 $f \in \mathcal{L}^{2} [- \pi , \pi] $ について $\displaystyle a_{k} = {{1} \over {\pi}} \int_{- \pi}^{\pi} f(x) \cos kx dx$ そして $\displaystyle b_{k} = {{1} \over {\pi}} \int_{- \pi}^{\pi} f(x) \sin kx dx$ について $$ f(x) \sim {{a_{0}} \over {2}} + \sum_{k=1}^{\infty} \left( a_{k} \cos kx + b_{x} \sin</description></item><item><title>Rでの様々な分布関数</title><link>https://freshrimpsushi.github.io/jp/posts/578/</link><pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/578/</guid><description>説明 Rで、特定の分布に関連した関数は、以下の接頭辞と接尾辞の組み合わせで作られます。 接頭辞 確率分布$X$の確率分布関数を$f(x)$としまし</description></item><item><title>バーガース方程式に対するリーマン問題の解</title><link>https://freshrimpsushi.github.io/jp/posts/575/</link><pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/575/</guid><description>説明 $$ \begin{cases} u_{t} + u u_{x} = 0 &amp;amp; , t&amp;gt;0 \\ u(t,x) = \begin{cases} a &amp;amp; ,x&amp;lt;0 \\ b &amp;amp; ,x&amp;gt;0 \end{cases} &amp;amp; , t=0 \end{cases} $$ リーマンの問題とは、初期値が与えられたバーガース方程式の中で、解を階段関数ste</description></item><item><title>Rでの切り上げ、切り捨て、特定の桁数への四捨五入</title><link>https://freshrimpsushi.github.io/jp/posts/577/</link><pubDate>Sat, 02 Jun 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/577/</guid><description>概要 ceiling() 関数は切り上げを、floor() 関数は切り下げを行う。このような関数は統計を扱うRで必要ないように見えるが、データを扱う時に意外と便利</description></item><item><title>ボルツァーノ-ワイエルシュトラスの性質と集積点のコンパクト性</title><link>https://freshrimpsushi.github.io/jp/posts/576/</link><pubDate>Fri, 01 Jun 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/576/</guid><description>定義 1 ある位相空間 $X$ の全ての無限部分集合の集積点が $X$ に属している場合、$X$ を ボルツァーノ-ワイエルシュトラス性質を持つというか、集積点コン</description></item><item><title>加算コンパクトとリンデローフ空間</title><link>https://freshrimpsushi.github.io/jp/posts/574/</link><pubDate>Thu, 31 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/574/</guid><description>定義 1 $X$ の全ての可算開被覆が有限部分被覆を持つ時、$X$ を 可算コンパクトという。 $X$ の全ての開被覆が可算部分被覆を持つ時、$X$ を リンデローフ</description></item><item><title>リーマン積分の一般化としてのルベーグ積分</title><link>https://freshrimpsushi.github.io/jp/posts/573/</link><pubDate>Wed, 30 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/573/</guid><description>定理 1 有界関数 $f : [a,b] \to \mathbb{R}$ と $g : \mathbb{R} \to [0,\infty)$ としよう。 [1]: $f$ が $[a,b]$ でリーマン積分可能であることは、$f$ が $[a,b]$ でほとんど至る所でルベーグ測度に対して連続で</description></item><item><title>PythonでWebドキュメントをクローリングして、タグを削除する</title><link>https://freshrimpsushi.github.io/jp/posts/572/</link><pubDate>Tue, 29 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/572/</guid><description>概要 Pythonはクローリング用のパッケージがよく整っており、簡単にフォローできる。ウェブページを読み込んで、htmlタグを削除してみよう。</description></item><item><title>混同行列と感度、特異度</title><link>https://freshrimpsushi.github.io/jp/posts/571/</link><pubDate>Mon, 28 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/571/</guid><description>定義 分類の問題でポジティブpositive$P$とネガティブnegative$N$を区別するモデルがあると仮定しよう。ポジティブをポジティブ</description></item><item><title>一様連続の定理</title><link>https://freshrimpsushi.github.io/jp/posts/570/</link><pubDate>Sun, 27 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/570/</guid><description>定義 距離空間 $(X, d)$ と $(Y, d&amp;rsquo;)$ に対して $f : X \to Y$ とする。全ての $\varepsilon &amp;gt; 0$ と $x_{1}, x_{2} \in X$ に対して $$ d(x_{1}, x_{2}) &amp;lt; \delta \implies d&amp;rsquo;( f( x_{1} ) , f( x_{2} ) ) &amp;lt; \varepsilon $$ を満たす $\delta &amp;gt; 0$ が存在すれば</description></item><item><title>ランキン・ユゴニオの条件とエントロピーの条件</title><link>https://freshrimpsushi.github.io/jp/posts/569/</link><pubDate>Sat, 26 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/569/</guid><description>定義 $$ \begin{cases} u_{t} + u u_{x} = 0 &amp;amp; , t&amp;gt;0 \\ u(t,x) = f(x) &amp;amp; , t=0 \end{cases} $$ 上記粘性のないバーガース方程式の解が$u$でその破裂時間が$t_{\ast}$だとする。 粘性のな</description></item><item><title>Rでの文字列操作</title><link>https://freshrimpsushi.github.io/jp/posts/568/</link><pubDate>Fri, 25 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/568/</guid><description>概要 開発者がよく使う言語と比べるとその程度は少ないが、Rでも文字列を扱うことは意外と多い。データが膨大で好き勝手な程、こんな些細なテクニック</description></item><item><title>整数論におけるシグマ関数</title><link>https://freshrimpsushi.github.io/jp/posts/567/</link><pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/567/</guid><description>定理 $\displaystyle \sigma (n) : = \sum_{d \mid n} d$ について、次のことが成り立つ。 [1]: 素数 $p$ に対して、 $$\sigma ( p^k ) = {{p^{k+1} - 1} \over {p-1}}$$ [2]: $\gcd (n , m ) = 1$ ならば、 $$\sigma (nm) = \sigma (n) \sigma (m)$$ 説明 シグマ関</description></item><item><title>非粘性バーガース方程式における質量保存の法則</title><link>https://freshrimpsushi.github.io/jp/posts/566/</link><pubDate>Wed, 23 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/566/</guid><description>定理 $$ \begin{cases} u_{t} + u u_{x} = 0 &amp;amp; , t&amp;gt;0 \\ u(t,x) = f(x) &amp;amp; , t=0 \end{cases} $$ 非粘性ブルガース方程式の解 $u$について、区間 $[a,b]$までの質量 $M$を次のように定義する</description></item><item><title>測度論におけるレヴィの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/564/</link><pubDate>Tue, 22 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/564/</guid><description>定理 1 もし $\displaystyle \sum_{k=1}^{\infty} \int |f_{k}| dm &amp;lt; \infty$ ならば、$\displaystyle \sum_{k=1}^{\infty} f_{k} (x)$ は ほとんど至る所で 収束して ルベーグ積分可能で、その積分は具体的に以下の通り</description></item><item><title>位相空間における最大値最小値定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/563/</link><pubDate>Mon, 21 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/563/</guid><description>定理 1 コンパクト空間$X$に対し、関数$f : X \to \mathbb{R}$が連続であれば、全ての$x \in X$に対して$f(c) \le f(x) \le f(d)$を満</description></item><item><title>コンパクト空間と連続関数の有用な性質들</title><link>https://freshrimpsushi.github.io/jp/posts/561/</link><pubDate>Sun, 20 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/561/</guid><description>定理 $f : X \to Y$について、$X$がコンパクトで、$f$が連続だとしよう。 [2]: $Y$がハウスドルフならば、$f$は閉関数だ。閉集合$C \subset X$に対</description></item><item><title>ジップの法則</title><link>https://freshrimpsushi.github.io/jp/posts/560/</link><pubDate>Sat, 19 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/560/</guid><description>法則 コーパスで$k$番目によく出現する単語の相対頻度を$f_{k}$とした場合 $$ f_{k} = {{C} \over {k}} $$ 説明 ここで、$C$は$\displaystyle</description></item><item><title>ヒープスの法則</title><link>https://freshrimpsushi.github.io/jp/posts/559/</link><pubDate>Fri, 18 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/559/</guid><description>法則 コーパスでのユニークな単語の数を $M$、トークンの数を $T$ とすると $$ M = kT^{b} $$ 説明 コーパスが英語の場合、通常、定数 $k,b$ は $10 \le k \le 100$ で、およそ $b</description></item><item><title>Rでのブートストラップ関数の使用方法</title><link>https://freshrimpsushi.github.io/jp/posts/558/</link><pubDate>Thu, 17 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/558/</guid><description>概要 Rでブートストラップを実行するコードを直接書くこともできるが、基本的に提供されている関数を利用することもできる。その過程は以下のようにシ</description></item><item><title>支配収束定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/557/</link><pubDate>Wed, 16 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/557/</guid><description>定理 1 測定可能集合 $E \in \mathcal{M}$ と $g \in \mathcal{L}^{1} (E)$ について、数列の測定可能関数 $\left\{ f_{n} \right\}$ が $E$ のほとんど至る所で $|f_{n}| \le g$ を満たすとする。もし、$E$ のほとんど至る所</description></item><item><title>メルセンヌ素数</title><link>https://freshrimpsushi.github.io/jp/posts/552/</link><pubDate>Tue, 15 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/552/</guid><description>定義 1 $M_{n} = 2^{n} - 1$が素数なら、$M_{n}$をメルセンヌ素数mersenne Primeと呼ぶ。 説明 メルセンヌ素数の発見は、$p=x^{n}-</description></item><item><title>モンテカルロ法とブートストラップの違い</title><link>https://freshrimpsushi.github.io/jp/posts/551/</link><pubDate>Mon, 14 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/551/</guid><description>概要 モンテカルロ法は、任意のデータを使ってシミュレーションを繰り返し、新しい技術を検証する方法であり、ブートストラップは実際のデータから再サ</description></item><item><title>デザイン行列</title><link>https://freshrimpsushi.github.io/jp/posts/550/</link><pubDate>Sun, 13 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/550/</guid><description>ビルドアップ Rで内蔵データ faithful を読み込み、head()関数で確認してみよう。 たった六つだけど、一見すると、eruptionsとwaitingは</description></item><item><title>ルベーグ積分可能</title><link>https://freshrimpsushi.github.io/jp/posts/549/</link><pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/549/</guid><description>定義 1 基本性質 [2]: $f \in \mathcal{L}^{1} (E)$ ならば $\displaystyle \left| \int_{E} f dm \right| \le \int_{E} | f | dm$ [3]: $f \in \mathcal{L}^{1} (E) $ そして $c \in \mathbb{R}$ ならば $\displaystyle \int_{E} (c f) dm = c \int_{E} f dm$ [4]: $f,g \in \mathcal{L}^{1} (E) $ ならば $\displaystyle \int_{E} ( f + g ) dm =</description></item><item><title>回帰分析とは?</title><link>https://freshrimpsushi.github.io/jp/posts/548/</link><pubDate>Fri, 11 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/548/</guid><description>説明 回帰分析は、ほぼすべての統計的手法の基礎となっているため、一般的すぎるか特殊すぎる説明が多い。回帰分析が何かを一言で説明するなら、変数間</description></item><item><title>放物線の焦点を通る直線が持つ性質</title><link>https://freshrimpsushi.github.io/jp/posts/562/</link><pubDate>Thu, 10 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/562/</guid><description>定理 放物線 $y^2 = 4px$ において、焦点 $P(p,0)$ を通る直線が放物線と交わる二点をそれぞれ $A, B$ とすると、 $$ {{1} \over {\overline{PA}} } + {{1} \over {\overline{PB}} } = {{1} \over {p}} $$ 証明 場合 1. $a=b$ 焦点を通る直</description></item><item><title>標本標準偏差と標準誤差の区別</title><link>https://freshrimpsushi.github.io/jp/posts/541/</link><pubDate>Thu, 10 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/541/</guid><description>定義 $X$から得られたデータを$\mathbf{x} = ( x_{1}, x_{2}, \cdots , x_{n} )$としよう。 標本平均: $$ \overline{x} = {{1} \over {n}} \sum_{i=1}^{n} x_{i} $$ 標本標準偏差: $$ s_{x} = \sqrt { {{1} \over {n-1}} \sum_{i=1}^{n}</description></item><item><title>Rでべき関数のグラフを描く方法</title><link>https://freshrimpsushi.github.io/jp/posts/538/</link><pubDate>Wed, 09 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/538/</guid><description>概要 単変量関数のグラフを描く方法について簡単に紹介する。統計学で適切な例として、べき関数を描いてみよう。 定義 帰無仮説 $H_{0} : \theta \in \Theta_{0}$ と対立仮説 $H_{1} :</description></item><item><title>P値または有意確率の簡単な定義</title><link>https://freshrimpsushi.github.io/jp/posts/537/</link><pubDate>Tue, 08 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/537/</guid><description>定義 1 仮設検定で帰無仮説を棄却する確率を有意確率p-valueと言う。 説明 有意確率が有意水準より小さい場合、帰無仮説が棄却されたと見なされる</description></item><item><title>独立とは相関がないという意味ではない</title><link>https://freshrimpsushi.github.io/jp/posts/536/</link><pubDate>Mon, 07 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/536/</guid><description>説明 独立である場合、相関関係はないが、相関関係がないからといって独立とは限らない。 相関関係がない時に独立であり、必要十分条件になるケースは、</description></item><item><title>単調収束定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/535/</link><pubDate>Sun, 06 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/535/</guid><description>定理 1 非負の可測関数の数列 $\left\{ f_{n} \right\}$ が $f_{n} \nearrow f$ を満たすとする。そうすると、 $$ \lim_{n \to \infty} \int_{E} f_{n} dm = \int_{E} f dm $$ 説明 $f_{n} \nearrow f$ とは、すべての $x$ に対して、$f_{n}</description></item><item><title>ファトゥの補題の証明</title><link>https://freshrimpsushi.github.io/jp/posts/534/</link><pubDate>Sat, 05 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/534/</guid><description>定理1 測度が非負の可測関数の数列 $\left\{ f_{n} \right\}$ に対して、 $$ \int_{E} \left( \liminf_{n \to \infty} f_{n} \right) dm \le \liminf_{n \to \infty} \int_{E} f_{n} dm $$ $\liminf$ はリミットインフィマムだ。 説明 実解析での単調収束定理と優</description></item><item><title>非粘性バーガース方程式の解</title><link>https://freshrimpsushi.github.io/jp/posts/532/</link><pubDate>Fri, 04 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/532/</guid><description>定義 以下の準線形偏微分方程式を ブルガース方程式burgers&amp;rsquo; equationと呼ぶ。 $$ \begin{cases} u_{t} + u u_{x} = 0 &amp;amp; , t&amp;gt;0 \\ u(t,x) = f(x) &amp;amp; , t=0 \end{cases} $$ こ</description></item><item><title>不均一な進行波の偏微分方程式の解</title><link>https://freshrimpsushi.github.io/jp/posts/531/</link><pubDate>Thu, 03 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/531/</guid><description>定義 次の式を満たす$u$を非一様進行波non-uiform traveling waveという。 $$ \begin{cases} u_{t} + c(x) u_{x} = 0 &amp;amp; , t&amp;gt;0 \\ u(t,x) = f(x) &amp;amp; , t=0 \end{cases} $$ ここで$t$は時間、$x</description></item><item><title>一様進行波の偏微分方程式の解</title><link>https://freshrimpsushi.github.io/jp/posts/530/</link><pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/530/</guid><description>定義 次の式を満たす$u$を一様な進行波uniform traveling waveという。 $$ \begin{cases} u_{t} + c u_{x} + a u = 0 &amp;amp; , t&amp;gt;0 \\ u(t,x) = f(x) &amp;amp; , t=0 \end{cases} $$ ここで、$t$は時間、$</description></item><item><title>定在波の偏微分方程式の解</title><link>https://freshrimpsushi.github.io/jp/posts/529/</link><pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/529/</guid><description>定義 次の条件を満たす$u$を定常波stationary waveという。 $$ \begin{cases} u_{t} = 0 &amp;amp; , t&amp;gt;0 \\ u(t,x) = f(x) &amp;amp; , t=0 \end{cases} $$ 説明 定常波は、時間が経っても形が変わ</description></item><item><title>Rで桁数の制限をなくす</title><link>https://freshrimpsushi.github.io/jp/posts/528/</link><pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/528/</guid><description>概要 Rは統計学のための言語だけど、Rのコンソールはデータを見るのに適していない。 それにもかかわらず、観測値が数十万に達するビッグデータを扱う</description></item><item><title>ルベーグ積分</title><link>https://freshrimpsushi.github.io/jp/posts/527/</link><pubDate>Mon, 30 Apr 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/527/</guid><description>ビルドアップ リーマン積分の一般化を考える前に、単純関数simple functionというものを定義する必要がある。 関数値が非負で、$\phi</description></item><item><title>RでNAを削除する</title><link>https://freshrimpsushi.github.io/jp/posts/526/</link><pubDate>Sun, 29 Apr 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/526/</guid><description>概要 NAはNot Availableの略で、Rプログラミングでは主に「欠損値」を意味します。一般的なプログラミング言語のnullと意味も使用も</description></item><item><title>n-グラムとジャッカード係数</title><link>https://freshrimpsushi.github.io/jp/posts/525/</link><pubDate>Sat, 28 Apr 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/525/</guid><description>定義 n-グラムn-gramとは、ある文字列をn個ずつ切り分けたものを指す。 ジャカード係数jaccard Coefficientとは、二つの集合</description></item><item><title>測度論でのほとんど至る所とほとんど確実に</title><link>https://freshrimpsushi.github.io/jp/posts/524/</link><pubDate>Fri, 27 Apr 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/524/</guid><description>定義 1 関数 function $f : E \to \overline{\mathbb{R}}$ が、$E_{0} \subset E$ の集合(ここで $m(E_{0}) = 0$)を除いて、ある性質 $P$ を持つ場合、$f$ は $E$ のほとんど至る所で $P$ の性質を持つ</description></item><item><title>整数と浮動小数点数のフォーマットコードにdとfを使用する理由</title><link>https://freshrimpsushi.github.io/jp/posts/523/</link><pubDate>Thu, 26 Apr 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/523/</guid><description>なぜ dと fなのか 1 CやPythonなどの言語で、文字列の入出力に使われるフォーマットコードには %s、%c、%d、%f などがある。知っての通り</description></item><item><title>なぜ「陰関数」は誤解を招く翻訳なのか？</title><link>https://freshrimpsushi.github.io/jp/posts/522/</link><pubDate>Wed, 25 Apr 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/522/</guid><description>定義 正関数か負関数かの違いは、それぞれがどのように表現されたかに過ぎません。数学では多少なじみが薄い表現ですが、区分は「独立変数」と「従属変</description></item><item><title>ルベーグ可測関数</title><link>https://freshrimpsushi.github.io/jp/posts/518/</link><pubDate>Tue, 24 Apr 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/518/</guid><description>定義 1 関数 $f: E \in \overline{ \mathbb{R} }$ が全ての区間 $I \subset \overline{ \mathbb{R} }$ に対して $$ f^{-1} (I) = \left\{ x \in \mathbb{R} \ | \ f(x) \in I \right\} \in \mathcal{M} $$ であれば、$f$ を (ルベーグ) 可測(Lesbegue</description></item><item><title>コンパクトなハウスドルフ空間は正則空間である</title><link>https://freshrimpsushi.github.io/jp/posts/514/</link><pubDate>Tue, 10 Apr 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/514/</guid><description>定理 1 [3]: ハウスドルフ空間$X$の二つのコンパクト部分集合$A,B \subset X$が$A \cap B = \emptyset$である場合、以下を満たす開集合$U, V</description></item><item><title>事象の独立と条件付き確率</title><link>https://freshrimpsushi.github.io/jp/posts/521/</link><pubDate>Tue, 10 Apr 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/521/</guid><description>定義 1 確率空間 $(\Omega , \mathcal{F} , P)$ が与えられたとしよう。 $P(B)&amp;gt;0$ に対して、$\displaystyle P (A | B) = {{P(A \cap B)} \over {P(B)}}$ を $B$ における $A$ の条件付き確率con</description></item><item><title>棄却域と有意水準</title><link>https://freshrimpsushi.github.io/jp/posts/509/</link><pubDate>Sun, 08 Apr 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/509/</guid><description>定義 1 帰無仮説が真だにも関わらず、検定で帰無仮説を棄却する誤りを第一種の過誤と言う。 対立仮説が真だにも関わらず、検定で帰無仮説を棄却できない</description></item><item><title>第一種過誤と第二種過誤の違い</title><link>https://freshrimpsushi.github.io/jp/posts/508/</link><pubDate>Sat, 07 Apr 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/508/</guid><description>定義 仮設検定で、$H_{0}$が真であるのに$H_{0}$を採用しなかった場合のエラーは第1種の誤りと呼び、$H_{0}$が偽でありながら$</description></item><item><title>有限交差性質</title><link>https://freshrimpsushi.github.io/jp/posts/502/</link><pubDate>Fri, 06 Apr 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/502/</guid><description>定義 1 位相空間 を$X$とし、$\mathscr{A} \subset \mathscr{P} (X)$とする。全ての有限の部分集合 $A \subset \mathscr{A}$ に対して、$\displaystyle \bigcap A</description></item><item><title>帰無仮説と対立仮説の設定方法</title><link>https://freshrimpsushi.github.io/jp/posts/500/</link><pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/500/</guid><description>説明 仮説検定: 帰無仮説 $H_{0}$ vs 対立仮説 $H_{1}$ 2018年4月基準で、一部教科書やウィキペディアでは、帰無仮説を「統計学で初めから捨てることを予想する仮</description></item><item><title>ルジャンドルの倍数公式の導出</title><link>https://freshrimpsushi.github.io/jp/posts/499/</link><pubDate>Wed, 04 Apr 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/499/</guid><description>公式 $$ \Gamma (2r) = {{2^{ 2r - 1} } \over { \sqrt{ \pi } } } \Gamma \left( r \right) \Gamma \left( {{1} \over {2}} + r \right) $$ 説明 割れる形はそんなに綺麗じゃないけど、因数を小さく割れることは確かに便利な事</description></item><item><title>測度論で定義される確率</title><link>https://freshrimpsushi.github.io/jp/posts/498/</link><pubDate>Tue, 03 Apr 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/498/</guid><description>定義 1 $\mathcal{F}$が集合$\Omega$のシグマ場だとしよう。 可測集合 $E \in \mathcal{F}$を事象と呼ぶ。 $\mathc</description></item><item><title>Rにおけるカテゴリカルデータを数値データに変換する</title><link>https://freshrimpsushi.github.io/jp/posts/497/</link><pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/497/</guid><description>概要 数値であるにも関わらずカテゴリカルデータとして読まれ、連続データに変換したいけれど上手くいかない人たちのためのヒントだ。このポストはその</description></item><item><title>Rで外部データをインポートする</title><link>https://freshrimpsushi.github.io/jp/posts/496/</link><pubDate>Sun, 01 Apr 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/496/</guid><description>概要 Rは基本的に統計学のために生まれた言語だから、データの入力も便利になっている。 read.table(file, header = FALSE, sep = &amp;#34;&amp;#34;, na.strings = &amp;#34;NA&amp;#34;, fileEncoding = &amp;#34;&amp;#34;) 関数紹介 read.table()</description></item><item><title>ボレル集合</title><link>https://freshrimpsushi.github.io/jp/posts/495/</link><pubDate>Fri, 30 Mar 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/495/</guid><description>定義 1 $\mathcal{F}$ をユークリッド空間 $\mathbb{R}$のシグマ場と言おう。 $\displaystyle \mathcal{B} : = \bigcap \left\{ \mathcal{F} : \mathcal{I} \subset \mathcal{F} \right\}$ は全ての区間の集まり $\mathcal{I}$ によって生成されたと言わ</description></item><item><title>ルベーグ測度</title><link>https://freshrimpsushi.github.io/jp/posts/494/</link><pubDate>Thu, 29 Mar 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/494/</guid><description>定義 1 $E \in \mathcal{M}$に関して、関数$m : \mathcal{M} \to [0,\infty]$を$m(E) := m^{ \ast } (E)$のように定義しよう。$m$を**</description></item><item><title>中国人の剰余定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/493/</link><pubDate>Wed, 28 Mar 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/493/</guid><description>要約 $\gcd(n,m) = 1$と$\begin{cases} x \equiv b \pmod{n} \\ x \equiv c \pmod{m} \end{cases}$が$1 \le x \le nm$でぴったり一つの解を持つ。 説明 紀元3世</description></item><item><title>オイラーのトーシェント合計式の導出</title><link>https://freshrimpsushi.github.io/jp/posts/492/</link><pubDate>Tue, 27 Mar 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/492/</guid><description>公式 $n$ の 約数を $d_{1}, d_{2} , \cdots , d_{r}$ とすると、 $$ n = \sum_{ i = 1 }^{r} \phi (d_{i}) = \phi (d_{1}) + \phi (d_{2}) + \cdots + \phi (d_{r}) $$ 説明 トーシェント関数は定義されてから少し不自然に感じられるか</description></item><item><title>オイラーのトーシェント定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/491/</link><pubDate>Mon, 26 Mar 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/491/</guid><description>定理 1 $$ \gcd(a,m) = 1 \implies a^{ \phi (m) } \equiv 1 \pmod{m} $$ 説明 この定理がフェルマーの小定理を一般化したものであることがすぐにわかり、実際、証明法もほぼ同じである。 証明</description></item><item><title>シグマ代数と可測空間</title><link>https://freshrimpsushi.github.io/jp/posts/490/</link><pubDate>Sun, 25 Mar 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/490/</guid><description>定義 集合$X \ne \emptyset$に対して、以下の条件を満たす$\mathcal{E} \subset \mathscr{P} (X)$を$X$上のシグマ代数またはシグマ場という</description></item><item><title>位相空間におけるコンパクトとプレコンパクトとは？</title><link>https://freshrimpsushi.github.io/jp/posts/489/</link><pubDate>Sat, 24 Mar 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/489/</guid><description>定義 1 位相空間 $\left( X, \mathscr{T} \right)$ に対して $A \subset X$ としよう。 $X$ の開集合から成る集合 $\mathscr{O} \subset \mathscr{T}$ が次を満たすとき、$\mathscr{O}$ を $A$ の オープンカバーo</description></item><item><title>位相数学者のサイン曲線と距離空間</title><link>https://freshrimpsushi.github.io/jp/posts/488/</link><pubDate>Fri, 23 Mar 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/488/</guid><description>定義 1 次のように定義される$S$は位相数学者のサイン曲線topologist&amp;rsquo;s Sine curveと呼ばれる。 $$ S : = \left\{ (0,y) \ | \ y \in [-1,1]</description></item><item><title>局所接続と局所経路接続</title><link>https://freshrimpsushi.github.io/jp/posts/486/</link><pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/486/</guid><description>定義 $X$ を位相空間としよう。 $x \in X$ を含む全ての $U$ について $x \in C \subset U$ を満たす開いた連結集合 $C$ が存在する場合、$X$ は $x$ で局所連結であるという。全</description></item><item><title>パス連結成分</title><link>https://freshrimpsushi.github.io/jp/posts/485/</link><pubDate>Wed, 21 Mar 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/485/</guid><description>定義 1 ある位相空間 $X$ のパス連結部分空間の中で、自分自身だけを連結スーパーセットとして持つパス連結集合を $X$ のパス連結成分という。特に、$x \in X$</description></item><item><title>接着補助定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/484/</link><pubDate>Tue, 20 Mar 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/484/</guid><description>概要 ある位相空間 $X,Y$ と二つの閉集合 $A,B \subset X$ が $A \cup B = X$ を満たし、二つの連続関数 $f : A \to Y$ と $g : B \to Y$ が全ての $x \in A \cap B$ に対して $f(x) = g(x)$ であるとしよ</description></item><item><title>外測度</title><link>https://freshrimpsushi.github.io/jp/posts/480/</link><pubDate>Mon, 19 Mar 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/480/</guid><description>定義 1 $E \subset \mathbb{R}$, $\left\{ I_{n} \in \mathcal{I} \ | \ n \in \mathbb{N} \right\} $, $\left\{ E_{n} \in \mathscr{P} ( \mathbb{R} ) \ | \ n \in \mathbb{N} \right\}$において、関数$m^{ \ast } (E) : = \inf Z_{E}$を外測度out</description></item><item><title>位相数学におけるパス連結성</title><link>https://freshrimpsushi.github.io/jp/posts/478/</link><pubDate>Sun, 18 Mar 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/478/</guid><description>定義 1 $X$ を位相空間と呼び、$C \subset \mathbb{R}^{n}$ だとしよう。 連続関数 $p : [0,1] \to X$ を 始点 $p(0)$ から 終点 $p(1)$ への 経路 とする。$\overline{p}(t) = p(1-t)$ を $p$ の</description></item><item><title>位相数学における固定点性質とは？</title><link>https://freshrimpsushi.github.io/jp/posts/477/</link><pubDate>Sat, 17 Mar 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/477/</guid><description>定義 関数 $f : X \to X$において$f(x_{0}) = x_{0}$を満たす$x_{0}$を$f$の固定点fixed pointと言う。全ての連続関数</description></item><item><title>中間値の定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/476/</link><pubDate>Fri, 16 Mar 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/476/</guid><description>定義 1 $f : [a,b] \to \mathbb{R}$ が連続ならば、$f(a)$ と $f(b)$ の間にある $y_{0}$ に対して $y_{0} = f(c)$ を満たす $c \in (a,b)$ が存在する。 説明 対偶を利用すれば、$\mathbb{R</description></item><item><title>空集合</title><link>https://freshrimpsushi.github.io/jp/posts/475/</link><pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/475/</guid><description>定義 1 実数の区間の集合$\mathcal{I}$に対して、函数$l : \mathcal{I} \to [ 0 , \infty )$を$l( I ) := \sup{I} - \inf{I}$として定義して、長さl</description></item><item><title>連結成分と完全非連結空間</title><link>https://freshrimpsushi.github.io/jp/posts/474/</link><pubDate>Wed, 14 Mar 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/474/</guid><description>定義 位相空間 $X$ の連結部分空間の中で、自分自身以外に連結な上位集合supersetを持たない連結集合を、$X$ の連結成分connected Co</description></item><item><title>連結空間の部分空間の性質들</title><link>https://freshrimpsushi.github.io/jp/posts/473/</link><pubDate>Tue, 13 Mar 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/473/</guid><description>要旨 位相空間 $X$ について$Y \subset X$としよう。 [1]: $Y$ が連結空間ならば、$\overline{Y}$も連結空間である。 [2]: $Y$ が非連結空間であることと、</description></item><item><title>抽象代数学における剰余類と正規部分群</title><link>https://freshrimpsushi.github.io/jp/posts/469/</link><pubDate>Fri, 09 Mar 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/469/</guid><description>定義 1 集合$G$とその部分群$H$で$aH = \left\{ ah \ | \ h \in H \right\}$が左余剰類left Coset、$Ha = \left\{ ha \ | \ h \in H \rig</description></item><item><title>抽象代数学における交代群</title><link>https://freshrimpsushi.github.io/jp/posts/468/</link><pubDate>Thu, 08 Mar 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/468/</guid><description>定義 1 対称群 $S_{n}$ の偶置換から成る群を交代群と呼び、$A_{n}$ と表す。 定理 $n \ge 2$ に対して $$ \left| A_{n} \right| = {{\left| S_{n} \right|} \over {2}} = {{ n! } \over {2}} $$ 説明 $A_{n}$ の位数ord</description></item><item><title>偶数でありながら奇数でもある順列は存在しないことの証明</title><link>https://freshrimpsushi.github.io/jp/posts/467/</link><pubDate>Wed, 07 Mar 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/467/</guid><description>定義 有限対称群の置換が偶数個の転位の積で表せる場合を偶evenと呼び、奇数個の転位の積で表せる場合を奇oddと呼ぶ。 置換の符号 $\sgn (\sigm</description></item><item><title>伝送連続関数は接続性を保持する</title><link>https://freshrimpsushi.github.io/jp/posts/462/</link><pubDate>Tue, 06 Mar 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/462/</guid><description>定理 連結空間 $X$において、$f : X \to Y$が全射の連続関数ならば、$Y$は連結空間である。 説明 連結や連続のような似たような言葉が混ざっている</description></item><item><title>接続空間のさまざまな同値条件</title><link>https://freshrimpsushi.github.io/jp/posts/461/</link><pubDate>Mon, 05 Mar 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/461/</guid><description>定義 1 位相空間 $X$ に対して部分集合 $A \subset X$ が $$ A \ne \emptyset \\ A \ne X $$ ならば $A$ を $X$ の真部分集合proper Subsetという。二つの真部分集合 $A,B \subset X$ に対</description></item><item><title>抽象代数学における軌道、巡回、置換</title><link>https://freshrimpsushi.github.io/jp/posts/460/</link><pubDate>Sun, 04 Mar 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/460/</guid><description>定義 1 $\sim$の同値類を$\sigma$の軌道orbitという。 二つ以上の元を持つ軌道を高々一つだけ持つ順列を循環cycleという。 循環</description></item><item><title>位相数学における連結性</title><link>https://freshrimpsushi.github.io/jp/posts/457/</link><pubDate>Sat, 03 Mar 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/457/</guid><description>定義 1 位相空間$X$で、$A \cap B = \emptyset$と$A \cup B = X$を満たす開集合$A \ne \emptyset$、$B \ne \emptyset$が</description></item><item><title>ハウスドルフ空間では、数列の極限は一意である</title><link>https://freshrimpsushi.github.io/jp/posts/456/</link><pubDate>Fri, 02 Mar 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/456/</guid><description>定理 $T_{2}$-空間の$X$上の数列$\left\{ x_{n} \right\}$は、二つ以上の異なる点に収束しない。 説明 極限の一意性の重要性につ</description></item><item><title>ケーリーの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/459/</link><pubDate>Wed, 28 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/459/</guid><description>定理 1 全ての群は，ある対称群の同型な部分群である。 説明 この短くて重要な定理は，対称群を研究すれば，全ての群を把握できるというメッセージを含ん</description></item><item><title>空間であることと、すべての有限部分集合が閉じていることは同値である</title><link>https://freshrimpsushi.github.io/jp/posts/455/</link><pubDate>Wed, 28 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/455/</guid><description>定理 $X$が$T_{1}$-空間であるための必要十分条件は、$X$の全ての単一要素集合$\left\{ x \right\}$が$X$内で閉集合</description></item><item><title>ベータ関数の三角関数表示</title><link>https://freshrimpsushi.github.io/jp/posts/458/</link><pubDate>Tue, 27 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/458/</guid><description>定理 $$ B(p,q) = 2 \int_{0}^{{\pi} \over {2}} \left( \sin \theta \right) ^{2p-1} \left( \cos \theta \right) ^{2q-1} d \theta $$ 説明 それがどんな種類の数学でも、ある関数を別の方法で表現できることは良いことだ。 証明 $\displaystyle B(p,q) = \int_{0}^{1} t^{p-1} (1-t)^{q-1}</description></item><item><title>位相数学における分離性質</title><link>https://freshrimpsushi.github.io/jp/posts/454/</link><pubDate>Tue, 27 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/454/</guid><description>定義 1 $X$ を位相空間とする。$a,b \in X$ について、$a \ne b$ 且つ $U, V \subset X$ が $X$ で開集合であるとしよう。 $T_{0}$：$a$ と $b$ のどちらか一方だけ</description></item><item><title>クラインの四元群</title><link>https://freshrimpsushi.github.io/jp/posts/453/</link><pubDate>Mon, 26 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/453/</guid><description>定義 1 $V = \left\{ e, a, b, c \right\}$と二項演算$\cdot$について、$\left&amp;lt; V , \ \cdot \ \right&amp;gt;$をクライン四群k</description></item><item><title>トーシェント関数の乗法性質の証明</title><link>https://freshrimpsushi.github.io/jp/posts/452/</link><pubDate>Mon, 26 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/452/</guid><description>定理 1 $$ \gcd (n , m) =1 \implies \phi ( n m ) = \phi (n) \phi (m) $$ 説明 トーション関数から導かれるいくつかの重要な結果を得るためには、絶対に必要な性質である。明らかに</description></item><item><title>ベルヌーイ分布の平均と分散</title><link>https://freshrimpsushi.github.io/jp/posts/444/</link><pubDate>Sun, 25 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/444/</guid><description>公式 $X \sim U[a,b]$ 面積 $$ E(X) = {{ a+b } \over { 2 }} \\ \Var(X) = {{ (b-a)^{2} } \over { 12 }} $$ 導出 戦略: 一様分布の定義から直接演繹する。 一様分布の定義: $[a,b] \subset \mathbb{R}$ に対して、以下の確率</description></item><item><title>二項係数の一般化：ベータ関数</title><link>https://freshrimpsushi.github.io/jp/posts/450/</link><pubDate>Sun, 25 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/450/</guid><description>定理：ベータ関数で表される二項係数 $0 \le k\le n$が二つの自然数 $k,n$に対して満たされるとき、下記の式が成立する。 $$ \binom{n}{k}={}_{n}C_{k}=C(n,k)=\frac{1}{(n+1)B(n-k+1,k+1)} $$ 二つの自然数 $m,n$</description></item><item><title>シュヴァルツ-クリストッフェル変換</title><link>https://freshrimpsushi.github.io/jp/posts/449/</link><pubDate>Sat, 24 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/449/</guid><description>定理 1 複素平面上にある$n$個の角を持つ折れ線を$\mathscr{P}$と呼び、その角を$w_{r}$、内角の大きさを$\psi_{r}$</description></item><item><title>二項分布</title><link>https://freshrimpsushi.github.io/jp/posts/443/</link><pubDate>Sat, 24 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/443/</guid><description>定義 1 連続型 $[a,b] \subset \mathbb{R}$に対して、次のような確率密度関数を持つ連続確率分布 $U(a,b)$を一様分布という。 $$ f(x) = {{ 1 } \over { b</description></item><item><title>ジューコフスキー変換</title><link>https://freshrimpsushi.github.io/jp/posts/448/</link><pubDate>Fri, 23 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/448/</guid><description>定義 1 $\displaystyle w = f(z) = a z + {{b} \over {z}}$ としよう。$a=b$ ならば、$f$ を ジュコフスキー変換joukowski transform といい、中心が $0$ でない円を飛行機の翼断</description></item><item><title>三角関数による等角写像</title><link>https://freshrimpsushi.github.io/jp/posts/447/</link><pubDate>Thu, 22 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/447/</guid><description>定理 1 等角写像 $w = f(z) = \sin z$は垂直線 $y=k$ を楕円へ、水平線 $x = k$ を双曲線へ対応させる。 証明 $$ z = x + iy \\ w = u + i v $$とすると $$ u = \sin x \cosh y \\</description></item><item><title>位相数学における連続的性質とは？</title><link>https://freshrimpsushi.github.io/jp/posts/451/</link><pubDate>Wed, 21 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/451/</guid><description>ビルドアップ：部分空間 位相空間 $(X, \mathscr{T})$ について、$Y \subset X$ とする。 $\mathscr{T}&amp;rsquo; := \left\{ U \cap Y \ | \ U \in \mathscr{T} \right\}$ としたら、$(Y , \mathscr{T}&amp;rsquo; )$ は $X$ の部分空間subspaceに</description></item><item><title>指数関数による等角写像</title><link>https://freshrimpsushi.github.io/jp/posts/446/</link><pubDate>Wed, 21 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/446/</guid><description>定理 1 等角写像 $w = f(z) = e^{z} = e^{x} e^{i y}$ は長方形を扇形やアニュラスに対応させるんだ。 説明 $f(z) = e^{z}$ は明らかに 等角写像 だけど、単射じゃないから、その逆写像</description></item><item><title>ねじれ関数</title><link>https://freshrimpsushi.github.io/jp/posts/445/</link><pubDate>Tue, 20 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/445/</guid><description>同じく見る 解析整数論ではのトーティエント関数 定義 1 以下のように定義された$\phi$ を オイラーのトーティエント関数という。 $$ \phi ( m ) := \left| \left\{ a</description></item><item><title>位相的性質</title><link>https://freshrimpsushi.github.io/jp/posts/440/</link><pubDate>Tue, 20 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/440/</guid><description>定義 1 二つの空間$X,Y$が同相であれば、$X$の性質$P$を$Y$も持っている場合、$P$を位相的性質topological Propert</description></item><item><title>In Japanese: 抽象代数学における様々な写像</title><link>https://freshrimpsushi.github.io/jp/posts/439/</link><pubDate>Mon, 19 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/439/</guid><description>定義 群 $\left&amp;lt; G , \ast\ \right&amp;gt; , \left&amp;lt; G' , *' \right&amp;gt;$ を $\phi : G \to G'$ としよう。 $\forall x ,y \in G $、$\phi (x \ast\ y) = \phi (x ) *' \phi ( y)$ のとき、$\phi$ を準同型写像homomo</description></item><item><title>放物線を半平面に対応させる等角写像</title><link>https://freshrimpsushi.github.io/jp/posts/437/</link><pubDate>Mon, 19 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/437/</guid><description>定理 1 等角写像 $\displaystyle w = f(z) = z^{1/2}$ は放物線を半平面に対応させる。 説明 $\mathbb{R}^2$ で学んだように、明らかに思えるかもしれんが、複素平面でも成り立つかチェックが必</description></item><item><title>位相空間におけるホモトピー</title><link>https://freshrimpsushi.github.io/jp/posts/438/</link><pubDate>Wed, 14 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/438/</guid><description>定義 1 二つの位相空間 $X,Y$について、全単射 $f : X \to Y$が存在し、$f$とその逆関数 $f^{-1}$が共に連続関数ならば、$f$を位相同型</description></item><item><title>台形を円に対応させる等角写像</title><link>https://freshrimpsushi.github.io/jp/posts/436/</link><pubDate>Wed, 14 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/436/</guid><description>定理 1 等角写像 $\displaystyle w = f(z) = z^{n}$ は、扇形を半円に対応させる。 説明 扇形の半径を無限大と考えると、$f$ は角を平角に、その内部を半平面に対応させると言</description></item><item><title>ウィルソンの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/122/</link><pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/122/</guid><description>定理 1 2より大きい素数$p$について、$(p-1)! \equiv -1 \pmod{p}$が成り立つ。 説明 フェルマーの小定理ほどではないけれども、ウィルソン</description></item><item><title>半円を象限に対応させる等角写像</title><link>https://freshrimpsushi.github.io/jp/posts/434/</link><pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/434/</guid><description>定理 1 等角写像 $\displaystyle w = f(z) = {{z - a} \over {z + a}}$ は、半円を四分円に対応させる。 説明 $\displaystyle w = {{z - a} \over {z + a}}$ は特別な名前はないが、非常に重要で頻繁に使われる</description></item><item><title>開いた関数と閉じた関数</title><link>https://freshrimpsushi.github.io/jp/posts/435/</link><pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/435/</guid><description>定義 位相空間 $X,Y$ について $f : X \to Y$ だとしよう。 全ての開集合 $O \subset X$ に対して、$f (O)$ が $Y$ で開集合ならば、$f$ を開関数という。 全ての閉集合 $C \subset X$ に</description></item><item><title>フェルマーの小定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/121/</link><pubDate>Mon, 12 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/121/</guid><description>定理 1 素数 $p$ とそれと互いに素な整数 $a$ について、$a^{p-1} \equiv 1 \pmod{p}$ 説明 フェルマーの小定理は、シンプルでありながら非常に多くの場所で利用され</description></item><item><title>位相数学における連続とは</title><link>https://freshrimpsushi.github.io/jp/posts/432/</link><pubDate>Mon, 12 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/432/</guid><description>定義 日本語 位相空間 $(X, \mathscr{T}_{X} )$ と $(Y, \mathscr{T}_{Y} )$ に対して、$f: X \to Y$ としよう。$f(a)$ を含む全ての $V \in \mathscr{T}_{Y}$ に対して、$f(U) \subset V$ を満たしながら $a$ を含む</description></item><item><title>複素解析における反転</title><link>https://freshrimpsushi.github.io/jp/posts/433/</link><pubDate>Mon, 12 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/433/</guid><description>定義 1 直線 $L: 2px + 2qy + c = 0$ と円 $\mathscr{C}: |z - A | = r$、そしてそれらにない点 $P: z = x + iy$ を考えよう。これに対する逆点は次のように定義される。 $\displaystyle {{y - y^{</description></item><item><title>原始ピタゴラス数は互いに素である。</title><link>https://freshrimpsushi.github.io/jp/posts/429/</link><pubDate>Sun, 11 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/429/</guid><description>定理 $a^2 + b^2 = c^2$を満たす三つの自然数について、$a,b,c$のとき $$ \gcd (a,b) = 1 \\ \gcd (b,c) = 1 \\ \gcd (c,a) = 1 $$ 解説 一見、ピタゴラス数でも何でも明らか</description></item><item><title>抽象代数学における無限巡回群</title><link>https://freshrimpsushi.github.io/jp/posts/431/</link><pubDate>Sun, 11 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/431/</guid><description>定義 1 対称群の部分群 $D_{n} \leqslant S_{n}$ を $n$角形に対して回転や反転する順列のみを含む群と定義し、これを二面体群dihedral groupと呼ぶ。 説明 図</description></item><item><title>位相数学における基底の同値条件</title><link>https://freshrimpsushi.github.io/jp/posts/430/</link><pubDate>Sat, 10 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/430/</guid><description>定義 集合 $X$ で、$\mathscr{B}$ は位相 $\mathscr{T}$ の基底であり、$\mathscr{B} ' $ は位相 $\mathscr{T} ' $ の基底であるとするとき、$\maths</description></item><item><title>原始ピタゴラスの三つ組は二つの奇数のみで表すことができる</title><link>https://freshrimpsushi.github.io/jp/posts/428/</link><pubDate>Sat, 10 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/428/</guid><description>定理 1 $a^2 + b^2 = c^2$を満たす自然数の組$a,b,c$に対して、 $$ \begin{align*} a =&amp;amp; st \\ b =&amp;amp; {{s^2 - t^2 } \over {2}} \\ c =&amp;amp; {{s^2 + t^2 } \over {2}} \end{align*} $$ を満たす互いに素な二つの奇</description></item><item><title>位相数学における部分基底</title><link>https://freshrimpsushi.github.io/jp/posts/427/</link><pubDate>Fri, 09 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/427/</guid><description>定義 1 位相空間 $\left( X , \mathscr{T} \right)$ に対して、$\mathscr{S} \subset \mathscr{T}$ とする。 $\displaystyle \mathscr{B} = \left\{ \left. B = \bigcap_{ i = 1}^{n} S_{i} \ \right| \ S_{i} \in \mathscr{S} \right\}$ が $\mathscr{T}$ の基底になる時、$\math</description></item><item><title>複素解析における交差比</title><link>https://freshrimpsushi.github.io/jp/posts/426/</link><pubDate>Fri, 09 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/426/</guid><description>定義 1 拡張複素平面上で、四つの異なる点 $ z_{1} , z_{2} , z_{3} , z_{4} \in \overline{ \mathbb{C} }$ に対して、次のように交差比クロス・レイシオを定義する。 $$ (z_{1} , z_{2} , z_{3} , z_{4} ) = {{( z_{1}</description></item><item><title>ピタゴラスの三つ組の一つは必ず3の倍数でなければならない。</title><link>https://freshrimpsushi.github.io/jp/posts/96/</link><pubDate>Thu, 08 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/96/</guid><description>定義 1 自然数 $a,b,c$ が $a^2 + b^2 = c^2$ を満たすとき、$a$ や $b$ は$3$ の倍数だ。 説明 ピタゴラスの数 において、一つは必ず偶数だけではなく、少なくとも一つは</description></item><item><title>ピタゴラスの三つ組</title><link>https://freshrimpsushi.github.io/jp/posts/415/</link><pubDate>Wed, 07 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/415/</guid><description>定義 1 $a^2 + b^2 = c^2$を満たす3つの自然数の組$(a,b,c)$をピタゴラスの三つ組と言う。もし3つの自然数が公約数を持たなければ、それは原</description></item><item><title>ピタゴラス数のうち一つは偶数でなければならない</title><link>https://freshrimpsushi.github.io/jp/posts/416/</link><pubDate>Wed, 07 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/416/</guid><description>定理 1 自然数 $a,b,c$が$a^2 + b^2 = c^2$を満たす時、$a$または$b$は偶数だ。 説明 興味深いことに、ピタゴラスの数の一つは必ず偶数</description></item><item><title>拡張複素平面において、円は双線形変換に対して不変である。</title><link>https://freshrimpsushi.github.io/jp/posts/423/</link><pubDate>Tue, 06 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/423/</guid><description>定理 1 全ての双一次変換は、$\overline { \mathbb{C} }$で記述された円を別の$\overline { \mathbb{C} }$で記述された円に対応させる。 証明 一般的</description></item><item><title>オイラーの証明：素数は無限に存在する</title><link>https://freshrimpsushi.github.io/jp/posts/420/</link><pubDate>Mon, 05 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/420/</guid><description>証明 戦略: どんな方法を使っても同じ結論に達するなら問題はないが、本当にユニークな方法で解決された場合は、それ自体が学ぶ価値がある。ユークリッ</description></item><item><title>算術の基本定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/419/</link><pubDate>Mon, 05 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/419/</guid><description>概要 1 natural number $n &amp;gt;2$ はユニークな素因数分解 $n = p_{1} p_{2} \cdots p_{r}$ を持つ。この時、素数 $p_{1} , p_{2} , \cdots , p_{r}$ の順序は無視される。 説明 小学校から自然に使ってきた性質が証</description></item><item><title>双線形変換</title><link>https://freshrimpsushi.github.io/jp/posts/422/</link><pubDate>Sun, 04 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/422/</guid><description>定義 1 定義域で等角写像である$f$を次のように呼ぶ。 移動translation $f(z) = z + \alpha$ 拡大magnification: $f(z) = \rho z$ 回転rota</description></item><item><title>抽象代数学における対称群</title><link>https://freshrimpsushi.github.io/jp/posts/421/</link><pubDate>Sun, 04 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/421/</guid><description>定義 1 集合$A$に対する全単射$\phi : A \to A$を順列permutationと言い、$S_{A}$は$A$の全ての順列を集めた集まりであり</description></item><item><title>拡張ユークリッドの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/417/</link><pubDate>Sun, 04 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/417/</guid><description>定理 1 二つの整数 $a,b$ に対して、$ax + by = \gcd (a,b)$ は必ず整数解を持つ。 説明 この定理は、$\gcd (a,b)$ が $a$ と $b$ を含む線形式で表現できることを意味してい</description></item><item><title>素数分解の定理</title><link>https://freshrimpsushi.github.io/jp/posts/418/</link><pubDate>Sun, 04 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/418/</guid><description>定理 1 素数 $p$ が自然数 $ n : = d_{1} d_{2} \cdots d_{r}$ を $p \mid n$ に割る場合、$p$ は少なくとも $d_{1} , d_{2} , \cdots , d_{r}$ のいずれか一つを割るべきである。 説明 $p \mid n$ は$n$ が</description></item><item><title>距離空間の第一可算性と第二可算性</title><link>https://freshrimpsushi.github.io/jp/posts/414/</link><pubDate>Sat, 03 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/414/</guid><description>概要 説明 位相数学でいろんな抽象的な空間を見た後、距離空間がどれだけ便利でいい空間か気づくよ。 証明 1 距離空間$\left( X , d \right)</description></item><item><title>位相数学における基底と局所基底</title><link>https://freshrimpsushi.github.io/jp/posts/412/</link><pubDate>Fri, 02 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/412/</guid><description>定義 位相空間 $\left( X , \mathscr{T} \right)$ において $\mathscr{B} , \mathscr{B}_{x} \subset \mathscr{T}$ とする。 $B_{\lambda} \in \mathscr{B}$ とするとき、全ての $U \in \mathscr{T}$ に対して $$ U = \bigcup_{\lambda \in \Lambda} B_{ \lambda } $$ を満たす近傍 $\Lambda$ が存在すれば、$\m</description></item><item><title>第一加算と第二加算</title><link>https://freshrimpsushi.github.io/jp/posts/413/</link><pubDate>Fri, 02 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/413/</guid><description>定義 1 位相空間 $X$ が与えられているとしよう。 すべての点 $x \in X$ に対して可算局所基底が存在するならば、第一可算空間という。 $X$ が可算基底を持っている</description></item><item><title>全ての巡回群が整数群と同型であることの証明</title><link>https://freshrimpsushi.github.io/jp/posts/411/</link><pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/411/</guid><description>定理 1 巡回群 $\left&amp;lt; a \right&amp;gt;$ が有限群ならば $\left&amp;lt; a \right&amp;gt; \simeq \mathbb{Z}_{n}$、無限群ならば $\left&amp;lt; a \right&amp;gt; \simeq \mathbb{Z}$ だ。 説明 この定理で、巡回群に関する探索は実質的</description></item><item><title>等角写像は内角の大きさを保持する</title><link>https://freshrimpsushi.github.io/jp/posts/410/</link><pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/410/</guid><description>定理 1 複素領域 $\mathscr{R}$ で、関数 $f$ が 等角写像 で、曲線 $\mathscr{C}_{1}$ と $\mathscr{C}_{2}$ が点 $\alpha$ で会い、その内角を $\psi$ とする。 $\mathscr{C}_{1} ' $ と $\mathscr{C}_{2} ' $ が $\mathscr{C}_{1}$ と $\mathscr{C}_{2}$ を $f$ で送る像であれば、二つの曲線は</description></item><item><title>複素解析における等角写像とは？</title><link>https://freshrimpsushi.github.io/jp/posts/409/</link><pubDate>Wed, 31 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/409/</guid><description>定義 1 関数$f: A \subset \mathbb{C} \to \mathbb{C}$が$\mathscr{R} \subset A$で解析的であり、すべての$z \in \mathscr{R}$に対して</description></item><item><title>複素解析における逆関数定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/408/</link><pubDate>Wed, 31 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/408/</guid><description>定理 1 関数$f : \mathbb{C} \to \mathbb{C}$が$\alpha$で解析的であり、$f ' (\alpha) \ne 0$を満たすならば、$\mathcal{N} \left( f(\alpha) \ri</description></item><item><title>ルーズ位相とレジャー山位相</title><link>https://freshrimpsushi.github.io/jp/posts/406/</link><pubDate>Tue, 30 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/406/</guid><description>定義 $X$ が無限集合だとしよう。 $\mathscr{T}_{f} : = \left\{ \emptyset , X \right\} \cup \left\{ U \subset X : | X \setminus U | &amp;lt; \infty \right\}$ を余有限位相という。 $\mathscr{T}_{c} : = \left\{ \emptyset , X \right\} \cup \left\{ U \subset X : | X \setminus U | = \aleph_{0} \right\}$ を余</description></item><item><title>一般的な位相空間における数列の極限は唯一ではない。</title><link>https://freshrimpsushi.github.io/jp/posts/407/</link><pubDate>Tue, 30 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/407/</guid><description>定理 一般に、位相空間での数列の極限は一意ではない。 説明 何のことかと思うかもしれないが、驚くべきことにこれは事実だ。これまで私たちは解析学など</description></item><item><title>位相空間における可分性と閉包</title><link>https://freshrimpsushi.github.io/jp/posts/405/</link><pubDate>Mon, 29 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/405/</guid><description>定義 1 位相空間 $X$ について $A \subset X$ とする。 $x \in O \subset A$ を満たす開集合 $O$ が存在する時、$x$ を $A$ の内点interior pointという。 $A$ の内点の集</description></item><item><title>自明位相と離散位相</title><link>https://freshrimpsushi.github.io/jp/posts/404/</link><pubDate>Mon, 29 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/404/</guid><description>定義 1 ある集合 $X$ が与えられた時、自明位相trivial Topology $\left\{ \emptyset , X \right\}$ をこの空間に与えたら、その空間は最も小さな空間であり、自明空間と言う。逆に</description></item><item><title>巡回群の部分群は巡回群であることを証明</title><link>https://freshrimpsushi.github.io/jp/posts/402/</link><pubDate>Sun, 28 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/402/</guid><description>定義 1 循環群 $G$ の部分群 $ H \leqslant G$ は循環群だ。 説明 ちょっと考えれば当たり前の事実だが、かなり重要な定理であり、証明も見た目ほど単純ではない。 証明</description></item><item><title>抽象代数学における同型</title><link>https://freshrimpsushi.github.io/jp/posts/403/</link><pubDate>Sun, 28 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/403/</guid><description>定義 1 二つの二項演算構造 $\left&amp;lt; S , * \right&amp;gt;$ と $\left&amp;lt; S' , *' \right&amp;gt;$ に対し、全ての $x , y \in S$ について $$ \phi (x \ast\ y) = \phi ( x ) *' \phi ( y ) $$ を満たす全単射関数 $\phi : S \to S'$ が</description></item><item><title>すべての巡回群が可換群であることを証明</title><link>https://freshrimpsushi.github.io/jp/posts/401/</link><pubDate>Sat, 27 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/401/</guid><description>定理 1 すべての巡回群はアーベル群である。 説明 巡回群が整数群と同型であることを示せば、特に証明しなくても自然と導かれる事実である。 証明 巡回群 $G</description></item><item><title>位相空間における集積点と収束、値域</title><link>https://freshrimpsushi.github.io/jp/posts/400/</link><pubDate>Sat, 27 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/400/</guid><description>定義 1 位相空間 $\left( X , \mathscr{T} \right)$ が与えられているとする。 $A \subset X$ に対して、$x$ を含む任意の開集合 $O$ が $O \cap ( A \setminus \left\{ x \right\} ) \ne \emptyset$ を満たすとき、$x$ を $A$ の</description></item><item><title>位相空間とは？</title><link>https://freshrimpsushi.github.io/jp/posts/398/</link><pubDate>Fri, 26 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/398/</guid><description>定義 位相空間 1 集合 $X$ が与えられた時、$\mathscr{T} \subset \mathscr{P} (X)$ が $T \in \mathscr{T}$ に対して次の三つの条件を満たすなら、$\mathscr{T}$ を $X$</description></item><item><title>距離空間における完備性と密度性</title><link>https://freshrimpsushi.github.io/jp/posts/396/</link><pubDate>Thu, 25 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/396/</guid><description>定義 1 距離空間 $\left( X , d \right)$について、$A \subset X$としよう。 $X$ の 数列 $\left\{ x_{n} \right\}$ の全てが、$\varepsilon &amp;gt; 0$ に対して $n,m &amp;gt; n_{0}$ の時い</description></item><item><title>グラム-シュミット直交化</title><link>https://freshrimpsushi.github.io/jp/posts/394/</link><pubDate>Wed, 24 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/394/</guid><description>定理 すべての有限次元内積空間は正規直交基底を持つ。 説明 存在性の証明というものは大抵そうであるように、長くもなく重要ではないように見えるが、と</description></item><item><title>抽象代数学における巡回群</title><link>https://freshrimpsushi.github.io/jp/posts/392/</link><pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/392/</guid><description>定義 1 群 $G$ のある元 $a$ と任意の $x \in G$ に対して $x = a^{n}$ を満たす整数 $n \in \mathbb{Z}$ が存在するとき、$G$ を巡回群cyclic groupとし $\braket{a}$ で表す。$a$ を</description></item><item><title>オイラーの証明：シンク関数を使用して平方数の逆数の合計を求める</title><link>https://freshrimpsushi.github.io/jp/posts/391/</link><pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/391/</guid><description>定理 $$ \sum_{n =1 }^{\infty} {{1} \over {n^2}} = {{ \pi ^2 } \over { 6 }} $$ 証明 戦略: これはオイラーによって残された証明で、シンク関数のオイラー表示を使って証明する。このアイディ</description></item><item><title>複素解析を用いた平方数の逆数の和の計算</title><link>https://freshrimpsushi.github.io/jp/posts/390/</link><pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/390/</guid><description>定理 1 $$ \sum_{n =1 }^{\infty} {{1} \over {n^2}} = {{ \pi ^2 } \over { 6 }} $$ オイラーの解法は簡潔で素晴らしいのだが、アイディアがあまりにも奇抜で実際に役立つ場面は少ない。複素解</description></item><item><title>コタンジェントとコセカントのローラン展開</title><link>https://freshrimpsushi.github.io/jp/posts/389/</link><pubDate>Sun, 21 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/389/</guid><description>式 $$ \cot z = {{1} \over {z}} - {{z} \over {3}} - {{z^{3}} \over {45}} - {{2 z^{5}} \over {945}} - \cdots \\ \csc z = {{1} \over {z}} + {{z} \over {6}} + {{7 z^{3}} \over {360}} + {{31 z^{5}} \over {15120}} + \cdots $$ 説明 複素解析で級数の和の公式を使うためには、コ</description></item><item><title>残余定理を用いた全ての整数に対する級数の和の公式</title><link>https://freshrimpsushi.github.io/jp/posts/388/</link><pubDate>Sun, 21 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/388/</guid><description>式 多項式関数の比、即ち有理関数の $f$ が $n \in \mathbb{Z}$ で $f(n) \ne 0$ であるとき、かつ $\lim_{z \to \infty} z f(z) = 0$ であるとしよう。$f$ が有限な特異点 $z_{1}, \cdots , z_{m}$ を持つ時、 $$ \sum_{n=-\infty}^{\infty} f(n)</description></item><item><title>距離空間での球と開集合閉集合</title><link>https://freshrimpsushi.github.io/jp/posts/382/</link><pubDate>Thu, 18 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/382/</guid><description>定義 距離空間 $\left( X, d \right)$ とするとき、$a \in X$ であり、$r &amp;gt; 0$ とする。 中心が $a$ で、半径が $r$ の開いた球open Ballを $B_{d} (a,r) = \left\{ x \in X \ | \ d(a,x) &amp;lt; r \right\}$</description></item><item><title>距離空間の定義</title><link>https://freshrimpsushi.github.io/jp/posts/381/</link><pubDate>Wed, 17 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/381/</guid><description>定義 集合 set $X$ に対して、関数 $d : X \times X \to [0, \infty)$が $x,y,z \in X$ について以下の条件を満たす場合、$d$ を距離metricと呼び、$\left</description></item><item><title>接近関数の広義積分</title><link>https://freshrimpsushi.github.io/jp/posts/375/</link><pubDate>Thu, 11 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/375/</guid><description>ビルドアップ 1 多価関数を積分する際の最大の問題点は、経路が分岐線に遭遇すると関数の値が意図しない形で変わってしまうことだ。このような関数を積</description></item><item><title>複素解析学における多価関数と分岐</title><link>https://freshrimpsushi.github.io/jp/posts/374/</link><pubDate>Thu, 11 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/374/</guid><description>定義 1 $X = \mathbb{C}$の要素を$Y$の複数の値に対応させる写像を多価関数multifunctionと呼ぶ。 オープンセット$A \subset \m</description></item><item><title>ジョルダンの補助定理を通した広義積分の評価</title><link>https://freshrimpsushi.github.io/jp/posts/372/</link><pubDate>Sun, 07 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/372/</guid><description>説明 1 まず、有理関数の発散する半円上の複素経路積分による異常積分に似て、二つの多項式 $p(z) , q(z)$ に対して $\displaystyle f(z) = {{q(z)} \over {p(z)}}$ とする。 $p(z) = 0$ を満たす実数解が</description></item><item><title>実数軸上の特異点とジョルダンの補題を通じた広義積分</title><link>https://freshrimpsushi.github.io/jp/posts/373/</link><pubDate>Sun, 07 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/373/</guid><description>ビルドアップ 全体的な流れはジョルダンの補題による異常積分と似ている。2つの多項式関数 $p(z) , q(z)$ に対し、$\displaystyle f(z) = {{q(z)} \over {p(z)}}$ とし</description></item><item><title>ジョルダンの補題の証明</title><link>https://freshrimpsushi.github.io/jp/posts/371/</link><pubDate>Sat, 06 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/371/</guid><description>定理 1 半円弧$\Gamma$を$z(\theta) = R e^{i \theta} , 0 \le \theta \le \pi$として表した時、関数$f: \mathbb{C} \to \mathbb{C}$が$\Gam</description></item><item><title>特異値分解による最小二乗法</title><link>https://freshrimpsushi.github.io/jp/posts/359/</link><pubDate>Sat, 06 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/359/</guid><description>アルゴリズム $A \in \mathbb{C}^{m \times n}$ とベクター$\mathbf{b} \in \mathbb{C}^{m}$に対して$\text{rank} A = n$であり、$A \mathbf{x}</description></item><item><title>QR分解による最小二乗法</title><link>https://freshrimpsushi.github.io/jp/posts/358/</link><pubDate>Fri, 05 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/358/</guid><description>アルゴリズム $A \in \mathbb{C}^{m \times n}$ とベクトル $\mathbf{b} \in \mathbb{C}^{m}$ について、$\text{rank} A = n$ であり、$A \mathbf{x} = \mathbf{b}$ の最小二乗解を $\mathbf{x}_{\ast}$ とする。 ステップ 1. QR 分解 $A =</description></item><item><title>コレスキー分解による最小二乗法</title><link>https://freshrimpsushi.github.io/jp/posts/357/</link><pubDate>Fri, 05 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/357/</guid><description>アルゴリズム $A \in \mathbb{C}^{m \times n}$ とベクトル $\mathbf{b} \in \mathbb{C}^{m}$ について、$\text{rank} A = n$ かつ $A \mathbf{x} = \mathbf{b}$ の最小二乗解を $\mathbf{x}_{\ast}$ とする。 Step 1. 与えられた方程式の両辺</description></item><item><title>最小二乗法</title><link>https://freshrimpsushi.github.io/jp/posts/356/</link><pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/356/</guid><description>定義1 行列 $A \in \mathbb{C}^{m \times n}$ とベクトル $\mathbf{b} \in \mathbb{C}^{m}$ に関する線形システム $A\mathbf{x} = \mathbf{b}$ が過剰決定 あるいは 過少決定 であるとしよう。この場合、システムは解を持たないまた</description></item><item><title>行列のQR分解</title><link>https://freshrimpsushi.github.io/jp/posts/355/</link><pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/355/</guid><description>概要 効率的な行列分解にはいくつかの条件が必要だが、効率性よりも前に、分解自体が可能かどうかが重要になる場合がある。QR分解は正方行列という条</description></item><item><title>線形代数における射影</title><link>https://freshrimpsushi.github.io/jp/posts/352/</link><pubDate>Wed, 03 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/352/</guid><description>定義 正方行列 $P \in \mathbb{C}^{m \times m}$ が $P^2 = P$ であれば、射影作用素projectorという。 説明 代数学の用語では、冪等元idempotentと表現し、同様に</description></item><item><title>行列代数における射影</title><link>https://freshrimpsushi.github.io/jp/posts/354/</link><pubDate>Wed, 03 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/354/</guid><description>定義 射影 $P \in \mathbb{C}^{m \times m}$ が $\mathcal{C} (P) ^{\perp} = \mathcal{N} (P)$ を満たせば、 $P$ を 正射影 であるとする。 説明 射影の性質 $\mathbb{C}^{m } = \mathcal{C} (P) \oplus \mathcal{N} (P)$ に従って、 $P$ は $\mathbb{C}^{m}$ を正確に二つの部分空間 $\mathcal{C} (P)$</description></item><item><title>コレスキー分解の一意性証明</title><link>https://freshrimpsushi.github.io/jp/posts/351/</link><pubDate>Tue, 02 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/351/</guid><description>定理 $A&amp;gt;0$ はただ一つのコレスキー分解を持つ。 説明 固有値対角化、特異値分解、シューア分解、LU分解、LDU分解はすべて一意性がない点が共通している</description></item><item><title>ベクトル空間における直和</title><link>https://freshrimpsushi.github.io/jp/posts/353/</link><pubDate>Tue, 02 Jan 2018 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/353/</guid><description>定義 ベクトル空間 $V$ の二つの部分空間 $W_{1}$と$W_{2}$に対して、次のことを満たせば、$V$を$W_{1}$と$W_{2}$の直和d</description></item><item><title>正定値行列のコレスキー分解</title><link>https://freshrimpsushi.github.io/jp/posts/350/</link><pubDate>Sat, 30 Dec 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/350/</guid><description>概要 可逆行列から対角行列への条件が強化され、LDU分解ができたように、正定値行列への条件強化で、より効率的な行列分解であるコレスキー分解ch</description></item><item><title>対称行列のLDU分解</title><link>https://freshrimpsushi.github.io/jp/posts/349/</link><pubDate>Fri, 29 Dec 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/349/</guid><description>概要 $L^{T}$ は上三角行列なので、$A = LU$ における $U$ を $U:= DL^{T}$ に置き換えると考えればよい。一般的な LU 分解より条件が厳しくなる分、計算量は大幅に減る。 定理</description></item><item><title>可逆行列のLU分解</title><link>https://freshrimpsushi.github.io/jp/posts/345/</link><pubDate>Thu, 28 Dec 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/345/</guid><description>ビルドアップ 行列 $A \in \mathbb{R}^{m \times m}$ が左から掛けられた時 $(i, j)$ の成分を $0$ にする行列 $E_{ij}$ を $A$ の $ij$-消去オペレーターと定義しよう。 具体的に 正方行列 $(a_{ij}) \in \mathbb{R}^{m</description></item><item><title>エルミート行列の固有値対角化：スペクトル理論の証明</title><link>https://freshrimpsushi.github.io/jp/posts/346/</link><pubDate>Wed, 27 Dec 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/346/</guid><description>定理 可逆行列 $A \in \mathbb{C}^{m \times m}$ の 固有値 $\lambda_{k}$ で構成した 対角行列を $\Lambda : = \text{diag} ( \lambda_{1} , \cdots , \lambda_{m} )$、その固有値に対応する正規直交固有ベクトル $\mathbf{q}_{k}$ で構成した 直交行列を</description></item><item><title>正方行列のシューア分解</title><link>https://freshrimpsushi.github.io/jp/posts/342/</link><pubDate>Tue, 26 Dec 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/342/</guid><description>定義 あるユニタリー行列 $Q$ と 上三角行列 $T$ について、$A = Q T Q^{\ast}$ ならば$A$はシュア分解schur Factorizationを持つという。 定理 す</description></item><item><title>完全な特異値分解の存在証明</title><link>https://freshrimpsushi.github.io/jp/posts/341/</link><pubDate>Sun, 24 Dec 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/341/</guid><description>概要 固有値の対角化 は正方行列であるという制限があったが、特異値分解 (SVD) にはそのような制約はなかった。 このような便利な分解法が全ての行列に通用す</description></item><item><title>行列の特異値分解</title><link>https://freshrimpsushi.github.io/jp/posts/340/</link><pubDate>Sat, 23 Dec 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/340/</guid><description>概要 行列を常に固有値対角化を通じて分解できたらいいと思うが、残念ながら提供される行列が正方行列でなければならないという制限がある。非正方行列</description></item><item><title>可逆行列の固有値対角化</title><link>https://freshrimpsushi.github.io/jp/posts/339/</link><pubDate>Mon, 18 Dec 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/339/</guid><description>証明 $A$は可逆行列であるため、$A$の線形独立な固有ベクトル$\mathbf{x}_{1}, \mathbf{x}_{2}, \cdots , \mathbf{x}_{m}$が存在する</description></item><item><title>半円上の発散する複素経路積分による有理関数の広義積分</title><link>https://freshrimpsushi.github.io/jp/posts/338/</link><pubDate>Thu, 14 Dec 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/338/</guid><description>ビルドアップ 二つの多項関数$p(z) , q(z)$に対して、$\displaystyle f(z) = {{q(z)} \over {p(z)}}$とする。 $p(z) = 0$を満たす実数解</description></item><item><title>複素平面上での三角関数置換を通じた定積分</title><link>https://freshrimpsushi.github.io/jp/posts/333/</link><pubDate>Sun, 26 Nov 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/333/</guid><description>定理 $$ \int_{0}^{2 \pi} f( \cos \theta , \sin \theta ) d \theta = \int_{\mathscr{C}} f(z) dz = 2 \pi i \sum \text{Res} f(z) $$ 説明 積分が難しい実関数でも、複素解析による迂回を通じて比較的簡単に解けることがある。その</description></item><item><title>Rでデータフレームの行と列を入れ替える</title><link>https://freshrimpsushi.github.io/jp/posts/332/</link><pubDate>Sat, 25 Nov 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/332/</guid><description>概要 Rの強みの一つは、プログラミング言語に慣れた人から見れば、かなり難しい操作も簡単に実装できることだ。例えば、配列を使う時には事前にメモリ</description></item><item><title>Rで組み込みデータセットを読み込む方法</title><link>https://freshrimpsushi.github.io/jp/posts/331/</link><pubDate>Fri, 24 Nov 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/331/</guid><description>概要 Rは代表的な統計プログラミング言語で、便利なメソッドだけでなく、例示に適したデータセットも提供しています。このようなデータセットがなけれ</description></item><item><title>固有値の代数的重複度はその幾何的重複度以上である</title><link>https://freshrimpsushi.github.io/jp/posts/328/</link><pubDate>Tue, 21 Nov 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/328/</guid><description>概要 matrix $A \in \mathbb{C}^{ m \times m}$ の eigenvalue $\lambda$ が、代数的重複度 $a$ と幾何学的重複度 $g$ を持つ場合、$a \ge g$ である。 説明 eigenvalueの代数的重複度と幾何学的重複</description></item><item><title>類似行列は同じ固有値を持つ</title><link>https://freshrimpsushi.github.io/jp/posts/329/</link><pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/329/</guid><description>定理 二つの行列$A,B$が相似である場合、同じ固有値を持つ。 $$ \det (A - \lambda I) = \det (B - \lambda I) $$ この場合、$\lambda$は$A, B$の固有値である</description></item><item><title>固有値の代数的重複度と幾何的重複度</title><link>https://freshrimpsushi.github.io/jp/posts/311/</link><pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/311/</guid><description>代数的重複度 行列 $A \in \mathbb{R}^{m \times m}$ に対して、固有値は $\lambda$ が $\det (A - \lambda I ) =0$ を満たす時に定義される。特性方程式は $\lambda$ に関して$m$ 次の方程式、つまり $$ \det (A -</description></item><item><title>単純極限での流れ</title><link>https://freshrimpsushi.github.io/jp/posts/323/</link><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/323/</guid><description>定理 1 関数$f$を$\displaystyle f(z) = {{g(z)} \over {h(z)}}$と表せるとしよう。ここで$g$と$h$は$\alpha$で解析的であり</description></item><item><title>極点での留数</title><link>https://freshrimpsushi.github.io/jp/posts/324/</link><pubDate>Fri, 17 Nov 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/324/</guid><description>定理 1 $\alpha$が関数$f: A \subset \mathbb{C} \to \mathbb{C}$の階数$m$の極、つまり$\displaystyle f(z) = {{g(z)} \over { (z - \alpha)^m }}$と</description></item><item><title>Rでの行列の積、逆行列、転置行列の計算</title><link>https://freshrimpsushi.github.io/jp/posts/317/</link><pubDate>Wed, 15 Nov 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/317/</guid><description>概要 Rの強みは、行列をはじめとする様々なデータセットの操作が簡単である点と、豊富な統計パッケージを無料で提供していることだ。言うまでもないが</description></item><item><title>Rでの商と余りの求め方</title><link>https://freshrimpsushi.github.io/jp/posts/316/</link><pubDate>Tue, 14 Nov 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/316/</guid><description>概要 プログラミング言語の文法において、本当に統一されていないのが商と余りの演算子である。基本的には似ているように見えるが、逆にそれが混乱の原</description></item><item><title>Rでの全変数の削除とコンソールのクリア</title><link>https://freshrimpsushi.github.io/jp/posts/315/</link><pubDate>Mon, 13 Nov 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/315/</guid><description>概要 Rはインタプリタ言語だから、コンソールを見ながらずっと作業をすることになる。この時、デバッグなどのために、いろいろなテストも同じ作業環境</description></item><item><title>Rでのelse if文の使用：「Error: unexpected else in else」の問題を解決する</title><link>https://freshrimpsushi.github.io/jp/posts/314/</link><pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/314/</guid><description>概要 Rにはswitch文のような分岐文がないから、if文を複数繋げて分岐を分けなければならない。ここで、この条件文っていうのがプログラミング</description></item><item><title>抽象代数学における可換群</title><link>https://freshrimpsushi.github.io/jp/posts/309/</link><pubDate>Sat, 11 Nov 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/309/</guid><description>定義 1 群 $\left&amp;lt; G, \ast\ \right&amp;gt;$の二つの元$a, b$に対して$a \ast\ b = b \ast\ a$が成り立つ場合、$\left&amp;lt; G, \ast\ \right&amp;gt</description></item><item><title>留数定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/308/</link><pubDate>Fri, 10 Nov 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/308/</guid><description>定理 1 解析的関数 $f: A \subset \mathbb{C} \to \mathbb{C}$ が単純閉曲線 $\mathscr{C}$ 内部に有限個の特異点 $z_{1} , z_{2} , \cdots , z_{m}$ を持つとする。すると、 $$ \int_{\mathscr{C}} f(z) dz = 2 \pi i \sum_{k=1}^{m} \text{Res}_{z_{k}} f(z) $$ 説明 初めて読むと、</description></item><item><title>ローラン級数の主要部分と特異点の分類</title><link>https://freshrimpsushi.github.io/jp/posts/293/</link><pubDate>Tue, 07 Nov 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/293/</guid><description>概要 1 ローラン展開の主要部主要部を良く見ると、特異点の種類を理解できる。 $\alpha$を関数$f:A\subset \mathbb{C} \to \mathbb{C}</description></item><item><title>ローラン級数とは?</title><link>https://freshrimpsushi.github.io/jp/posts/290/</link><pubDate>Mon, 06 Nov 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/290/</guid><description>ビルドアップ テイラーの定理は、微分の回数に関して平均値の定理を一般化したものだ。もともと$1$回微分されたものを扱っていたが、それを$n \in \</description></item><item><title>複素解析での特異点の種類</title><link>https://freshrimpsushi.github.io/jp/posts/281/</link><pubDate>Sat, 04 Nov 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/281/</guid><description>定義 特異点 1 関数$f$が$\alpha$で$\mathcal{N}(\alpha)$の全ての点で微分可能なら、$\alpha$で解析的ana</description></item><item><title>線形独立と線形従属</title><link>https://freshrimpsushi.github.io/jp/posts/253/</link><pubDate>Thu, 02 Nov 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/253/</guid><description>定義1 $S = \left\{ \mathbf{v}_{1}, \mathbf{v}_{2}, \dots, \mathbf{v}_{r} \right\}$をベクター空間$V$の空集合ではない部分集合としよう。定数$k_{1}, k_{2}, \dots, k_{r}$に対して、次の</description></item><item><title>連立方程式で理解するランクと零次元</title><link>https://freshrimpsushi.github.io/jp/posts/279/</link><pubDate>Thu, 02 Nov 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/279/</guid><description>歴史的背景 歴史的には、行列が考案された背景は、連立方程式をより簡単に、便利に記述するためであった。例えば連立方程式 $$ \begin{cases} 2x_{1} &amp;amp; + &amp;amp; x_{2} &amp;amp; + &amp;amp; x_{3} =&amp;amp; 0</description></item><item><title>余弦定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/131/</link><pubDate>Wed, 01 Nov 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/131/</guid><description>定理 1 群 $\left&amp;lt;G, \ast \right&amp;gt;$ の要素 $a,b,c$ に対して、 $$ a \ast b = a \ast c \implies b = c \\ b \ast a = c \ast a \implies b=c $$ 解説 抽象代数を学び始めると、これまで学んできたことを新しい言葉</description></item><item><title>抽象代数学における群</title><link>https://freshrimpsushi.github.io/jp/posts/278/</link><pubDate>Wed, 01 Nov 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/278/</guid><description>定義 1 モノイド $\left&amp;lt; G, \ast\ \right&amp;gt;$ の元 $a$ と単位元 $e$ に対し、$a \ast\ a ' = a ' \ast\ a = e$ を満たす $a '$ が存在すれば、$\left&amp;lt; G, \ast\ \right&amp;gt;</description></item><item><title>群における単位元と逆元の一意性の証明</title><link>https://freshrimpsushi.github.io/jp/posts/130/</link><pubDate>Wed, 01 Nov 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/130/</guid><description>定理 1 群 $\left&amp;lt;G, \ast \right&amp;gt;$において、$G$の全ての要素$x$に対して$e \ast x = x \ast e = x$を満たす単位元$e$は唯一である。$G$の</description></item><item><title>抽象代数学におけるモノイド</title><link>https://freshrimpsushi.github.io/jp/posts/277/</link><pubDate>Tue, 31 Oct 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/277/</guid><description>定義 1 半群$\left&amp;lt; M , \ast\ \right&amp;gt;$において、全ての元$a$に対して、$a \ast\ e = e \ast\ a = a$を満たす$e$が存在するな</description></item><item><title>抽象代数学における半群</title><link>https://freshrimpsushi.github.io/jp/posts/276/</link><pubDate>Mon, 30 Oct 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/276/</guid><description>定義 1 結合法則 集合 $S$ と 二項演算 $\ast : S \times S \to S$ が与えられているとする。次の形の式を 結合法則associative propertyと呼ぶ。 $$ (a \ast</description></item><item><title>抽象代数における二項演算</title><link>https://freshrimpsushi.github.io/jp/posts/275/</link><pubDate>Sun, 29 Oct 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/275/</guid><description>ビルドアップ 数学を大きく三つに分けるなら、幾何学、解析学、代数学と言えるだろう。その中で、代数学は教育課程で学ぶ二項、約分などを扱う数学の一</description></item><item><title>イェンセンの不等式の積分形式の証明</title><link>https://freshrimpsushi.github.io/jp/posts/265/</link><pubDate>Sun, 08 Oct 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/265/</guid><description>定理 凸関数$ \phi : [a,b] \to \mathbb{R}$と$f: [0,1] \to [a,b]$について、$\phi \circ f$が$[0,1]$で積分可能であれば $$ \phi \left( \int_{0}^{1} f(x) dx \right)</description></item><item><title>凸関数、凹関数</title><link>https://freshrimpsushi.github.io/jp/posts/262/</link><pubDate>Sun, 08 Oct 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/262/</guid><description>定義 区間 $I \subset \mathbb{R}$ の二つの要素 $x_{1} , x_{2}$ と関数 $f : I \to \mathbb{R}$ および $0 \le t \le 1$ について、 $f( t x_{1} + (1-t) x_{2}) \le t f(x_{1}) + (1-t) f(x_{2})$ のとき、$f$ は $I$での凸関数と定義され</description></item><item><title>ユークリッド空間における内積</title><link>https://freshrimpsushi.github.io/jp/posts/255/</link><pubDate>Fri, 06 Oct 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/255/</guid><description>定義 ベクトル空間 $V = \mathbb{R}^n$ について、$\mathbf{x}, \mathbf{y}, \mathbf{z} \in V$ そして $k \in \mathbb{R}$ とする。 $\left&amp;lt; \cdot , \cdot \right&amp;gt; : V^2 \to \mathbb{R}$ が下の四つの条件を満たすとき、$\le</description></item><item><title>三次元ユークリッド空間における外積</title><link>https://freshrimpsushi.github.io/jp/posts/256/</link><pubDate>Fri, 06 Oct 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/256/</guid><description>定義 $\mathbf{x}, \mathbf{y} \in \mathbb{R}^3$ に対して**$\mathbf{x}$と$\mathbf{y}$の外積**cross product を定義する。 $$ \begin{align*} \mathbf{x} \times \mathbf{y} =&amp;amp; (x_{2}y_{3} - x_{3}y_{2}, x_{3}y_{1} - x_{1}y_{3}, x_{1}y_{2} - x_{2}y_{1}) \\</description></item><item><title>行空間、列空間、零空間</title><link>https://freshrimpsushi.github.io/jp/posts/254/</link><pubDate>Tue, 03 Oct 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/254/</guid><description>定義1 $$ A = \begin{bmatrix} a_{11} &amp;amp; a_{12} &amp;amp; \cdots &amp;amp; a_{1n} \\ a_{21} &amp;amp; a_{22} &amp;amp; \cdots &amp;amp; a_{2n} \\ \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \\ a_{m1} &amp;amp; a_{m2} &amp;amp; \cdots &amp;amp; a_{mn} \end{bmatrix} $$ 行列 $A$に対して、$A$の行から作られる$m$個の$\ma</description></item><item><title>共役複素数</title><link>https://freshrimpsushi.github.io/jp/posts/245/</link><pubDate>Sat, 23 Sep 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/245/</guid><description>定義 $z$ を $z=a+ib(a,b\in \mathbb{R})$ の複素数としよう。 $\overline{z}$ を以下のように定義し、$z$ の共役複素数と呼ぶ。 $$ \overline{z}:=\overline{a+ib}=a-ib $$ 説明 元の複素数に $i$ ではなく $-i$ を代入したもの、複素平面で</description></item><item><title>生成関数とは何か？</title><link>https://freshrimpsushi.github.io/jp/posts/232/</link><pubDate>Wed, 30 Aug 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/232/</guid><description>定義 シーケンス $\left\{ a_{n} \right\}$ に対して、 $$ g(x) =\sum \limits _{n=0}^{\infty}a_{n}x^{n}= a_{0} + a_{1} x + a_{2} x^2 + \cdots $$ の形で表される関数 $g$ を数列 $\left\{ a_{n}\right\}$ の生成関数または単に生成関数という。数列が $a_{n}=a_{n}(x)$ の場合</description></item><item><title>ワイエルシュトラスのM判定法</title><link>https://freshrimpsushi.github.io/jp/posts/230/</link><pubDate>Tue, 29 Aug 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/230/</guid><description>定理 1 関数$f_{n}$と$z \in A$について、$|f_{n}(z)| \le M_{n}$を満たす正の数列$M_{n}$が存在し$\displays</description></item><item><title>複素解析を用いたテイラー級数の導出</title><link>https://freshrimpsushi.github.io/jp/posts/231/</link><pubDate>Tue, 29 Aug 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/231/</guid><description>定理 1 関数 $f: A \subseteq \mathbb{C} \to \mathbb{C}$ が円 $|z - \alpha| &amp;lt; r$ で解析的であれば、 $$ f(z) = \sum_{n = 0} ^{\infty} {{f^{(n)} (\alpha)} \over {n!}} (z - \alpha)^n $$ 説明 数学の楽しみの一つは一般化である。テイラーの定理は、</description></item><item><title>ロシェの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/229/</link><pubDate>Wed, 16 Aug 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/229/</guid><description>定理 1 $f$ と $g$ が単純閉路 $\mathscr{C}$とその内部で解析的であり、$\mathscr{C}$上で$|g(z)| &amp;lt; |f(z)|$を満た</description></item><item><title>有理型関数の零点と極点</title><link>https://freshrimpsushi.github.io/jp/posts/228/</link><pubDate>Wed, 16 Aug 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/228/</guid><description>定理 1 シンプルな閉路 $\mathscr{C}$で、解析的な関数 $f$が$\mathscr{C}$ 内で$Z$個の零点と $P$個の極を持ち、$\</description></item><item><title>シュワルツの補題の証明</title><link>https://freshrimpsushi.github.io/jp/posts/227/</link><pubDate>Tue, 15 Aug 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/227/</guid><description>定理 1 単位円 $|z| \le 1$ で、解析的な関数 $f$ について、$f(0) = 0$ そして $0 &amp;lt; |z| &amp;lt; 1$ で $|f(z)| \le 1$ としよう。そうすると、$0 &amp;lt; |z| &amp;lt; 1$ から $$ |f ' (0)| \le 1 \\ |f(z)| \le</description></item><item><title>ポアソン積分公式の導出</title><link>https://freshrimpsushi.github.io/jp/posts/226/</link><pubDate>Tue, 15 Aug 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/226/</guid><description>公式 1 関数 $f : \mathbb{C} \to \mathbb{C}$ が 円 $\mathscr{C}: |z| = r$ を含む 単連結領域において 解析的だとしよう。そうすると、$0 &amp;lt; \rho &amp;lt; r$ に対して $$ f( \rho e ^{i \phi} ) = {{1} \over { 2 \pi }} \int_{0}^{2 \pi} {{r^2</description></item><item><title>ガウスの平均値定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/224/</link><pubDate>Mon, 14 Aug 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/224/</guid><description>定理 関数 $f$ が閉じた円 $| z - z_{0} | \le r$ 内で解析的だとしよう。そうすると、 $$ f(z_{0}) = {{1} \over {2 \pi}} \int_{0}^{2 \pi} f(z_{0} + r e ^{i \theta } ) d \theta $$ 説明 微分の平均値の定理が一般化を</description></item><item><title>最大絶対値定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/225/</link><pubDate>Mon, 14 Aug 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/225/</guid><description>定理1 関数 $f$ が単純閉路 $\mathscr{C}$ 上で連続であり、内部で解析的であり、どの点でも定数関数ではないとしよう。そうすると、$\mathscr{C}$ 上で $|f(z)|$</description></item><item><title>代数学の基本定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/223/</link><pubDate>Sun, 13 Aug 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/223/</guid><description>定理 1 $n$次の多項式 $P(x) = a_{0} + a_{1} x + a_{2} x^2 + \cdots + a_{n} x^{n}$は、重根を含む$n$個の根を正確に持つ。 説明 実際、多項式を解くとき、解が存在する</description></item><item><title>複素解析におけるリウビルの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/222/</link><pubDate>Sun, 13 Aug 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/222/</guid><description>定理 1 関数 f $f : \mathbb{C} \to \mathbb{C}$が全ての$z \in \mathbb{C}$に対して$|f(z)| \le M$を満たす正の数$M$が存在する場合</description></item><item><title>フレネル正弦積分のマクローリン級数展開</title><link>https://freshrimpsushi.github.io/jp/posts/220/</link><pubDate>Sat, 12 Aug 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/220/</guid><description>式 $$ S(x) = \sqrt{{2} \over {\pi}} \int_{0}^{x} \sin (w^2) dw = \sqrt{{2} \over {\pi}} \sum_{n=0}^{\infty} {{(-1)^{n}} \over {(2n+1)! (4n+3)}} x^{4n+3} $$ 説明 フレネルは光学を研究していた物理学者であり、彼の名がついた結果は大体三角関数が関与している。</description></item><item><title>フレネル積分の証明</title><link>https://freshrimpsushi.github.io/jp/posts/221/</link><pubDate>Sat, 12 Aug 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/221/</guid><description>定理 1 $$ \int_{0}^{\infty} \cos x^2 dx = \int_{0}^{\infty} \sin x^2 dx = {{1}\over{2}} \sqrt{{\pi}\over{2}} $$ 説明 フレネル積分は一見簡単に見えるが、見た目ほど単純な結果ではない。単に三角関数の二乗であれば簡単だろうが</description></item><item><title>e^-x^2型の定積分、ガウス積分、オイラー-ポアソン積分</title><link>https://freshrimpsushi.github.io/jp/posts/219/</link><pubDate>Fri, 11 Aug 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/219/</guid><description>定理 ガウス関数 $f(x) := e^{-x^2}$ の全範囲に及ぶ積分は、以下の通りである。 $$ \int_{-\infty}^{\infty} e^{-x^2} dx= \sqrt{\pi} $$ 説明 物理学者ケルビンは、「この積分を当たり前だと思う人は数学者だ」と</description></item><item><title>二項定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/218/</link><pubDate>Fri, 11 Aug 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/218/</guid><description>定義 有限集合の部分集合を組合せcombinationという。 基数が$n$の集合から、基数が$k$の部分集合の数を$\binom{n}{k}$</description></item><item><title>コーシーの積分公式の導出</title><link>https://freshrimpsushi.github.io/jp/posts/215/</link><pubDate>Wed, 09 Aug 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/215/</guid><description>定理 1 複素関数 $f: A \subseteq \mathbb{C} \to \mathbb{C}$ が 単連結領域 $\mathscr{R}$ で 解析的 だとしよう。 $\mathscr{R}$ に含まれる 単純閉曲線 $\mathscr{C} \subset \mathscr{R}$ がある点 $\alpha$ を囲んでいる場合、以下が成り立つ。 $$ f(\alpha) = {{1}</description></item><item><title>モレラの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/214/</link><pubDate>Wed, 09 Aug 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/214/</guid><description>定理 1 複素関数 $f : \mathbb{C} \to \mathbb{C}$ が 単連結領域 $\mathscr{R}$ 内で 連続であり、$\mathscr{R}$ に含まれる全ての 閉路 $\mathscr{C} \subset \mathscr{R}$ に対して $\displaystyle \int_{\mathscr{C}} f(z) dz = 0$ を満たす場合、</description></item><item><title>積分の平均値定理</title><link>https://freshrimpsushi.github.io/jp/posts/212/</link><pubDate>Tue, 08 Aug 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/212/</guid><description>定理 閉区間$[a,b]$で関数$f$が連続であるとすると、$\displaystyle f(c) = {{1}\over {b-a} } \int_{a}^{b} f(x) dx$を満たす$c$が$(a,b)$に少</description></item><item><title>積分学の基本定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/213/</link><pubDate>Tue, 08 Aug 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/213/</guid><description>定理1 関数 $f$ が閉区間 $[a,b]$ で連続だとしよう。 (1) 関数 $\displaystyle F(x) = \int_{a}^{x} f(t) dt$ は $[a,b]$ で連続で、$(a,b)$ で微分可能で、$\displaystyle {{dF(x)} \over {dx}} = f(x)$ を</description></item><item><title>複素経路積分の収縮補題</title><link>https://freshrimpsushi.github.io/jp/posts/211/</link><pubDate>Mon, 07 Aug 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/211/</guid><description>定理 1 単純閉曲線 $\mathscr{C}$ を含む単連結領域で、$f: A \subseteq \mathbb{C} \to \mathbb{C}$ が $\mathscr{C}$ 内部の点 $\alpha$ を除くすべての点で解析的であるとする。 その場合、$\mathscr{C}</description></item><item><title>複素解析におけるコーシーの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/210/</link><pubDate>Mon, 07 Aug 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/210/</guid><description>総括 1 $\mathscr{C}$が単純閉路であり、その内側で$f: A \subseteq \mathbb{C} \to \mathbb{C}$が解析的で、$f '$が連続だとする。そうする</description></item><item><title>特定の分布に従う確率変数の加算の総括</title><link>https://freshrimpsushi.github.io/jp/posts/202/</link><pubDate>Sat, 05 Aug 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/202/</guid><description>定理 確率変数$X_{1} , \cdots , X_{n}$が相互に独立してるとしよう。 [1] 二項分布: $X_i \sim \text{Bin} ( n_{i}, p)$ならば $$ \sum_{i=1}^{m} X_{i} \sim \text{Bin} \left( \sum_{i=1}^{m} n_{i} , p \right) $$ [2] ポアソン分</description></item><item><title>等差数列の部分和も等差数列であることの証明</title><link>https://freshrimpsushi.github.io/jp/posts/193/</link><pubDate>Wed, 02 Aug 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/193/</guid><description>定理 等差数列$a_n = a + (n-1)d$とその部分和$\displaystyle S_n = \sum_{k=1}^{n} a_k $、そしてある自然数$m$に対して$A_n = S_{mn} - S_{m(n-1)} $</description></item><item><title>等比数列の部分和も等比数列であることの証明</title><link>https://freshrimpsushi.github.io/jp/posts/194/</link><pubDate>Wed, 02 Aug 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/194/</guid><description>概要 等比数列 $a_n = a r^{n-1}$ とその部分和 $\displaystyle S_n = \sum_{k=1}^{n} a_k$、そしてある自然数 $m$ について $A_n = S_{mn} - S_{m(n-1)}$ は等比数列だ。 説明 知らないと本当に困る。 例えば、2の累</description></item><item><title>オイラーの反射公式の導出</title><link>https://freshrimpsushi.github.io/jp/posts/192/</link><pubDate>Tue, 01 Aug 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/192/</guid><description>式 非整数の $p$ に対して $$ {\Gamma (1-p) \Gamma ( p )} = { {\pi} \over {\sin \pi p } } $$ 説明 ガンマ関数を使った式の中で最も有名な式だ。 反射公式から得られる役立つ結果には $ \Gamma (</description></item><item><title>シンク関数のオイラー表現の証明</title><link>https://freshrimpsushi.github.io/jp/posts/187/</link><pubDate>Tue, 01 Aug 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/187/</guid><description>定義 非正規化シンク関数 次の 関数 $\sinc : \mathbb{R} \to \mathbb{R}$ をシンク関数sinc functionと言う。 $$ \sinc x := \begin{cases} \displaystyle {{\sin x} \over {x}} &amp;amp; , \text{if } x \ne 0 \\ 1 &amp;amp; , \text{if } x = 0 \end{cases} $$</description></item><item><title>平方数の和を求める</title><link>https://freshrimpsushi.github.io/jp/posts/189/</link><pubDate>Fri, 28 Jul 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/189/</guid><description>公式 $$ \sum_{k=1}^{n} { k^2} = {{n(n+1)(2n+1)} \over {6}} $$ 導出 一つ高い次数の$k^3$と$(k-1)^3$の差を考えよう。 $$ 1^3 - 0^3 = 3 \cdot 1^2 - 3 \cdot 1 + 1 \\ 2^3 - 1^3 = 3 \cdot 2^2 - 3 \cdot 2 +</description></item><item><title>ワイエルシュトラスのガンマ関数に対する無限積</title><link>https://freshrimpsushi.github.io/jp/posts/150/</link><pubDate>Wed, 26 Jul 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/150/</guid><description>定理 ガンマ関数について$\Gamma : (0, \infty) \to \mathbb{R}$が成り立つ。 $$ {1 \over \Gamma (x)} = x e^{\gamma x } \lim_{n \to \infty} \prod_{k=1}^{n} \left( 1 + {x \over k} \right) e^{- {x \over k} } $$ $\gamma$ は オイ</description></item><item><title>実数の密度の証明</title><link>https://freshrimpsushi.github.io/jp/posts/185/</link><pubDate>Tue, 25 Jul 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/185/</guid><description>サマリー 二つの実数 $a&amp;lt;b$ に対して、$a&amp;lt;r&amp;lt;b$ を満たす $r \in \mathbb{R}$ が存在する。 説明 実数空間において、どんな区間を考えても、その間には必ず</description></item><item><title>解析学における様々な級数判定法の総整理</title><link>https://freshrimpsushi.github.io/jp/posts/186/</link><pubDate>Tue, 25 Jul 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/186/</guid><description>概観 証明無しにいくつかの級数判定法を紹介したい。事実としてうまく活用することが大切で、大体証明の過程も退屈だからである。 このポストでは、以下</description></item><item><title>解析学におけるアルキメデスの原理</title><link>https://freshrimpsushi.github.io/jp/posts/181/</link><pubDate>Mon, 24 Jul 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/181/</guid><description>定理 正数$a$と実数$b$に対して、$an&amp;gt;b$を満たす自然数$n$が存在する。 説明 どんな$b$を持って来ても、常にそれより大きな$a</description></item><item><title>解析学の三つの公理：完備性公理</title><link>https://freshrimpsushi.github.io/jp/posts/180/</link><pubDate>Mon, 24 Jul 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/180/</guid><description>公理1 集合 $E \subset \mathbb{R}$ が空集合ではなく、もし $E$ が上界を持つならば、上限 $\sup(E) &amp;lt; \infty$ が存在する。 説明 体の公理や順序の公理は、知っていることを複雑に書き直し</description></item><item><title>解析学の三つの公理：1 体の公理</title><link>https://freshrimpsushi.github.io/jp/posts/178/</link><pubDate>Sun, 23 Jul 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/178/</guid><description>公理1 実数 $a,b,c \in \mathbb{R}$ と演算 $+,\cdot$ に対して、以下の性質が成立すると受け入れよう。 (A1) 加算に対する閉性: $a+b \in \mathbb{R}$ (A2) 加算に対する結合律: $(a+b) + c = a + (b+c)$ (A3) 加算に</description></item><item><title>解析学の三つの公理：第二順序公理</title><link>https://freshrimpsushi.github.io/jp/posts/177/</link><pubDate>Sun, 23 Jul 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/177/</guid><description>公理1 実数$ a,b,c \in \mathbb{R}$に対して、以下の性質が成立すると受け入れよう。 三分性: 与えられた$a,b$に対して、$a&amp;lt;b$ま</description></item><item><title>等差数列の和を求める</title><link>https://freshrimpsushi.github.io/jp/posts/169/</link><pubDate>Fri, 21 Jul 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/169/</guid><description>数式 最初の項が$a$で、公差が$d$の等差数列$a_{n} = a+(n-1)d$について $$ \sum_{k=1}^{n} a_{k}= {{n \left\{ 2a + (n-1)d \right\} } \over {2}} $$ 説明 最初に一度見て、この形で</description></item><item><title>等比数列の和を求める</title><link>https://freshrimpsushi.github.io/jp/posts/170/</link><pubDate>Fri, 21 Jul 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/170/</guid><description>数式 初項が$a$で、公比が$r$の等比数列$a_{n} = a r^{n-1}$について、 $$ \sum_{k=1}^{n} a_{k}= {{a (1- r^{n} ) } \over {1-r}} $$ 証明 $\displaystyle S= \sum_{k=1}^{n} a_{k}$としよう。す</description></item><item><title>双曲線関数の微分法</title><link>https://freshrimpsushi.github.io/jp/posts/168/</link><pubDate>Thu, 20 Jul 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/168/</guid><description>定理1 $$ \left( \sinh x \right)^{\prime} = \cosh x $$ $$ \left( \cosh x \right)^{\prime} = \sinh x $$ $$ \left( \tanh x \right)^{\prime} = \text{sech}^{2} x $$ 説明 双曲線関数の微分法については、証明することも暗記することもそれほどではない。</description></item><item><title>逆三角関数の微分法</title><link>https://freshrimpsushi.github.io/jp/posts/167/</link><pubDate>Thu, 20 Jul 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/167/</guid><description>定理1 $$ \begin{align*} \left( \sin^{-1}x \right)^{\prime} &amp;amp;= {{1} \over {\sqrt{1-x^2}}} \\ \left( \cos^{-1}x \right)^{\prime} &amp;amp;= -{{1} \over {\sqrt{1-x^2}}} \\ \left( \tan^{-1}x \right)^{\prime} &amp;amp;= {{1} \over {1+x^2}} \end{align*} $$ 説明 それぞれ アークサイン、アークコサイン、アークタンジェント と読む。こんなものが</description></item><item><title>グリーンの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/166/</link><pubDate>Wed, 19 Jul 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/166/</guid><description>定理1 平面 $S = [a,b] \times [c,d]$ 上で反時計回りに単純かつスムーズな閉曲線を描く $\mathcal{C}$ としよう。関数 $P,Q : \mathbb{R}^2 \to \mathbb{R}$ が $\mathcal{C}$ 上で連続であり、その導関数も連続であれば、 $$</description></item><item><title>フビニの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/165/</link><pubDate>Wed, 19 Jul 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/165/</guid><description>定理1 2次元領域$R : [a,b] \times [c,d]$に対して関数$f : R \to \mathbb{R}$を定義しよう。$f(x,\cdot)$が$[c,d]$で積</description></item><item><title>ML補助定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/162/</link><pubDate>Tue, 18 Jul 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/162/</guid><description>定理 1 関数$f$が積分経路$\mathscr{C}: z = z(t), t \in [a,b]$で部分的に連続だとしよう。正数$\displaystyle L = \int_{a}^{b} |z&amp;rsquo;(t)|</description></item><item><title>コーシー・リーマン方程式の逆が成立する条件</title><link>https://freshrimpsushi.github.io/jp/posts/160/</link><pubDate>Tue, 18 Jul 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/160/</guid><description>定理 複素領域 $A \subseteq \mathbb{C}$ で定義された複素関数 $f: A \to \mathbb{C}$ が実数値をとる関数 $u,v$ について $$ f(z) = f(x+iy) = u(x,y) + iv(x,y) $$ と表せるし、$u,v$ が $x,y$ に対して連続な一階偏微</description></item><item><title>ピタゴラスの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/161/</link><pubDate>Tue, 18 Jul 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/161/</guid><description>概要 直角三角形において、斜辺の長さを$c$、残りの二辺の長さを$a,b$とすると、以下の式が成立する。 $$ a^2 + b^2 = c^2 $$ 解説 あちこちで使われるの</description></item><item><title>コーシー・リーマン方程式</title><link>https://freshrimpsushi.github.io/jp/posts/159/</link><pubDate>Mon, 17 Jul 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/159/</guid><description>定理 1 関数 $f: A \subseteq \mathbb{C} \to \mathbb{C}$ が $\mathscr{R}$ で解析的だとする。もし実関数 $u,v$に対して $$ f(z) = f(x+iy) = u(x,y) + iv(x,y) $$ となれば、$u,v$は $x,y$に対して一階偏導関</description></item><item><title>ド・モアブルの定理を用いた三角関数の三倍角公式の導出</title><link>https://freshrimpsushi.github.io/jp/posts/154/</link><pubDate>Mon, 17 Jul 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/154/</guid><description>公式 $$ \sin 3\theta = 3 \sin \theta - 4 \sin^{3} {\theta} \\ \cos 3\theta = 4 \cos^{3} {\theta} - 3 \cos \theta $$ 説明 既存の変形公式は、普通三角関数の加法定理を何度も使用して得られるものだった。 例えば二倍</description></item><item><title>複素解析における三角関数と双曲線関数の関係</title><link>https://freshrimpsushi.github.io/jp/posts/157/</link><pubDate>Mon, 17 Jul 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/157/</guid><description>定義 1 複素関数としての双曲関数 $\sinh, \cosh : \mathbb{C} \to \mathbb{C}$ を下記のように定義する。 $$ \sinh z := { {e^{z} - e^{-z}} \over 2 } \\ \cosh z := { {e^{z} + e^{-z}} \over 2 } $$ 定理 2 $$ \begin{align*} \sinh (iz) =&amp;amp; i \sin z \\ \sin (iz)</description></item><item><title>複素解析における三角関数と指数関数の関係</title><link>https://freshrimpsushi.github.io/jp/posts/155/</link><pubDate>Mon, 17 Jul 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/155/</guid><description>概要 1 複素関数としてのサイン、コサイン関数 $\sin , \cos : \mathbb{C} \to \mathbb{C}$ は次のようである。 $$ \sin z = { {e^{iz} - e^{-iz}} \over 2 i } \\ \cos z = { {e^{iz} + e^{-iz}} \over 2 } $$ 説明 実際には定理と</description></item><item><title>オイラー・マスケローニ定数の収束性の証明</title><link>https://freshrimpsushi.github.io/jp/posts/151/</link><pubDate>Sun, 16 Jul 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/151/</guid><description>定理 $$ \gamma = \lim_{n \to \infty} \left( \sum_{k=1}^{n} \left( { 1 \over k } \right) - \ln{n} \right) = 0.577215664 \cdots $$ 説明 リーマン・ゼータ関数と関連づけると$\gamma$ $0$番目のスティルチェス定数 $\ga</description></item><item><title>オイラーのガンマ関数に対する極限公式の導出</title><link>https://freshrimpsushi.github.io/jp/posts/149/</link><pubDate>Sat, 15 Jul 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/149/</guid><description>式 1 ガンマ関数について $\Gamma : (0, \infty) \to \mathbb{R}$ が成立する。 $$ \Gamma (x) = \lim_{n \to \infty} {{n^x n!} \over {x(x+1)(x+2) \cdots (x+n) }} $$ 説明 以前知っていたガンマ関数は積分形 $$ \Gamma (x) = \int_{0}^{\infty} t^{x-1} e^{-t} dt $$ で全く異な</description></item><item><title>積分を使用した楕円の面積の計算</title><link>https://freshrimpsushi.github.io/jp/posts/145/</link><pubDate>Fri, 14 Jul 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/145/</guid><description>公式 楕円 $\displaystyle {x^2 \over a^2} + {y^2 \over b^2} = 1$ の面積は $ab \pi$ だ。 説明 特に $a=b=r$、つまり半径が $r$ の円 $x^2 + y^2=r^2$ の面積はよく知られている通り $r^2 \pi$ だ。 証明 楕円の面</description></item><item><title>実数の虚数乗の大きさは常に1である</title><link>https://freshrimpsushi.github.io/jp/posts/126/</link><pubDate>Thu, 29 Jun 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/126/</guid><description>証明 $\theta = 0$なら、$r^0=1$だから自然に$\left| r^{i \theta} \right| = \left| r^{i \cdot 0} \right| = 1$が成立する。 $\theta \ne 0$なら $$ \left| r^{i \theta} \right| = \left| e^{i \theta \ln r} \right| = \left| e^{i \theta (\text{Log}</description></item><item><title>微積分学におけるオイラーの公式</title><link>https://freshrimpsushi.github.io/jp/posts/112/</link><pubDate>Tue, 23 May 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/112/</guid><description>定理 オイラーの公式: $$ { e }^{ ix }= \cos x + i \sin x $$ オイラーの等式: $$ { e }^{ i\pi }+1=0 $$ 説明 オイラーの公式euler&amp;rsquo;s formulaは、そ</description></item><item><title>整数論における合同</title><link>https://freshrimpsushi.github.io/jp/posts/106/</link><pubDate>Thu, 11 May 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/106/</guid><description>定義 1 整数 $a \equiv b \pmod{m}$, $\iff$, $a$, $b$, $m$ に対して、$a = b + mk$ を満たす整数 $k$ が存在する。 定理 $a_{1} \equiv b_{1} \pmod{m}$ と $a_{2} \equiv b_{2} \pmod{m}$ が成り立つとしよう。 [1] 加算: $a_{1} + a_{2} \equiv b_{1} + b_{2} \pmod{m}$</description></item><item><title>ガンマ関数</title><link>https://freshrimpsushi.github.io/jp/posts/95/</link><pubDate>Sun, 30 Apr 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/95/</guid><description>定義 次のように定義された関数 $\Gamma : (0, \infty) \to \mathbb{R}$ をガンマ関数と言う。 $$ \Gamma (x) := \int_{0}^{\infty} t^{x-1} e^{-t} dt $$ 説明 上の式において積分に焦点を置くと、オイラー積分とも呼ばれる</description></item><item><title>アークタンジェント関数の級数展開</title><link>https://freshrimpsushi.github.io/jp/posts/86/</link><pubDate>Thu, 27 Apr 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/86/</guid><description>定理1 $$ \tan ^{ -1 } x = \sum _{ n=0 }^{ \infty }{ \frac { (-1) ^{ n } { x } ^ { 2n+1 } } { 2n+1 } } $$ 説明 $\arctan$として書いても$\tan ^{-1}$として書いて</description></item><item><title>2次行列の積の成分の和を簡単に求める公式</title><link>https://freshrimpsushi.github.io/jp/posts/70/</link><pubDate>Sat, 22 Apr 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/70/</guid><description>公式 二次行列 $\begin{bmatrix} { a }&amp;amp;{ b } \\ { c }&amp;amp;{ d } \end{bmatrix} \begin{bmatrix} { p }&amp;amp;{ q } \\ { r }&amp;amp;{ s } \end{bmatrix}$ の成分の合計は、次のようになります。 $$ {(a+c)(p+q)}+{(b+d)(r+s)} $$ 説明 二つの二次行列を与えてその積の</description></item><item><title>ユークリッドの互除法の証明</title><link>https://freshrimpsushi.github.io/jp/posts/65/</link><pubDate>Thu, 20 Apr 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/65/</guid><description>アルゴリズム 二つの整数$a \ge b$に対して、$\text{gcd}(a,b)$は以下のように求めることができる。 疑似コード アルゴリズム：ユーク</description></item><item><title>合同方程式に対する代数学の基本定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/66/</link><pubDate>Thu, 20 Apr 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/66/</guid><description>定理 1 ある素数$p$について$p\nmid a_{ 0 }$とすると、全ての係数が整数の多項式 $$ f(x)=a_{ 0 }x^{ d }+a_{ 1 }x^{ d-1 }+ \cdots +a_{ d-1 }x+a_{ d } $$ に対して方程式 $f(x)\equiv 0 \p</description></item><item><title>ユークリッドの証明：素数は無限に存在する</title><link>https://freshrimpsushi.github.io/jp/posts/64/</link><pubDate>Sat, 15 Apr 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/64/</guid><description>定理 1 素数は無限に存在する。 説明 素数が無限であることを証明する方法はいくつかある。その中でも最もシンプルなのが、ユークリッドの方法だ。この証</description></item><item><title>指数関数、正弦関数、余弦関数のテイラー展開</title><link>https://freshrimpsushi.github.io/jp/posts/59/</link><pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/59/</guid><description>要旨1 $$ \begin{equation} { { e ^ x } }=\sum _{ n=0 }^{ \infty }{ \frac { { x } ^{ n } }{ n! } } \end{equation} $$ $$ \begin{equation} \sin x=\sum _{ n=0 }^{ \infty }{ \frac { { x } ^{ 2n+1 } }{ (2n+1)! }{ { (-1) }^{ n } } } \end{equation} $$ $$ \begin{equation} \cos x=\sum _{ n=0 }^{ \infty }{ \frac</description></item><item><title>自然対数の級数形の導出と交代調和級数の収束性証明</title><link>https://freshrimpsushi.github.io/jp/posts/58/</link><pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/58/</guid><description>整理 $$ \ln(1-x)=\sum _{ n=0 }^{ \infty }{ \frac { -{ x }^{ n+1 } }{ n+1 } } $$ 説明 $\ln(1-x)$ の級数形は比較的簡単に求められる。$\ln(1+x)$の場合は、定理の結果として得られた式に</description></item><item><title>二次方程式の解の公式の導出 ステップ バイ ステップ</title><link>https://freshrimpsushi.github.io/jp/posts/56/</link><pubDate>Thu, 06 Apr 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/56/</guid><description>公式 二次方程式 $ax^{2}+bx+c=0$ について(ここで $a\neq 0$): $$ x=\dfrac{ -b\pm \sqrt { b^{2}-4ac } }{2a} $$ 説明 二次方程式が与えられた場合、その根は公式を通じて簡単に見つけることができる。 導出 戦</description></item><item><title>回転変換行列の累乗公式の証明</title><link>https://freshrimpsushi.github.io/jp/posts/55/</link><pubDate>Thu, 06 Apr 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/55/</guid><description>定理 全ての自然数に対して$n$が成立する。 $$ \begin{bmatrix} { \cos \theta }&amp;amp;{ -\sin \theta } \\ { \sin \theta }&amp;amp;{ \cos \theta } \end{bmatrix} ^{n} = \begin{bmatrix} { \cos n\theta }&amp;amp;{ -\sin n\theta } \\ { \sin n\theta }&amp;amp;{ \cos n\theta } \end{bmatrix} $$ 説明 原点を中心に$\t</description></item><item><title>無限級数が収束するなら、無限数列は0に収束することを証明</title><link>https://freshrimpsushi.github.io/jp/posts/54/</link><pubDate>Thu, 06 Apr 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/54/</guid><description>定理 $\displaystyle \sum _{ n=1 }^{ \infty }{ { a }_{ n }}$ が収束するなら、$\displaystyle \lim _{ n\to \infty }{ { a }_{ n }}=0$ 説明 初めて接すると直感と異なり少し戸惑う定理だが</description></item><item><title>分数関数の逆関数と二次正方行列の逆行列の形</title><link>https://freshrimpsushi.github.io/jp/posts/53/</link><pubDate>Wed, 05 Apr 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/53/</guid><description>定理 分数関数 $\displaystyle f(x)=\frac { ax+b }{ cx+d }$ の逆関数は $$ f^{ -1 }(x)=\frac { dx-b }{ -cx+a } $$ 2次 正方行列 $\begin{bmatrix} a &amp;amp; b \\ c &amp;amp; d \end{bmatrix}$ の逆行列は $$ \frac { 1 }{ ad-bc } \begin{bmatrix} d &amp;amp; -b \\ -c &amp;amp; a \end{bmatrix} $$ 説明 単なる</description></item><item><title>放物線の接線の方程式導出</title><link>https://freshrimpsushi.github.io/jp/posts/52/</link><pubDate>Wed, 05 Apr 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/52/</guid><description>導出 傾きが与えられた場合 まずは傾きが与えられた場合を見ていこう。 放物線 $y^{ 2 }=4px$に接する直線の方程式が$y=mx+n$である時、二つの</description></item><item><title>コーシー・シュヴァルツの不等式の証明</title><link>https://freshrimpsushi.github.io/jp/posts/51/</link><pubDate>Mon, 03 Apr 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/51/</guid><description>定理 $$ ({a}^{2}+{b}^{2})({x}^{2}+{y}^{2})\ge { (ax+by) }^{ 2 } $$ 証明 $$ \begin{align*} &amp;amp; ({a}^{2}+{b}^{2})({x}^{2}+{y}^{2})-{ (ax+by) }^{ 2 } \\ =&amp;amp; {a}^{2}{x}^{2}+{b}^{2}{x}^{2}+{a}^{2}{y}^{2}+{b}^{2}{y}^{2}-{ (ax+by) }^{ 2 } \\ =&amp;amp; {b}^{2}{x}^{2}+{a}^{2}{y}^{2}-2axby \\ =&amp;amp; { (ay-bx) }^{ 2 } \\ \ge&amp;amp; 0 \end{align*} $$ よって、下記を得る。 $$ ({a}^{2}+{b}^{2})({x}^{2}+{y}^{2})\ge { (ax+by) }^{ 2 } $$ ■ 説明 高校の授業から</description></item><item><title>一直線とx軸y軸に囲まれた三角形の面積</title><link>https://freshrimpsushi.github.io/jp/posts/50/</link><pubDate>Mon, 03 Apr 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/50/</guid><description>概要 最大値や最小値、接線を求められるか問題でよく出るのがこの三角形の面積 $S$ だ。もちろん、三角形の面積を求めるのは難しくないが、単純な公式の形</description></item><item><title>ポーカーハンドの確率計算</title><link>https://freshrimpsushi.github.io/jp/posts/48/</link><pubDate>Wed, 29 Mar 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/48/</guid><description>スートとランクの定義 確率に入る前に、ポーカー自体をよく知らなければ、役を調べてみることをお勧めする。確率を計算する前に、二つの定義をしよう:</description></item><item><title>三角関数の加法定理：様々な証明</title><link>https://freshrimpsushi.github.io/jp/posts/44/</link><pubDate>Tue, 28 Mar 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/44/</guid><description>定理 $$ \sin\left( \alpha +\beta \right) =\sin\alpha \cos\beta +\cos\alpha \sin\beta \\ \sin\left( \alpha -\beta \right) =\sin\alpha \cos\beta -\cos\alpha \sin\beta \\ \cos\left( \alpha +\beta \right) =\cos\alpha \cos\beta -\sin\alpha \sin\beta \\ \cos\left( \alpha -\beta \right) =\cos\alpha \cos\beta +\sin\alpha \sin\beta \\ \tan\left( \alpha +\beta \right) =\frac { \tan\alpha +\tan\beta }{ 1-\tan\alpha \tan\beta } \\ \tan\left( \alpha -\beta \right) =\frac { \tan\alpha -\tan\beta }{ 1+\tan\alpha \tan\beta } $$ 証明 コサイ</description></item><item><title>自然対数のべき乗の積分法</title><link>https://freshrimpsushi.github.io/jp/posts/45/</link><pubDate>Tue, 28 Mar 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/45/</guid><description>公式 $$ \int {{(\ln x)}^{ n }} dx=x{{(\ln x)}^{ n }}-\int n{{(\ln x)}^{ n-1 }}dx $$ 説明 積分問題を解いていると、よく見かけるタイプだ。こういう問題を部分積分でまっすぐ解くと、時間をかなり取ら</description></item><item><title>コーシーの平均値の定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/38/</link><pubDate>Fri, 24 Mar 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/38/</guid><description>概要1 解説 平均値の定理と変わったところ言えば、単に関数が一つ増えただけだ。$g(x) = x$としてみると、この$g$がもっと自由になったという</description></item><item><title>テイラーの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/41/</link><pubDate>Fri, 24 Mar 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/41/</guid><description>定理1 関数 $f(x)$ が $[a,b]$ で連続であり、$(a,b)$ で $n$ 回微分可能であれば、 $$ \begin{align*} f(b) =&amp;amp; \sum_{k=0}^{n-1} {{(b-a)^{k}\over{k!}}{f^{(k)}( a )}} + {(b-a)^{n}\over{n!}}{f^{(n)}(\xi)} \\ =&amp;amp; {f(a)} + {(b-a)f ' (a)} + \cdots + {(b-a)^{n-1}\over{(n-1)!}}{f^{(n-1)}(a)} + {(b-a)^{n}\over{(n)!}}{f^{(n)}(\xi)} \end{align*} $$ を満たす $\xi \in (a,b)$ が存在す</description></item><item><title>フェルマーの最終定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/35/</link><pubDate>Fri, 24 Mar 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/35/</guid><description>定理1 関数 $f(x)$ が $x=c$ で極大または極小であり、$f ' (c)$ が存在する場合、$f ' (c) = 0$ である。 説明 通常、高校の教科書では ロルの定理 まで紹介されているが</description></item><item><title>ロピタルの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/39/</link><pubDate>Fri, 24 Mar 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/39/</guid><description>定理1 $f(x)$と$g(x)$が$x=a$の近くで微分可能で、$g ' (x) \ne 0$であり、$\displaystyle \lim _{x \to a} f(x) = \lim _{x \to a} g(x) = 0</description></item><item><title>奇関数と偶関数</title><link>https://freshrimpsushi.github.io/jp/posts/40/</link><pubDate>Fri, 24 Mar 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/40/</guid><description>定義 $f(-x) = f(x)$ を満たす関数 $f(x)$ を偶関数evenという。 $f(-x) = -f(x)$ を満たす関数 $f(x)$ を奇関数oddという。 説明 偶関数は座標平面で$y$ 軸に関して対称な関数、</description></item><item><title>微分積分学におけるロルの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/36/</link><pubDate>Fri, 24 Mar 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/36/</guid><description>定理1 関数 $f(x)$ が $[a,b]$ で連続であり、$(a,b)$ で微分可能であり、$f(a)=f(b)$ の場合、$f ' (c)=0$ を満たす $c$ が $(a,b)$ に少なくとも一つ存在する。</description></item><item><title>微分積分学における平均値定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/37/</link><pubDate>Fri, 24 Mar 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/37/</guid><description>定理1 関数 $f(x)$ が $[a,b]$ で連続であり、$(a,b)$ で微分可能ならば、$\displaystyle f '(c)={{f(b)-f(a)}\over{b-a}}$ を満たす$c$ が $(a,b)$ 内に少なくとも一つ存在する。</description></item><item><title>関数と関数のテイラー級数が同じになる条件</title><link>https://freshrimpsushi.github.io/jp/posts/42/</link><pubDate>Fri, 24 Mar 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/42/</guid><description>定理1 関数$f$が点$a$の近くで無限に微分可能で、$\displaystyle f(x) = \sum_{n=0}^{\infty} {{f^{(n)} (a)}\over{n!}} {(x-a)}^n$の必要十分条件はある$\xi \in</description></item><item><title>さまざまな三角関数の積分法</title><link>https://freshrimpsushi.github.io/jp/posts/31/</link><pubDate>Thu, 23 Mar 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/31/</guid><description>概要 積分問題を解くとき、三角関数の積分をかなりすることになる。そして、これらの積分法に慣れると、三角関数も多項式関数のように迅速に積分できる</description></item><item><title>ベイズの定理の証明と事前分布、事後分布</title><link>https://freshrimpsushi.github.io/jp/posts/29/</link><pubDate>Thu, 23 Mar 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/29/</guid><description>定理 1 標本空間 $S$ と事象 $A$、確率 $P$ $\left\{ S_1, S_2, \cdots ,S_n \right\}$ が $S$ の分割だとすると、次が成り立つ。 $$ P(S_k|A)=\frac { P(S_k)P(A|S_k) }{ \sum _{ k=1 }^{ n }{ P(S_k)P(A|S_k) } } $$ 定義 ベイズ定理の右辺である</description></item><item><title>二つの事象が互いに排他的である場合、それらは依存していることを証明する</title><link>https://freshrimpsushi.github.io/jp/posts/27/</link><pubDate>Thu, 23 Mar 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/27/</guid><description>定理 二つの事象$A,B$に対して、$B=A^c$ならば$P(A\cap B) \neq P(A)P(B)$ 説明 式を使った証明がなくても、排反ならば独立ではありえないという</description></item><item><title>二つの事象が独立であれば、それらの余事象も独立であることの証明</title><link>https://freshrimpsushi.github.io/jp/posts/28/</link><pubDate>Thu, 23 Mar 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/28/</guid><description>概要 次のことが等価である。 $$ P(A \cap B) = P(A)P(B) \\ P(A \cap B^c)=P(A)P(B^c) \\ P(A^c \cap B)=P(A^c)P(B) \\ P(A^c \cap B^c)=P(A^c)P(B^c) $$ 説明 これを知っていると大いに役立つだけでなく、公式としても利用できる。 証明 $P(A</description></item><item><title>二次関数の極値を迅速に求める</title><link>https://freshrimpsushi.github.io/jp/posts/30/</link><pubDate>Thu, 23 Mar 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/30/</guid><description>式 二次関数 $f(x)=c(x-a)(x-b)$ の頂点は $\frac { a+b }{ 2 }$ (ただし、$c\neq 0$) 因数分解できる二次関数の場合は、わざわざ色々計算しなくても頂点が分かる。当たり前のよ</description></item><item><title>11の倍数判定法のより簡単な証明</title><link>https://freshrimpsushi.github.io/jp/posts/23/</link><pubDate>Tue, 21 Mar 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/23/</guid><description>ビルドアップ このポストでは基数に関する便宜のために次のような表記を使用する。 $$ [a_{n} a_{n-1} &amp;hellip; a_{1} a_{0}] := a_{n} \cdot 10^{n} + a_{n-1} \cdot 10^{n-1} +&amp;hellip;+ a_{1} \cdot 10^{1} + a_{0} \cdot 10^{0} $$ 例えば、$5714</description></item><item><title>3の倍数判定法と9の倍数判定法の証明</title><link>https://freshrimpsushi.github.io/jp/posts/21/</link><pubDate>Tue, 21 Mar 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/21/</guid><description>定理 各桁の数字を全部足して $3$ の倍数なら $3$ の倍数で、$9$ の倍数なら $9$ の倍数だ。 説明 例として $8142$ は $8142=3 \cdot 2714$ で $3$ の倍数で、実際に $8+1+4+2=15$ は $3$ の倍数だ。 $1945125$ は</description></item><item><title>7と13の倍数判定法の証明</title><link>https://freshrimpsushi.github.io/jp/posts/22/</link><pubDate>Tue, 21 Mar 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/22/</guid><description>ビルドアップ このポストでは、基数に関する便宜のために、次のような表記を使っている。 $$ [a_{n} a_{n-1} &amp;hellip; a_{1} a_{0}] := a_{n} \cdot 10^{n} + a_{n-1} \cdot 10^{n-1} +&amp;hellip;+ a_{1} \cdot 10^{1} + a_{0} \cdot 10^{0} $$ 例として、$</description></item><item><title>n個の要素を持つ有限集合の部分集合の数</title><link>https://freshrimpsushi.github.io/jp/posts/25/</link><pubDate>Tue, 21 Mar 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/25/</guid><description>公式 二項係数の和の公式 1 二項係数の和は次のようになる。 $$ 2^{n} = \sum_{k=0}^{n} \binom{n}{k} $$ 補題: 冪集合の濃度 有限集合 $S$ の濃度が $n = |S|$ であれば、その冪集合 $2^{S}$ の濃度は $2^{n}$</description></item><item><title>エーネストローム-カケヤ定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/5/</link><pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/5/</guid><description>定理 1 $\left\{ a_{i} \right\}_{i=0}^{n} \subset \mathbb{R}$ で $a_0 &amp;gt; a_1 &amp;gt; \cdots &amp;gt; a_n &amp;gt; 0$ としましょう。すると、多項関数 $$ P(z) := a_0 + a_1 z + \cdots + a_{n-1} z^{n-1} + a_n z^n $$ において、あらゆる根 $z \in \mathbb{C}$ は $|z| \ge 1$ を満たし</description></item><item><title>オイラーの調和級数の発散性に関する証明</title><link>https://freshrimpsushi.github.io/jp/posts/17/</link><pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/17/</guid><description>定理 調和級数は発散する。 $$ \sum _{ n=1 }^{ \infty }{ \frac { 1 }{ n } }=\infty $$ 説明 調和級数は一見すると、その値が続けざまに小さくなるので収束しそうに見えるが、オレー</description></item><item><title>ガビの李証明</title><link>https://freshrimpsushi.github.io/jp/posts/16/</link><pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/16/</guid><description>概要 $bdf(b+d)\neq 0$ だったら、 $$ \frac { a }{ b }=\frac { c }{ d }=\frac { e }{ f } \implies \frac { a+c }{ b+d }=\frac { e }{ f } $$ 説明 「加比」は他ではなく、二つの漢字、加える「加」と比べる「比</description></item><item><title>ド・モアブルの定理の証明</title><link>https://freshrimpsushi.github.io/jp/posts/9/</link><pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/9/</guid><description>定理 $z = r \text{cis} \theta$ ならば、全ての自然数 $n$ に対して $z^n = r^n \text{cis} n\theta$ が成り立つ。 $\text{cis} \theta: = \cos \theta + i \sin \theta$ 証明 数学的帰納法を使おう。 $n=1$ に対しては自明で、$n=k$</description></item><item><title>リーマン和によって計算された面積と定積分の関係</title><link>https://freshrimpsushi.github.io/jp/posts/12/</link><pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/12/</guid><description>数式 $$ \begin{align*} &amp;amp; \lim _{ n\to \infty }{ \sum _{ k=1 }^{ n }{ f\left( a+\frac { p }{ n }k \right) \frac { p }{ n } } } \\ =&amp;amp; \int _{ a }^{ a+p }{ f(x)dx } \\ =&amp;amp; \int _{ 0 }^{ p }{ f(a+x)dx } \\ =&amp;amp; \int _{ 0 }^{ 1 }{ pf(a+px)dx } \end{align*} $$ 説明 たまに、</description></item><item><title>三角関数の平行移動と導関数の関係</title><link>https://freshrimpsushi.github.io/jp/posts/11/</link><pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/11/</guid><description>公式 [1] サイン: $$\sin{\left( \theta +\frac { n }{ 2 }\pi \right)}={ \sin }^{ (n) }\theta$$ [2] コサイン: $$\cos{\left( \theta +\frac { n }{ 2 }\pi \right)}={ \cos }^{ (n) }\theta$$ $(n)$ は $n$ 回微分することを意味する。 説明 簡単に言うと、90˚動くた</description></item><item><title>二本の平行な直線の間の距離を求める公式の導出</title><link>https://freshrimpsushi.github.io/jp/posts/4/</link><pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/4/</guid><description>式 $$ d=\frac {|2k|}{\sqrt{m^2+1}} $$ 説明 双曲線の接線の問題を解いていると、二つの接線の間の距離を求めることがよくあります。点から直線までの距離を求める公式があるため、</description></item><item><title>二次関数のよく使われる定積分</title><link>https://freshrimpsushi.github.io/jp/posts/15/</link><pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/15/</guid><description>式 $$ \int _{ \alpha }^{ \beta }{ (x-\alpha )(x-\beta )dx }=-\frac { { (\beta -\alpha ) } ^ { 3 } }{ 6 } $$ 説明 問題を解いていると、思ったよりこの形の定積分をすることが多い。解を早く出すこと以外に</description></item><item><title>落下する物体の速度を求める式の導出</title><link>https://freshrimpsushi.github.io/jp/posts/13/</link><pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/13/</guid><description>公式 $g$ を重力加速度としよう。ある物体が高い所から低い所へ重力によって落ちた時、この物体の速度を落下した距離 $h$ に関する公式で表すと次のようにな</description></item><item><title>調和平均を利用して平均速度を求める</title><link>https://freshrimpsushi.github.io/jp/posts/14/</link><pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/14/</guid><description>導出 行くのにかかった時間を $t_{ a }$、戻るのにかかった時間を $t_{ b }$ とすると、$\displaystyle a=\frac { S }{ t_{ a } }$ になって、$\disp</description></item><item><title>算術平均と幾何平均、調和平均の間の不等式</title><link>https://freshrimpsushi.github.io/jp/posts/3/</link><pubDate>Tue, 14 Mar 2017 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/jp/posts/3/</guid><description>定義 $n$ 個の正数 ${x}_1,{x}_2,\cdots,{x}_n$ に対して算術平均、幾何平均、調和平均は以下のように定義される。 算術平均 : $$ \sum_{ k=1 }^{ n }{ \frac { {x}_k }{ n } }=\frac { {x}_1+{x}_2+\cdots+{x}_n }{ n } $$ 幾何平均 : $$ \prod_{</description></item></channel></rss>