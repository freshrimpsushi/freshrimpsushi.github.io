<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>줄리아 on 생새우초밥집</title>
    <link>https://freshrimpsushi.github.io/tags/%EC%A4%84%EB%A6%AC%EC%95%84/</link>
    <description>Recent content in 줄리아 on 생새우초밥집</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <lastBuildDate>Fri, 26 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://freshrimpsushi.github.io/tags/%EC%A4%84%EB%A6%AC%EC%95%84/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>길버트 모델</title>
      <link>https://freshrimpsushi.github.io/posts/gilbert-model/</link>
      <pubDate>Fri, 26 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/gilbert-model/</guid>
      <description>정의 1 2 쉬운 정의 심플 네트워크의 링크가 각각 독립적으로 확률 $p \in [0,1]$ 에 따라 연결되는 랜덤 네트워크를 길버트 모델Gilbert Model $\mathbb{G}_{n,p}$ 라 한다. 어려운 정의 확률 공</description>
    </item>
    
    <item>
      <title>에르되시-레니 모델</title>
      <link>https://freshrimpsushi.github.io/posts/erd%C5%91s-r%C3%A9nyi-model/</link>
      <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/erd%C5%91s-r%C3%A9nyi-model/</guid>
      <description>빌드업 $n$ 개의 라벨링 된Labeled 버텍스와 $m$ 개의 에지를 가진 심플 그래프라는 프로퍼티 $\mathscr{G}_{n,m} \subset 2^{\binom{n}{2}}$ 를 생각해보자. 정확히 $m$ 개의 링크를 가진 랜덤 그래프는 $\mathbb{G}_{n, m} :</description>
    </item>
    
    <item>
      <title>곡선의 정의</title>
      <link>https://freshrimpsushi.github.io/posts/definition-of-curve/</link>
      <pubDate>Fri, 06 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/definition-of-curve/</guid>
      <description>정의 1 사상 $\alpha : (a,b) \to \mathbb{R}^{3}$ 을 곡선Curve이라고 한다. 곡선에서 $\alpha^{\prime} = \dfrac{d \alpha}{d t} = \mathbf{0}$ 인 점 $t = t_{0}$ 을 특이점Singular Point라 한다. 어떤 $k \in \mathbb{N}$ 에 대해 모</description>
    </item>
    
    <item>
      <title>스미스-워터맨 정렬: 국소 서열 정렬</title>
      <link>https://freshrimpsushi.github.io/posts/smith-waterman-alignment/</link>
      <pubDate>Sat, 08 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/smith-waterman-alignment/</guid>
      <description>개요 두 염기서열에서 가장 비슷한 부분의 정렬을 찾는 것을 국소 정렬Local Alignment이라 하는데, 그 방법으로 가장 널리 쓰이는 스미스-워터맨 알고리</description>
    </item>
    
    <item>
      <title>니들맨-분쉬 알고리즘: 전역 서열 정렬</title>
      <link>https://freshrimpsushi.github.io/posts/needleman-wunsch-algorithm/</link>
      <pubDate>Mon, 26 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/needleman-wunsch-algorithm/</guid>
      <description>개요 두 염기서열의 공통 부분이 가장 많아지는 정렬을 찾는 것을 전역 정렬Global Alignment이라 하는데, 그 방법으로 가장 널리 쓰이는 니들맨-분쉬 알</description>
    </item>
    
    <item>
      <title>줄리아, 매트랩, 파이썬, R에서 동등한 코드들</title>
      <link>https://freshrimpsushi.github.io/posts/equivalent-codes-in-julia-python-matlab-r/</link>
      <pubDate>Thu, 18 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/equivalent-codes-in-julia-python-matlab-r/</guid>
      <description>개요 줄리아, 매트랩, 파이썬, R에서 같은 기능을 하는 코드를 정리한다. 플럭스-파이토치-텐서플로우 치트시트 파이썬에 대해서 다음과 같은 환경이라고 하자.</description>
    </item>
    
    <item>
      <title>에이전트 기반 모델 시뮬레이션에서의 사망</title>
      <link>https://freshrimpsushi.github.io/posts/death-in-agent-based-simulation-model/</link>
      <pubDate>Sat, 16 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/death-in-agent-based-simulation-model/</guid>
      <description>시뮬레이션 이 포스트에서는 생성된 에이전트가 사망하는 액션을 주어 거시적인 관점에서 집단의 역성장을 모방하려고 한다. 이 시뮬레이션에서 공간이나 이동에 관련된</description>
    </item>
    
    <item>
      <title>에이전트 기반 모델 시뮬레이션에서의 번식</title>
      <link>https://freshrimpsushi.github.io/posts/reproduction-in-agent-based-simulation-model/</link>
      <pubDate>Tue, 12 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/reproduction-in-agent-based-simulation-model/</guid>
      <description>시뮬레이션 이 포스트에서는 생성된 에이전트에게 스스로 복제하는 액션을 주어 거시적인 관점에서 집단의 성장을 모방하려고 한다. 이 시뮬레이션에서 공간이나 이동에</description>
    </item>
    
    <item>
      <title>에이전트 기반 시뮬레이션 첫걸음: 산점도로 나타내기</title>
      <link>https://freshrimpsushi.github.io/posts/tutorial-on-agent-based-simulation/</link>
      <pubDate>Fri, 08 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/tutorial-on-agent-based-simulation/</guid>
      <description>시뮬레이션 코드 리뷰 Step 1. 패키지 로드, 초기값 설정 julia&amp;gt; cd(@\_\_DIR\_\_) # 파일 저장 경로cd(@\_\_DIR\_\_) # 파일 저장 경로 julia&amp;gt; @time using Plots 19.989912 seconds (31.16 M allocations: 1.628 GiB, 4.49% gc Time) julia&amp;gt; @time</description>
    </item>
    
    <item>
      <title>맬서스 성장 모델: 이상적인 집단 성장</title>
      <link>https://freshrimpsushi.github.io/posts/malthusian-growth-model/</link>
      <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/malthusian-growth-model/</guid>
      <description>모델 $$ \dot{N} = rN $$ 변수 $N(t)$: $t$ 시점에서 집단의 개체수를 나타낸다. 파라미터 $r \in \mathbb{R}$ : 고유 성장률Intrinsic Rate of Increase로써, $0$ 보다 크면 성장하</description>
    </item>
    
    <item>
      <title>감쇠 조화 진동</title>
      <link>https://freshrimpsushi.github.io/posts/damped-harmonic-oscillation/</link>
      <pubDate>Sat, 29 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/damped-harmonic-oscillation/</guid>
      <description>감쇠 조화 진동1 용수철 상수를 $k$라 할 때, 단순 조화 진동자의 운동 방정식은 다음과 같다. $$ m \ddot {x}+kx=0 $$ 단순 조화 진동에서는 오로지 용수철에 의한 복원력만을 고려</description>
    </item>
    
    <item>
      <title>이항 분포</title>
      <link>https://freshrimpsushi.github.io/posts/binomial-distribution/</link>
      <pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://freshrimpsushi.github.io/posts/binomial-distribution/</guid>
      <description>정의 1 $n \in \mathbb{N}$ 과 $p \in [0,1]$ 에 대해 다음과 같은 확률 질량 함수를 가지는 이산 확률 분포 $\text{Bin}(n,p)$ 를 이항 분포Binomial Distribution라고 한다. $$ p(x) = \binom{n}{x} p^{x}</description>
    </item>
    
  </channel>
</rss>
