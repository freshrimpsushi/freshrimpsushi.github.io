<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on FreshrimpRestaurant</title>
    <link>https://freshrimpsushi.github.io/en/categories/r/</link>
    <description>Recent content in R on FreshrimpRestaurant</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 23 Dec 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://freshrimpsushi.github.io/en/categories/r/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Solving Error: &#39;C:\U&#39; used without hex digits in character string starting &#39;C:\U&#39; when Reading R Files or Changing Paths</title>
      <link>https://freshrimpsushi.github.io/en/posts/1860/</link>
      <pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1860/</guid>
      <description>If you only seek a solution, you might only need to see how to fix it, but if you don&amp;rsquo;t want to encounter the same error again, it is recommended to read everything. Error Diagnosis For instance, when trying to read an example.csv file on the desktop as shown above, the following error may occur. Error: &amp;#39;\U&amp;#39; used without hex digits in character string starting &amp;#34;&amp;#34;C:\U&amp;#34; Despite looking over all</description>
    </item>
    <item>
      <title>How to Get a List of Files in a Folder in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/1451/</link>
      <pubDate>Mon, 13 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1451/</guid>
      <description>Code setwd(&amp;#34;F:\\dsr\\project&amp;#34;) getwd() list.files(getwd()) list.files(getwd(),pattern=&amp;#34;*.csv&amp;#34;) list.files() is a function that is useful for compiling data divided into several files or for meta-programming: path: As the first argument, if you specify a directory, it returns a list of files in that folder. pattern: As the second argument, it accepts a rule as a regular expression and returns a list of files that meet the condition. In the example, a wildcard *</description>
    </item>
    <item>
      <title>Resolving Warning in install.packages lib = C:\Program Files\R\R-3.6.1\library is not writable during R Package Installation</title>
      <link>https://freshrimpsushi.github.io/en/posts/1414/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1414/</guid>
      <description>Overview This documentation is tailored to users who are completely new to R, to the point of not even being familiar with computers, let alone programming, and are in urgent need to use R. Therefore, the explanations may be overly detailed. WARNING: Rtools is required to build R packages but is not currently installed. Please download and install the appropriate version of Rtools before proceeding: https://cran.rstudio.com/bin/windows/Rtools/ If you get a</description>
    </item>
    <item>
      <title>Reading Data Files Quickly in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/1270/</link>
      <pubDate>Mon, 02 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1270/</guid>
      <description>Overview R essentially provides the read.csv() function for reading csv data, but if you&amp;rsquo;re engaged in practical analysis, its performance is so lacking that it&amp;rsquo;s not worth using. As an alternative, it is highly recommended to use read_csv() from the readr package. read_csv() is written in c++ and can read csv files at a very high speed. Code The following is a measurement of the time taken for read.csv() and</description>
    </item>
    <item>
      <title>How to Parallel Process in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/1266/</link>
      <pubDate>Fri, 30 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1266/</guid>
      <description>Overview While R is not a language used for its speed, there are definitely times when speed is necessary. Even if the code is well written and tidy, if it takes too long, parallel processing or the use of GPUs is usually considered. At first glance, it might seem like there&amp;rsquo;s not much need for parallel processing in R, but when dealing with big data or conducting large-scale simulations, parallel</description>
    </item>
    <item>
      <title>Measuring and Benchmarking Code Execution Time in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/1246/</link>
      <pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1246/</guid>
      <description>Overview Matlab R is certainly a programming language specialized in statistical analysis, but like all languages, it is not indifferent to speed. Even if speed is not a forte, one should be able to benchmark. In R, you can simply measure time by putting the entire code inside system.time({}). Example Below is the code that implements the Sieve of Eratosthenes in R and checks if numbers less than or equal</description>
    </item>
    <item>
      <title>Differences in the start and end Options of the ts Function and the window Function in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/1242/</link>
      <pubDate>Tue, 20 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1242/</guid>
      <description>Description In R, you often use the ts() and window() functions when dealing with time series data. ts() is used to create time series data that R can accept, and window() is used to extract a portion of the time series data. Both functions have options for start and end, and their differences are as follows. ts() This is an option for giving indices. start: Assigns an index to the</description>
    </item>
    <item>
      <title>How to Plot Points with Colored Borders in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/1237/</link>
      <pubDate>Sun, 18 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1237/</guid>
      <description>Code To change the border color or fill out the inner part in the scatter plot, the following options can be modified: pch: Change the symbol to fill out the color. Use numbers from 21 to 25. bg: Stands for background color, determining the color filled inside. In the figure above, it is light green. col: The color of the symbol itself, which actually refers to the border. In the</description>
    </item>
    <item>
      <title>How to Use Pipe Operator %&gt;% in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/1235/</link>
      <pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1235/</guid>
      <description>Overview In R, the %&amp;gt;% is known as the Pipe Operator, and like all other operators, it performs a binary operation. The pipe operator, true to its name, allows values to travel through the pipeline, navigating through functions and enabling seamless data manipulation. To truly understand its utility, consider the following example. Example The example above calculates the square root of numbers from $1$ to $10$, takes the logarithm of</description>
    </item>
    <item>
      <title>How to Define the Operator %% in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/1224/</link>
      <pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1224/</guid>
      <description>Overview In R, it is possible to define a function as a binary operator right away. The remainder operation %%, the quotient operation %/%, dot product %*%, %o% or inclusion %in%, and the pipe operator %&amp;gt;% that are already defined in R also belong to these binary operators. Code For instance, in a language like Python, adding strings together concatenates them, which is very convenient, but R is somewhat inconvenient</description>
    </item>
    <item>
      <title>How to Draw a Log-Log Scale Plot in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/1131/</link>
      <pubDate>Tue, 25 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1131/</guid>
      <description>Not a Good Approach win.graph(7,4); par(mfrow=c(1,2)) plot(pressure,main=&amp;#39;Pressure\&amp;#39;) y&amp;lt;-pressure[-1,]$pressure; logtemp&amp;lt;-log(y) x&amp;lt;-pressure[-1,]$temperature; logpress&amp;lt;-log(x) plot(logpress,logtemp,main=&amp;#39;log scale\&amp;#39;) The easiest way to draw a log-log scaled graph is to take the log of the data itself. If you are drawing a log-log plot for the first time, it&amp;rsquo;s definitely worthwhile to get familiar with this method. This approach works with R or any other language, so it can be used in a pinch. However, as</description>
    </item>
    <item>
      <title>How to Insert a Legend in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/1129/</link>
      <pubDate>Sun, 23 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1129/</guid>
      <description>Code Data representation is just as important as data analysis. The more complex a figure becomes, the more meticulous annotations and clear legends help in understanding the data. The legend() function has a plethora of options, yet employing just the essential elements as below is beneficial. The first option for location can simply be input as a combination of &amp;ldquo;top&amp;rdquo;, &amp;ldquo;bottom&amp;rdquo; + &amp;ldquo;left&amp;rdquo;, &amp;ldquo;right&amp;rdquo;, or &amp;ldquo;center&amp;rdquo;, and specific coordinates can</description>
    </item>
    <item>
      <title>Referencing Metadata and attr in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/1127/</link>
      <pubDate>Fri, 21 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1127/</guid>
      <description>Overview When working with functions in R, one occasionally encounters data like attr(,&amp;quot;something&amp;quot;). Attribute, as the name implies, means property, and unlike languages such as Python, it can be considered as a sort of annotation within the data serving as metadata in R. However, there might be times when one wishes to reference this data while using R. Example For instance, after standardization, the mean remains as attr(,&amp;quot;scaled:center&amp;quot;), and the</description>
    </item>
    <item>
      <title>How to Concatenate a Vector of Strings into One String in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/1125/</link>
      <pubDate>Tue, 18 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1125/</guid>
      <description>Overview R is a very convenient language for handling data, but if you are already familiar with other programming languages, the way R handles strings might feel somewhat unfamiliar. Unlike C or Python, R has a lot of built-in functionalities, and conversely, you often need to use these functionalities to handle data comfortably. It can be frustrating when built-in functions do not work as expected. Example For instance, let&amp;rsquo;s say</description>
    </item>
    <item>
      <title>Accessing Lists in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/1123/</link>
      <pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1123/</guid>
      <description>Overview R provides many really good features for handling data, among which lists are one of the biggest reasons that make R worth using. Although other languages, including Python, also implement the list data type, they are not as comfortable and intuitive to handle data as in R. Once you get the hang of managing lists, even the somewhat complex and tedious coding in other programming languages can become very</description>
    </item>
    <item>
      <title>Finding the Location of Maximum and Minimum Values in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/1120/</link>
      <pubDate>Fri, 14 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1120/</guid>
      <description>Code set.seed(150421) x&amp;lt;-sample(100,10); x which.max(x) which.min(x) When working with data for statistical purposes, it’s not only important to know what the maximum and minimum values are, but also necessary to identify their positions. This is particularly true for time series data. Of course, R doesn’t need such functions for manipulation to be easy, but it&amp;rsquo;s generally better to avoid complex code</description>
    </item>
    <item>
      <title>Calculating the Dot Product of Vectors in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/1089/</link>
      <pubDate>Mon, 03 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1089/</guid>
      <description>Code x&amp;lt;-1:10; x y&amp;lt;-(-1)^(1:10); y sum(x*y) x %*% y x %o% y When analyzing or simulating in R, it&amp;rsquo;s common to calculate the weighted average. Of course, mathematically, $\displaystyle \left&amp;lt; \mathbb{x}, \mathbb{y} \right&amp;gt; = \sum_{i=1}^{n} x_{i} y_{i}$ is very simple, and since vector operations in R itself are very convenient, one can easily perform inner products just by using the sum() function. However, this can reduce the readability of the</description>
    </item>
    <item>
      <title>Sorting Data Frames by Columns in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/1043/</link>
      <pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1043/</guid>
      <description>Overview Sorting data in R can be easily accomplished by using the sort() function, which by default only sorts vectors. However, in practice, dealing with numerous categories in a data frame often necessitates the ability to sort based on columns as well. Code x&amp;lt;-c(pi,3,99,0,-1) order(x) x[order(x)] head(iris) head(iris[order(iris$Petal.Length)]) This demonstrates how computing the &amp;lsquo;position&amp;rsquo; vector in ascending order from the beginning for every component of the vector can be achieved,</description>
    </item>
    <item>
      <title>How to See Histograms in More Detail in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/1035/</link>
      <pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1035/</guid>
      <description>Code In R, you can easily draw a histogram using the hist() function. The size of the class intervals is determined automatically by R, but if you want a more detailed look, you can use the nclalss option. set.seed(150421) x&amp;lt;-runif(50) win.graph(7,4); par(mfrow=c(1,2)) hist(x) hist(x,nclass=20) The result of executing the above code is as follows.</description>
    </item>
    <item>
      <title>Standardizing Data in R: Viewing Standardized Residuals</title>
      <link>https://freshrimpsushi.github.io/en/posts/1026/</link>
      <pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1026/</guid>
      <description>Code R is specialized for statistics, so there often comes a need to calculate the Z-score $\displaystyle z:= {{x - \mu} \over {\sigma}}$. For this, using the built-in scale() function can be very convenient. Let&amp;rsquo;s standardize a vector, for example, $\mathbb{x} = ( 1, \cdots , 10 )$. If you dislike seeing messy outputs like center(mean) or scale(standard deviation), just take the vector. On the other hand, one of the</description>
    </item>
    <item>
      <title>Checking the Current Date and Time in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/1020/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1020/</guid>
      <description>Code Not only in R but in many tasks that require the use of programming languages, it&amp;rsquo;s necessary to write logs and to have information about the time at which they were written. In R, you can check the date with the Sys.Date() function, and you can know the accurate time down to seconds with the Sys.time() function. Be careful with the case sensitivity, and if you don&amp;rsquo;t need the</description>
    </item>
    <item>
      <title>Calculating Jacobian and Hessian Matrices in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/994/</link>
      <pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/994/</guid>
      <description>Code To calculate the Jacobian matrix and Hessian matrix in R, you use the jacobian() and hessian() functions from the numDeriv package. install.packages(&amp;#34;numDeriv&amp;#34;) library(numDeriv) f &amp;lt;- function(v) {c(v[1]^2 + v[2]^2 - 1, sin(pi*v[1]/2) + v[2]^3)} g &amp;lt;- function(v) {(v[1])^3+(v[2])^2} jacobian(f, c(1,1)) hessian(g, c(1,1)) The results of executing the code are as follows. The top is the result of substituting $x=y=1$ into the Jacobian matrix of $f(x,y) := \begin{bmatrix} x^2 +</description>
    </item>
    <item>
      <title>Using Complex Numbers in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/981/</link>
      <pubDate>Tue, 16 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/981/</guid>
      <description>Overview R includes the complex number data type. There&amp;rsquo;s no need to implement it yourself; you just need to use it. In addition to basic arithmetic, it also includes several functions essential for handling complex numbers. Code Let&amp;rsquo;s say $z_{1} : = 1- i$ and $z_{2} := 1+ i$. z_1 = 1-1i z_2 = 1+1i z_1 + z_2 z_1 - z_2 z_1 * z_2 z_1 / z_2 Re(z_1) Im(z_1) Mod(z_1)</description>
    </item>
    <item>
      <title>Calculating Definite Integrals in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/977/</link>
      <pubDate>Sun, 14 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/977/</guid>
      <description>Overview In R, you can use the integrate() function to calculate definite integrals. For example, Code To calculate $\displaystyle \int_{0}^{3} \left( x^2 + 4x + 1 \right) dx$ and $\displaystyle \int_{0}^{\infty} e^{-x} dx$, you can use the following. Notably, by including inf in the integration interval, it is possible to perform improper integrals as well. f&amp;lt;-function(x) {x^2 + 4*x + 1} g&amp;lt;-function(x) {exp(-x)} integrate(f,0,3) integrate(g,0,Inf) Upon actual calculation, $$ \int_{0}^{3}</description>
    </item>
    <item>
      <title>How to Calculate the Derivative in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/971/</link>
      <pubDate>Fri, 12 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/971/</guid>
      <description>Overview To compute derivatives in R, one can use the grad() function from the numDeriv package. Code For example, the derivatives of $f(x) = x^2 + 4x + 1$ and $g(x) = e^{-x}$ can be computed as follows. install.packages(&amp;#34;numDeriv&amp;#34;) library(numDeriv) f&amp;lt;-function(x) {x^2 + 4*x + 1} g&amp;lt;-function(x) {exp(-x)} grad(f,2) grad(g,0) Upon actual computation, it is confirmed that it is $f &#39; (2) = 2 \cdot 2 + 4 = 8$</description>
    </item>
    <item>
      <title>How to Check Current OS Information in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/947/</link>
      <pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/947/</guid>
      <description>Overview R is frequently used on Linux for various reasons. One notable use case is for handling big data using Hadoop. Although R itself doesn’t differ much between Windows and Linux, the change in the working environment, including the working directory, can make file I/O operations a bit cumbersome. To easily set the working directory regardless of the environment, it&amp;rsquo;s necessary to check the</description>
    </item>
    <item>
      <title>How to Install R on Ubuntu</title>
      <link>https://freshrimpsushi.github.io/en/posts/946/</link>
      <pubDate>Thu, 14 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/946/</guid>
      <description>Guide Step 1. Press Ctrl+Alt+T to open the console window. Step 2. Enter the following in the console window. sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 Administrator privileges are required, so you need to enter the password for your user account. Step 3. Enter the following in the console window. sudo add-apt-repository &amp;#39;deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/&amp;#39; Step 4. Enter the following in the console window. sudo apt update Step 5. Enter</description>
    </item>
    <item>
      <title>Adding Subscripts to Axis Labels in R Graphs</title>
      <link>https://freshrimpsushi.github.io/en/posts/905/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/905/</guid>
      <description>Code In R, it is allowed to include underscores _ in variable names, but if they are displayed like that on a graph, readability can be severely reduced. Using the expression() function as follows allows for nicely adding subscripts to axis names. data&amp;lt;-as.numeric(lynx) win.graph(4,4) plot(data[-1],data[-length(data)],type=&amp;#39;p \&amp;#39;,main=&amp;#39;아래첨자 사용&amp;#</description>
    </item>
    <item>
      <title>Comparing Elements of Two Arrays in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/842/</link>
      <pubDate>Mon, 04 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/842/</guid>
      <description>Overview R is frequently used in fields more interested in the content of data rather than its form or structure, thus comparing this aspect is also useful. Inclusion (It&amp;rsquo;s not important at all, but in the examples, A represents triangular numbers $\displaystyle {{n(n+1)} \over {2}}$ and B represents square numbers $m^2$.) Using the binary operator %in% to compare two arrays returns true for elements of A that are also in</description>
    </item>
    <item>
      <title>Changing Column and Row Names in a DataFrame in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/840/</link>
      <pubDate>Sat, 02 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/840/</guid>
      <description>Overview When writing complex code using data frames in R, there are situations where you need to change the default column names because they can become confusing. names() For example, looking at the data frame above, if no specific mention is made, vague and indistinct column names like V1, V2, V3 are given. By applying the names() function, you can return the column names, and conversely, you can change the</description>
    </item>
    <item>
      <title>Unpacking Data Structures in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/720/</link>
      <pubDate>Mon, 12 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/720/</guid>
      <description>Overview In R, when using various functions, one often encounters instances where results are presented in a friendly manner, as shown below. The issue arises when one wishes to not just view these results, but to actually receive and utilize them as output. Example For instance, if the maximum value of the residuals is needed from the screenshot above, one could simply copy 15.9719. However, if one is curious about</description>
    </item>
    <item>
      <title>Dismantling a list in R, Removing Duplicate Elements</title>
      <link>https://freshrimpsushi.github.io/en/posts/688/</link>
      <pubDate>Sun, 23 Sep 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/688/</guid>
      <description>Overview Dealing with all sorts of unrefined data, the list data type in R is especially useful in organizing data. However, on the flip side, accessing data can be a bit cumbersome and disadvantageous in locating the desired content. In this case, breaking down the list data type through the unlist() function makes this manipulation much more convenient. The unique() function removes all duplicate elements in the received array, leaving</description>
    </item>
    <item>
      <title>Symbols Used in Plotting Graphs in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/669/</link>
      <pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/669/</guid>
      <description>Code Various symbols can be changed in graph related functions by using the pch option. The image above especially shows at a glance the most frequently used symbols. There are many useful ones, but especially number 16 is often used, and after number 25, while the markers themselves are set, there&amp;rsquo;s nothing much useful. In the example code below, sym can be changed from 26 to 50 for checking. Meanwhile,</description>
    </item>
    <item>
      <title>How to Print Characters on a Plot in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/667/</link>
      <pubDate>Sun, 02 Sep 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/667/</guid>
      <description>Code You can use the text() function to place text on the graph. The first option is a vector of $x$ axis coordinates, the second option is a vector of $y$ axis coordinates, and the third option is a vector of strings to input. You will understand immediately if you try running the example code below with only changing t. win.graph(6,5) plot(x=0,y=0,xlim=c(-1,5),ylim=c(-1,4),xlab=&amp;#34;x&amp;#34;,ylab=&amp;#34;y&amp;#34;) points(4,3,col=&amp;#34;red&amp;#34;,pch=19) #1 abline(h=0) #2 abline(v=0) #3 abline(0,3/4) #4</description>
    </item>
    <item>
      <title>How to Draw Horizontal and Vertical Lines in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/664/</link>
      <pubDate>Thu, 30 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/664/</guid>
      <description>Example 1. abline(h=0) Draws a horizontal line. 2. abline(v=0) Draws a vertical line. 3. abline(0,3/4) Draws a line with an intercept of $y$ and a slope of $0$. Originally, the abline() function is named after $3/4$, which are the coefficients of $y=a+bx$. If you&amp;rsquo;re using R for statistics, you probably won&amp;rsquo;t find much use for it outside of drawing regression lines. segments(4,0,4,3) Draws a line segment from $a,b$ to $(4,0)$.</description>
    </item>
    <item>
      <title>Drawing Graphs in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/662/</link>
      <pubDate>Tue, 28 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/662/</guid>
      <description>Overview R has the advantage of making the representation of graphs very easy compared to other languages. When compared with other statistical packages, while easy drawings might be faster in those packages, R tends to become more convenient as the need for detailed expressions increases. Of course, R is not only for graphics, but since it is a very big advantage, it is good to practice to handle it freely.</description>
    </item>
    <item>
      <title>How to Filter Data Conditionally in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/659/</link>
      <pubDate>Sun, 26 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/659/</guid>
      <description>Overview R is primarily used in statistics, and its ability to select and edit necessary data is unparalleled. Becoming familiar with handling such data can be a bit difficult, but once perfectly mastered, other languages will feel incredibly inconvenient. In fact, these tips are not much helpful just by reading. (Indeed, the explanations can also be brief in the pursuit of accuracy.) Handling a lot of data and writing various</description>
    </item>
    <item>
      <title>Computing Conditional Sums and Conditional Means in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/656/</link>
      <pubDate>Thu, 23 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/656/</guid>
      <description>Overview If we&amp;rsquo;re talking about Excel, sometimes we need functions like sumif() or averageif(). In R, while there&amp;rsquo;s no such simple function, the apply family of functions serves as a powerful superior alternative. It&amp;rsquo;s beneficial to meticulously learn these functions, but for the time being, let&amp;rsquo;s just focus on calculating conditional sums and averages. Example Let&amp;rsquo;s load the iris dataset. If we randomly look at the 10th, 50th, 90th, and</description>
    </item>
    <item>
      <title>Various Distribution Functions in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/578/</link>
      <pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/578/</guid>
      <description>Description In R, functions related to specific distributions are made up of a combination of prefixes and suffixes. Prefixes Let the probability distribution function of distribution $X$ be called $f(x)$. r-: for random sampling, think of sampling $x_{1}, \cdots , x_{n}$ from distribution $X$. d-: for the density function, $f(x)$. p-: for the cumulative distribution function, $F(x) = \displaystyle \int_{\infty}^{x} f(t) dt$. q-: for the quantile function, $F^{-1}(\alpha)$. Suffixes Almost</description>
    </item>
    <item>
      <title>Rounding Up, Down, and to a Specific Number of Digits in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/577/</link>
      <pubDate>Sat, 02 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/577/</guid>
      <description>Overview The ceiling() function performs rounding up, while the floor() function performs rounding down. These functions might seem unnecessary in R, which is often used for statistics, but they are surprisingly convenient for data handling. Description The trunc() function drops everything below the decimal point in a similar manner but returns a value closer to $0$. Both the round() and signif() functions keep digits, but round() focuses on the digits</description>
    </item>
    <item>
      <title>Handling Strings in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/568/</link>
      <pubDate>Fri, 25 May 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/568/</guid>
      <description>Overview While not to the extent commonly seen in languages popular among developers, there is a surprisingly frequent need to handle strings in R. The more vast and unruly the data, the more crucial these minor techniques become. Tips The nchar() function simply returns the length of a string. Those familiar with other languages would probably have tried length first. The substring() function, as its name easily suggests, returns a</description>
    </item>
    <item>
      <title>How to Use Bootstrap Functions in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/558/</link>
      <pubDate>Thu, 17 May 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/558/</guid>
      <description>Overview You can write your code to perform bootstrap in R, but you can also use the functions that are provided by default. The process is simple as below, but it has many differences in how to use it compared to other functions, so it might feel very unfamiliar at first. Guide Step 1. Define a function boot.fn() that returns the statistic you want to obtain. Of course, the name</description>
    </item>
    <item>
      <title>How to Draw a Power Function Graph in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/538/</link>
      <pubDate>Wed, 09 May 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/538/</guid>
      <description>Overview This section introduces a simple way to draw the graph of a univariate function. As an appropriate example in statistics, let&amp;rsquo;s draw a power function. Definition Let&amp;rsquo;s define the rejection region $C_{\alpha}$ at the significance level $\alpha$ for the null hypothesis $H_{0} : \theta \in \Theta_{0}$ and the alternative hypothesis $H_{1} : \theta \in \Theta_{1}$. The function $\gamma_{C_{\alpha}}(\theta) : = P_{\theta} [ \mathbb{x} \in C_{\alpha} ]$ for the true</description>
    </item>
    <item>
      <title>Removing Digit Limits in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/528/</link>
      <pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/528/</guid>
      <description>Overview R is a language for statistics, but the R console is not suitable for viewing data. Nevertheless, when dealing with big data with hundreds of thousands of observations or checking if handling has been done properly, simple printing is convenient. Tips When there are a bit too many observations, printing them on the console shows the bottom part cut off like above. In this case, in the console window,</description>
    </item>
    <item>
      <title>Remove NA in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/526/</link>
      <pubDate>Sun, 29 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/526/</guid>
      <description>Overview NA stands for Not Available in R programming, primarily indicating &amp;lsquo;missing values&amp;rsquo;. It is important to note that its meaning and usage differ entirely from null in other programming languages. Textbook examples are usually well-organized for analysis, but real-world data analysis often does not reflect this neatness. Handling such data frequently involves dealing with missing values. These missing values are either dealt with by imitating similarly trending data through</description>
    </item>
    <item>
      <title>Converting Categorical Data to Numeric Data in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/497/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/497/</guid>
      <description>Overview This post is for those who are unable to convert categorical data, which is read as numerical, into continuous data despite their intentions. The majority of this post is dedicated to explaining the principle, so if you only need the conclusion, it is recommended to start reading from the Practical Example section below. Note that the term &amp;ldquo;Cast&amp;rdquo; is commonly used when changing data types. Principle When conducting statistical</description>
    </item>
    <item>
      <title>Importing External Data in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/496/</link>
      <pubDate>Sun, 01 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/496/</guid>
      <description>Overview R is fundamentally born for statistics, which is why data input is conveniently designed. read.table(file, header = FALSE, sep = &amp;#34;&amp;#34;, na.strings = &amp;#34;NA&amp;#34;, fileEncoding = &amp;#34;&amp;#34;) Function Introduction read.table() is a function used to import data tables, offering various useful options like those mentioned above. There are more options available, but the ones listed here are frequently used and essential to know. Below are the descriptions: (1) header:</description>
    </item>
    <item>
      <title>Swapping Rows and Columns in a Data Frame in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/332/</link>
      <pubDate>Sat, 25 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/332/</guid>
      <description>Overview One of the strengths of R is that it makes some operations, which can be quite difficult for those familiar with other programming languages, easy to implement. For instance, it automatically expands memory when using arrays without having to allocate memory in advance, and operations like changing the value of a variable are very easy. Example Let&amp;rsquo;s swap the Sepal.Width column with the Species column in the Iris dataset.</description>
    </item>
    <item>
      <title>How to import built-in datasets in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/331/</link>
      <pubDate>Fri, 24 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/331/</guid>
      <description>Overview R is a representative statistical programming language that not only provides useful methods but also offers data sets that are good as examples. Without such data sets, one would have to download and load new data every time when giving lectures. Guide The method to load a data set is very simple. All you need to do is assign the name of the data set you want to load</description>
    </item>
    <item>
      <title>Calculating the Product, Inverse, and Transpose of a Matrix in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/317/</link>
      <pubDate>Wed, 15 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/317/</guid>
      <description>Overview The strengths of R lie in the simple manipulation of various datasets, including matrices, and the provision of a wealth of free statistical packages. It&amp;rsquo;s obvious, but the computation of matrices in statistical analysis is very important, and R excellently fulfills these needs. Unless it&amp;rsquo;s MATLAB or Julia, in other languages, you&amp;rsquo;ll have to annoyingly define the operations on matrices separately. Code Matrix Multiplication For example, let&amp;rsquo;s say we</description>
    </item>
    <item>
      <title>Finding Quotients and Remainders in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/316/</link>
      <pubDate>Tue, 14 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/316/</guid>
      <description>Overview In the syntax of programming languages, what really lacks unity are the quotient and remainder operators. At first glance, they all seem to look alike, which contributes to the confusion. C uses / for quotient and % for remainder, while Python uses // for quotient and % for remainder, and there are plenty more examples of this confusion. One might wonder where the need to calculate quotients and remainders</description>
    </item>
    <item>
      <title>Remove All Variables and Clear Console in R</title>
      <link>https://freshrimpsushi.github.io/en/posts/315/</link>
      <pubDate>Mon, 13 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/315/</guid>
      <description>Overview R is an interpreted language, so you end up working continuously looking at the console. In this process, for debugging or other purposes, various tests must be done in the same working environment. There can be instances where a certain variable created during testing is very important but the programmer fails to recognize it and it does not get included in the final version. Situations like, &amp;ldquo;It definitely worked</description>
    </item>
    <item>
      <title>Using else if Statements in R: Solving the Error: unexpected else in else Issue</title>
      <link>https://freshrimpsushi.github.io/en/posts/314/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/314/</guid>
      <description>Overview R does not have a branching statement like a switch statement, so you need to divide branches by connecting multiple if statements. Here, this conditional statement can be the same for if and else in every programming language, but it&amp;rsquo;s peculiar that only else if can be different. They might be written together as elseif or even abbreviated like elif, and R uses properly spaced else if. Even as</description>
    </item>
  </channel>
</rss>
