<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graph Theory on FreshrimpRestaurant</title>
    <link>https://freshrimpsushi.github.io/en/categories/%EA%B7%B8%EB%9E%98%ED%94%84%EC%9D%B4%EB%A1%A0/</link>
    <description>Recent content in Graph Theory on FreshrimpRestaurant</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 23 Oct 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://freshrimpsushi.github.io/en/categories/%EA%B7%B8%EB%9E%98%ED%94%84%EC%9D%B4%EB%A1%A0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Gilbert Model</title>
      <link>https://freshrimpsushi.github.io/en/posts/2118/</link>
      <pubDate>Fri, 26 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/2118/</guid>
      <description>Definition 1 2 Simple Definition A random network where links of a simple network are connected independently according to probability $p \in [0,1]$ is called the Gilbert Model $\mathbb{G}_{n,p}$. Complicated Definition Given a probability space $( \Omega , \mathcal{F} , P)$, and a network&amp;rsquo;s properties $2^{\binom{n}{2}} \subseteq 2^{\binom{n}{2}}$ with $n$ labeled nodes. A function that is measurable with respect to $\mathcal{F}$ and has the following probability mass function for the</description>
    </item>
    <item>
      <title>Erdős–Rényi Model</title>
      <link>https://freshrimpsushi.github.io/en/posts/2116/</link>
      <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/2116/</guid>
      <description>Buildup Let us consider a simple graph with $n$ labeled vertices and $m$ edges, which has the property $\mathscr{G}_{n,m} \subset 2^{\binom{n}{2}}$. A random graph with exactly $m$ links can be represented as follows $\mathbb{G}_{n, m} : \Omega \to \mathscr{G}_{n,m}$. The graph produced in this manner does not care who makes it or what probability it is made with, as long as it only has $n$ nodes and $m$ links. In</description>
    </item>
    <item>
      <title>Graph Edit Distance Between Graphs</title>
      <link>https://freshrimpsushi.github.io/en/posts/85/</link>
      <pubDate>Wed, 23 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/85/</guid>
      <description>Definition 1 Let&amp;rsquo;s denote a finite set of vertices as $X$ and a set of a finite alphabet as $\alpha$, where the alphabet is considered to include spaces or nulls. A graph is defined as a triple $G = (X, V, E)$ concerning vertex labeling $V : X \to \alpha$ and edge labeling $E : X \times X \to \alpha$. That $\hat{G} = \left( \hat{X}, \hat{V}, \hat{E} \right)$ is a</description>
    </item>
    <item>
      <title>Spectral Distance Between Graphs</title>
      <link>https://freshrimpsushi.github.io/en/posts/80/</link>
      <pubDate>Sat, 19 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/80/</guid>
      <description>Definition Let us consider two graphs $G_{1}$ and $G_{2}$ with the number of vertices being $n$, and their adjacency matrices denoted as $A_{1}$ and $A_{2}$ respectively. We represent their eigenvalues, which are sorted in descending order, i.e., their spectra, as follows. $$ A_{1} \mapsto \lambda_{1}^{(1)} \ge \cdots \ge \lambda_{n}^{(1)} \\ A_{2} \mapsto \lambda_{1}^{(2)} \ge \cdots \ge \lambda_{n}^{(2)} $$ The spectral distance between the two graphs is defined as follows1 2.</description>
    </item>
    <item>
      <title>Mathematical Graph Layouts</title>
      <link>https://freshrimpsushi.github.io/en/posts/68/</link>
      <pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/68/</guid>
      <description>Overview In mathematics, a layout of a graph or network can be summarized as an algorithm that dictates how vertices and edges are arranged when visualized in 2D or 3D. Code For convenience, all code is written based on Julia which is publicly available on GitHub1. The example graph used is generated by the Barabási-Albert model.</description>
    </item>
    <item>
      <title>Definition of Hypergraph</title>
      <link>https://freshrimpsushi.github.io/en/posts/2619/</link>
      <pubDate>Wed, 28 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/2619/</guid>
      <description>Definition A finite set $V \ne \emptyset$ is called a Hypervertex Set. A Hyperedge refers to a subset of a hypervertex set, and the set of hyperedges $E$ is called a Hyperedge Set. In other words, a hyperedge set can be defined as a subset $E \subset 2^{V}$ of the power set of a hypervertex set. The pair of hypervertices and hyperedges $G = (V, E)$ is called a Hypergraph.</description>
    </item>
    <item>
      <title>Eigenvector Centrality in Network Theory</title>
      <link>https://freshrimpsushi.github.io/en/posts/2528/</link>
      <pubDate>Sat, 24 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/2528/</guid>
      <description>Definition 1 The nth component of the eigenvector corresponding to the spectral radius $\lambda_{1}$ of the adjacency matrix $A$ of a network $\left( V , E \right)$ is called the Eigenvector Centrality of the nth node $v_{i}$. Newman. (2010). Networks: An Introduction: p170.&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description>
    </item>
    <item>
      <title>Proximity Centrality in Network Theory</title>
      <link>https://freshrimpsushi.github.io/en/posts/2526/</link>
      <pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/2526/</guid>
      <description>Definition 1 Let&amp;rsquo;s call the geodesic distance of a network $\left( V, E \right)$ as $d$. The following defined $C_{C} : V \to \mathbb{R}$ is referred to as the Closeness Centrality of node $v \in V$. $$ C_{C} := {{ 1 } \over { \sum_{u \ne v} d \left( u, v \right) }} $$ Description Intuitive Meaning Closeness Centrality serves as a measure of &amp;lsquo;how easily can one node reach</description>
    </item>
    <item>
      <title>Network Mediation Centrality in Network Theory</title>
      <link>https://freshrimpsushi.github.io/en/posts/2524/</link>
      <pubDate>Fri, 16 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/2524/</guid>
      <description>Definition 1 Stress Centrality In a network $\left( V, E \right)$, let&amp;rsquo;s denote by $\sigma_{st} = \sigma_{ts}$ the number of shortest paths between two nodes $s,t \in V$, and specifically, let&amp;rsquo;s denote by $\sigma_{st} (v)$ the number of paths including another node $v \in V$ among the paths connecting $s,t$. The following defined $C_{S} : V \to \mathbb{Z}$ is called the Stress Centrality of node $v$. $$ C_{S} (v) :=</description>
    </item>
    <item>
      <title>Stress Centrality in Network Theory</title>
      <link>https://freshrimpsushi.github.io/en/posts/2522/</link>
      <pubDate>Mon, 12 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/2522/</guid>
      <description>Definition 1 In a network $\left( V, E \right)$, the number of shortest paths connecting two nodes $s,t \in V$ is denoted by $\sigma_{st} = \sigma_{ts}$, and specifically, the number of paths among those that include another node $v \in V$ is denoted by $\sigma_{st} (v)$. The following defined $C_{S} : V \to \mathbb{Z}$ is referred to as the Stress Centrality of node $v$. $$ C_{S} (v) := \sum_{s \ne</description>
    </item>
    <item>
      <title>Degree Centrality in Network Theory</title>
      <link>https://freshrimpsushi.github.io/en/posts/2520/</link>
      <pubDate>Thu, 08 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/2520/</guid>
      <description>Definition 1 In a given network $G (V, E)$, the following is called Degree Centrality for each node $v \in V$. $$ \deg v $$ Description Centrality Centrality refers to the concept of &amp;lsquo;how important a node is within a given network&amp;rsquo;, and there are various definitions and methods of calculation depending on the problem of interest. Among many methods, the simplest is evaluating the degree itself as centrality, known</description>
    </item>
    <item>
      <title>Euclidean Graph</title>
      <link>https://freshrimpsushi.github.io/en/posts/2396/</link>
      <pubDate>Mon, 05 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/2396/</guid>
      <description>Definitions 1 Simple Definition Let us assume that we have a finite subset $V \subset \mathbb{R}^{p}$ of the Euclidean space and a cutoff $\delta \ge 0$. A Euclidean Graph is defined as a graph that connects an edge between two points $u,v \in V$ only when the distance between them is less than $\delta$, with $V$ as vertices. Complex Definition For a finite subset $V \subset \mathbb{R}^{p}$ of the Euclidean</description>
    </item>
    <item>
      <title>Reading and Writing GEXF Files in NetworkX</title>
      <link>https://freshrimpsushi.github.io/en/posts/3352/</link>
      <pubDate>Sat, 07 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/3352/</guid>
      <description>Explanation1 2 GEXF stands for Graph Exchange XML Format, a language for describing graph structures. Considering the explanation that it started together with the Gephi project, it seems to be designed to be easily handled by Gephi. Code Writing Let&amp;rsquo;s create the following graph with NetworkX. import networkx as nx from itertools import combinations &amp;gt;&amp;gt;&amp;gt; G = nx.Graph() &amp;gt;&amp;gt;&amp;gt; IVE = [&amp;#34;가을&amp;</description>
    </item>
    <item>
      <title>Julia&#39;s Graph Analysis Package Graphs.jl</title>
      <link>https://freshrimpsushi.github.io/en/posts/3350/</link>
      <pubDate>Tue, 03 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/3350/</guid>
      <description>Introduction Graphs.jl is a package for graph (network) analysis, similar to Python&amp;rsquo;s NetworkX. It was created by rebooting the LightGraphs.jl package. The goal of Graphs.jl is to offer a performant platform for network and graph analysis in Julia, following the example of libraries such as NetworkX in Python. The Graphs.jl project is a reboot of the LightGraphs.jl package (archived in October 2021), which remains available on GitHub at sbromberger/LightGraphs.jl. Code</description>
    </item>
    <item>
      <title>Graph (Network) Analysis Package NetworkX in Python</title>
      <link>https://freshrimpsushi.github.io/en/posts/3348/</link>
      <pubDate>Fri, 30 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/3348/</guid>
      <description>Introduction NetworkX is a Python package for analyzing graphs (networks). Code Installation Enter the following in the terminal. #설치 &amp;gt; pip install networkx #버전 업데이트 &amp;gt; pip install --upgrade networkx Importing and Checking Version networkx is abbreviated as nx. &amp;gt;&amp;gt;&amp;gt; import networkx as nx &amp;gt;&amp;gt;&amp;gt; nx.__version__ &amp;#39;2.8.6&amp;#39; Graph Creation Create a null graph with the following code. &amp;gt;&amp;gt;&amp;gt; G = nx.Graph() &amp;gt;&amp;gt;&amp;gt; nx.info(G)</description>
    </item>
    <item>
      <title>Graph (Network) Visualization and Analysis Program Gephi</title>
      <link>https://freshrimpsushi.github.io/en/posts/3346/</link>
      <pubDate>Mon, 26 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/3346/</guid>
      <description>Introduction Gephi is an open-source, free program designed for graph (network) analysis, with a particular strength in visualization. It supports Windows, Mac, and Linux. Basic Usage Let&amp;rsquo;s create a graph using NetworkX and save it as a gexf file. &amp;gt;&amp;gt;&amp;gt; import networkx as nx &amp;gt;&amp;gt;&amp;gt; G = nx.gnm_random_graph(100,200) &amp;gt;&amp;gt;&amp;gt; nx.info(G) &amp;#39;Graph with 100 nodes and 200 edges&amp;#39; &amp;gt;&amp;gt;&amp;gt; nx.write_gexf(G, &amp;#39;graph.gexf&amp;#39;) When you select a gexf file, information about the graph</description>
    </item>
    <item>
      <title>Hub Nodes in Network Theory</title>
      <link>https://freshrimpsushi.github.io/en/posts/2189/</link>
      <pubDate>Sun, 17 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/2189/</guid>
      <description>Definition 1 A node that is connected to many other nodes in a network is called a hub. Description In network theory centrality, one of the answers to the question, &amp;ldquo;What constitutes an important node?&amp;rdquo; could be a node with a higher degree $\deg v$, i.e., a node that is connected to many other nodes. This intuition is considered to be commonsensical. The above picture is a log-log histogram plotting</description>
    </item>
    <item>
      <title>Barabási-Albert Model</title>
      <link>https://freshrimpsushi.github.io/en/posts/2187/</link>
      <pubDate>Wed, 13 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/2187/</guid>
      <description>Algorithm 1 Input Given the link parameter $m \in \mathbb{N}$ and the network size $N$. Step 1. Initialization Construct the initial network with $m$ nodes. Unless otherwise specified, this network is a complete graph. Step 2. Adding Nodes Assuming the current number of nodes is $n$. A new node is added, which connects to each of the existing $m$ nodes. The probability of connecting to each $k = 1 ,</description>
    </item>
    <item>
      <title>Blue-Loo Fitness Model</title>
      <link>https://freshrimpsushi.github.io/en/posts/2185/</link>
      <pubDate>Sat, 09 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/2185/</guid>
      <description>Definition A Fitness Model refers to a random network where weights are assigned to each node, and the probability of links being formed is varied according to these weights. Algorithm Input A null graph with $n \in \mathbb{N}$ nodes, denoted as $G$, is given. Chung-Lu model 1 Step 1. A degree sequence $\displaystyle \mathbf{w} := \left( w_{1} , \cdots , w_{n} \right)$, which satisfies $\displaystyle \max w_{k}^{2} &amp;lt; \sum_{k=1}^{n} w_{k}$,</description>
    </item>
    <item>
      <title>Scale-Free Network</title>
      <link>https://freshrimpsushi.github.io/en/posts/2183/</link>
      <pubDate>Tue, 05 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/2183/</guid>
      <description>Definition 1 A random network whose degree distribution follows a Pareto distribution is known as a Scale-free Network. Description The term Scale-free (SF) network comes from the scale-invariance of the Pareto distribution. Being defined by its degree distribution, it strongly inherits the properties of that distribution. Mathematically, the degree $v \in V(G)$ of nodes in a scale-free network $G$ can be described by some parameter $\gamma &amp;gt; 0$ as follows.</description>
    </item>
    <item>
      <title>Distribution of Degrees in Networks</title>
      <link>https://freshrimpsushi.github.io/en/posts/2122/</link>
      <pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/2122/</guid>
      <description>Buildup Random networks are random elements whose function values are networks, therefore, every time we sample, we get different networks. Depending on the method of constructing the network, or in other words, the model, we may have some consistent properties, but the realizations obtained are each unique. According to this, the degree of each node $\deg$ also changes with every sampling, and since the degree is an extremely important element</description>
    </item>
    <item>
      <title>Random Graphs</title>
      <link>https://freshrimpsushi.github.io/en/posts/2114/</link>
      <pubDate>Thu, 18 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/2114/</guid>
      <description>Definitions Simple Definition A graph that is created by a nondeterministic procedure or expressed according to some probability distribution is called a Random Graph. Complex Definition Given a probability space $( \Omega , \mathcal{F} , P)$, let $2^{\binom{n}{2}}$ represent the collection of all labeled graphs with $n$ vertices, known as a graph family. A function $\mathbb{G} : \Omega \to 2^{\binom{n}{2}}$, which is $\mathcal{F}$-measurable, is called a Random Graph. In other</description>
    </item>
    <item>
      <title>Graph Families and Properties</title>
      <link>https://freshrimpsushi.github.io/en/posts/2112/</link>
      <pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/2112/</guid>
      <description>Buildup Consider a simple graph with a set of $n$ labeled vertices $V = [n] = \left\{ 1 ,\cdots , n \right\}$. The graph can have edges equal to the number of ways to choose two distinct vertices, thus there are exactly $\binom{n}{2}$ such edges. Let&amp;rsquo;s think about this not just in terms of each edge, but the entire graph. With $n$ vertices fixed, each of the $\binom{n}{2}$ possible edges</description>
    </item>
    <item>
      <title>Perfect Graph</title>
      <link>https://freshrimpsushi.github.io/en/posts/1662/</link>
      <pubDate>Sat, 12 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1662/</guid>
      <description>Definition A perfect graph is a graph $G$ where every induced subgraph $H$ satisfies the following. $$ \chi (H) = \omega (H) $$ $\chi (H)$ is the chromatic number of graph $H$. $\omega (H)$ is the clique number of graph $H$. Explanation The world of graph theory, like many branches of mathematics, is staggeringly vast, honestly a bit more so. This is because there are so many different ways to</description>
    </item>
    <item>
      <title>Proof of the Anderson-Livingston Theorem</title>
      <link>https://freshrimpsushi.github.io/en/posts/20/</link>
      <pubDate>Fri, 14 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/20/</guid>
      <description>Theorem 1 $R$ If a commutative ring has a unity $1$ and the set of its zero divisors is denoted as $Z(R)$, then its zero divisor graph $\Gamma (R)$ is a connected graph and $\text{diam}(\Gamma (R)) \le 3$ $\text{diam}$ represents the diameter of a graph. Explanation Anderson and Livingstone have made significant contributions to the study of zero divisor graphs, particularly this theorem that specifies the upper limit of graph</description>
    </item>
    <item>
      <title>Erdős–Rényi Graph</title>
      <link>https://freshrimpsushi.github.io/en/posts/1604/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1604/</guid>
      <description>Definition Let&amp;rsquo;s assume a commutative ring $R$ is given. The set of zero divisors within $R$ is denoted as $Z(R)$. The graph $\Gamma (R)$ defined below is referred to as the Zero Divisor Graph for $R$. $$ V \left( \Gamma (R) \right) = Z(R) \\ E( \Gamma (R)) = \left\{ ab : ab=0 \right\} $$ Description As is known, the product of zero divisors does not necessarily yield $0$. For</description>
    </item>
    <item>
      <title>Four Color Map Problem</title>
      <link>https://freshrimpsushi.github.io/en/posts/1592/</link>
      <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1592/</guid>
      <description>Buildup The Four Color Map Problem asks whether four colors are sufficient to color any given map so that adjacent regions are distinguishable. It might seem like complex maps require more colors, but since only adjacent regions need to be different, it&amp;rsquo;s not as many as one might think. For example, the following is a world map colored with just $4$ colors. Historically, the Four Color Map Problem was first</description>
    </item>
    <item>
      <title>Proof of the Five Color Theorem</title>
      <link>https://freshrimpsushi.github.io/en/posts/1590/</link>
      <pubDate>Thu, 16 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1590/</guid>
      <description>Theorem 1 Every simple plane graph is $5$-colorable. Wilson. (1970). Introduction to Graph Theory: p83.&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description>
    </item>
    <item>
      <title>Definition of Maps in Graph Theory</title>
      <link>https://freshrimpsushi.github.io/en/posts/1586/</link>
      <pubDate>Sun, 12 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1586/</guid>
      <description>Definition 1 A planar graph connected by $3$ is defined as a map. A map that can be colored with $k$ different colors in such a way that adjacent faces across the same edge have different colors is called a $k$-face colorable map. The existing $k$-colorable graph is called a $k$-vertex colorable graph. The regions distinguished on the plane while drawing a planar graph are called faces. Description $3$-Graph is</description>
    </item>
    <item>
      <title>Simple Properties of Planar Graphs</title>
      <link>https://freshrimpsushi.github.io/en/posts/1584/</link>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1584/</guid>
      <description>Theorem 1 Assume that $G$ is a simple planar graph. [1]: If $G$ is a connected graph with $n \ge 3$ vertices and $m$ edges, then $m \le 3n - 6$ [2]: Every simple planar graph $G$ has at least one vertex $v \in V(G)$ with $\deg v \le 5$. Proof [1] Let&amp;rsquo;s assume every face of a planar graph is surrounded by at least three edges. For the simplest</description>
    </item>
    <item>
      <title>Abstract Dual Graphs</title>
      <link>https://freshrimpsushi.github.io/en/posts/1582/</link>
      <pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1582/</guid>
      <description>Buildup Properties of Geometric Dual Graphs [3]: For a planar graph $G$ and its geometric dual graph $G^{ \ast }$, if $C \subset E(G)$ is a cycle then $\iff$ $C^{ \ast } \subset E \left( G^{ \ast } \right)$ is a cutset Abstract Dual Graphs are defined abstractly for general graphs unlike geometric dual graphs which are intuitive for planar graphs. A graph is called a dual graph if it</description>
    </item>
    <item>
      <title>Geometric Dual Graphs</title>
      <link>https://freshrimpsushi.github.io/en/posts/1570/</link>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1570/</guid>
      <description>Definitions 1 For a given planar graph $G$, the geometric dual graph $G^{ \ast }$ is constructed as follows: Step 1. Place a vertex $v^{ \ast }$ corresponding to each face $f$ of $G$. Step 2. Draw an edge $e^{ \ast }$ corresponding to each edge $e$ of $G$, such that it overlaps. Step 3. Erase the original graph and use the vertices $v^{ \ast }$ and edges $e^{ \ast</description>
    </item>
    <item>
      <title>Graph k-connectivity and Menger&#39;s Theorem</title>
      <link>https://freshrimpsushi.github.io/en/posts/1576/</link>
      <pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1576/</guid>
      <description>Definition For a given graph $G$, let the number of components be denoted by $\text{comp} (G)$. Edge-Connectivity A set of edges satisfying the following conditions is called a disconnecting set of $G$. $$ \text{comp} \left( G \setminus D \right) &amp;gt; \text{comp}(G) $$ A disconnecting set of $G$ that does not have a proper subset which is also a disconnecting set is called a cutset of $G$. If $G$ is a</description>
    </item>
    <item>
      <title>Proof of Euler&#39;s Polyhedron Formula</title>
      <link>https://freshrimpsushi.github.io/en/posts/82/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/82/</guid>
      <description>Overview Euler&amp;rsquo;s polyhedron theorem is also called Euler&amp;rsquo;s characteristic; in graph theory, it is simply referred to as Euler’s formula. Geometrically, it signifies that the relationship between vertices, edges, and faces of a spatial figure follows #vertices-#edges+#faces=2. For instance, considering a cube, it has $8$ vertices, $12$ edges, and $6$ faces, thus $8-12+6=2$ holds. Theorem 1 Link Planar graph For $G$, let $n:=|V(G)|$, $m:=|E(G)|$,</description>
    </item>
    <item>
      <title>Planar Graphs and Kuratowski&#39;s Theorem</title>
      <link>https://freshrimpsushi.github.io/en/posts/1565/</link>
      <pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1565/</guid>
      <description>Definition Planar Graph A planar graph is a graph that can be drawn on a plane without any edges crossing each other. Explanation When a planar graph is drawn, the regions that are demarcated on the plane are called faces. The following planar graph $K_{4}$ has four faces $f_{1}, f_{2}, f_{3}, f_{4}$, and among them, the one that is not bounded $f_{4}$ is called an infinite face. Planar Graphs, as</description>
    </item>
    <item>
      <title>Graph Homomorphism</title>
      <link>https://freshrimpsushi.github.io/en/posts/1563/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1563/</guid>
      <description>Definition 1 Given two graphs $G_{1}$ and $G_{2}$, if there exists a graph isomorphism between some subdivision $G_{1} &#39; $ of $G_{1}$ and some subdivision $G_{2} &#39; $ of $G_{2}$, then $G_{1}$ and $G_{2}$ are said to be homeomorphic. A graph $G$ with vertices $w$ added in succession that satisfy the following condition is called the subdivision $G&#39;$ of $G$. $$ \begin{align*} u \sim_{G} v &amp;amp; \implies \begin{cases} u \nsim_{G&#39;}</description>
    </item>
    <item>
      <title>Graph Coloring and Brooks&#39; Theorem</title>
      <link>https://freshrimpsushi.github.io/en/posts/1561/</link>
      <pubDate>Mon, 08 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1561/</guid>
      <description>Definition A function $f : V(G) \to [k]$ for a loop-free graph $G$ is called a $k$-coloring of $G$. $$ u \sim v \implies f(u) \ne f(v) $$ If a graph $G$ has a $k$-coloring, it is also said to be $k$-colorable. If it is $k$-colorable but not $(k-1)$-colorable, then that $k$ is called the Chromatic Number of $G$, denoted as $\chi(G) = k$. A graph whose chromatic number is</description>
    </item>
    <item>
      <title>Havel-Hakimi Algorithm Proof</title>
      <link>https://freshrimpsushi.github.io/en/posts/1559/</link>
      <pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1559/</guid>
      <description>Theorem Let&amp;rsquo;s assume we are given a non-increasing sequence $D = (d_{1} , \cdots , d_{n})$. If $D$ is graphic, we can find a realization $G$ of $D$ using the following method: Step 1. Create a null graph with $n$ vertices $v_{1} , \cdots , v_{n}$. Step 2. $k = 1, \cdots , n$ Step 2-1. Connect $v_{k}$ to $v_{k+1} , \cdots , v_{d_{k} + 1}$. Step 2-2. Decrease $d_{k+1}</description>
    </item>
    <item>
      <title>Erdős–Gallai Theorem</title>
      <link>https://freshrimpsushi.github.io/en/posts/1557/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1557/</guid>
      <description>Buildup A set that includes duplicates of the degrees of a graph $G$ is called a Graph Score, and the sequence $G$ sorted in descending order (non-increasing) of a graph score is called the Degree Sequence of $G$. If there exists a graph $G$ that satisfies the following, with a sequence $D = (d_{1} , \cdots , d_{n})$ of non-increasing natural numbers and $n$ vertices $v_{1} , \cdots , v_{n}$,</description>
    </item>
    <item>
      <title>Label Tree and Cayley&#39;s Theorem</title>
      <link>https://freshrimpsushi.github.io/en/posts/1555/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1555/</guid>
      <description>Definition A labeled tree is a tree in which each vertex is assigned a distinct number. Description The concept of labeling is different from simply determining whether the elements in a set of vertices are the same or different. For example, the following two graphs are essentially considered the same labeled tree, despite having different labels written on them. $$ 1-2-3 \\ a-b-c $$ Of course, because they are graphs,</description>
    </item>
    <item>
      <title>Tree Graph</title>
      <link>https://freshrimpsushi.github.io/en/posts/1552/</link>
      <pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1552/</guid>
      <description>Definition 1 A tree is a connected graph that does not contain any cycles. Description The concept of trees is commonly seen in areas such as data structures in computer science. For those in STEM fields who have even a cursory involvement with computers, they may have heard of heap sorting. The heap mentioned here is indeed a type of tree. The union of trees is intuitively called a Forest.</description>
    </item>
    <item>
      <title>Proof of Dirac&#39;s Theorem in Graph Theory</title>
      <link>https://freshrimpsushi.github.io/en/posts/1550/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1550/</guid>
      <description>Theorem 1 Let&amp;rsquo;s suppose that $G$ is a simple graph with $n ( \ge 3)$ vertices. [1] Dirac&amp;rsquo;s Theorem: If every vertex $v$ of $G$ satisfies $\deg (v) \ge n / 2$, then $G$ is a Hamiltonian graph. [2] Ore&amp;rsquo;s Theorem: If for every pair of non-adjacent vertices $(v ,w)$ of $G$, $\deg (v) + \deg(w) \ge n$ is satisfied, then $G$ is a Hamiltonian graph. Explanation Dirac&amp;rsquo;s Theorem identifies</description>
    </item>
    <item>
      <title>Hamiltonian Graph</title>
      <link>https://freshrimpsushi.github.io/en/posts/1548/</link>
      <pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1548/</guid>
      <description>Definition 1 Let $G$ be a connected graph. If there exists a closed path that includes all vertices of $G$, then $G$ is called a Hamiltonian graph, and that cycle is called a Hamiltonian cycle. If there exists a path that includes all vertices but is not closed, then $G$ is called a semi-Hamiltonian graph. Explanation Just as Eulerian graphs are interested in trails that pass through all edges, Hamiltonian</description>
    </item>
    <item>
      <title>Fleury&#39;s Algorithm Proof</title>
      <link>https://freshrimpsushi.github.io/en/posts/1546/</link>
      <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1546/</guid>
      <description>Definition 1 Let $G$ be an Euler graph. Then, an Euler trail can be made in the following way. Start from an arbitrary vertex $u$ and follow these two rules to make the trail: (i): Already passed edges are removed. If removing an edge results in an isolated vertex, that vertex is also removed. (ii): At each step, bridges are only crossed if there are no other alternatives. If removing</description>
    </item>
    <item>
      <title>The Solution to the Bridges of Königsberg Problem</title>
      <link>https://freshrimpsushi.github.io/en/posts/1542/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1542/</guid>
      <description>Problem 1 The Seven Bridges of Königsberg is a problem about whether it is possible to traverse each of the city’s seven bridges exactly once and return to the starting point. At first glance, without knowing the solution, it seems like a daunting problem that requires checking every possible route. It doesn</description>
    </item>
    <item>
      <title>Euler Graph</title>
      <link>https://freshrimpsushi.github.io/en/posts/1541/</link>
      <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1541/</guid>
      <description>Definition Let $G$ be a connected graph. If there exists a closed trail that includes all edges of $G$, then $G$ is called an Eulerian graph, and the trail is called an Eulerian trail. If there exists a trail that includes all edges but is not closed, then $G$ is called a semi-Eulerian graph. Explanation This concept is also familiar to us as the problem of drawing with one stroke.</description>
    </item>
    <item>
      <title>Proof of Kőnig&#39;s theorem</title>
      <link>https://freshrimpsushi.github.io/en/posts/1534/</link>
      <pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1534/</guid>
      <description>Theorem 1 Let $G$ be a locally finite connected graph. Then, for every $v \in V(G)$, there exists a one-way infinite path with $v$ as its starting point. Proof Since $G$ is a connected graph, for all $z \in V(G)$ other than $v$, there are infinitely many paths from $v$ to $z$. And since $G$ is locally finite, among these infinitely many paths, infinitely many must start with the same</description>
    </item>
    <item>
      <title>Orientation of Graphs</title>
      <link>https://freshrimpsushi.github.io/en/posts/1532/</link>
      <pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1532/</guid>
      <description>Build-up Let&amp;rsquo;s assume a directed graph $D$ is given. A finite sequence of arcs is called a Directed Walk and is represented as follows: $$ v_{0} v_{1} , v_{1} v_{2} , \cdots , v_{m-1} v_{m} \\ v_{0} \rightarrow v_{1} \rightarrow v_{2} \rightarrow \cdots \rightarrow v_{m-1} \rightarrow v_{m} $$ In this case, $v_{0}$ is called the Initial Vertex, $v_{m}$ is called the Final Vertex, and $m$ is referred to as the</description>
    </item>
    <item>
      <title>Distance, Neighborhood, Diameter, Perimeter in a Graph</title>
      <link>https://freshrimpsushi.github.io/en/posts/1530/</link>
      <pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1530/</guid>
      <description>Definition In the graph $G$, the set of paths whose origin is $v \in V(G)$ and destination is $w \in V(G)$ is represented as $P(v,w)$, and let&amp;rsquo;s denote the set of cycles that include $v \in V(G)$ as $C(v)$. Also, let&amp;rsquo;s present the length of a walk $x$ as $l(x)$. The distance $d$ between two vertices $v,w \in V(G)$ is defined as the smallest value among the lengths of paths</description>
    </item>
    <item>
      <title>Walks, Trails, Paths, and Cycles in Graph Theory</title>
      <link>https://freshrimpsushi.github.io/en/posts/1528/</link>
      <pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1528/</guid>
      <description>Definition 1 Let there be a given graph $G$. A finite sequence of edges is called a walk and is denoted as follows: $$ v_{0} v_{1} , v_{1} v_{2} , \cdots , v_{m-1} v_{m} \\ v_{0} \rightarrow v_{1} \rightarrow v_{2} \rightarrow \cdots \rightarrow v_{m-1} \rightarrow v_{m} $$ Here, $v_{0}$ is called the initial vertex, $v_{m}$ is called the final vertex, and $m$ is called the length. If all edges in</description>
    </item>
    <item>
      <title>Infinite Graph</title>
      <link>https://freshrimpsushi.github.io/en/posts/1526/</link>
      <pubDate>Tue, 14 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1526/</guid>
      <description>Definitions 1 If the vertex set $V(G)$ or the edge set $E(G)$ of a graph $G$ is an infinite set, then $G$ is called an infinite graph. An infinite graph $G$, whose $V(G)$ and $E(G)$ are both countable sets, is called a Countable Graph. Let&amp;rsquo;s define $A(v)$ for a vertex $v \in V(G)$ of an infinite graph $G$ as follows. $$ A(v) := \left\{ w : vw \in E(G) \right\}</description>
    </item>
    <item>
      <title>Bipartite Graph</title>
      <link>https://freshrimpsushi.github.io/en/posts/1524/</link>
      <pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1524/</guid>
      <description>Definition 1 A graph $G$ is called a bipartite graph and is also represented as $G = G(A,B)$ if there exists a partition $\left\{ A,B \right\}$ of the vertices $V(G)$ such that for every $xy \in E(G)$, it is either $x \in A, y \in B$ or $x \in B , y \in A$. Explanation As the name suggests, a bipartite graph is a graph where the vertices are divided</description>
    </item>
    <item>
      <title>Regular Graph</title>
      <link>https://freshrimpsushi.github.io/en/posts/1522/</link>
      <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1522/</guid>
      <description>Definition 1 A graph is called a Regular Graph if all vertices have the same degree. Specifically, if all vertices have a degree of $r$, it is called a $r$-Regular Graph. In other words, a graph $G$ that satisfies the following is referred to as a $r$-Regular Graph. $$ \deg (v) = r \qquad , \forall v \in V(G) $$ A $2$-Regular connected graph is called a Cycle. Examples Regular</description>
    </item>
    <item>
      <title>Null Graphs and Complete Graphs</title>
      <link>https://freshrimpsushi.github.io/en/posts/1520/</link>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1520/</guid>
      <description>Definition 1 Given a simple graph $G$. If $E(G) = \emptyset$, then $G$ is called a null graph. If $E \left( \overline{G} \right) = \emptyset$, then $G$ is called a complete graph. Description A null graph is literally an empty graph. The reason why we use the term Null instead of Empty is that even if $G \ne \emptyset$, it has no meaning as a graph. For example, if there</description>
    </item>
    <item>
      <title>Graph Complement</title>
      <link>https://freshrimpsushi.github.io/en/posts/1515/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1515/</guid>
      <description>Definition 1 For a simple graph $G$, a graph $\overline{G}$ that satisfies the following conditions is called the complement of $G$. $$ V \left( \overline{G} \right) = V(G) \\ vw \in E \left( \overline{G} \right) \iff vw \notin E(G) $$ Description As with the concept of Complement in mathematics, the complement of a graph implies the concept of supplement. If we were to translate it into more native Korean, it</description>
    </item>
    <item>
      <title>Subgraph</title>
      <link>https://freshrimpsushi.github.io/en/posts/1513/</link>
      <pubDate>Wed, 25 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1513/</guid>
      <description>Definition 1 For a given graph $G$, graph $H$ is said to be a subgraph of $G$ if it satisfies $V(H) \subset V(G)$ and $ E(H) \subset E(G)$. Explanation It is important not to denote $H$ being a subgraph of $G$ as $H \subset G$. The concept of a subgraph serves not so much as a focus of interest in graph theory itself but rather as a natural and common</description>
    </item>
    <item>
      <title>Graphical Set Notation</title>
      <link>https://freshrimpsushi.github.io/en/posts/1512/</link>
      <pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1512/</guid>
      <description>Definition 1 Let&amp;rsquo;s consider two graphs $G_{1}$ and $G_{2}$ and let $V(G_{1}) \cap V(G_{2}) = \emptyset$. The union $G = G_{1} \cup G_{2}$ of two graphs is a graph that has a vertex set $V(G_{1}) \cup V(G_{2})$ and an edge set $E (G_{1}) \cup E ( G_{2} )$. If graph $H$ cannot be represented as the union of other graphs, then $H$ is said to be connected; otherwise, it is</description>
    </item>
    <item>
      <title>Matrix Representation of Graphs</title>
      <link>https://freshrimpsushi.github.io/en/posts/1499/</link>
      <pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1499/</guid>
      <description>Definition 1 Let&amp;rsquo;s assume that a graph $G(V,E)$ is given. Degree Matrix Let&amp;rsquo;s denote the degree $d(v_{i})$ of each vertex $v_{i}\in V$ simply as $d_{i}$. The following matrix is called the degree matrix of $G$ and is denoted as $D(G)$ or simply $D$. $$ D(G) = \mathrm{diag} (d_{1}, \dots, d_{n}) = \begin{bmatrix} d_{1} &amp;amp; 0 &amp;amp; \cdots &amp;amp; 0 \\ 0 &amp;amp; d_{2} &amp;amp; \cdots &amp;amp; 0 \\ \vdots &amp;amp;</description>
    </item>
    <item>
      <title>Shaking Hands Dilemma Proof</title>
      <link>https://freshrimpsushi.github.io/en/posts/1506/</link>
      <pubDate>Fri, 13 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1506/</guid>
      <description>Theorem 1 In any directed graph, the sum of the in-degrees and the sum of the out-degrees are equal. Explanation The handshake dilemma can be considered the handshake lemma for directed graphs. Proof In a directed graph, the sum of the out-degrees is equal to the number of arcs. Since an arc comes out from one vertex and enters another, the sum of the out-degrees and in-degrees are equal. ■</description>
    </item>
    <item>
      <title>Handshaking Lemma Proof</title>
      <link>https://freshrimpsushi.github.io/en/posts/1504/</link>
      <pubDate>Mon, 09 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1504/</guid>
      <description>Theorem 1 In any given graph, the sum of the degrees of all vertices is even. Description The term &amp;ldquo;handshake&amp;rdquo; obviously refers to the scenario where each vertex &amp;ldquo;shakes hands&amp;rdquo; with its adjacent vertices, and thus the total number of these handshakes corresponds to the sum of the degrees. Proof For a graph $G$, the sum of all degrees must exactly be twice the number of edges as per $$</description>
    </item>
    <item>
      <title>Graph Theory: Degree</title>
      <link>https://freshrimpsushi.github.io/en/posts/1496/</link>
      <pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1496/</guid>
      <description>Definition 1 Let&amp;rsquo;s assume a directed graph $G$ is given. If an edge $vw$ exists, we say that the edge leaves from $v$ and enters into $w$. The number of edges entering vertex $v$ is called the Indegree and is denoted as $\deg^{-} (v)$. The number of edges leaving vertex $v$ is called the Outdegree and is denoted as $\deg^{+}(v)$. A vertex that is $\deg^{-} (v) = 0$ is called</description>
    </item>
    <item>
      <title>Graph Isomorphism</title>
      <link>https://freshrimpsushi.github.io/en/posts/1492/</link>
      <pubDate>Fri, 28 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/1492/</guid>
      <description>Definition 1 Let two graphs $G_{1}$ and $G_{2}$ be given. If there exists a bijective function between $V(G_{1})$ and $V(G_{2})$, and the number of edges between vertices of $G_{1}$ matches with the corresponding vertices of $G_{2}$, then this bijective function is called an isomorphism, and the two graphs are said to be isomorphic. In other words, a bijective function $\phi : G_{1} \to G_{2}$ satisfying the following is called an</description>
    </item>
    <item>
      <title>Graphs and Networks in Mathematics</title>
      <link>https://freshrimpsushi.github.io/en/posts/966/</link>
      <pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://freshrimpsushi.github.io/en/posts/966/</guid>
      <description>Definitions 1 A set comprising vertices and lines connecting vertices is called a graph or a network. Let&amp;rsquo;s denote the set of vertices as $V$ and the set of lines as $E$. Elements of $V(G) := V$ are called vertices or nodes of $G$. Elements of $E(G) := E$ are called edges or links of $G$. An edge that connects to the same vertex is called a loop. If two</description>
    </item>
  </channel>
</rss>
