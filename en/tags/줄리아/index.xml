<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>줄리아 on FreshrimpRestaurant</title><link>https://freshrimpsushi.github.io/en/tags/%EC%A4%84%EB%A6%AC%EC%95%84/</link><description>Recent content in 줄리아 on FreshrimpRestaurant</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 26 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://freshrimpsushi.github.io/en/tags/%EC%A4%84%EB%A6%AC%EC%95%84/index.xml" rel="self" type="application/rss+xml"/><item><title>Gilbert Model</title><link>https://freshrimpsushi.github.io/en/posts/2118/</link><pubDate>Fri, 26 Nov 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/en/posts/2118/</guid><description>Definition 1 2 Simple Definition A random network where links of a simple network are connected independently according to probability $p \in [0,1]$ is called the Gilbert Model $\mathbb{G}_{n,p}$. Complicated Definition Given a probability space $( \Omega , \mathcal{F} , P)$, and a network&amp;rsquo;s properties $2^{\binom{n}{2}} \subseteq 2^{\binom{n}{2}}$ with $n$ labeled nodes. A function that is measurable with respect to $\mathcal{F}$ and has the following probability mass function for the</description></item><item><title>Erdős–Rényi Model</title><link>https://freshrimpsushi.github.io/en/posts/2116/</link><pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/en/posts/2116/</guid><description>Buildup Let us consider a simple graph with $n$ labeled vertices and $m$ edges, which has the property $\mathscr{G}_{n,m} \subset 2^{\binom{n}{2}}$. A random graph with exactly $m$ links can be represented as follows $\mathbb{G}_{n, m} : \Omega \to \mathscr{G}_{n,m}$. The graph produced in this manner does not care who makes it or what probability it is made with, as long as it only has $n$ nodes and $m$ links. In</description></item><item><title>Definition of a Curve</title><link>https://freshrimpsushi.github.io/en/posts/2062/</link><pubDate>Fri, 06 Aug 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/en/posts/2062/</guid><description>Definitions 1 The mapping $\alpha : (a,b) \to \mathbb{R}^{3}$ is referred to as a Curve. A point $t = t_{0}$ at the curve where $\alpha^{\prime} = \dfrac{d \alpha}{d t} = \mathbf{0}$ is called a Singular Point. A curve $\alpha \in C^{k}$ for some $k \in \mathbb{N}$ where at all $t \in (a,b)$, $\displaystyle {{ d \alpha } \over { d t }} \ne \mathbf{0}$ is known as a Regular Curve.</description></item><item><title>Smith-Waterman Alignment: Local Sequence Alignment</title><link>https://freshrimpsushi.github.io/en/posts/2017/</link><pubDate>Sat, 08 May 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/en/posts/2017/</guid><description>Overview Finding the alignment of the most similar parts from two base sequences is called local alignment, and the most widely used method for this is introducing the Smith-Waterman Algorithm. There are so many possible cases in Sequence Alignment, so there is a need to calculate efficiently and quickly through Dynamic Programming. Algorithm1 Input Given two strings $\textbf{v}, \textbf{w}$ and Substitution Matrix $\delta$, let&amp;rsquo;s say they are displayed as follows.</description></item><item><title>Needleman-Wunsch Algorithm: Global Sequence Alignment</title><link>https://freshrimpsushi.github.io/en/posts/2012/</link><pubDate>Mon, 26 Apr 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/en/posts/2012/</guid><description>Overview Finding an alignment between two sequences that maximizes the number of common parts is called Global Alignment, and the most widely used method for this is the Needleman-Wunsch Algorithm. There are too many possible alignments in sequence alignment, so it&amp;rsquo;s necessary to compute them efficiently and quickly through dynamic programming. Algorithm1 Input Given two strings $\textbf{v}, \textbf{w}$ and a substitution matrix $\delta$, let&amp;rsquo;s represent them as follows. $$ \textbf{v}</description></item><item><title>Equivalents Codes in Julia, MATLAB, Python, and R</title><link>https://freshrimpsushi.github.io/en/posts/3031/</link><pubDate>Thu, 18 Feb 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/en/posts/3031/</guid><description>Overview Organizing code that performs the same function in Julia, Matlab, Python, and R. Flux-PyTorch-TensorFlow Cheat Sheet Let&amp;rsquo;s assume the following environment for Python. import numpy as np General Julia Matlab Python R comment #comment %comment #comment #comment 2d grid X = kron(x, ones(size(y)))Y = kron(ones(size(x)), y) [X,Y] = meshgrid(x,y) np.meshgrid(x,y) How to make an n-dimensional meshgrid in Julia Type 줄리아Julia 매트</description></item><item><title>Agent-based Model Simulation of Mortality</title><link>https://freshrimpsushi.github.io/en/posts/1884/</link><pubDate>Sat, 16 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/en/posts/1884/</guid><description>Simulation This post aims to simulate the degrowth of a population from a macroscopic perspective by implementing an action in which generated agents die. Everything related to space or movement in this simulation is merely for visualization and has no actual purpose. Variables $t$: Represents the current turn. $N(t)$: Represents the number of agents at turn $t$. Parameters $N_{0} \in \mathbb{N}$: Represents the number of agents at the start of</description></item><item><title>Agent-based Model Simulation of Reproduction</title><link>https://freshrimpsushi.github.io/en/posts/1880/</link><pubDate>Tue, 12 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/en/posts/1880/</guid><description>Simulation In this post, we attempt to emulate the macroscopic growth of a population by giving generated agents the action to replicate themselves. Everything related to space or movement in this simulation is merely for visualization purposes and has no actual relevance to the objective. Variables $t$: Represents the current turn. $N(t)$: Indicates the number of agents at turn $t$. Parameters $N_{0} \in \mathbb{N}$: Represents the number of agents at</description></item><item><title>First Steps in Agent-Based Simulation: Representing with Scatter Plots</title><link>https://freshrimpsushi.github.io/en/posts/1875/</link><pubDate>Fri, 08 Jan 2021 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/en/posts/1875/</guid><description>Simulation Code Review Step 1. Load Packages, Set Initial Parameters code1 The code above loads packages and sets the initial number of agents, along with movement rules that allow them to wander around each turn. The amount of movement is defined by the following $2$-dimensional normal distribution. eq1 Step 2. Agent Creation Talking big, calling it agent creation, but in fact, it&amp;rsquo;s nothing much. Drawing samples equal to the number</description></item><item><title>Malthus Growth Model: Ideal Population Growth</title><link>https://freshrimpsushi.github.io/en/posts/1871/</link><pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/en/posts/1871/</guid><description>Model $$ \dot{N} = rN $$ Variables $N(t)$: Represents the population size of a group at time $t$. Parameters $r \in \mathbb{R}$ : The Intrinsic Rate of Increase, if greater than $0$, the population grows, if less than $0$, it declines. It can also be defined by the difference $r:=b-d$ between Birth Rate $b$ and Death Rate $d$. Description Population Dynamics is the first pathway through which dynamics leads to</description></item><item><title>Damped Harmonic Oscillation</title><link>https://freshrimpsushi.github.io/en/posts/1736/</link><pubDate>Sat, 29 Aug 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/en/posts/1736/</guid><description>Damped Harmonic Oscillation1 When the spring constant is denoted as $k$, the equation of motion for a simple harmonic oscillator is as follows. $$ m \ddot {x}+kx=0 $$ The simple harmonic motion only considers the restoring force by the spring. However, in reality, other external forces such as frictional forces also affect the motion of the object, so they cannot be ignored. So, let&amp;rsquo;s assume there is a frictional force</description></item><item><title>Binomial Distribution</title><link>https://freshrimpsushi.github.io/en/posts/1480/</link><pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate><guid>https://freshrimpsushi.github.io/en/posts/1480/</guid><description>Definition 1 The discrete probability distribution $\text{Bin}(n,p)$ with the following probability mass function for $n \in \mathbb{N}$ and $p \in [0,1]$ is called the Binomial Distribution. $$ p(x) = \binom{n}{x} p^{x} (1-p)^{n-x} \qquad , x = 0 , 1, \cdots n $$ Basic Properties Moment Generating Function [1]: $$m(t) = \left[ (1-p) + pe^{t} \right]^{n} \qquad , t \in \mathbb{R}$$ Mean and Variance [2]: If $X \sim \text{Bin}(n,p)$ then $$</description></item></channel></rss>